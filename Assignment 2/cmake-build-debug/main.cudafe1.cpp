# 1 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/main.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false
#if defined(__nv_is_extended_device_lambda_closure_type) && defined(__nv_is_extended_host_device_lambda_closure_type)
#endif

# 1
# 61 "/opt/cuda/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 68 "/opt/cuda/include/device_types.h"
#if 0
# 68
enum cudaRoundMode { 
# 70
cudaRoundNearest, 
# 71
cudaRoundZero, 
# 72
cudaRoundPosInf, 
# 73
cudaRoundMinInf
# 74
}; 
#endif
# 100 "/opt/cuda/include/vector_types.h"
#if 0
# 100
struct char1 { 
# 102
signed char x; 
# 103
}; 
#endif
# 105 "/opt/cuda/include/vector_types.h"
#if 0
# 105
struct uchar1 { 
# 107
unsigned char x; 
# 108
}; 
#endif
# 111 "/opt/cuda/include/vector_types.h"
#if 0
# 111
struct __attribute((aligned(2))) char2 { 
# 113
signed char x, y; 
# 114
}; 
#endif
# 116 "/opt/cuda/include/vector_types.h"
#if 0
# 116
struct __attribute((aligned(2))) uchar2 { 
# 118
unsigned char x, y; 
# 119
}; 
#endif
# 121 "/opt/cuda/include/vector_types.h"
#if 0
# 121
struct char3 { 
# 123
signed char x, y, z; 
# 124
}; 
#endif
# 126 "/opt/cuda/include/vector_types.h"
#if 0
# 126
struct uchar3 { 
# 128
unsigned char x, y, z; 
# 129
}; 
#endif
# 131 "/opt/cuda/include/vector_types.h"
#if 0
# 131
struct __attribute((aligned(4))) char4 { 
# 133
signed char x, y, z, w; 
# 134
}; 
#endif
# 136 "/opt/cuda/include/vector_types.h"
#if 0
# 136
struct __attribute((aligned(4))) uchar4 { 
# 138
unsigned char x, y, z, w; 
# 139
}; 
#endif
# 141 "/opt/cuda/include/vector_types.h"
#if 0
# 141
struct short1 { 
# 143
short x; 
# 144
}; 
#endif
# 146 "/opt/cuda/include/vector_types.h"
#if 0
# 146
struct ushort1 { 
# 148
unsigned short x; 
# 149
}; 
#endif
# 151 "/opt/cuda/include/vector_types.h"
#if 0
# 151
struct __attribute((aligned(4))) short2 { 
# 153
short x, y; 
# 154
}; 
#endif
# 156 "/opt/cuda/include/vector_types.h"
#if 0
# 156
struct __attribute((aligned(4))) ushort2 { 
# 158
unsigned short x, y; 
# 159
}; 
#endif
# 161 "/opt/cuda/include/vector_types.h"
#if 0
# 161
struct short3 { 
# 163
short x, y, z; 
# 164
}; 
#endif
# 166 "/opt/cuda/include/vector_types.h"
#if 0
# 166
struct ushort3 { 
# 168
unsigned short x, y, z; 
# 169
}; 
#endif
# 171 "/opt/cuda/include/vector_types.h"
#if 0
# 171
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 172 "/opt/cuda/include/vector_types.h"
#if 0
# 172
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 174 "/opt/cuda/include/vector_types.h"
#if 0
# 174
struct int1 { 
# 176
int x; 
# 177
}; 
#endif
# 179 "/opt/cuda/include/vector_types.h"
#if 0
# 179
struct uint1 { 
# 181
unsigned x; 
# 182
}; 
#endif
# 184 "/opt/cuda/include/vector_types.h"
#if 0
# 184
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 185 "/opt/cuda/include/vector_types.h"
#if 0
# 185
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 187 "/opt/cuda/include/vector_types.h"
#if 0
# 187
struct int3 { 
# 189
int x, y, z; 
# 190
}; 
#endif
# 192 "/opt/cuda/include/vector_types.h"
#if 0
# 192
struct uint3 { 
# 194
unsigned x, y, z; 
# 195
}; 
#endif
# 197 "/opt/cuda/include/vector_types.h"
#if 0
# 197
struct __attribute((aligned(16))) int4 { 
# 199
int x, y, z, w; 
# 200
}; 
#endif
# 202 "/opt/cuda/include/vector_types.h"
#if 0
# 202
struct __attribute((aligned(16))) uint4 { 
# 204
unsigned x, y, z, w; 
# 205
}; 
#endif
# 207 "/opt/cuda/include/vector_types.h"
#if 0
# 207
struct long1 { 
# 209
long x; 
# 210
}; 
#endif
# 212 "/opt/cuda/include/vector_types.h"
#if 0
# 212
struct ulong1 { 
# 214
unsigned long x; 
# 215
}; 
#endif
# 222 "/opt/cuda/include/vector_types.h"
#if 0
# 222
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 224
long x, y; 
# 225
}; 
#endif
# 227 "/opt/cuda/include/vector_types.h"
#if 0
# 227
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 229
unsigned long x, y; 
# 230
}; 
#endif
# 234 "/opt/cuda/include/vector_types.h"
#if 0
# 234
struct long3 { 
# 236
long x, y, z; 
# 237
}; 
#endif
# 239 "/opt/cuda/include/vector_types.h"
#if 0
# 239
struct ulong3 { 
# 241
unsigned long x, y, z; 
# 242
}; 
#endif
# 244 "/opt/cuda/include/vector_types.h"
#if 0
# 244
struct __attribute((aligned(16))) long4 { 
# 246
long x, y, z, w; 
# 247
}; 
#endif
# 249 "/opt/cuda/include/vector_types.h"
#if 0
# 249
struct __attribute((aligned(16))) ulong4 { 
# 251
unsigned long x, y, z, w; 
# 252
}; 
#endif
# 254 "/opt/cuda/include/vector_types.h"
#if 0
# 254
struct float1 { 
# 256
float x; 
# 257
}; 
#endif
# 276 "/opt/cuda/include/vector_types.h"
#if 0
# 276
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 281 "/opt/cuda/include/vector_types.h"
#if 0
# 281
struct float3 { 
# 283
float x, y, z; 
# 284
}; 
#endif
# 286 "/opt/cuda/include/vector_types.h"
#if 0
# 286
struct __attribute((aligned(16))) float4 { 
# 288
float x, y, z, w; 
# 289
}; 
#endif
# 291 "/opt/cuda/include/vector_types.h"
#if 0
# 291
struct longlong1 { 
# 293
long long x; 
# 294
}; 
#endif
# 296 "/opt/cuda/include/vector_types.h"
#if 0
# 296
struct ulonglong1 { 
# 298
unsigned long long x; 
# 299
}; 
#endif
# 301 "/opt/cuda/include/vector_types.h"
#if 0
# 301
struct __attribute((aligned(16))) longlong2 { 
# 303
long long x, y; 
# 304
}; 
#endif
# 306 "/opt/cuda/include/vector_types.h"
#if 0
# 306
struct __attribute((aligned(16))) ulonglong2 { 
# 308
unsigned long long x, y; 
# 309
}; 
#endif
# 311 "/opt/cuda/include/vector_types.h"
#if 0
# 311
struct longlong3 { 
# 313
long long x, y, z; 
# 314
}; 
#endif
# 316 "/opt/cuda/include/vector_types.h"
#if 0
# 316
struct ulonglong3 { 
# 318
unsigned long long x, y, z; 
# 319
}; 
#endif
# 321 "/opt/cuda/include/vector_types.h"
#if 0
# 321
struct __attribute((aligned(16))) longlong4 { 
# 323
long long x, y, z, w; 
# 324
}; 
#endif
# 326 "/opt/cuda/include/vector_types.h"
#if 0
# 326
struct __attribute((aligned(16))) ulonglong4 { 
# 328
unsigned long long x, y, z, w; 
# 329
}; 
#endif
# 331 "/opt/cuda/include/vector_types.h"
#if 0
# 331
struct double1 { 
# 333
double x; 
# 334
}; 
#endif
# 336 "/opt/cuda/include/vector_types.h"
#if 0
# 336
struct __attribute((aligned(16))) double2 { 
# 338
double x, y; 
# 339
}; 
#endif
# 341 "/opt/cuda/include/vector_types.h"
#if 0
# 341
struct double3 { 
# 343
double x, y, z; 
# 344
}; 
#endif
# 346 "/opt/cuda/include/vector_types.h"
#if 0
# 346
struct __attribute((aligned(16))) double4 { 
# 348
double x, y, z, w; 
# 349
}; 
#endif
# 363 "/opt/cuda/include/vector_types.h"
#if 0
typedef char1 
# 363
char1; 
#endif
# 364 "/opt/cuda/include/vector_types.h"
#if 0
typedef uchar1 
# 364
uchar1; 
#endif
# 365 "/opt/cuda/include/vector_types.h"
#if 0
typedef char2 
# 365
char2; 
#endif
# 366 "/opt/cuda/include/vector_types.h"
#if 0
typedef uchar2 
# 366
uchar2; 
#endif
# 367 "/opt/cuda/include/vector_types.h"
#if 0
typedef char3 
# 367
char3; 
#endif
# 368 "/opt/cuda/include/vector_types.h"
#if 0
typedef uchar3 
# 368
uchar3; 
#endif
# 369 "/opt/cuda/include/vector_types.h"
#if 0
typedef char4 
# 369
char4; 
#endif
# 370 "/opt/cuda/include/vector_types.h"
#if 0
typedef uchar4 
# 370
uchar4; 
#endif
# 371 "/opt/cuda/include/vector_types.h"
#if 0
typedef short1 
# 371
short1; 
#endif
# 372 "/opt/cuda/include/vector_types.h"
#if 0
typedef ushort1 
# 372
ushort1; 
#endif
# 373 "/opt/cuda/include/vector_types.h"
#if 0
typedef short2 
# 373
short2; 
#endif
# 374 "/opt/cuda/include/vector_types.h"
#if 0
typedef ushort2 
# 374
ushort2; 
#endif
# 375 "/opt/cuda/include/vector_types.h"
#if 0
typedef short3 
# 375
short3; 
#endif
# 376 "/opt/cuda/include/vector_types.h"
#if 0
typedef ushort3 
# 376
ushort3; 
#endif
# 377 "/opt/cuda/include/vector_types.h"
#if 0
typedef short4 
# 377
short4; 
#endif
# 378 "/opt/cuda/include/vector_types.h"
#if 0
typedef ushort4 
# 378
ushort4; 
#endif
# 379 "/opt/cuda/include/vector_types.h"
#if 0
typedef int1 
# 379
int1; 
#endif
# 380 "/opt/cuda/include/vector_types.h"
#if 0
typedef uint1 
# 380
uint1; 
#endif
# 381 "/opt/cuda/include/vector_types.h"
#if 0
typedef int2 
# 381
int2; 
#endif
# 382 "/opt/cuda/include/vector_types.h"
#if 0
typedef uint2 
# 382
uint2; 
#endif
# 383 "/opt/cuda/include/vector_types.h"
#if 0
typedef int3 
# 383
int3; 
#endif
# 384 "/opt/cuda/include/vector_types.h"
#if 0
typedef uint3 
# 384
uint3; 
#endif
# 385 "/opt/cuda/include/vector_types.h"
#if 0
typedef int4 
# 385
int4; 
#endif
# 386 "/opt/cuda/include/vector_types.h"
#if 0
typedef uint4 
# 386
uint4; 
#endif
# 387 "/opt/cuda/include/vector_types.h"
#if 0
typedef long1 
# 387
long1; 
#endif
# 388 "/opt/cuda/include/vector_types.h"
#if 0
typedef ulong1 
# 388
ulong1; 
#endif
# 389 "/opt/cuda/include/vector_types.h"
#if 0
typedef long2 
# 389
long2; 
#endif
# 390 "/opt/cuda/include/vector_types.h"
#if 0
typedef ulong2 
# 390
ulong2; 
#endif
# 391 "/opt/cuda/include/vector_types.h"
#if 0
typedef long3 
# 391
long3; 
#endif
# 392 "/opt/cuda/include/vector_types.h"
#if 0
typedef ulong3 
# 392
ulong3; 
#endif
# 393 "/opt/cuda/include/vector_types.h"
#if 0
typedef long4 
# 393
long4; 
#endif
# 394 "/opt/cuda/include/vector_types.h"
#if 0
typedef ulong4 
# 394
ulong4; 
#endif
# 395 "/opt/cuda/include/vector_types.h"
#if 0
typedef float1 
# 395
float1; 
#endif
# 396 "/opt/cuda/include/vector_types.h"
#if 0
typedef float2 
# 396
float2; 
#endif
# 397 "/opt/cuda/include/vector_types.h"
#if 0
typedef float3 
# 397
float3; 
#endif
# 398 "/opt/cuda/include/vector_types.h"
#if 0
typedef float4 
# 398
float4; 
#endif
# 399 "/opt/cuda/include/vector_types.h"
#if 0
typedef longlong1 
# 399
longlong1; 
#endif
# 400 "/opt/cuda/include/vector_types.h"
#if 0
typedef ulonglong1 
# 400
ulonglong1; 
#endif
# 401 "/opt/cuda/include/vector_types.h"
#if 0
typedef longlong2 
# 401
longlong2; 
#endif
# 402 "/opt/cuda/include/vector_types.h"
#if 0
typedef ulonglong2 
# 402
ulonglong2; 
#endif
# 403 "/opt/cuda/include/vector_types.h"
#if 0
typedef longlong3 
# 403
longlong3; 
#endif
# 404 "/opt/cuda/include/vector_types.h"
#if 0
typedef ulonglong3 
# 404
ulonglong3; 
#endif
# 405 "/opt/cuda/include/vector_types.h"
#if 0
typedef longlong4 
# 405
longlong4; 
#endif
# 406 "/opt/cuda/include/vector_types.h"
#if 0
typedef ulonglong4 
# 406
ulonglong4; 
#endif
# 407 "/opt/cuda/include/vector_types.h"
#if 0
typedef double1 
# 407
double1; 
#endif
# 408 "/opt/cuda/include/vector_types.h"
#if 0
typedef double2 
# 408
double2; 
#endif
# 409 "/opt/cuda/include/vector_types.h"
#if 0
typedef double3 
# 409
double3; 
#endif
# 410 "/opt/cuda/include/vector_types.h"
#if 0
typedef double4 
# 410
double4; 
#endif
# 418 "/opt/cuda/include/vector_types.h"
#if 0
# 418
struct dim3 { 
# 420
unsigned x, y, z; 
# 432
}; 
#endif
# 434 "/opt/cuda/include/vector_types.h"
#if 0
typedef dim3 
# 434
dim3; 
#endif
# 23 "/usr/include/bits/pthread_stack_min-dynamic.h" 3
extern "C" {
# 24
extern long __sysconf(int __name) noexcept(true); 
# 25
}
# 145 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/stddef.h" 3
typedef long ptrdiff_t; 
# 214 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 435 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/stddef.h" 3
typedef 
# 424 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/stddef.h" 3
struct { 
# 425
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 426
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 435 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/stddef.h" 3
} max_align_t; 
# 442
typedef __decltype((nullptr)) nullptr_t; 
# 203 "/opt/cuda/include/driver_types.h"
#if 0
# 203
enum cudaError { 
# 210
cudaSuccess, 
# 216
cudaErrorInvalidValue, 
# 222
cudaErrorMemoryAllocation, 
# 228
cudaErrorInitializationError, 
# 235
cudaErrorCudartUnloading, 
# 242
cudaErrorProfilerDisabled, 
# 250
cudaErrorProfilerNotInitialized, 
# 257
cudaErrorProfilerAlreadyStarted, 
# 264
cudaErrorProfilerAlreadyStopped, 
# 273 "/opt/cuda/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 279
cudaErrorInvalidPitchValue = 12, 
# 285
cudaErrorInvalidSymbol, 
# 293
cudaErrorInvalidHostPointer = 16, 
# 301
cudaErrorInvalidDevicePointer, 
# 307
cudaErrorInvalidTexture, 
# 313
cudaErrorInvalidTextureBinding, 
# 320
cudaErrorInvalidChannelDescriptor, 
# 326
cudaErrorInvalidMemcpyDirection, 
# 336 "/opt/cuda/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 345 "/opt/cuda/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 354 "/opt/cuda/include/driver_types.h"
cudaErrorTextureNotBound, 
# 363 "/opt/cuda/include/driver_types.h"
cudaErrorSynchronizationError, 
# 369
cudaErrorInvalidFilterSetting, 
# 375
cudaErrorInvalidNormSetting, 
# 383
cudaErrorMixedDeviceExecution, 
# 391
cudaErrorNotYetImplemented = 31, 
# 400 "/opt/cuda/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 407
cudaErrorStubLibrary = 34, 
# 414
cudaErrorInsufficientDriver, 
# 421
cudaErrorCallRequiresNewerDriver, 
# 427
cudaErrorInvalidSurface, 
# 433
cudaErrorDuplicateVariableName = 43, 
# 439
cudaErrorDuplicateTextureName, 
# 445
cudaErrorDuplicateSurfaceName, 
# 455 "/opt/cuda/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 468 "/opt/cuda/include/driver_types.h"
cudaErrorIncompatibleDriverContext = 49, 
# 474
cudaErrorMissingConfiguration = 52, 
# 483 "/opt/cuda/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 490
cudaErrorLaunchMaxDepthExceeded = 65, 
# 498
cudaErrorLaunchFileScopedTex, 
# 506
cudaErrorLaunchFileScopedSurf, 
# 522 "/opt/cuda/include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 534 "/opt/cuda/include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 540
cudaErrorInvalidDeviceFunction = 98, 
# 546
cudaErrorNoDevice = 100, 
# 553
cudaErrorInvalidDevice, 
# 558
cudaErrorDeviceNotLicensed, 
# 567 "/opt/cuda/include/driver_types.h"
cudaErrorSoftwareValidityNotEstablished, 
# 572
cudaErrorStartupFailure = 127, 
# 577
cudaErrorInvalidKernelImage = 200, 
# 587 "/opt/cuda/include/driver_types.h"
cudaErrorDeviceUninitialized, 
# 592
cudaErrorMapBufferObjectFailed = 205, 
# 597
cudaErrorUnmapBufferObjectFailed, 
# 603
cudaErrorArrayIsMapped, 
# 608
cudaErrorAlreadyMapped, 
# 616
cudaErrorNoKernelImageForDevice, 
# 621
cudaErrorAlreadyAcquired, 
# 626
cudaErrorNotMapped, 
# 632
cudaErrorNotMappedAsArray, 
# 638
cudaErrorNotMappedAsPointer, 
# 644
cudaErrorECCUncorrectable, 
# 650
cudaErrorUnsupportedLimit, 
# 656
cudaErrorDeviceAlreadyInUse, 
# 662
cudaErrorPeerAccessUnsupported, 
# 668
cudaErrorInvalidPtx, 
# 673
cudaErrorInvalidGraphicsContext, 
# 679
cudaErrorNvlinkUncorrectable, 
# 686
cudaErrorJitCompilerNotFound, 
# 693
cudaErrorUnsupportedPtxVersion, 
# 700
cudaErrorJitCompilationDisabled, 
# 705
cudaErrorUnsupportedExecAffinity, 
# 711
cudaErrorUnsupportedDevSideSync, 
# 716
cudaErrorInvalidSource = 300, 
# 721
cudaErrorFileNotFound, 
# 726
cudaErrorSharedObjectSymbolNotFound, 
# 731
cudaErrorSharedObjectInitFailed, 
# 736
cudaErrorOperatingSystem, 
# 743
cudaErrorInvalidResourceHandle = 400, 
# 749
cudaErrorIllegalState, 
# 756
cudaErrorSymbolNotFound = 500, 
# 764
cudaErrorNotReady = 600, 
# 772
cudaErrorIllegalAddress = 700, 
# 781 "/opt/cuda/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 792 "/opt/cuda/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 798
cudaErrorLaunchIncompatibleTexturing, 
# 805
cudaErrorPeerAccessAlreadyEnabled, 
# 812
cudaErrorPeerAccessNotEnabled, 
# 825 "/opt/cuda/include/driver_types.h"
cudaErrorSetOnActiveProcess = 708, 
# 832
cudaErrorContextIsDestroyed, 
# 839
cudaErrorAssert, 
# 846
cudaErrorTooManyPeers, 
# 852
cudaErrorHostMemoryAlreadyRegistered, 
# 858
cudaErrorHostMemoryNotRegistered, 
# 867 "/opt/cuda/include/driver_types.h"
cudaErrorHardwareStackError, 
# 875
cudaErrorIllegalInstruction, 
# 884 "/opt/cuda/include/driver_types.h"
cudaErrorMisalignedAddress, 
# 895 "/opt/cuda/include/driver_types.h"
cudaErrorInvalidAddressSpace, 
# 903
cudaErrorInvalidPc, 
# 914 "/opt/cuda/include/driver_types.h"
cudaErrorLaunchFailure, 
# 923 "/opt/cuda/include/driver_types.h"
cudaErrorCooperativeLaunchTooLarge, 
# 928
cudaErrorNotPermitted = 800, 
# 934
cudaErrorNotSupported, 
# 943 "/opt/cuda/include/driver_types.h"
cudaErrorSystemNotReady, 
# 950
cudaErrorSystemDriverMismatch, 
# 959 "/opt/cuda/include/driver_types.h"
cudaErrorCompatNotSupportedOnDevice, 
# 964
cudaErrorMpsConnectionFailed, 
# 969
cudaErrorMpsRpcFailure, 
# 975
cudaErrorMpsServerNotReady, 
# 980
cudaErrorMpsMaxClientsReached, 
# 985
cudaErrorMpsMaxConnectionsReached, 
# 990
cudaErrorMpsClientTerminated, 
# 995
cudaErrorCdpNotSupported, 
# 1000
cudaErrorCdpVersionMismatch, 
# 1005
cudaErrorStreamCaptureUnsupported = 900, 
# 1011
cudaErrorStreamCaptureInvalidated, 
# 1017
cudaErrorStreamCaptureMerge, 
# 1022
cudaErrorStreamCaptureUnmatched, 
# 1028
cudaErrorStreamCaptureUnjoined, 
# 1035
cudaErrorStreamCaptureIsolation, 
# 1041
cudaErrorStreamCaptureImplicit, 
# 1047
cudaErrorCapturedEvent, 
# 1054
cudaErrorStreamCaptureWrongThread, 
# 1059
cudaErrorTimeout, 
# 1065
cudaErrorGraphExecUpdateFailure, 
# 1075 "/opt/cuda/include/driver_types.h"
cudaErrorExternalDevice, 
# 1081
cudaErrorInvalidClusterSize, 
# 1086
cudaErrorUnknown = 999, 
# 1094
cudaErrorApiFailureBase = 10000
# 1095
}; 
#endif
# 1100 "/opt/cuda/include/driver_types.h"
#if 0
# 1100
enum cudaChannelFormatKind { 
# 1102
cudaChannelFormatKindSigned, 
# 1103
cudaChannelFormatKindUnsigned, 
# 1104
cudaChannelFormatKindFloat, 
# 1105
cudaChannelFormatKindNone, 
# 1106
cudaChannelFormatKindNV12, 
# 1107
cudaChannelFormatKindUnsignedNormalized8X1, 
# 1108
cudaChannelFormatKindUnsignedNormalized8X2, 
# 1109
cudaChannelFormatKindUnsignedNormalized8X4, 
# 1110
cudaChannelFormatKindUnsignedNormalized16X1, 
# 1111
cudaChannelFormatKindUnsignedNormalized16X2, 
# 1112
cudaChannelFormatKindUnsignedNormalized16X4, 
# 1113
cudaChannelFormatKindSignedNormalized8X1, 
# 1114
cudaChannelFormatKindSignedNormalized8X2, 
# 1115
cudaChannelFormatKindSignedNormalized8X4, 
# 1116
cudaChannelFormatKindSignedNormalized16X1, 
# 1117
cudaChannelFormatKindSignedNormalized16X2, 
# 1118
cudaChannelFormatKindSignedNormalized16X4, 
# 1119
cudaChannelFormatKindUnsignedBlockCompressed1, 
# 1120
cudaChannelFormatKindUnsignedBlockCompressed1SRGB, 
# 1121
cudaChannelFormatKindUnsignedBlockCompressed2, 
# 1122
cudaChannelFormatKindUnsignedBlockCompressed2SRGB, 
# 1123
cudaChannelFormatKindUnsignedBlockCompressed3, 
# 1124
cudaChannelFormatKindUnsignedBlockCompressed3SRGB, 
# 1125
cudaChannelFormatKindUnsignedBlockCompressed4, 
# 1126
cudaChannelFormatKindSignedBlockCompressed4, 
# 1127
cudaChannelFormatKindUnsignedBlockCompressed5, 
# 1128
cudaChannelFormatKindSignedBlockCompressed5, 
# 1129
cudaChannelFormatKindUnsignedBlockCompressed6H, 
# 1130
cudaChannelFormatKindSignedBlockCompressed6H, 
# 1131
cudaChannelFormatKindUnsignedBlockCompressed7, 
# 1132
cudaChannelFormatKindUnsignedBlockCompressed7SRGB
# 1133
}; 
#endif
# 1138 "/opt/cuda/include/driver_types.h"
#if 0
# 1138
struct cudaChannelFormatDesc { 
# 1140
int x; 
# 1141
int y; 
# 1142
int z; 
# 1143
int w; 
# 1144
cudaChannelFormatKind f; 
# 1145
}; 
#endif
# 1150 "/opt/cuda/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 1155
typedef const cudaArray *cudaArray_const_t; 
# 1157
struct cudaArray; 
# 1162
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1167
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1169
struct cudaMipmappedArray; 
# 1179 "/opt/cuda/include/driver_types.h"
#if 0
# 1179
struct cudaArraySparseProperties { 
# 1180
struct { 
# 1181
unsigned width; 
# 1182
unsigned height; 
# 1183
unsigned depth; 
# 1184
} tileExtent; 
# 1185
unsigned miptailFirstLevel; 
# 1186
unsigned long long miptailSize; 
# 1187
unsigned flags; 
# 1188
unsigned reserved[4]; 
# 1189
}; 
#endif
# 1194 "/opt/cuda/include/driver_types.h"
#if 0
# 1194
struct cudaArrayMemoryRequirements { 
# 1195
::size_t size; 
# 1196
::size_t alignment; 
# 1197
unsigned reserved[4]; 
# 1198
}; 
#endif
# 1203 "/opt/cuda/include/driver_types.h"
#if 0
# 1203
enum cudaMemoryType { 
# 1205
cudaMemoryTypeUnregistered, 
# 1206
cudaMemoryTypeHost, 
# 1207
cudaMemoryTypeDevice, 
# 1208
cudaMemoryTypeManaged
# 1209
}; 
#endif
# 1214 "/opt/cuda/include/driver_types.h"
#if 0
# 1214
enum cudaMemcpyKind { 
# 1216
cudaMemcpyHostToHost, 
# 1217
cudaMemcpyHostToDevice, 
# 1218
cudaMemcpyDeviceToHost, 
# 1219
cudaMemcpyDeviceToDevice, 
# 1220
cudaMemcpyDefault
# 1221
}; 
#endif
# 1228 "/opt/cuda/include/driver_types.h"
#if 0
# 1228
struct cudaPitchedPtr { 
# 1230
void *ptr; 
# 1231
::size_t pitch; 
# 1232
::size_t xsize; 
# 1233
::size_t ysize; 
# 1234
}; 
#endif
# 1241 "/opt/cuda/include/driver_types.h"
#if 0
# 1241
struct cudaExtent { 
# 1243
::size_t width; 
# 1244
::size_t height; 
# 1245
::size_t depth; 
# 1246
}; 
#endif
# 1253 "/opt/cuda/include/driver_types.h"
#if 0
# 1253
struct cudaPos { 
# 1255
::size_t x; 
# 1256
::size_t y; 
# 1257
::size_t z; 
# 1258
}; 
#endif
# 1263 "/opt/cuda/include/driver_types.h"
#if 0
# 1263
struct cudaMemcpy3DParms { 
# 1265
cudaArray_t srcArray; 
# 1266
cudaPos srcPos; 
# 1267
cudaPitchedPtr srcPtr; 
# 1269
cudaArray_t dstArray; 
# 1270
cudaPos dstPos; 
# 1271
cudaPitchedPtr dstPtr; 
# 1273
cudaExtent extent; 
# 1274
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1275
}; 
#endif
# 1280 "/opt/cuda/include/driver_types.h"
#if 0
# 1280
struct cudaMemcpy3DPeerParms { 
# 1282
cudaArray_t srcArray; 
# 1283
cudaPos srcPos; 
# 1284
cudaPitchedPtr srcPtr; 
# 1285
int srcDevice; 
# 1287
cudaArray_t dstArray; 
# 1288
cudaPos dstPos; 
# 1289
cudaPitchedPtr dstPtr; 
# 1290
int dstDevice; 
# 1292
cudaExtent extent; 
# 1293
}; 
#endif
# 1298 "/opt/cuda/include/driver_types.h"
#if 0
# 1298
struct cudaMemsetParams { 
# 1299
void *dst; 
# 1300
::size_t pitch; 
# 1301
unsigned value; 
# 1302
unsigned elementSize; 
# 1303
::size_t width; 
# 1304
::size_t height; 
# 1305
}; 
#endif
# 1310 "/opt/cuda/include/driver_types.h"
#if 0
# 1310
enum cudaAccessProperty { 
# 1311
cudaAccessPropertyNormal, 
# 1312
cudaAccessPropertyStreaming, 
# 1313
cudaAccessPropertyPersisting
# 1314
}; 
#endif
# 1327 "/opt/cuda/include/driver_types.h"
#if 0
# 1327
struct cudaAccessPolicyWindow { 
# 1328
void *base_ptr; 
# 1329
::size_t num_bytes; 
# 1330
float hitRatio; 
# 1331
cudaAccessProperty hitProp; 
# 1332
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1333
}; 
#endif
# 1345 "/opt/cuda/include/driver_types.h"
typedef void (*cudaHostFn_t)(void * userData); 
# 1350
#if 0
# 1350
struct cudaHostNodeParams { 
# 1351
cudaHostFn_t fn; 
# 1352
void *userData; 
# 1353
}; 
#endif
# 1358 "/opt/cuda/include/driver_types.h"
#if 0
# 1358
enum cudaStreamCaptureStatus { 
# 1359
cudaStreamCaptureStatusNone, 
# 1360
cudaStreamCaptureStatusActive, 
# 1361
cudaStreamCaptureStatusInvalidated
# 1363
}; 
#endif
# 1369 "/opt/cuda/include/driver_types.h"
#if 0
# 1369
enum cudaStreamCaptureMode { 
# 1370
cudaStreamCaptureModeGlobal, 
# 1371
cudaStreamCaptureModeThreadLocal, 
# 1372
cudaStreamCaptureModeRelaxed
# 1373
}; 
#endif
# 1375 "/opt/cuda/include/driver_types.h"
#if 0
# 1375
enum cudaSynchronizationPolicy { 
# 1376
cudaSyncPolicyAuto = 1, 
# 1377
cudaSyncPolicySpin, 
# 1378
cudaSyncPolicyYield, 
# 1379
cudaSyncPolicyBlockingSync
# 1380
}; 
#endif
# 1385 "/opt/cuda/include/driver_types.h"
#if 0
# 1385
enum cudaClusterSchedulingPolicy { 
# 1386
cudaClusterSchedulingPolicyDefault, 
# 1387
cudaClusterSchedulingPolicySpread, 
# 1388
cudaClusterSchedulingPolicyLoadBalancing
# 1389
}; 
#endif
# 1394 "/opt/cuda/include/driver_types.h"
#if 0
# 1394
enum cudaStreamUpdateCaptureDependenciesFlags { 
# 1395
cudaStreamAddCaptureDependencies, 
# 1396
cudaStreamSetCaptureDependencies
# 1397
}; 
#endif
# 1402 "/opt/cuda/include/driver_types.h"
#if 0
# 1402
enum cudaUserObjectFlags { 
# 1403
cudaUserObjectNoDestructorSync = 1
# 1404
}; 
#endif
# 1409 "/opt/cuda/include/driver_types.h"
#if 0
# 1409
enum cudaUserObjectRetainFlags { 
# 1410
cudaGraphUserObjectMove = 1
# 1411
}; 
#endif
# 1416 "/opt/cuda/include/driver_types.h"
struct cudaGraphicsResource; 
# 1421
#if 0
# 1421
enum cudaGraphicsRegisterFlags { 
# 1423
cudaGraphicsRegisterFlagsNone, 
# 1424
cudaGraphicsRegisterFlagsReadOnly, 
# 1425
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1426
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1427
cudaGraphicsRegisterFlagsTextureGather = 8
# 1428
}; 
#endif
# 1433 "/opt/cuda/include/driver_types.h"
#if 0
# 1433
enum cudaGraphicsMapFlags { 
# 1435
cudaGraphicsMapFlagsNone, 
# 1436
cudaGraphicsMapFlagsReadOnly, 
# 1437
cudaGraphicsMapFlagsWriteDiscard
# 1438
}; 
#endif
# 1443 "/opt/cuda/include/driver_types.h"
#if 0
# 1443
enum cudaGraphicsCubeFace { 
# 1445
cudaGraphicsCubeFacePositiveX, 
# 1446
cudaGraphicsCubeFaceNegativeX, 
# 1447
cudaGraphicsCubeFacePositiveY, 
# 1448
cudaGraphicsCubeFaceNegativeY, 
# 1449
cudaGraphicsCubeFacePositiveZ, 
# 1450
cudaGraphicsCubeFaceNegativeZ
# 1451
}; 
#endif
# 1456 "/opt/cuda/include/driver_types.h"
#if 0
# 1456
enum cudaResourceType { 
# 1458
cudaResourceTypeArray, 
# 1459
cudaResourceTypeMipmappedArray, 
# 1460
cudaResourceTypeLinear, 
# 1461
cudaResourceTypePitch2D
# 1462
}; 
#endif
# 1467 "/opt/cuda/include/driver_types.h"
#if 0
# 1467
enum cudaResourceViewFormat { 
# 1469
cudaResViewFormatNone, 
# 1470
cudaResViewFormatUnsignedChar1, 
# 1471
cudaResViewFormatUnsignedChar2, 
# 1472
cudaResViewFormatUnsignedChar4, 
# 1473
cudaResViewFormatSignedChar1, 
# 1474
cudaResViewFormatSignedChar2, 
# 1475
cudaResViewFormatSignedChar4, 
# 1476
cudaResViewFormatUnsignedShort1, 
# 1477
cudaResViewFormatUnsignedShort2, 
# 1478
cudaResViewFormatUnsignedShort4, 
# 1479
cudaResViewFormatSignedShort1, 
# 1480
cudaResViewFormatSignedShort2, 
# 1481
cudaResViewFormatSignedShort4, 
# 1482
cudaResViewFormatUnsignedInt1, 
# 1483
cudaResViewFormatUnsignedInt2, 
# 1484
cudaResViewFormatUnsignedInt4, 
# 1485
cudaResViewFormatSignedInt1, 
# 1486
cudaResViewFormatSignedInt2, 
# 1487
cudaResViewFormatSignedInt4, 
# 1488
cudaResViewFormatHalf1, 
# 1489
cudaResViewFormatHalf2, 
# 1490
cudaResViewFormatHalf4, 
# 1491
cudaResViewFormatFloat1, 
# 1492
cudaResViewFormatFloat2, 
# 1493
cudaResViewFormatFloat4, 
# 1494
cudaResViewFormatUnsignedBlockCompressed1, 
# 1495
cudaResViewFormatUnsignedBlockCompressed2, 
# 1496
cudaResViewFormatUnsignedBlockCompressed3, 
# 1497
cudaResViewFormatUnsignedBlockCompressed4, 
# 1498
cudaResViewFormatSignedBlockCompressed4, 
# 1499
cudaResViewFormatUnsignedBlockCompressed5, 
# 1500
cudaResViewFormatSignedBlockCompressed5, 
# 1501
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1502
cudaResViewFormatSignedBlockCompressed6H, 
# 1503
cudaResViewFormatUnsignedBlockCompressed7
# 1504
}; 
#endif
# 1509 "/opt/cuda/include/driver_types.h"
#if 0
# 1509
struct cudaResourceDesc { 
# 1510
cudaResourceType resType; 
# 1512
union { 
# 1513
struct { 
# 1514
cudaArray_t array; 
# 1515
} array; 
# 1516
struct { 
# 1517
cudaMipmappedArray_t mipmap; 
# 1518
} mipmap; 
# 1519
struct { 
# 1520
void *devPtr; 
# 1521
cudaChannelFormatDesc desc; 
# 1522
::size_t sizeInBytes; 
# 1523
} linear; 
# 1524
struct { 
# 1525
void *devPtr; 
# 1526
cudaChannelFormatDesc desc; 
# 1527
::size_t width; 
# 1528
::size_t height; 
# 1529
::size_t pitchInBytes; 
# 1530
} pitch2D; 
# 1531
} res; 
# 1532
}; 
#endif
# 1537 "/opt/cuda/include/driver_types.h"
#if 0
# 1537
struct cudaResourceViewDesc { 
# 1539
cudaResourceViewFormat format; 
# 1540
::size_t width; 
# 1541
::size_t height; 
# 1542
::size_t depth; 
# 1543
unsigned firstMipmapLevel; 
# 1544
unsigned lastMipmapLevel; 
# 1545
unsigned firstLayer; 
# 1546
unsigned lastLayer; 
# 1547
}; 
#endif
# 1552 "/opt/cuda/include/driver_types.h"
#if 0
# 1552
struct cudaPointerAttributes { 
# 1558
cudaMemoryType type; 
# 1569 "/opt/cuda/include/driver_types.h"
int device; 
# 1575
void *devicePointer; 
# 1584 "/opt/cuda/include/driver_types.h"
void *hostPointer; 
# 1585
}; 
#endif
# 1590 "/opt/cuda/include/driver_types.h"
#if 0
# 1590
struct cudaFuncAttributes { 
# 1597
::size_t sharedSizeBytes; 
# 1603
::size_t constSizeBytes; 
# 1608
::size_t localSizeBytes; 
# 1615
int maxThreadsPerBlock; 
# 1620
int numRegs; 
# 1627
int ptxVersion; 
# 1634
int binaryVersion; 
# 1640
int cacheModeCA; 
# 1647
int maxDynamicSharedSizeBytes; 
# 1656 "/opt/cuda/include/driver_types.h"
int preferredShmemCarveout; 
# 1662
int clusterDimMustBeSet; 
# 1673 "/opt/cuda/include/driver_types.h"
int requiredClusterWidth; 
# 1674
int requiredClusterHeight; 
# 1675
int requiredClusterDepth; 
# 1681
int clusterSchedulingPolicyPreference; 
# 1703 "/opt/cuda/include/driver_types.h"
int nonPortableClusterSizeAllowed; 
# 1708
int reserved[16]; 
# 1709
}; 
#endif
# 1714 "/opt/cuda/include/driver_types.h"
#if 0
# 1714
enum cudaFuncAttribute { 
# 1716
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1717
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1718
cudaFuncAttributeClusterDimMustBeSet, 
# 1719
cudaFuncAttributeRequiredClusterWidth, 
# 1720
cudaFuncAttributeRequiredClusterHeight, 
# 1721
cudaFuncAttributeRequiredClusterDepth, 
# 1722
cudaFuncAttributeNonPortableClusterSizeAllowed, 
# 1723
cudaFuncAttributeClusterSchedulingPolicyPreference, 
# 1724
cudaFuncAttributeMax
# 1725
}; 
#endif
# 1730 "/opt/cuda/include/driver_types.h"
#if 0
# 1730
enum cudaFuncCache { 
# 1732
cudaFuncCachePreferNone, 
# 1733
cudaFuncCachePreferShared, 
# 1734
cudaFuncCachePreferL1, 
# 1735
cudaFuncCachePreferEqual
# 1736
}; 
#endif
# 1742 "/opt/cuda/include/driver_types.h"
#if 0
# 1742
enum cudaSharedMemConfig { 
# 1744
cudaSharedMemBankSizeDefault, 
# 1745
cudaSharedMemBankSizeFourByte, 
# 1746
cudaSharedMemBankSizeEightByte
# 1747
}; 
#endif
# 1752 "/opt/cuda/include/driver_types.h"
#if 0
# 1752
enum cudaSharedCarveout { 
# 1753
cudaSharedmemCarveoutDefault = (-1), 
# 1754
cudaSharedmemCarveoutMaxShared = 100, 
# 1755
cudaSharedmemCarveoutMaxL1 = 0
# 1756
}; 
#endif
# 1761 "/opt/cuda/include/driver_types.h"
#if 0
# 1761
enum cudaComputeMode { 
# 1763
cudaComputeModeDefault, 
# 1764
cudaComputeModeExclusive, 
# 1765
cudaComputeModeProhibited, 
# 1766
cudaComputeModeExclusiveProcess
# 1767
}; 
#endif
# 1772 "/opt/cuda/include/driver_types.h"
#if 0
# 1772
enum cudaLimit { 
# 1774
cudaLimitStackSize, 
# 1775
cudaLimitPrintfFifoSize, 
# 1776
cudaLimitMallocHeapSize, 
# 1777
cudaLimitDevRuntimeSyncDepth, 
# 1778
cudaLimitDevRuntimePendingLaunchCount, 
# 1779
cudaLimitMaxL2FetchGranularity, 
# 1780
cudaLimitPersistingL2CacheSize
# 1781
}; 
#endif
# 1786 "/opt/cuda/include/driver_types.h"
#if 0
# 1786
enum cudaMemoryAdvise { 
# 1788
cudaMemAdviseSetReadMostly = 1, 
# 1789
cudaMemAdviseUnsetReadMostly, 
# 1790
cudaMemAdviseSetPreferredLocation, 
# 1791
cudaMemAdviseUnsetPreferredLocation, 
# 1792
cudaMemAdviseSetAccessedBy, 
# 1793
cudaMemAdviseUnsetAccessedBy
# 1794
}; 
#endif
# 1799 "/opt/cuda/include/driver_types.h"
#if 0
# 1799
enum cudaMemRangeAttribute { 
# 1801
cudaMemRangeAttributeReadMostly = 1, 
# 1802
cudaMemRangeAttributePreferredLocation, 
# 1803
cudaMemRangeAttributeAccessedBy, 
# 1804
cudaMemRangeAttributeLastPrefetchLocation
# 1805
}; 
#endif
# 1810 "/opt/cuda/include/driver_types.h"
#if 0
# 1810
enum cudaFlushGPUDirectRDMAWritesOptions { 
# 1811
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
# 1812
cudaFlushGPUDirectRDMAWritesOptionMemOps
# 1813
}; 
#endif
# 1818 "/opt/cuda/include/driver_types.h"
#if 0
# 1818
enum cudaGPUDirectRDMAWritesOrdering { 
# 1819
cudaGPUDirectRDMAWritesOrderingNone, 
# 1820
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
# 1821
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
# 1822
}; 
#endif
# 1827 "/opt/cuda/include/driver_types.h"
#if 0
# 1827
enum cudaFlushGPUDirectRDMAWritesScope { 
# 1828
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
# 1829
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
# 1830
}; 
#endif
# 1835 "/opt/cuda/include/driver_types.h"
#if 0
# 1835
enum cudaFlushGPUDirectRDMAWritesTarget { 
# 1836
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
# 1837
}; 
#endif
# 1843 "/opt/cuda/include/driver_types.h"
#if 0
# 1843
enum cudaDeviceAttr { 
# 1845
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1846
cudaDevAttrMaxBlockDimX, 
# 1847
cudaDevAttrMaxBlockDimY, 
# 1848
cudaDevAttrMaxBlockDimZ, 
# 1849
cudaDevAttrMaxGridDimX, 
# 1850
cudaDevAttrMaxGridDimY, 
# 1851
cudaDevAttrMaxGridDimZ, 
# 1852
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1853
cudaDevAttrTotalConstantMemory, 
# 1854
cudaDevAttrWarpSize, 
# 1855
cudaDevAttrMaxPitch, 
# 1856
cudaDevAttrMaxRegistersPerBlock, 
# 1857
cudaDevAttrClockRate, 
# 1858
cudaDevAttrTextureAlignment, 
# 1859
cudaDevAttrGpuOverlap, 
# 1860
cudaDevAttrMultiProcessorCount, 
# 1861
cudaDevAttrKernelExecTimeout, 
# 1862
cudaDevAttrIntegrated, 
# 1863
cudaDevAttrCanMapHostMemory, 
# 1864
cudaDevAttrComputeMode, 
# 1865
cudaDevAttrMaxTexture1DWidth, 
# 1866
cudaDevAttrMaxTexture2DWidth, 
# 1867
cudaDevAttrMaxTexture2DHeight, 
# 1868
cudaDevAttrMaxTexture3DWidth, 
# 1869
cudaDevAttrMaxTexture3DHeight, 
# 1870
cudaDevAttrMaxTexture3DDepth, 
# 1871
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1872
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1873
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1874
cudaDevAttrSurfaceAlignment, 
# 1875
cudaDevAttrConcurrentKernels, 
# 1876
cudaDevAttrEccEnabled, 
# 1877
cudaDevAttrPciBusId, 
# 1878
cudaDevAttrPciDeviceId, 
# 1879
cudaDevAttrTccDriver, 
# 1880
cudaDevAttrMemoryClockRate, 
# 1881
cudaDevAttrGlobalMemoryBusWidth, 
# 1882
cudaDevAttrL2CacheSize, 
# 1883
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1884
cudaDevAttrAsyncEngineCount, 
# 1885
cudaDevAttrUnifiedAddressing, 
# 1886
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1887
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1888
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1889
cudaDevAttrMaxTexture2DGatherHeight, 
# 1890
cudaDevAttrMaxTexture3DWidthAlt, 
# 1891
cudaDevAttrMaxTexture3DHeightAlt, 
# 1892
cudaDevAttrMaxTexture3DDepthAlt, 
# 1893
cudaDevAttrPciDomainId, 
# 1894
cudaDevAttrTexturePitchAlignment, 
# 1895
cudaDevAttrMaxTextureCubemapWidth, 
# 1896
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1897
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1898
cudaDevAttrMaxSurface1DWidth, 
# 1899
cudaDevAttrMaxSurface2DWidth, 
# 1900
cudaDevAttrMaxSurface2DHeight, 
# 1901
cudaDevAttrMaxSurface3DWidth, 
# 1902
cudaDevAttrMaxSurface3DHeight, 
# 1903
cudaDevAttrMaxSurface3DDepth, 
# 1904
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1905
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1906
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1907
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1908
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1909
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1910
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1911
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1912
cudaDevAttrMaxTexture1DLinearWidth, 
# 1913
cudaDevAttrMaxTexture2DLinearWidth, 
# 1914
cudaDevAttrMaxTexture2DLinearHeight, 
# 1915
cudaDevAttrMaxTexture2DLinearPitch, 
# 1916
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1917
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1918
cudaDevAttrComputeCapabilityMajor, 
# 1919
cudaDevAttrComputeCapabilityMinor, 
# 1920
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1921
cudaDevAttrStreamPrioritiesSupported, 
# 1922
cudaDevAttrGlobalL1CacheSupported, 
# 1923
cudaDevAttrLocalL1CacheSupported, 
# 1924
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1925
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1926
cudaDevAttrManagedMemory, 
# 1927
cudaDevAttrIsMultiGpuBoard, 
# 1928
cudaDevAttrMultiGpuBoardGroupID, 
# 1929
cudaDevAttrHostNativeAtomicSupported, 
# 1930
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1931
cudaDevAttrPageableMemoryAccess, 
# 1932
cudaDevAttrConcurrentManagedAccess, 
# 1933
cudaDevAttrComputePreemptionSupported, 
# 1934
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1935
cudaDevAttrReserved92, 
# 1936
cudaDevAttrReserved93, 
# 1937
cudaDevAttrReserved94, 
# 1938
cudaDevAttrCooperativeLaunch, 
# 1939
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1940
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1941
cudaDevAttrCanFlushRemoteWrites, 
# 1942
cudaDevAttrHostRegisterSupported, 
# 1943
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 1944
cudaDevAttrDirectManagedMemAccessFromHost, 
# 1945
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
# 1946
cudaDevAttrMaxPersistingL2CacheSize = 108, 
# 1947
cudaDevAttrMaxAccessPolicyWindowSize, 
# 1948
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
# 1949
cudaDevAttrSparseCudaArraySupported, 
# 1950
cudaDevAttrHostRegisterReadOnlySupported, 
# 1951
cudaDevAttrTimelineSemaphoreInteropSupported, 
# 1952
cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114, 
# 1953
cudaDevAttrMemoryPoolsSupported, 
# 1954
cudaDevAttrGPUDirectRDMASupported, 
# 1955
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
# 1956
cudaDevAttrGPUDirectRDMAWritesOrdering, 
# 1957
cudaDevAttrMemoryPoolSupportedHandleTypes, 
# 1958
cudaDevAttrClusterLaunch, 
# 1959
cudaDevAttrDeferredMappingCudaArraySupported, 
# 1960
cudaDevAttrReserved122, 
# 1961
cudaDevAttrReserved123, 
# 1962
cudaDevAttrReserved124, 
# 1963
cudaDevAttrIpcEventSupport, 
# 1964
cudaDevAttrMemSyncDomainCount, 
# 1965
cudaDevAttrReserved127, 
# 1966
cudaDevAttrReserved128, 
# 1967
cudaDevAttrReserved129, 
# 1968
cudaDevAttrReserved132 = 132, 
# 1969
cudaDevAttrMax
# 1970
}; 
#endif
# 1975 "/opt/cuda/include/driver_types.h"
#if 0
# 1975
enum cudaMemPoolAttr { 
# 1985 "/opt/cuda/include/driver_types.h"
cudaMemPoolReuseFollowEventDependencies = 1, 
# 1992
cudaMemPoolReuseAllowOpportunistic, 
# 2000
cudaMemPoolReuseAllowInternalDependencies, 
# 2011 "/opt/cuda/include/driver_types.h"
cudaMemPoolAttrReleaseThreshold, 
# 2017
cudaMemPoolAttrReservedMemCurrent, 
# 2024
cudaMemPoolAttrReservedMemHigh, 
# 2030
cudaMemPoolAttrUsedMemCurrent, 
# 2037
cudaMemPoolAttrUsedMemHigh
# 2038
}; 
#endif
# 2043 "/opt/cuda/include/driver_types.h"
#if 0
# 2043
enum cudaMemLocationType { 
# 2044
cudaMemLocationTypeInvalid, 
# 2045
cudaMemLocationTypeDevice
# 2046
}; 
#endif
# 2053 "/opt/cuda/include/driver_types.h"
#if 0
# 2053
struct cudaMemLocation { 
# 2054
cudaMemLocationType type; 
# 2055
int id; 
# 2056
}; 
#endif
# 2061 "/opt/cuda/include/driver_types.h"
#if 0
# 2061
enum cudaMemAccessFlags { 
# 2062
cudaMemAccessFlagsProtNone, 
# 2063
cudaMemAccessFlagsProtRead, 
# 2064
cudaMemAccessFlagsProtReadWrite = 3
# 2065
}; 
#endif
# 2070 "/opt/cuda/include/driver_types.h"
#if 0
# 2070
struct cudaMemAccessDesc { 
# 2071
cudaMemLocation location; 
# 2072
cudaMemAccessFlags flags; 
# 2073
}; 
#endif
# 2078 "/opt/cuda/include/driver_types.h"
#if 0
# 2078
enum cudaMemAllocationType { 
# 2079
cudaMemAllocationTypeInvalid, 
# 2083
cudaMemAllocationTypePinned, 
# 2084
cudaMemAllocationTypeMax = 2147483647
# 2085
}; 
#endif
# 2090 "/opt/cuda/include/driver_types.h"
#if 0
# 2090
enum cudaMemAllocationHandleType { 
# 2091
cudaMemHandleTypeNone, 
# 2092
cudaMemHandleTypePosixFileDescriptor, 
# 2093
cudaMemHandleTypeWin32, 
# 2094
cudaMemHandleTypeWin32Kmt = 4
# 2095
}; 
#endif
# 2100 "/opt/cuda/include/driver_types.h"
#if 0
# 2100
struct cudaMemPoolProps { 
# 2101
cudaMemAllocationType allocType; 
# 2102
cudaMemAllocationHandleType handleTypes; 
# 2103
cudaMemLocation location; 
# 2110
void *win32SecurityAttributes; 
# 2111
unsigned char reserved[64]; 
# 2112
}; 
#endif
# 2117 "/opt/cuda/include/driver_types.h"
#if 0
# 2117
struct cudaMemPoolPtrExportData { 
# 2118
unsigned char reserved[64]; 
# 2119
}; 
#endif
# 2124 "/opt/cuda/include/driver_types.h"
#if 0
# 2124
struct cudaMemAllocNodeParams { 
# 2129
cudaMemPoolProps poolProps; 
# 2130
const cudaMemAccessDesc *accessDescs; 
# 2131
::size_t accessDescCount; 
# 2132
::size_t bytesize; 
# 2133
void *dptr; 
# 2134
}; 
#endif
# 2139 "/opt/cuda/include/driver_types.h"
#if 0
# 2139
enum cudaGraphMemAttributeType { 
# 2144
cudaGraphMemAttrUsedMemCurrent, 
# 2151
cudaGraphMemAttrUsedMemHigh, 
# 2158
cudaGraphMemAttrReservedMemCurrent, 
# 2165
cudaGraphMemAttrReservedMemHigh
# 2166
}; 
#endif
# 2172 "/opt/cuda/include/driver_types.h"
#if 0
# 2172
enum cudaDeviceP2PAttr { 
# 2173
cudaDevP2PAttrPerformanceRank = 1, 
# 2174
cudaDevP2PAttrAccessSupported, 
# 2175
cudaDevP2PAttrNativeAtomicSupported, 
# 2176
cudaDevP2PAttrCudaArrayAccessSupported
# 2177
}; 
#endif
# 2184 "/opt/cuda/include/driver_types.h"
#if 0
# 2184
struct CUuuid_st { 
# 2185
char bytes[16]; 
# 2186
}; 
#endif
# 2187 "/opt/cuda/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2187
CUuuid; 
#endif
# 2189 "/opt/cuda/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2189
cudaUUID_t; 
#endif
# 2194 "/opt/cuda/include/driver_types.h"
#if 0
# 2194
struct cudaDeviceProp { 
# 2196
char name[256]; 
# 2197
cudaUUID_t uuid; 
# 2198
char luid[8]; 
# 2199
unsigned luidDeviceNodeMask; 
# 2200
::size_t totalGlobalMem; 
# 2201
::size_t sharedMemPerBlock; 
# 2202
int regsPerBlock; 
# 2203
int warpSize; 
# 2204
::size_t memPitch; 
# 2205
int maxThreadsPerBlock; 
# 2206
int maxThreadsDim[3]; 
# 2207
int maxGridSize[3]; 
# 2208
int clockRate; 
# 2209
::size_t totalConstMem; 
# 2210
int major; 
# 2211
int minor; 
# 2212
::size_t textureAlignment; 
# 2213
::size_t texturePitchAlignment; 
# 2214
int deviceOverlap; 
# 2215
int multiProcessorCount; 
# 2216
int kernelExecTimeoutEnabled; 
# 2217
int integrated; 
# 2218
int canMapHostMemory; 
# 2219
int computeMode; 
# 2220
int maxTexture1D; 
# 2221
int maxTexture1DMipmap; 
# 2222
int maxTexture1DLinear; 
# 2223
int maxTexture2D[2]; 
# 2224
int maxTexture2DMipmap[2]; 
# 2225
int maxTexture2DLinear[3]; 
# 2226
int maxTexture2DGather[2]; 
# 2227
int maxTexture3D[3]; 
# 2228
int maxTexture3DAlt[3]; 
# 2229
int maxTextureCubemap; 
# 2230
int maxTexture1DLayered[2]; 
# 2231
int maxTexture2DLayered[3]; 
# 2232
int maxTextureCubemapLayered[2]; 
# 2233
int maxSurface1D; 
# 2234
int maxSurface2D[2]; 
# 2235
int maxSurface3D[3]; 
# 2236
int maxSurface1DLayered[2]; 
# 2237
int maxSurface2DLayered[3]; 
# 2238
int maxSurfaceCubemap; 
# 2239
int maxSurfaceCubemapLayered[2]; 
# 2240
::size_t surfaceAlignment; 
# 2241
int concurrentKernels; 
# 2242
int ECCEnabled; 
# 2243
int pciBusID; 
# 2244
int pciDeviceID; 
# 2245
int pciDomainID; 
# 2246
int tccDriver; 
# 2247
int asyncEngineCount; 
# 2248
int unifiedAddressing; 
# 2249
int memoryClockRate; 
# 2250
int memoryBusWidth; 
# 2251
int l2CacheSize; 
# 2252
int persistingL2CacheMaxSize; 
# 2253
int maxThreadsPerMultiProcessor; 
# 2254
int streamPrioritiesSupported; 
# 2255
int globalL1CacheSupported; 
# 2256
int localL1CacheSupported; 
# 2257
::size_t sharedMemPerMultiprocessor; 
# 2258
int regsPerMultiprocessor; 
# 2259
int managedMemory; 
# 2260
int isMultiGpuBoard; 
# 2261
int multiGpuBoardGroupID; 
# 2262
int hostNativeAtomicSupported; 
# 2263
int singleToDoublePrecisionPerfRatio; 
# 2264
int pageableMemoryAccess; 
# 2265
int concurrentManagedAccess; 
# 2266
int computePreemptionSupported; 
# 2267
int canUseHostPointerForRegisteredMem; 
# 2268
int cooperativeLaunch; 
# 2269
int cooperativeMultiDeviceLaunch; 
# 2270
::size_t sharedMemPerBlockOptin; 
# 2271
int pageableMemoryAccessUsesHostPageTables; 
# 2272
int directManagedMemAccessFromHost; 
# 2273
int maxBlocksPerMultiProcessor; 
# 2274
int accessPolicyMaxWindowSize; 
# 2275
::size_t reservedSharedMemPerBlock; 
# 2276
int hostRegisterSupported; 
# 2277
int sparseCudaArraySupported; 
# 2278
int hostRegisterReadOnlySupported; 
# 2279
int timelineSemaphoreInteropSupported; 
# 2280
int memoryPoolsSupported; 
# 2281
int gpuDirectRDMASupported; 
# 2282
unsigned gpuDirectRDMAFlushWritesOptions; 
# 2283
int gpuDirectRDMAWritesOrdering; 
# 2284
unsigned memoryPoolSupportedHandleTypes; 
# 2285
int deferredMappingCudaArraySupported; 
# 2286
int ipcEventSupported; 
# 2287
int clusterLaunch; 
# 2288
int unifiedFunctionPointers; 
# 2289
int reserved2[2]; 
# 2290
int reserved[61]; 
# 2291
}; 
#endif
# 2304 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 2301
struct cudaIpcEventHandle_st { 
# 2303
char reserved[64]; 
# 2304
} cudaIpcEventHandle_t; 
#endif
# 2312 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 2309
struct cudaIpcMemHandle_st { 
# 2311
char reserved[64]; 
# 2312
} cudaIpcMemHandle_t; 
#endif
# 2317 "/opt/cuda/include/driver_types.h"
#if 0
# 2317
enum cudaExternalMemoryHandleType { 
# 2321
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 2325
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 2329
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 2333
cudaExternalMemoryHandleTypeD3D12Heap, 
# 2337
cudaExternalMemoryHandleTypeD3D12Resource, 
# 2341
cudaExternalMemoryHandleTypeD3D11Resource, 
# 2345
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
# 2349
cudaExternalMemoryHandleTypeNvSciBuf
# 2350
}; 
#endif
# 2392 "/opt/cuda/include/driver_types.h"
#if 0
# 2392
struct cudaExternalMemoryHandleDesc { 
# 2396
cudaExternalMemoryHandleType type; 
# 2397
union { 
# 2403
int fd; 
# 2419 "/opt/cuda/include/driver_types.h"
struct { 
# 2423
void *handle; 
# 2428
const void *name; 
# 2429
} win32; 
# 2434
const void *nvSciBufObject; 
# 2435
} handle; 
# 2439
unsigned long long size; 
# 2443
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2444
}; 
#endif
# 2449 "/opt/cuda/include/driver_types.h"
#if 0
# 2449
struct cudaExternalMemoryBufferDesc { 
# 2453
unsigned long long offset; 
# 2457
unsigned long long size; 
# 2461
unsigned flags; 
# 2462
}; 
#endif
# 2467 "/opt/cuda/include/driver_types.h"
#if 0
# 2467
struct cudaExternalMemoryMipmappedArrayDesc { 
# 2472
unsigned long long offset; 
# 2476
cudaChannelFormatDesc formatDesc; 
# 2480
cudaExtent extent; 
# 2485
unsigned flags; 
# 2489
unsigned numLevels; 
# 2490
}; 
#endif
# 2495 "/opt/cuda/include/driver_types.h"
#if 0
# 2495
enum cudaExternalSemaphoreHandleType { 
# 2499
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 2503
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 2507
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 2511
cudaExternalSemaphoreHandleTypeD3D12Fence, 
# 2515
cudaExternalSemaphoreHandleTypeD3D11Fence, 
# 2519
cudaExternalSemaphoreHandleTypeNvSciSync, 
# 2523
cudaExternalSemaphoreHandleTypeKeyedMutex, 
# 2527
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
# 2531
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
# 2535
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
# 2536
}; 
#endif
# 2541 "/opt/cuda/include/driver_types.h"
#if 0
# 2541
struct cudaExternalSemaphoreHandleDesc { 
# 2545
cudaExternalSemaphoreHandleType type; 
# 2546
union { 
# 2553
int fd; 
# 2569 "/opt/cuda/include/driver_types.h"
struct { 
# 2573
void *handle; 
# 2578
const void *name; 
# 2579
} win32; 
# 2583
const void *nvSciSyncObj; 
# 2584
} handle; 
# 2588
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2589
}; 
#endif
# 2594 "/opt/cuda/include/driver_types.h"
#if 0
# 2594
struct cudaExternalSemaphoreSignalParams_v1 { 
# 2595
struct { 
# 2599
struct { 
# 2603
unsigned long long value; 
# 2604
} fence; 
# 2605
union { 
# 2610
void *fence; 
# 2611
unsigned long long reserved; 
# 2612
} nvSciSync; 
# 2616
struct { 
# 2620
unsigned long long key; 
# 2621
} keyedMutex; 
# 2622
} params; 
# 2633 "/opt/cuda/include/driver_types.h"
unsigned flags; 
# 2634
}; 
#endif
# 2639 "/opt/cuda/include/driver_types.h"
#if 0
# 2639
struct cudaExternalSemaphoreWaitParams_v1 { 
# 2640
struct { 
# 2644
struct { 
# 2648
unsigned long long value; 
# 2649
} fence; 
# 2650
union { 
# 2655
void *fence; 
# 2656
unsigned long long reserved; 
# 2657
} nvSciSync; 
# 2661
struct { 
# 2665
unsigned long long key; 
# 2669
unsigned timeoutMs; 
# 2670
} keyedMutex; 
# 2671
} params; 
# 2682 "/opt/cuda/include/driver_types.h"
unsigned flags; 
# 2683
}; 
#endif
# 2688 "/opt/cuda/include/driver_types.h"
#if 0
# 2688
struct cudaExternalSemaphoreSignalParams { 
# 2689
struct { 
# 2693
struct { 
# 2697
unsigned long long value; 
# 2698
} fence; 
# 2699
union { 
# 2704
void *fence; 
# 2705
unsigned long long reserved; 
# 2706
} nvSciSync; 
# 2710
struct { 
# 2714
unsigned long long key; 
# 2715
} keyedMutex; 
# 2716
unsigned reserved[12]; 
# 2717
} params; 
# 2728 "/opt/cuda/include/driver_types.h"
unsigned flags; 
# 2729
unsigned reserved[16]; 
# 2730
}; 
#endif
# 2735 "/opt/cuda/include/driver_types.h"
#if 0
# 2735
struct cudaExternalSemaphoreWaitParams { 
# 2736
struct { 
# 2740
struct { 
# 2744
unsigned long long value; 
# 2745
} fence; 
# 2746
union { 
# 2751
void *fence; 
# 2752
unsigned long long reserved; 
# 2753
} nvSciSync; 
# 2757
struct { 
# 2761
unsigned long long key; 
# 2765
unsigned timeoutMs; 
# 2766
} keyedMutex; 
# 2767
unsigned reserved[10]; 
# 2768
} params; 
# 2779 "/opt/cuda/include/driver_types.h"
unsigned flags; 
# 2780
unsigned reserved[16]; 
# 2781
}; 
#endif
# 2792 "/opt/cuda/include/driver_types.h"
#if 0
typedef cudaError 
# 2792
cudaError_t; 
#endif
# 2797 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 2797
cudaStream_t; 
#endif
# 2802 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 2802
cudaEvent_t; 
#endif
# 2807 "/opt/cuda/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 2807
cudaGraphicsResource_t; 
#endif
# 2812 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
# 2812
cudaExternalMemory_t; 
#endif
# 2817 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
# 2817
cudaExternalSemaphore_t; 
#endif
# 2822 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUgraph_st *
# 2822
cudaGraph_t; 
#endif
# 2827 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUgraphNode_st *
# 2827
cudaGraphNode_t; 
#endif
# 2832 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUuserObject_st *
# 2832
cudaUserObject_t; 
#endif
# 2837 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUfunc_st *
# 2837
cudaFunction_t; 
#endif
# 2842 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUkern_st *
# 2842
cudaKernel_t; 
#endif
# 2847 "/opt/cuda/include/driver_types.h"
#if 0
typedef struct CUmemPoolHandle_st *
# 2847
cudaMemPool_t; 
#endif
# 2852 "/opt/cuda/include/driver_types.h"
#if 0
# 2852
enum cudaCGScope { 
# 2853
cudaCGScopeInvalid, 
# 2854
cudaCGScopeGrid, 
# 2855
cudaCGScopeMultiGrid
# 2856
}; 
#endif
# 2861 "/opt/cuda/include/driver_types.h"
#if 0
# 2861
struct cudaLaunchParams { 
# 2863
void *func; 
# 2864
dim3 gridDim; 
# 2865
dim3 blockDim; 
# 2866
void **args; 
# 2867
::size_t sharedMem; 
# 2868
cudaStream_t stream; 
# 2869
}; 
#endif
# 2874 "/opt/cuda/include/driver_types.h"
#if 0
# 2874
struct cudaKernelNodeParams { 
# 2875
void *func; 
# 2876
dim3 gridDim; 
# 2877
dim3 blockDim; 
# 2878
unsigned sharedMemBytes; 
# 2879
void **kernelParams; 
# 2880
void **extra; 
# 2881
}; 
#endif
# 2886 "/opt/cuda/include/driver_types.h"
#if 0
# 2886
struct cudaExternalSemaphoreSignalNodeParams { 
# 2887
cudaExternalSemaphore_t *extSemArray; 
# 2888
const cudaExternalSemaphoreSignalParams *paramsArray; 
# 2889
unsigned numExtSems; 
# 2890
}; 
#endif
# 2895 "/opt/cuda/include/driver_types.h"
#if 0
# 2895
struct cudaExternalSemaphoreWaitNodeParams { 
# 2896
cudaExternalSemaphore_t *extSemArray; 
# 2897
const cudaExternalSemaphoreWaitParams *paramsArray; 
# 2898
unsigned numExtSems; 
# 2899
}; 
#endif
# 2904 "/opt/cuda/include/driver_types.h"
#if 0
# 2904
enum cudaGraphNodeType { 
# 2905
cudaGraphNodeTypeKernel, 
# 2906
cudaGraphNodeTypeMemcpy, 
# 2907
cudaGraphNodeTypeMemset, 
# 2908
cudaGraphNodeTypeHost, 
# 2909
cudaGraphNodeTypeGraph, 
# 2910
cudaGraphNodeTypeEmpty, 
# 2911
cudaGraphNodeTypeWaitEvent, 
# 2912
cudaGraphNodeTypeEventRecord, 
# 2913
cudaGraphNodeTypeExtSemaphoreSignal, 
# 2914
cudaGraphNodeTypeExtSemaphoreWait, 
# 2915
cudaGraphNodeTypeMemAlloc, 
# 2916
cudaGraphNodeTypeMemFree, 
# 2917
cudaGraphNodeTypeCount
# 2918
}; 
#endif
# 2923 "/opt/cuda/include/driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 2928
#if 0
# 2928
enum cudaGraphExecUpdateResult { 
# 2929
cudaGraphExecUpdateSuccess, 
# 2930
cudaGraphExecUpdateError, 
# 2931
cudaGraphExecUpdateErrorTopologyChanged, 
# 2932
cudaGraphExecUpdateErrorNodeTypeChanged, 
# 2933
cudaGraphExecUpdateErrorFunctionChanged, 
# 2934
cudaGraphExecUpdateErrorParametersChanged, 
# 2935
cudaGraphExecUpdateErrorNotSupported, 
# 2936
cudaGraphExecUpdateErrorUnsupportedFunctionChange, 
# 2937
cudaGraphExecUpdateErrorAttributesChanged
# 2938
}; 
#endif
# 2949 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 2943
enum cudaGraphInstantiateResult { 
# 2944
cudaGraphInstantiateSuccess, 
# 2945
cudaGraphInstantiateError, 
# 2946
cudaGraphInstantiateInvalidStructure, 
# 2947
cudaGraphInstantiateNodeOperationNotSupported, 
# 2948
cudaGraphInstantiateMultipleDevicesNotSupported
# 2949
} cudaGraphInstantiateResult; 
#endif
# 2960 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 2954
struct cudaGraphInstantiateParams_st { 
# 2956
unsigned long long flags; 
# 2957
cudaStream_t uploadStream; 
# 2958
cudaGraphNode_t errNode_out; 
# 2959
cudaGraphInstantiateResult result_out; 
# 2960
} cudaGraphInstantiateParams; 
#endif
# 2982 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 2965
struct cudaGraphExecUpdateResultInfo_st { 
# 2969
cudaGraphExecUpdateResult result; 
# 2976
cudaGraphNode_t errorNode; 
# 2981
cudaGraphNode_t errorFromNode; 
# 2982
} cudaGraphExecUpdateResultInfo; 
#endif
# 2988 "/opt/cuda/include/driver_types.h"
#if 0
# 2988
enum cudaGetDriverEntryPointFlags { 
# 2989
cudaEnableDefault, 
# 2990
cudaEnableLegacyStream, 
# 2991
cudaEnablePerThreadDefaultStream
# 2992
}; 
#endif
# 2997 "/opt/cuda/include/driver_types.h"
#if 0
# 2997
enum cudaDriverEntryPointQueryResult { 
# 2998
cudaDriverEntryPointSuccess, 
# 2999
cudaDriverEntryPointSymbolNotFound, 
# 3000
cudaDriverEntryPointVersionNotSufficent
# 3001
}; 
#endif
# 3006 "/opt/cuda/include/driver_types.h"
#if 0
# 3006
enum cudaGraphDebugDotFlags { 
# 3007
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
# 3008
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
# 3009
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
# 3010
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
# 3011
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
# 3012
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
# 3013
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
# 3014
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
# 3015
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
# 3016
cudaGraphDebugDotFlagsHandles = (1 << 10)
# 3017
}; 
#endif
# 3022 "/opt/cuda/include/driver_types.h"
#if 0
# 3022
enum cudaGraphInstantiateFlags { 
# 3023
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1, 
# 3024
cudaGraphInstantiateFlagUpload, 
# 3025
cudaGraphInstantiateFlagDeviceLaunch = 4, 
# 3026
cudaGraphInstantiateFlagUseNodePriority = 8
# 3028
}; 
#endif
# 3033 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 3030
enum cudaLaunchMemSyncDomain { 
# 3031
cudaLaunchMemSyncDomainDefault, 
# 3032
cudaLaunchMemSyncDomainRemote
# 3033
} cudaLaunchMemSyncDomain; 
#endif
# 3038 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 3035
struct cudaLaunchMemSyncDomainMap_st { 
# 3036
unsigned char default_; 
# 3037
unsigned char remote; 
# 3038
} cudaLaunchMemSyncDomainMap; 
#endif
# 3084 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 3043 "/opt/cuda/include/driver_types.h"
enum cudaLaunchAttributeID { 
# 3044
cudaLaunchAttributeIgnore, 
# 3045
cudaLaunchAttributeAccessPolicyWindow, 
# 3046
cudaLaunchAttributeCooperative, 
# 3047
cudaLaunchAttributeSynchronizationPolicy, 
# 3048
cudaLaunchAttributeClusterDimension, 
# 3049
cudaLaunchAttributeClusterSchedulingPolicyPreference, 
# 3050
cudaLaunchAttributeProgrammaticStreamSerialization, 
# 3061 "/opt/cuda/include/driver_types.h"
cudaLaunchAttributeProgrammaticEvent, 
# 3081 "/opt/cuda/include/driver_types.h"
cudaLaunchAttributePriority, 
# 3082
cudaLaunchAttributeMemSyncDomainMap, 
# 3083
cudaLaunchAttributeMemSyncDomain
# 3084
} cudaLaunchAttributeID; 
#endif
# 3109 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 3089
union cudaLaunchAttributeValue { 
# 3090
char pad[64]; 
# 3091
cudaAccessPolicyWindow accessPolicyWindow; 
# 3092
int cooperative; 
# 3093
cudaSynchronizationPolicy syncPolicy; 
# 3094
struct { 
# 3095
unsigned x; 
# 3096
unsigned y; 
# 3097
unsigned z; 
# 3098
} clusterDim; 
# 3099
cudaClusterSchedulingPolicy clusterSchedulingPolicyPreference; 
# 3100
int programmaticStreamSerializationAllowed; 
# 3101
struct { 
# 3102
cudaEvent_t event; 
# 3103
int flags; 
# 3104
int triggerAtBlockStart; 
# 3105
} programmaticEvent; 
# 3106
int priority; 
# 3107
cudaLaunchMemSyncDomainMap memSyncDomainMap; 
# 3108
cudaLaunchMemSyncDomain memSyncDomain; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3109
} cudaLaunchAttributeValue; 
#endif
# 3118 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 3114
struct cudaLaunchAttribute_st { 
# 3115
cudaLaunchAttributeID id; 
# 3116
char pad[(8) - sizeof(cudaLaunchAttributeID)]; 
# 3117
cudaLaunchAttributeValue val; 
# 3118
} cudaLaunchAttribute; 
#endif
# 3130 "/opt/cuda/include/driver_types.h"
#if 0
typedef 
# 3123
struct cudaLaunchConfig_st { 
# 3124
dim3 gridDim; 
# 3125
dim3 blockDim; 
# 3126
::size_t dynamicSmemBytes; 
# 3127
cudaStream_t stream; 
# 3128
cudaLaunchAttribute *attrs; 
# 3129
unsigned numAttrs; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3130
} cudaLaunchConfig_t; 
#endif
# 84 "/opt/cuda/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/opt/cuda/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/opt/cuda/include/surface_types.h"
#if 0
typedef unsigned long long 
# 103
cudaSurfaceObject_t; 
#endif
# 84 "/opt/cuda/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/opt/cuda/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/opt/cuda/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/opt/cuda/include/texture_types.h"
#if 0
# 113
struct cudaTextureDesc { 
# 118
cudaTextureAddressMode addressMode[3]; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureReadMode readMode; 
# 130
int sRGB; 
# 134
float borderColor[4]; 
# 138
int normalizedCoords; 
# 142
unsigned maxAnisotropy; 
# 146
cudaTextureFilterMode mipmapFilterMode; 
# 150
float mipmapLevelBias; 
# 154
float minMipmapLevelClamp; 
# 158
float maxMipmapLevelClamp; 
# 162
int disableTrilinearOptimization; 
# 166
int seamlessCubemap; 
# 167
}; 
#endif
# 172 "/opt/cuda/include/texture_types.h"
#if 0
typedef unsigned long long 
# 172
cudaTextureObject_t; 
#endif
# 87 "/opt/cuda/include/library_types.h"
typedef 
# 55
enum cudaDataType_t { 
# 57
CUDA_R_16F = 2, 
# 58
CUDA_C_16F = 6, 
# 59
CUDA_R_16BF = 14, 
# 60
CUDA_C_16BF, 
# 61
CUDA_R_32F = 0, 
# 62
CUDA_C_32F = 4, 
# 63
CUDA_R_64F = 1, 
# 64
CUDA_C_64F = 5, 
# 65
CUDA_R_4I = 16, 
# 66
CUDA_C_4I, 
# 67
CUDA_R_4U, 
# 68
CUDA_C_4U, 
# 69
CUDA_R_8I = 3, 
# 70
CUDA_C_8I = 7, 
# 71
CUDA_R_8U, 
# 72
CUDA_C_8U, 
# 73
CUDA_R_16I = 20, 
# 74
CUDA_C_16I, 
# 75
CUDA_R_16U, 
# 76
CUDA_C_16U, 
# 77
CUDA_R_32I = 10, 
# 78
CUDA_C_32I, 
# 79
CUDA_R_32U, 
# 80
CUDA_C_32U, 
# 81
CUDA_R_64I = 24, 
# 82
CUDA_C_64I, 
# 83
CUDA_R_64U, 
# 84
CUDA_C_64U, 
# 85
CUDA_R_8F_E4M3, 
# 86
CUDA_R_8F_E5M2
# 87
} cudaDataType; 
# 95
typedef 
# 90
enum libraryPropertyType_t { 
# 92
MAJOR_VERSION, 
# 93
MINOR_VERSION, 
# 94
PATCH_LEVEL
# 95
} libraryPropertyType; 
# 296 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std { 
# 298
typedef unsigned long size_t; 
# 299
typedef long ptrdiff_t; 
# 302
typedef __decltype((nullptr)) nullptr_t; 
# 305
#pragma GCC visibility push ( default )
# 308
__attribute((__noreturn__, __always_inline__)) inline void 
# 309
__terminate() noexcept 
# 310
{ 
# 311
void terminate() noexcept __attribute((__noreturn__)); 
# 312
terminate(); 
# 313
} 
#pragma GCC visibility pop
}
# 329 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std { 
# 331
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 332
}
# 333
namespace __gnu_cxx { 
# 335
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 336
}
# 508 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std { 
# 510
#pragma GCC visibility push ( default )
# 516
constexpr bool __is_constant_evaluated() noexcept 
# 517
{ 
# 523
return __builtin_is_constant_evaluated(); 
# 527
} 
#pragma GCC visibility pop
}
# 34 "/usr/include/stdlib.h" 3
extern "C" {
# 74 "/usr/include/bits/floatn.h" 3
typedef float __complex__ __cfloat128 __attribute((__mode__(__TC__))); 
# 86 "/usr/include/bits/floatn.h" 3
typedef __float128 _Float128; 
# 214 "/usr/include/bits/floatn-common.h" 3
typedef float _Float32; 
# 251 "/usr/include/bits/floatn-common.h" 3
typedef double _Float64; 
# 268 "/usr/include/bits/floatn-common.h" 3
typedef double _Float32x; 
# 285 "/usr/include/bits/floatn-common.h" 3
typedef long double _Float64x; 
# 63 "/usr/include/stdlib.h" 3
typedef 
# 60
struct { 
# 61
int quot; 
# 62
int rem; 
# 63
} div_t; 
# 71
typedef 
# 68
struct { 
# 69
long quot; 
# 70
long rem; 
# 71
} ldiv_t; 
# 81
__extension__ typedef 
# 78
struct { 
# 79
long long quot; 
# 80
long long rem; 
# 81
} lldiv_t; 
# 98 "/usr/include/stdlib.h" 3
extern ::size_t __ctype_get_mb_cur_max() noexcept(true); 
# 102
extern double atof(const char * __nptr) noexcept(true)
# 103
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 105
extern int atoi(const char * __nptr) noexcept(true)
# 106
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 108
extern long atol(const char * __nptr) noexcept(true)
# 109
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 113
__extension__ extern long long atoll(const char * __nptr) noexcept(true)
# 114
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 118
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 120
 __attribute((__nonnull__(1))); 
# 124
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 125
 __attribute((__nonnull__(1))); 
# 127
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 129
 __attribute((__nonnull__(1))); 
# 141 "/usr/include/stdlib.h" 3
extern _Float32 strtof32(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 143
 __attribute((__nonnull__(1))); 
# 147
extern _Float64 strtof64(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 149
 __attribute((__nonnull__(1))); 
# 153
extern _Float128 strtof128(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 155
 __attribute((__nonnull__(1))); 
# 159
extern _Float32x strtof32x(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 161
 __attribute((__nonnull__(1))); 
# 165
extern _Float64x strtof64x(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 167
 __attribute((__nonnull__(1))); 
# 177 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 179
 __attribute((__nonnull__(1))); 
# 181
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 183
 __attribute((__nonnull__(1))); 
# 188
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 190
 __attribute((__nonnull__(1))); 
# 193
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 195
 __attribute((__nonnull__(1))); 
# 201
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 203
 __attribute((__nonnull__(1))); 
# 206
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 208
 __attribute((__nonnull__(1))); 
# 213
extern int strfromd(char * __dest, ::size_t __size, const char * __format, double __f) noexcept(true)
# 215
 __attribute((__nonnull__(3))); 
# 217
extern int strfromf(char * __dest, ::size_t __size, const char * __format, float __f) noexcept(true)
# 219
 __attribute((__nonnull__(3))); 
# 221
extern int strfroml(char * __dest, ::size_t __size, const char * __format, long double __f) noexcept(true)
# 223
 __attribute((__nonnull__(3))); 
# 233 "/usr/include/stdlib.h" 3
extern int strfromf32(char * __dest, ::size_t __size, const char * __format, _Float32 __f) noexcept(true)
# 235
 __attribute((__nonnull__(3))); 
# 239
extern int strfromf64(char * __dest, ::size_t __size, const char * __format, _Float64 __f) noexcept(true)
# 241
 __attribute((__nonnull__(3))); 
# 245
extern int strfromf128(char * __dest, ::size_t __size, const char * __format, _Float128 __f) noexcept(true)
# 247
 __attribute((__nonnull__(3))); 
# 251
extern int strfromf32x(char * __dest, ::size_t __size, const char * __format, _Float32x __f) noexcept(true)
# 253
 __attribute((__nonnull__(3))); 
# 257
extern int strfromf64x(char * __dest, ::size_t __size, const char * __format, _Float64x __f) noexcept(true)
# 259
 __attribute((__nonnull__(3))); 
# 27 "/usr/include/bits/types/__locale_t.h" 3
struct __locale_struct { 
# 30
struct __locale_data *__locales[13]; 
# 33
const unsigned short *__ctype_b; 
# 34
const int *__ctype_tolower; 
# 35
const int *__ctype_toupper; 
# 38
const char *__names[13]; 
# 39
}; 
# 41
typedef __locale_struct *__locale_t; 
# 24 "/usr/include/bits/types/locale_t.h" 3
typedef __locale_t locale_t; 
# 275 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 277
 __attribute((__nonnull__(1, 4))); 
# 279
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 282
 __attribute((__nonnull__(1, 4))); 
# 285
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 288
 __attribute((__nonnull__(1, 4))); 
# 291
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 294
 __attribute((__nonnull__(1, 4))); 
# 296
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 298
 __attribute((__nonnull__(1, 3))); 
# 300
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 302
 __attribute((__nonnull__(1, 3))); 
# 304
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 307
 __attribute((__nonnull__(1, 3))); 
# 317 "/usr/include/stdlib.h" 3
extern _Float32 strtof32_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 320
 __attribute((__nonnull__(1, 3))); 
# 324
extern _Float64 strtof64_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 327
 __attribute((__nonnull__(1, 3))); 
# 331
extern _Float128 strtof128_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 334
 __attribute((__nonnull__(1, 3))); 
# 338
extern _Float32x strtof32x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 341
 __attribute((__nonnull__(1, 3))); 
# 345
extern _Float64x strtof64x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 348
 __attribute((__nonnull__(1, 3))); 
# 386 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) noexcept(true); 
# 389
extern long a64l(const char * __s) noexcept(true)
# 390
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 27 "/usr/include/sys/types.h" 3
extern "C" {
# 31 "/usr/include/bits/types.h" 3
typedef unsigned char __u_char; 
# 32
typedef unsigned short __u_short; 
# 33
typedef unsigned __u_int; 
# 34
typedef unsigned long __u_long; 
# 37
typedef signed char __int8_t; 
# 38
typedef unsigned char __uint8_t; 
# 39
typedef signed short __int16_t; 
# 40
typedef unsigned short __uint16_t; 
# 41
typedef signed int __int32_t; 
# 42
typedef unsigned __uint32_t; 
# 44
typedef signed long __int64_t; 
# 45
typedef unsigned long __uint64_t; 
# 52
typedef __int8_t __int_least8_t; 
# 53
typedef __uint8_t __uint_least8_t; 
# 54
typedef __int16_t __int_least16_t; 
# 55
typedef __uint16_t __uint_least16_t; 
# 56
typedef __int32_t __int_least32_t; 
# 57
typedef __uint32_t __uint_least32_t; 
# 58
typedef __int64_t __int_least64_t; 
# 59
typedef __uint64_t __uint_least64_t; 
# 63
typedef long __quad_t; 
# 64
typedef unsigned long __u_quad_t; 
# 72
typedef long __intmax_t; 
# 73
typedef unsigned long __uintmax_t; 
# 145 "/usr/include/bits/types.h" 3
typedef unsigned long __dev_t; 
# 146
typedef unsigned __uid_t; 
# 147
typedef unsigned __gid_t; 
# 148
typedef unsigned long __ino_t; 
# 149
typedef unsigned long __ino64_t; 
# 150
typedef unsigned __mode_t; 
# 151
typedef unsigned long __nlink_t; 
# 152
typedef long __off_t; 
# 153
typedef long __off64_t; 
# 154
typedef int __pid_t; 
# 155
typedef struct { int __val[2]; } __fsid_t; 
# 156
typedef long __clock_t; 
# 157
typedef unsigned long __rlim_t; 
# 158
typedef unsigned long __rlim64_t; 
# 159
typedef unsigned __id_t; 
# 160
typedef long __time_t; 
# 161
typedef unsigned __useconds_t; 
# 162
typedef long __suseconds_t; 
# 163
typedef long __suseconds64_t; 
# 165
typedef int __daddr_t; 
# 166
typedef int __key_t; 
# 169
typedef int __clockid_t; 
# 172
typedef void *__timer_t; 
# 175
typedef long __blksize_t; 
# 180
typedef long __blkcnt_t; 
# 181
typedef long __blkcnt64_t; 
# 184
typedef unsigned long __fsblkcnt_t; 
# 185
typedef unsigned long __fsblkcnt64_t; 
# 188
typedef unsigned long __fsfilcnt_t; 
# 189
typedef unsigned long __fsfilcnt64_t; 
# 192
typedef long __fsword_t; 
# 194
typedef long __ssize_t; 
# 197
typedef long __syscall_slong_t; 
# 199
typedef unsigned long __syscall_ulong_t; 
# 203
typedef __off64_t __loff_t; 
# 204
typedef char *__caddr_t; 
# 207
typedef long __intptr_t; 
# 210
typedef unsigned __socklen_t; 
# 215
typedef int __sig_atomic_t; 
# 33 "/usr/include/sys/types.h" 3
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 42
typedef __loff_t loff_t; 
# 47
typedef __ino_t ino_t; 
# 54
typedef __ino64_t ino64_t; 
# 59
typedef __dev_t dev_t; 
# 64
typedef __gid_t gid_t; 
# 69
typedef __mode_t mode_t; 
# 74
typedef __nlink_t nlink_t; 
# 79
typedef __uid_t uid_t; 
# 85
typedef __off_t off_t; 
# 92
typedef __off64_t off64_t; 
# 97
typedef __pid_t pid_t; 
# 103
typedef __id_t id_t; 
# 108
typedef __ssize_t ssize_t; 
# 114
typedef __daddr_t daddr_t; 
# 115
typedef __caddr_t caddr_t; 
# 121
typedef __key_t key_t; 
# 7 "/usr/include/bits/types/clock_t.h" 3
typedef __clock_t clock_t; 
# 7 "/usr/include/bits/types/clockid_t.h" 3
typedef __clockid_t clockid_t; 
# 10 "/usr/include/bits/types/time_t.h" 3
typedef __time_t time_t; 
# 7 "/usr/include/bits/types/timer_t.h" 3
typedef __timer_t timer_t; 
# 134 "/usr/include/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 138
typedef __suseconds_t suseconds_t; 
# 148 "/usr/include/sys/types.h" 3
typedef unsigned long ulong; 
# 149
typedef unsigned short ushort; 
# 150
typedef unsigned uint; 
# 24 "/usr/include/bits/stdint-intn.h" 3
typedef __int8_t int8_t; 
# 25
typedef __int16_t int16_t; 
# 26
typedef __int32_t int32_t; 
# 27
typedef __int64_t int64_t; 
# 158 "/usr/include/sys/types.h" 3
typedef __uint8_t u_int8_t; 
# 159
typedef __uint16_t u_int16_t; 
# 160
typedef __uint32_t u_int32_t; 
# 161
typedef __uint64_t u_int64_t; 
# 164
typedef long register_t __attribute((__mode__(__word__))); 
# 34 "/usr/include/bits/byteswap.h" 3
static inline __uint16_t __bswap_16(__uint16_t __bsx) 
# 35
{ 
# 37
return __builtin_bswap16(__bsx); 
# 41
} 
# 49
static inline __uint32_t __bswap_32(__uint32_t __bsx) 
# 50
{ 
# 52
return __builtin_bswap32(__bsx); 
# 56
} 
# 70 "/usr/include/bits/byteswap.h" 3
__extension__ static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 71
{ 
# 73
return __builtin_bswap64(__bsx); 
# 77
} 
# 33 "/usr/include/bits/uintn-identity.h" 3
static inline __uint16_t __uint16_identity(__uint16_t __x) 
# 34
{ 
# 35
return __x; 
# 36
} 
# 39
static inline __uint32_t __uint32_identity(__uint32_t __x) 
# 40
{ 
# 41
return __x; 
# 42
} 
# 45
static inline __uint64_t __uint64_identity(__uint64_t __x) 
# 46
{ 
# 47
return __x; 
# 48
} 
# 8 "/usr/include/bits/types/__sigset_t.h" 3
typedef 
# 6
struct { 
# 7
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 8
} __sigset_t; 
# 7 "/usr/include/bits/types/sigset_t.h" 3
typedef __sigset_t sigset_t; 
# 8 "/usr/include/bits/types/struct_timeval.h" 3
struct timeval { 
# 14
__time_t tv_sec; 
# 15
__suseconds_t tv_usec; 
# 17
}; 
# 11 "/usr/include/bits/types/struct_timespec.h" 3
struct timespec { 
# 16
__time_t tv_sec; 
# 21
__syscall_slong_t tv_nsec; 
# 31 "/usr/include/bits/types/struct_timespec.h" 3
}; 
# 49 "/usr/include/sys/select.h" 3
typedef long __fd_mask; 
# 70 "/usr/include/sys/select.h" 3
typedef 
# 60
struct { 
# 64
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 70
} fd_set; 
# 77
typedef __fd_mask fd_mask; 
# 91 "/usr/include/sys/select.h" 3
extern "C" {
# 102 "/usr/include/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 127 "/usr/include/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 153 "/usr/include/sys/select.h" 3
}
# 185 "/usr/include/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 192
typedef __blkcnt_t blkcnt_t; 
# 196
typedef __fsblkcnt_t fsblkcnt_t; 
# 200
typedef __fsfilcnt_t fsfilcnt_t; 
# 219 "/usr/include/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 220
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 221
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 33 "/usr/include/bits/atomic_wide_counter.h" 3
typedef 
# 26
union { 
# 27
__extension__ unsigned long long __value64; 
# 29
struct { 
# 30
unsigned __low; 
# 31
unsigned __high; 
# 32
} __value32; 
# 33
} __atomic_wide_counter; 
# 55 "/usr/include/bits/thread-shared-types.h" 3
typedef 
# 51
struct __pthread_internal_list { 
# 53
__pthread_internal_list *__prev; 
# 54
__pthread_internal_list *__next; 
# 55
} __pthread_list_t; 
# 60
typedef 
# 57
struct __pthread_internal_slist { 
# 59
__pthread_internal_slist *__next; 
# 60
} __pthread_slist_t; 
# 22 "/usr/include/bits/struct_mutex.h" 3
struct __pthread_mutex_s { 
# 24
int __lock; 
# 25
unsigned __count; 
# 26
int __owner; 
# 28
unsigned __nusers; 
# 32
int __kind; 
# 34
short __spins; 
# 35
short __elision; 
# 36
__pthread_list_t __list; 
# 53 "/usr/include/bits/struct_mutex.h" 3
}; 
# 23 "/usr/include/bits/struct_rwlock.h" 3
struct __pthread_rwlock_arch_t { 
# 25
unsigned __readers; 
# 26
unsigned __writers; 
# 27
unsigned __wrphase_futex; 
# 28
unsigned __writers_futex; 
# 29
unsigned __pad3; 
# 30
unsigned __pad4; 
# 32
int __cur_writer; 
# 33
int __shared; 
# 34
signed char __rwelision; 
# 39
unsigned char __pad1[7]; 
# 42
unsigned long __pad2; 
# 45
unsigned __flags; 
# 55 "/usr/include/bits/struct_rwlock.h" 3
}; 
# 94 "/usr/include/bits/thread-shared-types.h" 3
struct __pthread_cond_s { 
# 96
__atomic_wide_counter __wseq; 
# 97
__atomic_wide_counter __g1_start; 
# 98
unsigned __g_refs[2]; 
# 99
unsigned __g_size[2]; 
# 100
unsigned __g1_orig_size; 
# 101
unsigned __wrefs; 
# 102
unsigned __g_signals[2]; 
# 103
}; 
# 105
typedef unsigned __tss_t; 
# 106
typedef unsigned long __thrd_t; 
# 111
typedef 
# 109
struct { 
# 110
int __data; 
# 111
} __once_flag; 
# 27 "/usr/include/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 36
typedef 
# 33
union { 
# 34
char __size[4]; 
# 35
int __align; 
# 36
} pthread_mutexattr_t; 
# 45
typedef 
# 42
union { 
# 43
char __size[4]; 
# 44
int __align; 
# 45
} pthread_condattr_t; 
# 49
typedef unsigned pthread_key_t; 
# 53
typedef int pthread_once_t; 
# 56
union pthread_attr_t { 
# 58
char __size[56]; 
# 59
long __align; 
# 60
}; 
# 62
typedef pthread_attr_t pthread_attr_t; 
# 72
typedef 
# 68
union { 
# 69
__pthread_mutex_s __data; 
# 70
char __size[40]; 
# 71
long __align; 
# 72
} pthread_mutex_t; 
# 80
typedef 
# 76
union { 
# 77
__pthread_cond_s __data; 
# 78
char __size[48]; 
# 79
__extension__ long long __align; 
# 80
} pthread_cond_t; 
# 91
typedef 
# 87
union { 
# 88
__pthread_rwlock_arch_t __data; 
# 89
char __size[56]; 
# 90
long __align; 
# 91
} pthread_rwlock_t; 
# 97
typedef 
# 94
union { 
# 95
char __size[8]; 
# 96
long __align; 
# 97
} pthread_rwlockattr_t; 
# 103
typedef volatile int pthread_spinlock_t; 
# 112
typedef 
# 109
union { 
# 110
char __size[32]; 
# 111
long __align; 
# 112
} pthread_barrier_t; 
# 118
typedef 
# 115
union { 
# 116
char __size[4]; 
# 117
int __align; 
# 118
} pthread_barrierattr_t; 
# 230 "/usr/include/sys/types.h" 3
}
# 402 "/usr/include/stdlib.h" 3
extern long random() noexcept(true); 
# 405
extern void srandom(unsigned __seed) noexcept(true); 
# 411
extern char *initstate(unsigned __seed, char * __statebuf, ::size_t __statelen) noexcept(true)
# 412
 __attribute((__nonnull__(2))); 
# 416
extern char *setstate(char * __statebuf) noexcept(true) __attribute((__nonnull__(1))); 
# 424
struct random_data { 
# 426
int32_t *fptr; 
# 427
int32_t *rptr; 
# 428
int32_t *state; 
# 429
int rand_type; 
# 430
int rand_deg; 
# 431
int rand_sep; 
# 432
int32_t *end_ptr; 
# 433
}; 
# 435
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) noexcept(true)
# 436
 __attribute((__nonnull__(1, 2))); 
# 438
extern int srandom_r(unsigned __seed, random_data * __buf) noexcept(true)
# 439
 __attribute((__nonnull__(2))); 
# 441
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, ::size_t __statelen, random_data *__restrict__ __buf) noexcept(true)
# 444
 __attribute((__nonnull__(2, 4))); 
# 446
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) noexcept(true)
# 448
 __attribute((__nonnull__(1, 2))); 
# 454
extern int rand() noexcept(true); 
# 456
extern void srand(unsigned __seed) noexcept(true); 
# 460
extern int rand_r(unsigned * __seed) noexcept(true); 
# 468
extern double drand48() noexcept(true); 
# 469
extern double erand48(unsigned short  __xsubi[3]) noexcept(true) __attribute((__nonnull__(1))); 
# 472
extern long lrand48() noexcept(true); 
# 473
extern long nrand48(unsigned short  __xsubi[3]) noexcept(true)
# 474
 __attribute((__nonnull__(1))); 
# 477
extern long mrand48() noexcept(true); 
# 478
extern long jrand48(unsigned short  __xsubi[3]) noexcept(true)
# 479
 __attribute((__nonnull__(1))); 
# 482
extern void srand48(long __seedval) noexcept(true); 
# 483
extern unsigned short *seed48(unsigned short  __seed16v[3]) noexcept(true)
# 484
 __attribute((__nonnull__(1))); 
# 485
extern void lcong48(unsigned short  __param[7]) noexcept(true) __attribute((__nonnull__(1))); 
# 491
struct drand48_data { 
# 493
unsigned short __x[3]; 
# 494
unsigned short __old_x[3]; 
# 495
unsigned short __c; 
# 496
unsigned short __init; 
# 497
__extension__ unsigned long long __a; 
# 499
}; 
# 502
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) noexcept(true)
# 503
 __attribute((__nonnull__(1, 2))); 
# 504
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) noexcept(true)
# 506
 __attribute((__nonnull__(1, 2))); 
# 509
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 511
 __attribute((__nonnull__(1, 2))); 
# 512
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 515
 __attribute((__nonnull__(1, 2))); 
# 518
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 520
 __attribute((__nonnull__(1, 2))); 
# 521
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 524
 __attribute((__nonnull__(1, 2))); 
# 527
extern int srand48_r(long __seedval, drand48_data * __buffer) noexcept(true)
# 528
 __attribute((__nonnull__(2))); 
# 530
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) noexcept(true)
# 531
 __attribute((__nonnull__(1, 2))); 
# 533
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) noexcept(true)
# 535
 __attribute((__nonnull__(1, 2))); 
# 538
extern __uint32_t arc4random() noexcept(true); 
# 542
extern void arc4random_buf(void * __buf, ::size_t __size) noexcept(true)
# 543
 __attribute((__nonnull__(1))); 
# 547
extern __uint32_t arc4random_uniform(__uint32_t __upper_bound) noexcept(true); 
# 553
extern void *malloc(::size_t __size) noexcept(true) __attribute((__malloc__))
# 554
 __attribute((__alloc_size__(1))); 
# 556
extern void *calloc(::size_t __nmemb, ::size_t __size) noexcept(true)
# 557
 __attribute((__malloc__)) __attribute((__alloc_size__(1, 2))); 
# 564
extern void *realloc(void * __ptr, ::size_t __size) noexcept(true)
# 565
 __attribute((__warn_unused_result__)) __attribute((__alloc_size__(2))); 
# 568
extern void free(void * __ptr) noexcept(true); 
# 576
extern void *reallocarray(void * __ptr, ::size_t __nmemb, ::size_t __size) noexcept(true)
# 577
 __attribute((__warn_unused_result__))
# 578
 __attribute((__alloc_size__(2, 3)))
# 579
 __attribute((__malloc__(__builtin_free, 1))); 
# 582
extern void *reallocarray(void * __ptr, ::size_t __nmemb, ::size_t __size) noexcept(true)
# 583
 __attribute((__malloc__(reallocarray, 1))); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(::size_t __size) noexcept(true); 
# 38
}
# 593 "/usr/include/stdlib.h" 3
extern void *valloc(::size_t __size) noexcept(true) __attribute((__malloc__))
# 594
 __attribute((__alloc_size__(1))); 
# 599
extern int posix_memalign(void ** __memptr, ::size_t __alignment, ::size_t __size) noexcept(true)
# 600
 __attribute((__nonnull__(1))); 
# 605
extern void *aligned_alloc(::size_t __alignment, ::size_t __size) noexcept(true)
# 606
 __attribute((__malloc__)) __attribute((__alloc_align__(1 )))
# 607
 __attribute((__alloc_size__(2))); 
# 611
extern void abort() noexcept(true) __attribute((__noreturn__)); 
# 615
extern int atexit(void (* __func)(void)) noexcept(true) __attribute((__nonnull__(1))); 
# 620
extern "C++" int at_quick_exit(void (* __func)(void)) noexcept(true) __asm__("at_quick_exit")
# 621
 __attribute((__nonnull__(1))); 
# 630 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) noexcept(true)
# 631
 __attribute((__nonnull__(1))); 
# 637
extern void exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 643
extern void quick_exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 649
extern void _Exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 654
extern char *getenv(const char * __name) noexcept(true) __attribute((__nonnull__(1))); 
# 659
extern char *secure_getenv(const char * __name) noexcept(true)
# 660
 __attribute((__nonnull__(1))); 
# 667
extern int putenv(char * __string) noexcept(true) __attribute((__nonnull__(1))); 
# 673
extern int setenv(const char * __name, const char * __value, int __replace) noexcept(true)
# 674
 __attribute((__nonnull__(2))); 
# 677
extern int unsetenv(const char * __name) noexcept(true) __attribute((__nonnull__(1))); 
# 684
extern int clearenv() noexcept(true); 
# 695 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) noexcept(true) __attribute((__nonnull__(1))); 
# 708 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))); 
# 718 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))); 
# 730 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))); 
# 740 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 741
 __attribute((__nonnull__(1))); 
# 751 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) noexcept(true) __attribute((__nonnull__(1))); 
# 762 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 772 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 782 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 783
 __attribute((__nonnull__(1))); 
# 794 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 795
 __attribute((__nonnull__(1))); 
# 804 "/usr/include/stdlib.h" 3
extern int system(const char * __command); 
# 810
extern char *canonicalize_file_name(const char * __name) noexcept(true)
# 811
 __attribute((__nonnull__(1))) __attribute((__malloc__))
# 812
 __attribute((__malloc__(__builtin_free, 1))); 
# 821 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) noexcept(true); 
# 829
typedef int (*__compar_fn_t)(const void *, const void *); 
# 832
typedef __compar_fn_t comparison_fn_t; 
# 836
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 841
extern void *bsearch(const void * __key, const void * __base, ::size_t __nmemb, ::size_t __size, __compar_fn_t __compar)
# 843
 __attribute((__nonnull__(1, 2, 5))); 
# 851
extern void qsort(void * __base, ::size_t __nmemb, ::size_t __size, __compar_fn_t __compar)
# 852
 __attribute((__nonnull__(1, 4))); 
# 854
extern void qsort_r(void * __base, ::size_t __nmemb, ::size_t __size, __compar_d_fn_t __compar, void * __arg)
# 856
 __attribute((__nonnull__(1, 4))); 
# 861
extern int abs(int __x) noexcept(true) __attribute((const)); 
# 862
extern long labs(long __x) noexcept(true) __attribute((const)); 
# 865
__extension__ extern long long llabs(long long __x) noexcept(true)
# 866
 __attribute((const)); 
# 873
extern div_t div(int __numer, int __denom) noexcept(true)
# 874
 __attribute((const)); 
# 875
extern ldiv_t ldiv(long __numer, long __denom) noexcept(true)
# 876
 __attribute((const)); 
# 879
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) noexcept(true)
# 881
 __attribute((const)); 
# 893 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 894
 __attribute((__nonnull__(3, 4))); 
# 899
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 900
 __attribute((__nonnull__(3, 4))); 
# 905
extern char *gcvt(double __value, int __ndigit, char * __buf) noexcept(true)
# 906
 __attribute((__nonnull__(3))); 
# 911
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 913
 __attribute((__nonnull__(3, 4))); 
# 914
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 916
 __attribute((__nonnull__(3, 4))); 
# 917
extern char *qgcvt(long double __value, int __ndigit, char * __buf) noexcept(true)
# 918
 __attribute((__nonnull__(3))); 
# 923
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) noexcept(true)
# 925
 __attribute((__nonnull__(3, 4, 5))); 
# 926
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) noexcept(true)
# 928
 __attribute((__nonnull__(3, 4, 5))); 
# 930
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) noexcept(true)
# 933
 __attribute((__nonnull__(3, 4, 5))); 
# 934
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) noexcept(true)
# 937
 __attribute((__nonnull__(3, 4, 5))); 
# 943
extern int mblen(const char * __s, ::size_t __n) noexcept(true); 
# 946
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, ::size_t __n) noexcept(true); 
# 950
extern int wctomb(char * __s, wchar_t __wchar) noexcept(true); 
# 954
extern ::size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, ::size_t __n) noexcept(true)
# 956
 __attribute((__access__(__read_only__ , 2 ))); 
# 958
extern ::size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, ::size_t __n) noexcept(true)
# 961
 __attribute((__access__(__write_only__ , 1 , 3 )))
# 962
 __attribute((__access__(__read_only__ , 2 ))); 
# 969
extern int rpmatch(const char * __response) noexcept(true) __attribute((__nonnull__(1))); 
# 980 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) noexcept(true)
# 983
 __attribute((__nonnull__(1, 2, 3))); 
# 991
extern int posix_openpt(int __oflag); 
# 999
extern int grantpt(int __fd) noexcept(true); 
# 1003
extern int unlockpt(int __fd) noexcept(true); 
# 1008
extern char *ptsname(int __fd) noexcept(true); 
# 1015
extern int ptsname_r(int __fd, char * __buf, ::size_t __buflen) noexcept(true)
# 1016
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 2 , 3 ))); 
# 1019
extern int getpt(); 
# 1026
extern int getloadavg(double  __loadavg[], int __nelem) noexcept(true)
# 1027
 __attribute((__nonnull__(1))); 
# 1048 "/usr/include/stdlib.h" 3
}
# 46 "/usr/include/c++/12.2.1/bits/std_abs.h" 3
extern "C++" {
# 48
namespace std __attribute((__visibility__("default"))) { 
# 52
using ::abs;
# 56
inline long abs(long __i) { return __builtin_labs(__i); } 
# 61
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 71 "/usr/include/c++/12.2.1/bits/std_abs.h" 3
constexpr double abs(double __x) 
# 72
{ return __builtin_fabs(__x); } 
# 75
constexpr float abs(float __x) 
# 76
{ return __builtin_fabsf(__x); } 
# 79
constexpr long double abs(long double __x) 
# 80
{ return __builtin_fabsl(__x); } 
# 108 "/usr/include/c++/12.2.1/bits/std_abs.h" 3
}
# 109
}
# 121 "/usr/include/c++/12.2.1/cstdlib" 3
extern "C++" {
# 123
namespace std __attribute((__visibility__("default"))) { 
# 127
using ::div_t;
# 128
using ::ldiv_t;
# 130
using ::abort;
# 132
using ::aligned_alloc;
# 134
using ::atexit;
# 137
using ::at_quick_exit;
# 140
using ::atof;
# 141
using ::atoi;
# 142
using ::atol;
# 143
using ::bsearch;
# 144
using ::calloc;
# 145
using ::div;
# 146
using ::exit;
# 147
using ::free;
# 148
using ::getenv;
# 149
using ::labs;
# 150
using ::ldiv;
# 151
using ::malloc;
# 153
using ::mblen;
# 154
using ::mbstowcs;
# 155
using ::mbtowc;
# 157
using ::qsort;
# 160
using ::quick_exit;
# 163
using ::rand;
# 164
using ::realloc;
# 165
using ::srand;
# 166
using ::strtod;
# 167
using ::strtol;
# 168
using ::strtoul;
# 169
using ::system;
# 171
using ::wcstombs;
# 172
using ::wctomb;
# 177
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 182
}
# 195 "/usr/include/c++/12.2.1/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 200
using ::lldiv_t;
# 206
using ::_Exit;
# 210
using ::llabs;
# 213
inline lldiv_t div(long long __n, long long __d) 
# 214
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 216
using ::lldiv;
# 227 "/usr/include/c++/12.2.1/cstdlib" 3
using ::atoll;
# 228
using ::strtoll;
# 229
using ::strtoull;
# 231
using ::strtof;
# 232
using ::strtold;
# 235
}
# 237
namespace std { 
# 240
using __gnu_cxx::lldiv_t;
# 242
using __gnu_cxx::_Exit;
# 244
using __gnu_cxx::llabs;
# 245
using __gnu_cxx::div;
# 246
using __gnu_cxx::lldiv;
# 248
using __gnu_cxx::atoll;
# 249
using __gnu_cxx::strtof;
# 250
using __gnu_cxx::strtoll;
# 251
using __gnu_cxx::strtoull;
# 252
using __gnu_cxx::strtold;
# 253
}
# 257
}
# 38 "/usr/include/c++/12.2.1/stdlib.h" 3
using std::abort;
# 39
using std::atexit;
# 40
using std::exit;
# 43
using std::at_quick_exit;
# 46
using std::quick_exit;
# 54
using std::abs;
# 55
using std::atof;
# 56
using std::atoi;
# 57
using std::atol;
# 58
using std::bsearch;
# 59
using std::calloc;
# 60
using std::div;
# 61
using std::free;
# 62
using std::getenv;
# 63
using std::labs;
# 64
using std::ldiv;
# 65
using std::malloc;
# 67
using std::mblen;
# 68
using std::mbstowcs;
# 69
using std::mbtowc;
# 71
using std::qsort;
# 72
using std::rand;
# 73
using std::realloc;
# 74
using std::srand;
# 75
using std::strtod;
# 76
using std::strtol;
# 77
using std::strtoul;
# 78
using std::system;
# 80
using std::wcstombs;
# 81
using std::wctomb;
# 179 "/opt/cuda/include/cuda_device_runtime_api.h"
extern "C" {
# 186
__attribute__((unused)) extern cudaError_t __cudaDeviceSynchronizeDeprecationAvoidance(); 
# 235 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 236
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetLimit(::size_t * pValue, cudaLimit limit); 
# 237
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 238
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 239
__attribute__((unused)) extern cudaError_t __cudaCDP2GetLastError(); 
# 240
__attribute__((unused)) extern cudaError_t __cudaCDP2PeekAtLastError(); 
# 241
__attribute__((unused)) extern const char *__cudaCDP2GetErrorString(cudaError_t error); 
# 242
__attribute__((unused)) extern const char *__cudaCDP2GetErrorName(cudaError_t error); 
# 243
__attribute__((unused)) extern cudaError_t __cudaCDP2GetDeviceCount(int * count); 
# 244
__attribute__((unused)) extern cudaError_t __cudaCDP2GetDevice(int * device); 
# 245
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 246
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamDestroy(cudaStream_t stream); 
# 247
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 248
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 249
__attribute__((unused)) extern cudaError_t __cudaCDP2EventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 250
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecord(cudaEvent_t event, cudaStream_t stream); 
# 251
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 252
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 253
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 254
__attribute__((unused)) extern cudaError_t __cudaCDP2EventDestroy(cudaEvent_t event); 
# 255
__attribute__((unused)) extern cudaError_t __cudaCDP2FuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 256
__attribute__((unused)) extern cudaError_t __cudaCDP2Free(void * devPtr); 
# 257
__attribute__((unused)) extern cudaError_t __cudaCDP2Malloc(void ** devPtr, ::size_t size); 
# 258
__attribute__((unused)) extern cudaError_t __cudaCDP2MemcpyAsync(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 259
__attribute__((unused)) extern cudaError_t __cudaCDP2MemcpyAsync_ptsz(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 260
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy2DAsync(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 261
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy2DAsync_ptsz(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 262
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 263
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 264
__attribute__((unused)) extern cudaError_t __cudaCDP2MemsetAsync(void * devPtr, int value, ::size_t count, cudaStream_t stream); 
# 265
__attribute__((unused)) extern cudaError_t __cudaCDP2MemsetAsync_ptsz(void * devPtr, int value, ::size_t count, cudaStream_t stream); 
# 266
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset2DAsync(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream); 
# 267
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset2DAsync_ptsz(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream); 
# 268
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 269
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 270
__attribute__((unused)) extern cudaError_t __cudaCDP2RuntimeGetVersion(int * runtimeVersion); 
# 271
__attribute__((unused)) extern void *__cudaCDP2GetParameterBuffer(::size_t alignment, ::size_t size); 
# 272
__attribute__((unused)) extern void *__cudaCDP2GetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 273
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 274
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 275
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 276
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 277
__attribute__((unused)) extern cudaError_t __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSmemSize); 
# 278
__attribute__((unused)) extern cudaError_t __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSmemSize, unsigned flags); 
# 281
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 300 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaGraphExec_t cudaGetCurrentGraphExec() 
# 301
{int volatile ___ = 1;
# 305
::exit(___);}
#if 0
# 301
{ 
# 302
unsigned long long current_graph_exec; 
# 303
__asm__("mov.u64 %0, %%current_graph_exec;" : "=l" (current_graph_exec) :); 
# 304
return (cudaGraphExec_t)current_graph_exec; 
# 305
} 
#endif
# 323 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void cudaTriggerProgrammaticLaunchCompletion() 
# 324
{int volatile ___ = 1;
# 326
::exit(___);}
#if 0
# 324
{ 
# 325
__asm__ volatile("griddepcontrol.launch_dependents;" : :); 
# 326
} 
#endif
# 339 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void cudaGridDependencySynchronize() 
# 340
{int volatile ___ = 1;
# 342
::exit(___);}
#if 0
# 340
{ 
# 341
__asm__ volatile("griddepcontrol.wait;" : : : "memory"); 
# 342
} 
#endif
# 346 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 347
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 348
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 349
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 350
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 572 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void *cudaGetParameterBuffer(::size_t alignment, ::size_t size) 
# 573
{int volatile ___ = 1;(void)alignment;(void)size;
# 575
::exit(___);}
#if 0
# 573
{ 
# 574
return __cudaCDP2GetParameterBuffer(alignment, size); 
# 575
} 
#endif
# 608 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void *cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize) 
# 609
{int volatile ___ = 1;(void)func;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;
# 611
::exit(___);}
#if 0
# 609
{ 
# 610
return __cudaCDP2GetParameterBufferV2(func, gridDimension, blockDimension, sharedMemSize); 
# 611
} 
#endif
# 618 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
# 619
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;
# 621
::exit(___);}
#if 0
# 619
{ 
# 620
return __cudaCDP2LaunchDevice_ptsz(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
# 621
} 
#endif
# 623 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream) 
# 624
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;
# 626
::exit(___);}
#if 0
# 624
{ 
# 625
return __cudaCDP2LaunchDeviceV2_ptsz(parameterBuffer, stream); 
# 626
} 
#endif
# 658 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
# 659
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;
# 661
::exit(___);}
#if 0
# 659
{ 
# 660
return __cudaCDP2LaunchDevice(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
# 661
} 
#endif
# 663 "/opt/cuda/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream) 
# 664
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;
# 666
::exit(___);}
#if 0
# 664
{ 
# 665
return __cudaCDP2LaunchDeviceV2(parameterBuffer, stream); 
# 666
} 
#endif
# 720 "/opt/cuda/include/cuda_device_runtime_api.h"
}
# 722
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, ::size_t size); 
# 723
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 724
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, ::size_t dynamicSmemSize); 
# 725
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, ::size_t dynamicSmemSize, unsigned flags); 
# 271 "/opt/cuda/include/cuda_runtime_api.h"
extern "C" {
# 311 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset(); 
# 333 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize(); 
# 419 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, ::size_t value); 
# 455 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(::size_t * pValue, cudaLimit limit); 
# 478 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(::size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
# 512 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 549 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 593 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 624 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 668 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 695 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 725 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 775 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 818 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 862 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 928 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 966 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 998 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
# 1041 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 1067 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1116 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, ::size_t value); 
# 1149 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(::size_t * pValue, cudaLimit limit); 
# 1185 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1232 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1297 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError(); 
# 1348 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError(); 
# 1364 "/opt/cuda/include/cuda_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error); 
# 1380 "/opt/cuda/include/cuda_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error); 
# 1409 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1714 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties_v2(cudaDeviceProp * prop, int device); 
# 1916 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1934 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
# 1958 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
# 1978 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
# 2040 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
# 2080 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 2102 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 2131 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaInitDevice(int device, unsigned deviceFlags, unsigned flags); 
# 2177 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device); 
# 2199 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device); 
# 2230 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 2296 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2341 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2381 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2413 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2459 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2486 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2511 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2548 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long * streamId); 
# 2563 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaCtxResetPersistingL2Cache(); 
# 2583 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
# 2604 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
# 2628 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
# 2662 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2693 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
# 2701
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2768 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2792 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2817 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2901 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, ::size_t length = 0, unsigned flags = 4); 
# 2940 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 2991 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 3019 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 3057 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 3105 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned long long * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, ::size_t * numDependencies_out = 0); 
# 3137 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, ::size_t numDependencies, unsigned flags = 0); 
# 3174 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 3211 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 3251 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 3298 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
# 3330 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 3360 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 3389 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 3433 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3614 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3669 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 3729 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 3753 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 3907 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 3990 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 4066 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 4089 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 4156 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, ::size_t sharedMem, cudaStream_t stream); 
# 4218 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernelExC(const cudaLaunchConfig_t * config, const void * func, void ** args); 
# 4275 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, ::size_t sharedMem, cudaStream_t stream); 
# 4376 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 4421 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 4476 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 4509 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 4546 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 4570 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 4594 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 4660 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 4717 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSMemSize); 
# 4746 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(::size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
# 4791 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSMemSize, unsigned flags); 
# 4826 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxPotentialClusterSize(int * clusterSize, const void * func, const cudaLaunchConfig_t * launchConfig); 
# 4865 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveClusters(int * numClusters, const void * func, const cudaLaunchConfig_t * launchConfig); 
# 4985 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocManaged(void ** devPtr, ::size_t size, unsigned flags = 1); 
# 5018 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, ::size_t size); 
# 5051 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void ** ptr, ::size_t size); 
# 5094 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void ** devPtr, ::size_t * pitch, ::size_t width, ::size_t height); 
# 5146 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, ::size_t width, ::size_t height = 0, unsigned flags = 0); 
# 5184 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr); 
# 5207 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void * ptr); 
# 5230 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 5253 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 5319 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void ** pHost, ::size_t size, unsigned flags); 
# 5416 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void * ptr, ::size_t size, unsigned flags); 
# 5439 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void * ptr); 
# 5484 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 5506 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 5545 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 5690 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 5835 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 5868 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 5973 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 6005 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 6123 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 6150 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 6184 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(::size_t * free, ::size_t * total); 
# 6210 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 6239 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
# 6262 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
# 6286 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
# 6314 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
# 6344 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
# 6389 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 6424 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, ::size_t count); 
# 6473 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 6523 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 6573 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void * dst, ::size_t dpitch, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 6620 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, ::size_t wOffsetDst, ::size_t hOffsetDst, cudaArray_const_t src, ::size_t wOffsetSrc, ::size_t hOffsetSrc, ::size_t width, ::size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 6663 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, ::size_t count, ::size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 6706 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, ::size_t count, ::size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 6763 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6798 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, ::size_t count, cudaStream_t stream = 0); 
# 6861 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6919 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6976 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, ::size_t dpitch, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7027 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7078 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7107 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void * devPtr, int value, ::size_t count); 
# 7141 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height); 
# 7187 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 7223 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, ::size_t count, cudaStream_t stream = 0); 
# 7264 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream = 0); 
# 7317 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 7345 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 7372 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(::size_t * size, const void * symbol); 
# 7442 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, ::size_t count, int dstDevice, cudaStream_t stream = 0); 
# 7558 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemAdvise(const void * devPtr, ::size_t count, cudaMemoryAdvise advice, int device); 
# 7617 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttribute(void * data, ::size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, ::size_t count); 
# 7656 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttributes(void ** data, ::size_t * dataSizes, cudaMemRangeAttribute * attributes, ::size_t numAttributes, const void * devPtr, ::size_t count); 
# 7716 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 7758 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t count, cudaMemcpyKind kind); 
# 7801 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, ::size_t wOffsetDst, ::size_t hOffsetDst, cudaArray_const_t src, ::size_t wOffsetSrc, ::size_t hOffsetSrc, ::size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 7852 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7902 "/opt/cuda/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7971 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocAsync(void ** devPtr, ::size_t size, cudaStream_t hStream); 
# 7997 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
# 8022 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, ::size_t minBytesToKeep); 
# 8066 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 8114 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 8129 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, ::size_t count); 
# 8142 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
# 8162 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
# 8184 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool); 
# 8220 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocFromPoolAsync(void ** ptr, ::size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
# 8245 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8272 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8295 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
# 8324 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
# 8477 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 8518 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 8560 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 8582 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 8646 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 8681 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 8720 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8755 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8787 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, ::size_t * size, cudaGraphicsResource_t resource); 
# 8825 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 8854 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 8889 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 8919 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 9143 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 9163 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 9183 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 9203 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 9224 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 9269 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 9289 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 9308 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 9342 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 9371 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 9418 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 9515 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 9548 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 9573 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 9593 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
# 9616 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
# 9640 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
# 9690 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 9749 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 9818 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 9886 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 9918 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 9944 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 9983 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 10029 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 10075 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 10122 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 10145 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 10168 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 10209 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 10232 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 10255 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 10295 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, cudaGraph_t childGraph); 
# 10322 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 10359 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies); 
# 10402 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, cudaEvent_t event); 
# 10429 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10456 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10502 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, cudaEvent_t event); 
# 10529 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10556 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10605 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10638 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
# 10665 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10714 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10747 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
# 10774 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10851 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
# 10878 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
# 10938 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, ::size_t numDependencies, void * dptr); 
# 10962 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
# 10990 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGraphMemTrim(int device); 
# 11027 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11061 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11089 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 11117 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 11148 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 11179 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, ::size_t * numNodes); 
# 11210 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, ::size_t * pNumRootNodes); 
# 11244 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, ::size_t * numEdges); 
# 11275 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, ::size_t * pNumDependencies); 
# 11307 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, ::size_t * pNumDependentNodes); 
# 11338 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, ::size_t numDependencies); 
# 11369 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, ::size_t numDependencies); 
# 11399 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 11461 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags = 0); 
# 11532 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags = 0); 
# 11637 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams * instantiateParams); 
# 11662 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long * flags); 
# 11713 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 11763 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 11818 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 11881 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind); 
# 11942 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 11996 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 12035 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 12081 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
# 12125 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12169 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12216 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 12263 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 12303 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
# 12337 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
# 12422 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo * resultInfo); 
# 12447 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12478 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12501 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 12522 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 12541 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
# 12577 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
# 12601 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
# 12629 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
# 12657 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
# 12682 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
# 12760 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult * driverStatus = 0); 
# 12768 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 12955 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
# 12971 "/opt/cuda/include/cuda_runtime_api.h"
extern cudaError_t cudaGetKernel(cudaKernel_t * kernelPtr, const void * entryFuncAddr); 
# 13132 "/opt/cuda/include/cuda_runtime_api.h"
}
# 117 "/opt/cuda/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 118
{ 
# 119
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 120
} 
# 122
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 123
{ 
# 124
int e = (((int)sizeof(unsigned short)) * 8); 
# 126
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 127
} 
# 129
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 130
{ 
# 131
int e = (((int)sizeof(unsigned short)) * 8); 
# 133
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 134
} 
# 136
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 137
{ 
# 138
int e = (((int)sizeof(unsigned short)) * 8); 
# 140
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 141
} 
# 143
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 144
{ 
# 145
int e = (((int)sizeof(unsigned short)) * 8); 
# 147
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 148
} 
# 150
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 151
{ 
# 152
int e = (((int)sizeof(char)) * 8); 
# 157
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 159
} 
# 161
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 162
{ 
# 163
int e = (((int)sizeof(signed char)) * 8); 
# 165
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 166
} 
# 168
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 169
{ 
# 170
int e = (((int)sizeof(unsigned char)) * 8); 
# 172
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 173
} 
# 175
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 176
{ 
# 177
int e = (((int)sizeof(signed char)) * 8); 
# 179
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 180
} 
# 182
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 183
{ 
# 184
int e = (((int)sizeof(unsigned char)) * 8); 
# 186
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 187
} 
# 189
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 190
{ 
# 191
int e = (((int)sizeof(signed char)) * 8); 
# 193
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 194
} 
# 196
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 197
{ 
# 198
int e = (((int)sizeof(unsigned char)) * 8); 
# 200
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 201
} 
# 203
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 204
{ 
# 205
int e = (((int)sizeof(signed char)) * 8); 
# 207
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 208
} 
# 210
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 211
{ 
# 212
int e = (((int)sizeof(unsigned char)) * 8); 
# 214
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 215
} 
# 217
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 218
{ 
# 219
int e = (((int)sizeof(short)) * 8); 
# 221
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 222
} 
# 224
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 225
{ 
# 226
int e = (((int)sizeof(unsigned short)) * 8); 
# 228
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 229
} 
# 231
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 232
{ 
# 233
int e = (((int)sizeof(short)) * 8); 
# 235
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 236
} 
# 238
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 239
{ 
# 240
int e = (((int)sizeof(unsigned short)) * 8); 
# 242
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 243
} 
# 245
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 246
{ 
# 247
int e = (((int)sizeof(short)) * 8); 
# 249
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 250
} 
# 252
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 253
{ 
# 254
int e = (((int)sizeof(unsigned short)) * 8); 
# 256
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 257
} 
# 259
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 260
{ 
# 261
int e = (((int)sizeof(short)) * 8); 
# 263
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 264
} 
# 266
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 267
{ 
# 268
int e = (((int)sizeof(unsigned short)) * 8); 
# 270
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 271
} 
# 273
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 274
{ 
# 275
int e = (((int)sizeof(int)) * 8); 
# 277
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 278
} 
# 280
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 281
{ 
# 282
int e = (((int)sizeof(unsigned)) * 8); 
# 284
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 285
} 
# 287
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 288
{ 
# 289
int e = (((int)sizeof(int)) * 8); 
# 291
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 292
} 
# 294
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 295
{ 
# 296
int e = (((int)sizeof(unsigned)) * 8); 
# 298
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 299
} 
# 301
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 302
{ 
# 303
int e = (((int)sizeof(int)) * 8); 
# 305
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 306
} 
# 308
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 309
{ 
# 310
int e = (((int)sizeof(unsigned)) * 8); 
# 312
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 313
} 
# 315
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 316
{ 
# 317
int e = (((int)sizeof(int)) * 8); 
# 319
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 320
} 
# 322
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 323
{ 
# 324
int e = (((int)sizeof(unsigned)) * 8); 
# 326
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 327
} 
# 389 "/opt/cuda/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 390
{ 
# 391
int e = (((int)sizeof(float)) * 8); 
# 393
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 394
} 
# 396
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 397
{ 
# 398
int e = (((int)sizeof(float)) * 8); 
# 400
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 401
} 
# 403
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 404
{ 
# 405
int e = (((int)sizeof(float)) * 8); 
# 407
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 408
} 
# 410
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 411
{ 
# 412
int e = (((int)sizeof(float)) * 8); 
# 414
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 415
} 
# 417
static inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
# 418
{ 
# 419
int e = (((int)sizeof(char)) * 8); 
# 421
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
# 422
} 
# 424
template< cudaChannelFormatKind > inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 425
{ 
# 426
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 427
} 
# 430
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
# 431
{ 
# 432
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
# 433
} 
# 435
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
# 436
{ 
# 437
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
# 438
} 
# 440
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
# 441
{ 
# 442
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
# 443
} 
# 446
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
# 447
{ 
# 448
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
# 449
} 
# 451
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
# 452
{ 
# 453
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
# 454
} 
# 456
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
# 457
{ 
# 458
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
# 459
} 
# 462
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
# 463
{ 
# 464
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
# 465
} 
# 467
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
# 468
{ 
# 469
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
# 470
} 
# 472
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
# 473
{ 
# 474
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
# 475
} 
# 478
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
# 479
{ 
# 480
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
# 481
} 
# 483
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
# 484
{ 
# 485
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
# 486
} 
# 488
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
# 489
{ 
# 490
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
# 491
} 
# 494
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
# 495
{ 
# 496
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
# 497
} 
# 500
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
# 501
{ 
# 502
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
# 503
} 
# 506
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
# 507
{ 
# 508
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
# 509
} 
# 512
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
# 513
{ 
# 514
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
# 515
} 
# 518
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
# 519
{ 
# 520
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
# 521
} 
# 524
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
# 525
{ 
# 526
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
# 527
} 
# 530
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
# 531
{ 
# 532
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
# 533
} 
# 536
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
# 537
{ 
# 538
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
# 539
} 
# 542
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
# 543
{ 
# 544
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
# 545
} 
# 548
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
# 549
{ 
# 550
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
# 551
} 
# 554
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
# 555
{ 
# 556
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
# 557
} 
# 560
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
# 561
{ 
# 562
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
# 563
} 
# 566
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
# 567
{ 
# 568
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
# 569
} 
# 572
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
# 573
{ 
# 574
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
# 575
} 
# 578
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
# 579
{ 
# 580
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
# 581
} 
# 79 "/opt/cuda/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, ::size_t p, ::size_t xsz, ::size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/opt/cuda/include/driver_functions.h"
static inline cudaPos make_cudaPos(::size_t x, ::size_t y, ::size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/opt/cuda/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(::size_t w, ::size_t h, ::size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 73 "/opt/cuda/include/vector_functions.h"
static inline char1 make_char1(signed char x); 
# 75
static inline uchar1 make_uchar1(unsigned char x); 
# 77
static inline char2 make_char2(signed char x, signed char y); 
# 79
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 81
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 83
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 85
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 87
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 89
static inline short1 make_short1(short x); 
# 91
static inline ushort1 make_ushort1(unsigned short x); 
# 93
static inline short2 make_short2(short x, short y); 
# 95
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 97
static inline short3 make_short3(short x, short y, short z); 
# 99
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 101
static inline short4 make_short4(short x, short y, short z, short w); 
# 103
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 105
static inline int1 make_int1(int x); 
# 107
static inline uint1 make_uint1(unsigned x); 
# 109
static inline int2 make_int2(int x, int y); 
# 111
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 113
static inline int3 make_int3(int x, int y, int z); 
# 115
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 117
static inline int4 make_int4(int x, int y, int z, int w); 
# 119
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 121
static inline long1 make_long1(long x); 
# 123
static inline ulong1 make_ulong1(unsigned long x); 
# 125
static inline long2 make_long2(long x, long y); 
# 127
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 129
static inline long3 make_long3(long x, long y, long z); 
# 131
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 133
static inline long4 make_long4(long x, long y, long z, long w); 
# 135
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 137
static inline float1 make_float1(float x); 
# 139
static inline float2 make_float2(float x, float y); 
# 141
static inline float3 make_float3(float x, float y, float z); 
# 143
static inline float4 make_float4(float x, float y, float z, float w); 
# 145
static inline longlong1 make_longlong1(long long x); 
# 147
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 149
static inline longlong2 make_longlong2(long long x, long long y); 
# 151
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 153
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 155
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 157
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 159
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 161
static inline double1 make_double1(double x); 
# 163
static inline double2 make_double2(double x, double y); 
# 165
static inline double3 make_double3(double x, double y, double z); 
# 167
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/opt/cuda/include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 28 "/usr/include/string.h" 3
extern "C" {
# 43 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) noexcept(true)
# 44
 __attribute((__nonnull__(1, 2))); 
# 47
extern void *memmove(void * __dest, const void * __src, ::size_t __n) noexcept(true)
# 48
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, ::size_t __n) noexcept(true)
# 56
 __attribute((__nonnull__(1, 2))) __attribute((__access__(__write_only__ , 1 , 4 ))); 
# 61
extern void *memset(void * __s, int __c, ::size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 64
extern int memcmp(const void * __s1, const void * __s2, ::size_t __n) noexcept(true)
# 65
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 80 "/usr/include/string.h" 3
extern int __memcmpeq(const void * __s1, const void * __s2, ::size_t __n) noexcept(true)
# 81
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 85
extern "C++" {
# 87
extern void *memchr(void * __s, int __c, ::size_t __n) noexcept(true) __asm__("memchr")
# 88
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 89
extern const void *memchr(const void * __s, int __c, ::size_t __n) noexcept(true) __asm__("memchr")
# 90
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 105 "/usr/include/string.h" 3
}
# 115 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) noexcept(true) __asm__("rawmemchr")
# 116
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
extern "C++" const void *rawmemchr(const void * __s, int __c) noexcept(true) __asm__("rawmemchr")
# 118
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 126
extern "C++" void *memrchr(void * __s, int __c, ::size_t __n) noexcept(true) __asm__("memrchr")
# 127
 __attribute((__pure__)) __attribute((__nonnull__(1)))
# 128
 __attribute((__access__(__read_only__ , 1 , 3 ))); 
# 129
extern "C++" const void *memrchr(const void * __s, int __c, ::size_t __n) noexcept(true) __asm__("memrchr")
# 130
 __attribute((__pure__)) __attribute((__nonnull__(1)))
# 131
 __attribute((__access__(__read_only__ , 1 , 3 ))); 
# 141 "/usr/include/string.h" 3
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 142
 __attribute((__nonnull__(1, 2))); 
# 144
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) noexcept(true)
# 146
 __attribute((__nonnull__(1, 2))); 
# 149
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 150
 __attribute((__nonnull__(1, 2))); 
# 152
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) noexcept(true)
# 153
 __attribute((__nonnull__(1, 2))); 
# 156
extern int strcmp(const char * __s1, const char * __s2) noexcept(true)
# 157
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 159
extern int strncmp(const char * __s1, const char * __s2, ::size_t __n) noexcept(true)
# 160
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 163
extern int strcoll(const char * __s1, const char * __s2) noexcept(true)
# 164
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 166
extern ::size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) noexcept(true)
# 168
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 1 , 3 ))); 
# 175
extern int strcoll_l(const char * __s1, const char * __s2, locale_t __l) noexcept(true)
# 176
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 179
extern ::size_t strxfrm_l(char * __dest, const char * __src, ::size_t __n, locale_t __l) noexcept(true)
# 180
 __attribute((__nonnull__(2, 4)))
# 181
 __attribute((__access__(__write_only__ , 1 , 3 ))); 
# 187
extern char *strdup(const char * __s) noexcept(true)
# 188
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 195
extern char *strndup(const char * __string, ::size_t __n) noexcept(true)
# 196
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 224 "/usr/include/string.h" 3
extern "C++" {
# 226
extern char *strchr(char * __s, int __c) noexcept(true) __asm__("strchr")
# 227
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 228
extern const char *strchr(const char * __s, int __c) noexcept(true) __asm__("strchr")
# 229
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 244 "/usr/include/string.h" 3
}
# 251
extern "C++" {
# 253
extern char *strrchr(char * __s, int __c) noexcept(true) __asm__("strrchr")
# 254
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 255
extern const char *strrchr(const char * __s, int __c) noexcept(true) __asm__("strrchr")
# 256
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 271 "/usr/include/string.h" 3
}
# 281 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) noexcept(true) __asm__("strchrnul")
# 282
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 283
extern "C++" const char *strchrnul(const char * __s, int __c) noexcept(true) __asm__("strchrnul")
# 284
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 293 "/usr/include/string.h" 3
extern ::size_t strcspn(const char * __s, const char * __reject) noexcept(true)
# 294
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 297
extern ::size_t strspn(const char * __s, const char * __accept) noexcept(true)
# 298
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 301
extern "C++" {
# 303
extern char *strpbrk(char * __s, const char * __accept) noexcept(true) __asm__("strpbrk")
# 304
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 305
extern const char *strpbrk(const char * __s, const char * __accept) noexcept(true) __asm__("strpbrk")
# 306
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 321 "/usr/include/string.h" 3
}
# 328
extern "C++" {
# 330
extern char *strstr(char * __haystack, const char * __needle) noexcept(true) __asm__("strstr")
# 331
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 332
extern const char *strstr(const char * __haystack, const char * __needle) noexcept(true) __asm__("strstr")
# 333
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 348 "/usr/include/string.h" 3
}
# 356
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) noexcept(true)
# 357
 __attribute((__nonnull__(2))); 
# 361
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) noexcept(true)
# 364
 __attribute((__nonnull__(2, 3))); 
# 366
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) noexcept(true)
# 368
 __attribute((__nonnull__(2, 3))); 
# 374
extern "C++" char *strcasestr(char * __haystack, const char * __needle) noexcept(true) __asm__("strcasestr")
# 375
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 376
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) noexcept(true) __asm__("strcasestr")
# 378
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 389 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, ::size_t __haystacklen, const void * __needle, ::size_t __needlelen) noexcept(true)
# 391
 __attribute((__pure__)) __attribute((__nonnull__(1, 3)))
# 392
 __attribute((__access__(__read_only__ , 1 , 2 )))
# 393
 __attribute((__access__(__read_only__ , 3 , 4 ))); 
# 397
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) noexcept(true)
# 399
 __attribute((__nonnull__(1, 2))); 
# 400
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) noexcept(true)
# 402
 __attribute((__nonnull__(1, 2))); 
# 407
extern ::size_t strlen(const char * __s) noexcept(true)
# 408
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 413
extern ::size_t strnlen(const char * __string, ::size_t __maxlen) noexcept(true)
# 414
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 419
extern char *strerror(int __errnum) noexcept(true); 
# 444 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, ::size_t __buflen) noexcept(true)
# 445
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 2 , 3 ))); 
# 450
extern const char *strerrordesc_np(int __err) noexcept(true); 
# 452
extern const char *strerrorname_np(int __err) noexcept(true); 
# 458
extern char *strerror_l(int __errnum, locale_t __l) noexcept(true); 
# 30 "/usr/include/strings.h" 3
extern "C" {
# 34
extern int bcmp(const void * __s1, const void * __s2, ::size_t __n) noexcept(true)
# 35
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 38
extern void bcopy(const void * __src, void * __dest, ::size_t __n) noexcept(true)
# 39
 __attribute((__nonnull__(1, 2))); 
# 42
extern void bzero(void * __s, ::size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 46
extern "C++" {
# 48
extern char *index(char * __s, int __c) noexcept(true) __asm__("index")
# 49
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 50
extern const char *index(const char * __s, int __c) noexcept(true) __asm__("index")
# 51
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 66 "/usr/include/strings.h" 3
}
# 74
extern "C++" {
# 76
extern char *rindex(char * __s, int __c) noexcept(true) __asm__("rindex")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern const char *rindex(const char * __s, int __c) noexcept(true) __asm__("rindex")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 94 "/usr/include/strings.h" 3
}
# 104 "/usr/include/strings.h" 3
extern int ffs(int __i) noexcept(true) __attribute((const)); 
# 110
extern int ffsl(long __l) noexcept(true) __attribute((const)); 
# 111
__extension__ extern int ffsll(long long __ll) noexcept(true)
# 112
 __attribute((const)); 
# 116
extern int strcasecmp(const char * __s1, const char * __s2) noexcept(true)
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 120
extern int strncasecmp(const char * __s1, const char * __s2, ::size_t __n) noexcept(true)
# 121
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 128
extern int strcasecmp_l(const char * __s1, const char * __s2, locale_t __loc) noexcept(true)
# 129
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 133
extern int strncasecmp_l(const char * __s1, const char * __s2, ::size_t __n, locale_t __loc) noexcept(true)
# 135
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 138
}
# 466 "/usr/include/string.h" 3
extern void explicit_bzero(void * __s, ::size_t __n) noexcept(true) __attribute((__nonnull__(1)))
# 467
 __attribute((__access__(__write_only__ , 1 , 2 ))); 
# 471
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) noexcept(true)
# 473
 __attribute((__nonnull__(1, 2))); 
# 478
extern char *strsignal(int __sig) noexcept(true); 
# 482
extern const char *sigabbrev_np(int __sig) noexcept(true); 
# 485
extern const char *sigdescr_np(int __sig) noexcept(true); 
# 489
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 490
 __attribute((__nonnull__(1, 2))); 
# 491
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 492
 __attribute((__nonnull__(1, 2))); 
# 496
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) noexcept(true)
# 498
 __attribute((__nonnull__(1, 2))); 
# 499
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) noexcept(true)
# 501
 __attribute((__nonnull__(1, 2))); 
# 506
extern int strverscmp(const char * __s1, const char * __s2) noexcept(true)
# 507
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 510
extern char *strfry(char * __string) noexcept(true) __attribute((__nonnull__(1))); 
# 513
extern void *memfrob(void * __s, ::size_t __n) noexcept(true) __attribute((__nonnull__(1)))
# 514
 __attribute((__access__(__read_write__ , 1 , 2 ))); 
# 522
extern "C++" char *basename(char * __filename) noexcept(true) __asm__("basename")
# 523
 __attribute((__nonnull__(1))); 
# 524
extern "C++" const char *basename(const char * __filename) noexcept(true) __asm__("basename")
# 525
 __attribute((__nonnull__(1))); 
# 539 "/usr/include/string.h" 3
}
# 26 "/usr/include/bits/timex.h" 3
struct timex { 
# 58 "/usr/include/bits/timex.h" 3
unsigned modes; 
# 59
__syscall_slong_t offset; 
# 60
__syscall_slong_t freq; 
# 61
__syscall_slong_t maxerror; 
# 62
__syscall_slong_t esterror; 
# 63
int status; 
# 64
__syscall_slong_t constant; 
# 65
__syscall_slong_t precision; 
# 66
__syscall_slong_t tolerance; 
# 67
timeval time; 
# 68
__syscall_slong_t tick; 
# 69
__syscall_slong_t ppsfreq; 
# 70
__syscall_slong_t jitter; 
# 71
int shift; 
# 72
__syscall_slong_t stabil; 
# 73
__syscall_slong_t jitcnt; 
# 74
__syscall_slong_t calcnt; 
# 75
__syscall_slong_t errcnt; 
# 76
__syscall_slong_t stbcnt; 
# 78
int tai; 
# 81
int:32; int:32; int:32; int:32; 
# 82
int:32; int:32; int:32; int:32; 
# 83
int:32; int:32; int:32; 
# 85
}; 
# 75 "/usr/include/bits/time.h" 3
extern "C" {
# 78
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) noexcept(true) __attribute((__nonnull__(2))); 
# 90 "/usr/include/bits/time.h" 3
}
# 7 "/usr/include/bits/types/struct_tm.h" 3
struct tm { 
# 9
int tm_sec; 
# 10
int tm_min; 
# 11
int tm_hour; 
# 12
int tm_mday; 
# 13
int tm_mon; 
# 14
int tm_year; 
# 15
int tm_wday; 
# 16
int tm_yday; 
# 17
int tm_isdst; 
# 20
long tm_gmtoff; 
# 21
const char *tm_zone; 
# 26
}; 
# 8 "/usr/include/bits/types/struct_itimerspec.h" 3
struct itimerspec { 
# 10
timespec it_interval; 
# 11
timespec it_value; 
# 12
}; 
# 49 "/usr/include/time.h" 3
struct sigevent; 
# 68 "/usr/include/time.h" 3
extern "C" {
# 72
extern clock_t clock() noexcept(true); 
# 76
extern time_t time(time_t * __timer) noexcept(true); 
# 79
extern double difftime(time_t __time1, time_t __time0) noexcept(true)
# 80
 __attribute((const)); 
# 83
extern time_t mktime(tm * __tp) noexcept(true); 
# 100 "/usr/include/time.h" 3
extern ::size_t strftime(char *__restrict__ __s, ::size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) noexcept(true); 
# 107
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) noexcept(true); 
# 116
extern ::size_t strftime_l(char *__restrict__ __s, ::size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) noexcept(true); 
# 123
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, locale_t __loc) noexcept(true); 
# 132
extern tm *gmtime(const time_t * __timer) noexcept(true); 
# 136
extern tm *localtime(const time_t * __timer) noexcept(true); 
# 154 "/usr/include/time.h" 3
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) noexcept(true); 
# 159
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) noexcept(true); 
# 179 "/usr/include/time.h" 3
extern char *asctime(const tm * __tp) noexcept(true); 
# 183
extern char *ctime(const time_t * __timer) noexcept(true); 
# 197 "/usr/include/time.h" 3
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) noexcept(true); 
# 202
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) noexcept(true); 
# 217 "/usr/include/time.h" 3
extern char *__tzname[2]; 
# 218
extern int __daylight; 
# 219
extern long __timezone; 
# 224
extern char *tzname[2]; 
# 228
extern void tzset() noexcept(true); 
# 232
extern int daylight; 
# 233
extern long timezone; 
# 246 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) noexcept(true); 
# 263 "/usr/include/time.h" 3
extern time_t timelocal(tm * __tp) noexcept(true); 
# 271
extern int dysize(int __year) noexcept(true) __attribute((const)); 
# 281 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 285
extern int clock_getres(clockid_t __clock_id, timespec * __res) noexcept(true); 
# 288
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) noexcept(true)
# 289
 __attribute((__nonnull__(2))); 
# 292
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) noexcept(true)
# 293
 __attribute((__nonnull__(2))); 
# 323 "/usr/include/time.h" 3
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 338 "/usr/include/time.h" 3
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) noexcept(true); 
# 343
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) noexcept(true); 
# 348
extern int timer_delete(timer_t __timerid) noexcept(true); 
# 352
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) noexcept(true); 
# 357
extern int timer_gettime(timer_t __timerid, itimerspec * __value) noexcept(true); 
# 376 "/usr/include/time.h" 3
extern int timer_getoverrun(timer_t __timerid) noexcept(true); 
# 383
extern int timespec_get(timespec * __ts, int __base) noexcept(true)
# 384
 __attribute((__nonnull__(1))); 
# 399 "/usr/include/time.h" 3
extern int timespec_getres(timespec * __ts, int __base) noexcept(true); 
# 425 "/usr/include/time.h" 3
extern int getdate_err; 
# 434 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 448 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 452
}
# 88 "/opt/cuda/include/crt/common_functions.h"
extern "C" {
# 91
extern clock_t clock() noexcept(true); 
# 96 "/opt/cuda/include/crt/common_functions.h"
extern void *memset(void *, int, ::size_t) noexcept(true); 
# 97 "/opt/cuda/include/crt/common_functions.h"
extern void *memcpy(void *, const void *, ::size_t) noexcept(true); 
# 99 "/opt/cuda/include/crt/common_functions.h"
}
# 121 "/opt/cuda/include/crt/math_functions.h"
extern "C" {
# 219 "/opt/cuda/include/crt/math_functions.h"
extern int abs(int a) noexcept(true); 
# 227 "/opt/cuda/include/crt/math_functions.h"
extern long labs(long a) noexcept(true); 
# 235 "/opt/cuda/include/crt/math_functions.h"
extern long long llabs(long long a) noexcept(true); 
# 285 "/opt/cuda/include/crt/math_functions.h"
extern double fabs(double x) noexcept(true); 
# 328 "/opt/cuda/include/crt/math_functions.h"
extern float fabsf(float x) noexcept(true); 
# 338 "/opt/cuda/include/crt/math_functions.h"
extern inline int min(const int a, const int b); 
# 345
extern inline unsigned umin(const unsigned a, const unsigned b); 
# 352
extern inline long long llmin(const long long a, const long long b); 
# 359
extern inline unsigned long long ullmin(const unsigned long long a, const unsigned long long b); 
# 380 "/opt/cuda/include/crt/math_functions.h"
extern float fminf(float x, float y) noexcept(true); 
# 400 "/opt/cuda/include/crt/math_functions.h"
extern double fmin(double x, double y) noexcept(true); 
# 413 "/opt/cuda/include/crt/math_functions.h"
extern inline int max(const int a, const int b); 
# 421
extern inline unsigned umax(const unsigned a, const unsigned b); 
# 428
extern inline long long llmax(const long long a, const long long b); 
# 435
extern inline unsigned long long ullmax(const unsigned long long a, const unsigned long long b); 
# 456 "/opt/cuda/include/crt/math_functions.h"
extern float fmaxf(float x, float y) noexcept(true); 
# 476 "/opt/cuda/include/crt/math_functions.h"
extern double fmax(double, double) noexcept(true); 
# 520 "/opt/cuda/include/crt/math_functions.h"
extern double sin(double x) noexcept(true); 
# 553 "/opt/cuda/include/crt/math_functions.h"
extern double cos(double x) noexcept(true); 
# 572 "/opt/cuda/include/crt/math_functions.h"
extern void sincos(double x, double * sptr, double * cptr) noexcept(true); 
# 588 "/opt/cuda/include/crt/math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr) noexcept(true); 
# 633 "/opt/cuda/include/crt/math_functions.h"
extern double tan(double x) noexcept(true); 
# 702 "/opt/cuda/include/crt/math_functions.h"
extern double sqrt(double x) noexcept(true); 
# 774 "/opt/cuda/include/crt/math_functions.h"
extern double rsqrt(double x); 
# 844 "/opt/cuda/include/crt/math_functions.h"
extern float rsqrtf(float x); 
# 900 "/opt/cuda/include/crt/math_functions.h"
extern double log2(double x) noexcept(true); 
# 965 "/opt/cuda/include/crt/math_functions.h"
extern double exp2(double x) noexcept(true); 
# 1030 "/opt/cuda/include/crt/math_functions.h"
extern float exp2f(float x) noexcept(true); 
# 1097 "/opt/cuda/include/crt/math_functions.h"
extern double exp10(double x) noexcept(true); 
# 1160 "/opt/cuda/include/crt/math_functions.h"
extern float exp10f(float x) noexcept(true); 
# 1253 "/opt/cuda/include/crt/math_functions.h"
extern double expm1(double x) noexcept(true); 
# 1345 "/opt/cuda/include/crt/math_functions.h"
extern float expm1f(float x) noexcept(true); 
# 1401 "/opt/cuda/include/crt/math_functions.h"
extern float log2f(float x) noexcept(true); 
# 1455 "/opt/cuda/include/crt/math_functions.h"
extern double log10(double x) noexcept(true); 
# 1525 "/opt/cuda/include/crt/math_functions.h"
extern double log(double x) noexcept(true); 
# 1621 "/opt/cuda/include/crt/math_functions.h"
extern double log1p(double x) noexcept(true); 
# 1720 "/opt/cuda/include/crt/math_functions.h"
extern float log1pf(float x) noexcept(true); 
# 1784 "/opt/cuda/include/crt/math_functions.h"
extern double floor(double x) noexcept(true); 
# 1863 "/opt/cuda/include/crt/math_functions.h"
extern double exp(double x) noexcept(true); 
# 1904 "/opt/cuda/include/crt/math_functions.h"
extern double cosh(double x) noexcept(true); 
# 1954 "/opt/cuda/include/crt/math_functions.h"
extern double sinh(double x) noexcept(true); 
# 2004 "/opt/cuda/include/crt/math_functions.h"
extern double tanh(double x) noexcept(true); 
# 2059 "/opt/cuda/include/crt/math_functions.h"
extern double acosh(double x) noexcept(true); 
# 2117 "/opt/cuda/include/crt/math_functions.h"
extern float acoshf(float x) noexcept(true); 
# 2170 "/opt/cuda/include/crt/math_functions.h"
extern double asinh(double x) noexcept(true); 
# 2223 "/opt/cuda/include/crt/math_functions.h"
extern float asinhf(float x) noexcept(true); 
# 2277 "/opt/cuda/include/crt/math_functions.h"
extern double atanh(double x) noexcept(true); 
# 2331 "/opt/cuda/include/crt/math_functions.h"
extern float atanhf(float x) noexcept(true); 
# 2380 "/opt/cuda/include/crt/math_functions.h"
extern double ldexp(double x, int exp) noexcept(true); 
# 2426 "/opt/cuda/include/crt/math_functions.h"
extern float ldexpf(float x, int exp) noexcept(true); 
# 2478 "/opt/cuda/include/crt/math_functions.h"
extern double logb(double x) noexcept(true); 
# 2533 "/opt/cuda/include/crt/math_functions.h"
extern float logbf(float x) noexcept(true); 
# 2573 "/opt/cuda/include/crt/math_functions.h"
extern int ilogb(double x) noexcept(true); 
# 2613 "/opt/cuda/include/crt/math_functions.h"
extern int ilogbf(float x) noexcept(true); 
# 2689 "/opt/cuda/include/crt/math_functions.h"
extern double scalbn(double x, int n) noexcept(true); 
# 2765 "/opt/cuda/include/crt/math_functions.h"
extern float scalbnf(float x, int n) noexcept(true); 
# 2841 "/opt/cuda/include/crt/math_functions.h"
extern double scalbln(double x, long n) noexcept(true); 
# 2917 "/opt/cuda/include/crt/math_functions.h"
extern float scalblnf(float x, long n) noexcept(true); 
# 2994 "/opt/cuda/include/crt/math_functions.h"
extern double frexp(double x, int * nptr) noexcept(true); 
# 3068 "/opt/cuda/include/crt/math_functions.h"
extern float frexpf(float x, int * nptr) noexcept(true); 
# 3120 "/opt/cuda/include/crt/math_functions.h"
extern double round(double x) noexcept(true); 
# 3175 "/opt/cuda/include/crt/math_functions.h"
extern float roundf(float x) noexcept(true); 
# 3193 "/opt/cuda/include/crt/math_functions.h"
extern long lround(double x) noexcept(true); 
# 3211 "/opt/cuda/include/crt/math_functions.h"
extern long lroundf(float x) noexcept(true); 
# 3229 "/opt/cuda/include/crt/math_functions.h"
extern long long llround(double x) noexcept(true); 
# 3247 "/opt/cuda/include/crt/math_functions.h"
extern long long llroundf(float x) noexcept(true); 
# 3375 "/opt/cuda/include/crt/math_functions.h"
extern float rintf(float x) noexcept(true); 
# 3392 "/opt/cuda/include/crt/math_functions.h"
extern long lrint(double x) noexcept(true); 
# 3409 "/opt/cuda/include/crt/math_functions.h"
extern long lrintf(float x) noexcept(true); 
# 3426 "/opt/cuda/include/crt/math_functions.h"
extern long long llrint(double x) noexcept(true); 
# 3443 "/opt/cuda/include/crt/math_functions.h"
extern long long llrintf(float x) noexcept(true); 
# 3496 "/opt/cuda/include/crt/math_functions.h"
extern double nearbyint(double x) noexcept(true); 
# 3549 "/opt/cuda/include/crt/math_functions.h"
extern float nearbyintf(float x) noexcept(true); 
# 3611 "/opt/cuda/include/crt/math_functions.h"
extern double ceil(double x) noexcept(true); 
# 3661 "/opt/cuda/include/crt/math_functions.h"
extern double trunc(double x) noexcept(true); 
# 3714 "/opt/cuda/include/crt/math_functions.h"
extern float truncf(float x) noexcept(true); 
# 3740 "/opt/cuda/include/crt/math_functions.h"
extern double fdim(double x, double y) noexcept(true); 
# 3766 "/opt/cuda/include/crt/math_functions.h"
extern float fdimf(float x, float y) noexcept(true); 
# 4066 "/opt/cuda/include/crt/math_functions.h"
extern double atan2(double y, double x) noexcept(true); 
# 4137 "/opt/cuda/include/crt/math_functions.h"
extern double atan(double x) noexcept(true); 
# 4160 "/opt/cuda/include/crt/math_functions.h"
extern double acos(double x) noexcept(true); 
# 4211 "/opt/cuda/include/crt/math_functions.h"
extern double asin(double x) noexcept(true); 
# 4279 "/opt/cuda/include/crt/math_functions.h"
extern double hypot(double x, double y) noexcept(true); 
# 4402 "/opt/cuda/include/crt/math_functions.h"
extern float hypotf(float x, float y) noexcept(true); 
# 5188 "/opt/cuda/include/crt/math_functions.h"
extern double cbrt(double x) noexcept(true); 
# 5274 "/opt/cuda/include/crt/math_functions.h"
extern float cbrtf(float x) noexcept(true); 
# 5329 "/opt/cuda/include/crt/math_functions.h"
extern double rcbrt(double x); 
# 5379 "/opt/cuda/include/crt/math_functions.h"
extern float rcbrtf(float x); 
# 5439 "/opt/cuda/include/crt/math_functions.h"
extern double sinpi(double x); 
# 5499 "/opt/cuda/include/crt/math_functions.h"
extern float sinpif(float x); 
# 5551 "/opt/cuda/include/crt/math_functions.h"
extern double cospi(double x); 
# 5603 "/opt/cuda/include/crt/math_functions.h"
extern float cospif(float x); 
# 5633 "/opt/cuda/include/crt/math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
# 5663 "/opt/cuda/include/crt/math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
# 5996 "/opt/cuda/include/crt/math_functions.h"
extern double pow(double x, double y) noexcept(true); 
# 6052 "/opt/cuda/include/crt/math_functions.h"
extern double modf(double x, double * iptr) noexcept(true); 
# 6111 "/opt/cuda/include/crt/math_functions.h"
extern double fmod(double x, double y) noexcept(true); 
# 6207 "/opt/cuda/include/crt/math_functions.h"
extern double remainder(double x, double y) noexcept(true); 
# 6306 "/opt/cuda/include/crt/math_functions.h"
extern float remainderf(float x, float y) noexcept(true); 
# 6378 "/opt/cuda/include/crt/math_functions.h"
extern double remquo(double x, double y, int * quo) noexcept(true); 
# 6450 "/opt/cuda/include/crt/math_functions.h"
extern float remquof(float x, float y, int * quo) noexcept(true); 
# 6491 "/opt/cuda/include/crt/math_functions.h"
extern double j0(double x) noexcept(true); 
# 6533 "/opt/cuda/include/crt/math_functions.h"
extern float j0f(float x) noexcept(true); 
# 6602 "/opt/cuda/include/crt/math_functions.h"
extern double j1(double x) noexcept(true); 
# 6671 "/opt/cuda/include/crt/math_functions.h"
extern float j1f(float x) noexcept(true); 
# 6714 "/opt/cuda/include/crt/math_functions.h"
extern double jn(int n, double x) noexcept(true); 
# 6757 "/opt/cuda/include/crt/math_functions.h"
extern float jnf(int n, float x) noexcept(true); 
# 6818 "/opt/cuda/include/crt/math_functions.h"
extern double y0(double x) noexcept(true); 
# 6879 "/opt/cuda/include/crt/math_functions.h"
extern float y0f(float x) noexcept(true); 
# 6940 "/opt/cuda/include/crt/math_functions.h"
extern double y1(double x) noexcept(true); 
# 7001 "/opt/cuda/include/crt/math_functions.h"
extern float y1f(float x) noexcept(true); 
# 7064 "/opt/cuda/include/crt/math_functions.h"
extern double yn(int n, double x) noexcept(true); 
# 7127 "/opt/cuda/include/crt/math_functions.h"
extern float ynf(int n, float x) noexcept(true); 
# 7316 "/opt/cuda/include/crt/math_functions.h"
extern double erf(double x) noexcept(true); 
# 7398 "/opt/cuda/include/crt/math_functions.h"
extern float erff(float x) noexcept(true); 
# 7470 "/opt/cuda/include/crt/math_functions.h"
extern double erfinv(double x); 
# 7535 "/opt/cuda/include/crt/math_functions.h"
extern float erfinvf(float x); 
# 7574 "/opt/cuda/include/crt/math_functions.h"
extern double erfc(double x) noexcept(true); 
# 7612 "/opt/cuda/include/crt/math_functions.h"
extern float erfcf(float x) noexcept(true); 
# 7729 "/opt/cuda/include/crt/math_functions.h"
extern double lgamma(double x) noexcept(true); 
# 7791 "/opt/cuda/include/crt/math_functions.h"
extern double erfcinv(double x); 
# 7846 "/opt/cuda/include/crt/math_functions.h"
extern float erfcinvf(float x); 
# 7914 "/opt/cuda/include/crt/math_functions.h"
extern double normcdfinv(double x); 
# 7982 "/opt/cuda/include/crt/math_functions.h"
extern float normcdfinvf(float x); 
# 8025 "/opt/cuda/include/crt/math_functions.h"
extern double normcdf(double x); 
# 8068 "/opt/cuda/include/crt/math_functions.h"
extern float normcdff(float x); 
# 8132 "/opt/cuda/include/crt/math_functions.h"
extern double erfcx(double x); 
# 8196 "/opt/cuda/include/crt/math_functions.h"
extern float erfcxf(float x); 
# 8315 "/opt/cuda/include/crt/math_functions.h"
extern float lgammaf(float x) noexcept(true); 
# 8413 "/opt/cuda/include/crt/math_functions.h"
extern double tgamma(double x) noexcept(true); 
# 8511 "/opt/cuda/include/crt/math_functions.h"
extern float tgammaf(float x) noexcept(true); 
# 8524 "/opt/cuda/include/crt/math_functions.h"
extern double copysign(double x, double y) noexcept(true); 
# 8537 "/opt/cuda/include/crt/math_functions.h"
extern float copysignf(float x, float y) noexcept(true); 
# 8556 "/opt/cuda/include/crt/math_functions.h"
extern double nextafter(double x, double y) noexcept(true); 
# 8575 "/opt/cuda/include/crt/math_functions.h"
extern float nextafterf(float x, float y) noexcept(true); 
# 8591 "/opt/cuda/include/crt/math_functions.h"
extern double nan(const char * tagp) noexcept(true); 
# 8607 "/opt/cuda/include/crt/math_functions.h"
extern float nanf(const char * tagp) noexcept(true); 
# 8614 "/opt/cuda/include/crt/math_functions.h"
extern int __isinff(float) noexcept(true); 
# 8615 "/opt/cuda/include/crt/math_functions.h"
extern int __isnanf(float) noexcept(true); 
# 8625 "/opt/cuda/include/crt/math_functions.h"
extern int __finite(double) noexcept(true); 
# 8626 "/opt/cuda/include/crt/math_functions.h"
extern int __finitef(float) noexcept(true); 
# 8627 "/opt/cuda/include/crt/math_functions.h"
extern int __signbit(double) noexcept(true); 
# 8628 "/opt/cuda/include/crt/math_functions.h"
extern int __isnan(double) noexcept(true); 
# 8629 "/opt/cuda/include/crt/math_functions.h"
extern int __isinf(double) noexcept(true); 
# 8632 "/opt/cuda/include/crt/math_functions.h"
extern int __signbitf(float) noexcept(true); 
# 8791 "/opt/cuda/include/crt/math_functions.h"
extern double fma(double x, double y, double z) noexcept(true); 
# 8949 "/opt/cuda/include/crt/math_functions.h"
extern float fmaf(float x, float y, float z) noexcept(true); 
# 8960 "/opt/cuda/include/crt/math_functions.h"
extern int __signbitl(long double) noexcept(true); 
# 8966 "/opt/cuda/include/crt/math_functions.h"
extern int __finitel(long double) noexcept(true); 
# 8967 "/opt/cuda/include/crt/math_functions.h"
extern int __isinfl(long double) noexcept(true); 
# 8968 "/opt/cuda/include/crt/math_functions.h"
extern int __isnanl(long double) noexcept(true); 
# 9018 "/opt/cuda/include/crt/math_functions.h"
extern float acosf(float x) noexcept(true); 
# 9077 "/opt/cuda/include/crt/math_functions.h"
extern float asinf(float x) noexcept(true); 
# 9157 "/opt/cuda/include/crt/math_functions.h"
extern float atanf(float x) noexcept(true); 
# 9454 "/opt/cuda/include/crt/math_functions.h"
extern float atan2f(float y, float x) noexcept(true); 
# 9488 "/opt/cuda/include/crt/math_functions.h"
extern float cosf(float x) noexcept(true); 
# 9530 "/opt/cuda/include/crt/math_functions.h"
extern float sinf(float x) noexcept(true); 
# 9572 "/opt/cuda/include/crt/math_functions.h"
extern float tanf(float x) noexcept(true); 
# 9613 "/opt/cuda/include/crt/math_functions.h"
extern float coshf(float x) noexcept(true); 
# 9663 "/opt/cuda/include/crt/math_functions.h"
extern float sinhf(float x) noexcept(true); 
# 9713 "/opt/cuda/include/crt/math_functions.h"
extern float tanhf(float x) noexcept(true); 
# 9765 "/opt/cuda/include/crt/math_functions.h"
extern float logf(float x) noexcept(true); 
# 9845 "/opt/cuda/include/crt/math_functions.h"
extern float expf(float x) noexcept(true); 
# 9897 "/opt/cuda/include/crt/math_functions.h"
extern float log10f(float x) noexcept(true); 
# 9952 "/opt/cuda/include/crt/math_functions.h"
extern float modff(float x, float * iptr) noexcept(true); 
# 10282 "/opt/cuda/include/crt/math_functions.h"
extern float powf(float x, float y) noexcept(true); 
# 10351 "/opt/cuda/include/crt/math_functions.h"
extern float sqrtf(float x) noexcept(true); 
# 10410 "/opt/cuda/include/crt/math_functions.h"
extern float ceilf(float x) noexcept(true); 
# 10471 "/opt/cuda/include/crt/math_functions.h"
extern float floorf(float x) noexcept(true); 
# 10529 "/opt/cuda/include/crt/math_functions.h"
extern float fmodf(float x, float y) noexcept(true); 
# 10544 "/opt/cuda/include/crt/math_functions.h"
}
# 67 "/usr/include/c++/12.2.1/bits/cpp_type_traits.h" 3
extern "C++" {
# 69
namespace std __attribute((__visibility__("default"))) { 
# 73
struct __true_type { }; 
# 74
struct __false_type { }; 
# 76
template< bool > 
# 77
struct __truth_type { 
# 78
typedef __false_type __type; }; 
# 81
template<> struct __truth_type< true>  { 
# 82
typedef __true_type __type; }; 
# 86
template< class _Sp, class _Tp> 
# 87
struct __traitor { 
# 89
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 90
typedef typename __truth_type< __value> ::__type __type; 
# 91
}; 
# 94
template< class , class > 
# 95
struct __are_same { 
# 97
enum { __value}; 
# 98
typedef __false_type __type; 
# 99
}; 
# 101
template< class _Tp> 
# 102
struct __are_same< _Tp, _Tp>  { 
# 104
enum { __value = 1}; 
# 105
typedef __true_type __type; 
# 106
}; 
# 109
template< class _Tp> 
# 110
struct __is_void { 
# 112
enum { __value}; 
# 113
typedef __false_type __type; 
# 114
}; 
# 117
template<> struct __is_void< void>  { 
# 119
enum { __value = 1}; 
# 120
typedef __true_type __type; 
# 121
}; 
# 126
template< class _Tp> 
# 127
struct __is_integer { 
# 129
enum { __value}; 
# 130
typedef __false_type __type; 
# 131
}; 
# 138
template<> struct __is_integer< bool>  { 
# 140
enum { __value = 1}; 
# 141
typedef __true_type __type; 
# 142
}; 
# 145
template<> struct __is_integer< char>  { 
# 147
enum { __value = 1}; 
# 148
typedef __true_type __type; 
# 149
}; 
# 152
template<> struct __is_integer< signed char>  { 
# 154
enum { __value = 1}; 
# 155
typedef __true_type __type; 
# 156
}; 
# 159
template<> struct __is_integer< unsigned char>  { 
# 161
enum { __value = 1}; 
# 162
typedef __true_type __type; 
# 163
}; 
# 167
template<> struct __is_integer< wchar_t>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 185 "/usr/include/c++/12.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char16_t>  { 
# 187
enum { __value = 1}; 
# 188
typedef __true_type __type; 
# 189
}; 
# 192
template<> struct __is_integer< char32_t>  { 
# 194
enum { __value = 1}; 
# 195
typedef __true_type __type; 
# 196
}; 
# 200
template<> struct __is_integer< short>  { 
# 202
enum { __value = 1}; 
# 203
typedef __true_type __type; 
# 204
}; 
# 207
template<> struct __is_integer< unsigned short>  { 
# 209
enum { __value = 1}; 
# 210
typedef __true_type __type; 
# 211
}; 
# 214
template<> struct __is_integer< int>  { 
# 216
enum { __value = 1}; 
# 217
typedef __true_type __type; 
# 218
}; 
# 221
template<> struct __is_integer< unsigned>  { 
# 223
enum { __value = 1}; 
# 224
typedef __true_type __type; 
# 225
}; 
# 228
template<> struct __is_integer< long>  { 
# 230
enum { __value = 1}; 
# 231
typedef __true_type __type; 
# 232
}; 
# 235
template<> struct __is_integer< unsigned long>  { 
# 237
enum { __value = 1}; 
# 238
typedef __true_type __type; 
# 239
}; 
# 242
template<> struct __is_integer< long long>  { 
# 244
enum { __value = 1}; 
# 245
typedef __true_type __type; 
# 246
}; 
# 249
template<> struct __is_integer< unsigned long long>  { 
# 251
enum { __value = 1}; 
# 252
typedef __true_type __type; 
# 253
}; 
# 289 "/usr/include/c++/12.2.1/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 290
struct __is_floating { 
# 292
enum { __value}; 
# 293
typedef __false_type __type; 
# 294
}; 
# 298
template<> struct __is_floating< float>  { 
# 300
enum { __value = 1}; 
# 301
typedef __true_type __type; 
# 302
}; 
# 305
template<> struct __is_floating< double>  { 
# 307
enum { __value = 1}; 
# 308
typedef __true_type __type; 
# 309
}; 
# 312
template<> struct __is_floating< long double>  { 
# 314
enum { __value = 1}; 
# 315
typedef __true_type __type; 
# 316
}; 
# 321
template< class _Tp> 
# 322
struct __is_pointer { 
# 324
enum { __value}; 
# 325
typedef __false_type __type; 
# 326
}; 
# 328
template< class _Tp> 
# 329
struct __is_pointer< _Tp *>  { 
# 331
enum { __value = 1}; 
# 332
typedef __true_type __type; 
# 333
}; 
# 338
template< class _Tp> 
# 339
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 341
}; 
# 346
template< class _Tp> 
# 347
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 349
}; 
# 354
template< class _Tp> 
# 355
struct __is_char { 
# 357
enum { __value}; 
# 358
typedef __false_type __type; 
# 359
}; 
# 362
template<> struct __is_char< char>  { 
# 364
enum { __value = 1}; 
# 365
typedef __true_type __type; 
# 366
}; 
# 370
template<> struct __is_char< wchar_t>  { 
# 372
enum { __value = 1}; 
# 373
typedef __true_type __type; 
# 374
}; 
# 377
template< class _Tp> 
# 378
struct __is_byte { 
# 380
enum { __value}; 
# 381
typedef __false_type __type; 
# 382
}; 
# 385
template<> struct __is_byte< char>  { 
# 387
enum { __value = 1}; 
# 388
typedef __true_type __type; 
# 389
}; 
# 392
template<> struct __is_byte< signed char>  { 
# 394
enum { __value = 1}; 
# 395
typedef __true_type __type; 
# 396
}; 
# 399
template<> struct __is_byte< unsigned char>  { 
# 401
enum { __value = 1}; 
# 402
typedef __true_type __type; 
# 403
}; 
# 406
enum class byte: unsigned char; 
# 409
template<> struct __is_byte< byte>  { 
# 411
enum { __value = 1}; 
# 412
typedef __true_type __type; 
# 413
}; 
# 425 "/usr/include/c++/12.2.1/bits/cpp_type_traits.h" 3
template< class > struct iterator_traits; 
# 428
template< class _Tp> 
# 429
struct __is_nonvolatile_trivially_copyable { 
# 431
enum { __value = __is_trivially_copyable(_Tp)}; 
# 432
}; 
# 437
template< class _Tp> 
# 438
struct __is_nonvolatile_trivially_copyable< volatile _Tp>  { 
# 440
enum { __value}; 
# 441
}; 
# 444
template< class _OutputIter, class _InputIter> 
# 445
struct __memcpyable { 
# 447
enum { __value}; 
# 448
}; 
# 450
template< class _Tp> 
# 451
struct __memcpyable< _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 453
}; 
# 455
template< class _Tp> 
# 456
struct __memcpyable< _Tp *, const _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 458
}; 
# 465
template< class _Iter1, class _Iter2> 
# 466
struct __memcmpable { 
# 468
enum { __value}; 
# 469
}; 
# 472
template< class _Tp> 
# 473
struct __memcmpable< _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 475
}; 
# 477
template< class _Tp> 
# 478
struct __memcmpable< const _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 480
}; 
# 482
template< class _Tp> 
# 483
struct __memcmpable< _Tp *, const _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 485
}; 
# 493
template< class _Tp, bool _TreatAsBytes = __is_byte< _Tp> ::__value> 
# 500
struct __is_memcmp_ordered { 
# 502
static const bool __value = (((_Tp)(-1)) > ((_Tp)1)); 
# 503
}; 
# 505
template< class _Tp> 
# 506
struct __is_memcmp_ordered< _Tp, false>  { 
# 508
static const bool __value = false; 
# 509
}; 
# 512
template< class _Tp, class _Up, bool  = sizeof(_Tp) == sizeof(_Up)> 
# 513
struct __is_memcmp_ordered_with { 
# 515
static const bool __value = (__is_memcmp_ordered< _Tp> ::__value && __is_memcmp_ordered< _Up> ::__value); 
# 517
}; 
# 519
template< class _Tp, class _Up> 
# 520
struct __is_memcmp_ordered_with< _Tp, _Up, false>  { 
# 522
static const bool __value = false; 
# 523
}; 
# 535 "/usr/include/c++/12.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_memcmp_ordered_with< byte, byte, true>  { 
# 536
static constexpr inline bool __value = true; }; 
# 538
template< class _Tp, bool _SameSize> 
# 539
struct __is_memcmp_ordered_with< _Tp, byte, _SameSize>  { 
# 540
static constexpr inline bool __value = false; }; 
# 542
template< class _Up, bool _SameSize> 
# 543
struct __is_memcmp_ordered_with< byte, _Up, _SameSize>  { 
# 544
static constexpr inline bool __value = false; }; 
# 550
template< class _Tp> 
# 551
struct __is_move_iterator { 
# 553
enum { __value}; 
# 554
typedef __false_type __type; 
# 555
}; 
# 559
template< class _Iterator> inline _Iterator 
# 562
__miter_base(_Iterator __it) 
# 563
{ return __it; } 
# 566
}
# 567
}
# 37 "/usr/include/c++/12.2.1/ext/type_traits.h" 3
extern "C++" {
# 39
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
template< bool , class > 
# 45
struct __enable_if { 
# 46
}; 
# 48
template< class _Tp> 
# 49
struct __enable_if< true, _Tp>  { 
# 50
typedef _Tp __type; }; 
# 54
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type { 
# 56
typedef _Iftrue __type; }; 
# 58
template< class _Iftrue, class _Iffalse> 
# 59
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 60
typedef _Iffalse __type; }; 
# 64
template< class _Tp> 
# 65
struct __add_unsigned { 
# 68
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 71
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 72
}; 
# 75
template<> struct __add_unsigned< char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< signed char>  { 
# 80
typedef unsigned char __type; }; 
# 83
template<> struct __add_unsigned< short>  { 
# 84
typedef unsigned short __type; }; 
# 87
template<> struct __add_unsigned< int>  { 
# 88
typedef unsigned __type; }; 
# 91
template<> struct __add_unsigned< long>  { 
# 92
typedef unsigned long __type; }; 
# 95
template<> struct __add_unsigned< long long>  { 
# 96
typedef unsigned long long __type; }; 
# 100
template<> struct __add_unsigned< bool> ; 
# 103
template<> struct __add_unsigned< wchar_t> ; 
# 107
template< class _Tp> 
# 108
struct __remove_unsigned { 
# 111
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 114
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 115
}; 
# 118
template<> struct __remove_unsigned< char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned char>  { 
# 123
typedef signed char __type; }; 
# 126
template<> struct __remove_unsigned< unsigned short>  { 
# 127
typedef short __type; }; 
# 130
template<> struct __remove_unsigned< unsigned>  { 
# 131
typedef int __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long>  { 
# 135
typedef long __type; }; 
# 138
template<> struct __remove_unsigned< unsigned long long>  { 
# 139
typedef long long __type; }; 
# 143
template<> struct __remove_unsigned< bool> ; 
# 146
template<> struct __remove_unsigned< wchar_t> ; 
# 150
template< class _Type> constexpr bool 
# 153
__is_null_pointer(_Type *__ptr) 
# 154
{ return __ptr == 0; } 
# 156
template< class _Type> constexpr bool 
# 159
__is_null_pointer(_Type) 
# 160
{ return false; } 
# 164
constexpr bool __is_null_pointer(std::nullptr_t) 
# 165
{ return true; } 
# 170
template< class _Tp, bool  = std::template __is_integer< _Tp> ::__value> 
# 171
struct __promote { 
# 172
typedef double __type; }; 
# 177
template< class _Tp> 
# 178
struct __promote< _Tp, false>  { 
# 179
}; 
# 182
template<> struct __promote< long double>  { 
# 183
typedef long double __type; }; 
# 186
template<> struct __promote< double>  { 
# 187
typedef double __type; }; 
# 190
template<> struct __promote< float>  { 
# 191
typedef float __type; }; 
# 195
template< class ..._Tp> using __promoted_t = __decltype(((((typename __promote< _Tp> ::__type)0) + ... ))); 
# 200
template< class _Tp, class _Up> using __promote_2 = __promote< __promoted_t< _Tp, _Up> > ; 
# 203
template< class _Tp, class _Up, class _Vp> using __promote_3 = __promote< __promoted_t< _Tp, _Up, _Vp> > ; 
# 206
template< class _Tp, class _Up, class _Vp, class _Wp> using __promote_4 = __promote< __promoted_t< _Tp, _Up, _Vp, _Wp> > ; 
# 240 "/usr/include/c++/12.2.1/ext/type_traits.h" 3
}
# 241
}
# 34 "/usr/include/math.h" 3
extern "C" {
# 163 "/usr/include/math.h" 3
typedef float float_t; 
# 164
typedef double double_t; 
# 252 "/usr/include/math.h" 3
enum { 
# 253
FP_INT_UPWARD, 
# 256
FP_INT_DOWNWARD, 
# 259
FP_INT_TOWARDZERO, 
# 262
FP_INT_TONEARESTFROMZERO, 
# 265
FP_INT_TONEAREST
# 268
}; 
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3
extern int __fpclassify(double __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbit(double __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinf(double __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finite(double __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnan(double __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsig(double __x, double __y) noexcept(true); 
# 44
extern int __issignaling(double __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/bits/mathcalls.h" 3
extern double acos(double __x) noexcept(true); extern double __acos(double __x) noexcept(true); 
# 55
extern double asin(double __x) noexcept(true); extern double __asin(double __x) noexcept(true); 
# 57
extern double atan(double __x) noexcept(true); extern double __atan(double __x) noexcept(true); 
# 59
extern double atan2(double __y, double __x) noexcept(true); extern double __atan2(double __y, double __x) noexcept(true); 
# 62
extern double cos(double __x) noexcept(true); extern double __cos(double __x) noexcept(true); 
# 64
extern double sin(double __x) noexcept(true); extern double __sin(double __x) noexcept(true); 
# 66
extern double tan(double __x) noexcept(true); extern double __tan(double __x) noexcept(true); 
# 71
extern double cosh(double __x) noexcept(true); extern double __cosh(double __x) noexcept(true); 
# 73
extern double sinh(double __x) noexcept(true); extern double __sinh(double __x) noexcept(true); 
# 75
extern double tanh(double __x) noexcept(true); extern double __tanh(double __x) noexcept(true); 
# 79
extern void sincos(double __x, double * __sinx, double * __cosx) noexcept(true); extern void __sincos(double __x, double * __sinx, double * __cosx) noexcept(true); 
# 85
extern double acosh(double __x) noexcept(true); extern double __acosh(double __x) noexcept(true); 
# 87
extern double asinh(double __x) noexcept(true); extern double __asinh(double __x) noexcept(true); 
# 89
extern double atanh(double __x) noexcept(true); extern double __atanh(double __x) noexcept(true); 
# 95
extern double exp(double __x) noexcept(true); extern double __exp(double __x) noexcept(true); 
# 98
extern double frexp(double __x, int * __exponent) noexcept(true); extern double __frexp(double __x, int * __exponent) noexcept(true); 
# 101
extern double ldexp(double __x, int __exponent) noexcept(true); extern double __ldexp(double __x, int __exponent) noexcept(true); 
# 104
extern double log(double __x) noexcept(true); extern double __log(double __x) noexcept(true); 
# 107
extern double log10(double __x) noexcept(true); extern double __log10(double __x) noexcept(true); 
# 110
extern double modf(double __x, double * __iptr) noexcept(true); extern double __modf(double __x, double * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern double exp10(double __x) noexcept(true); extern double __exp10(double __x) noexcept(true); 
# 119
extern double expm1(double __x) noexcept(true); extern double __expm1(double __x) noexcept(true); 
# 122
extern double log1p(double __x) noexcept(true); extern double __log1p(double __x) noexcept(true); 
# 125
extern double logb(double __x) noexcept(true); extern double __logb(double __x) noexcept(true); 
# 130
extern double exp2(double __x) noexcept(true); extern double __exp2(double __x) noexcept(true); 
# 133
extern double log2(double __x) noexcept(true); extern double __log2(double __x) noexcept(true); 
# 140
extern double pow(double __x, double __y) noexcept(true); extern double __pow(double __x, double __y) noexcept(true); 
# 143
extern double sqrt(double __x) noexcept(true); extern double __sqrt(double __x) noexcept(true); 
# 147
extern double hypot(double __x, double __y) noexcept(true); extern double __hypot(double __x, double __y) noexcept(true); 
# 152
extern double cbrt(double __x) noexcept(true); extern double __cbrt(double __x) noexcept(true); 
# 159
extern double ceil(double __x) noexcept(true) __attribute((const)); extern double __ceil(double __x) noexcept(true) __attribute((const)); 
# 162
extern double fabs(double __x) noexcept(true) __attribute((const)); extern double __fabs(double __x) noexcept(true) __attribute((const)); 
# 165
extern double floor(double __x) noexcept(true) __attribute((const)); extern double __floor(double __x) noexcept(true) __attribute((const)); 
# 168
extern double fmod(double __x, double __y) noexcept(true); extern double __fmod(double __x, double __y) noexcept(true); 
# 183 "/usr/include/bits/mathcalls.h" 3
extern int finite(double __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern double drem(double __x, double __y) noexcept(true); extern double __drem(double __x, double __y) noexcept(true); 
# 191
extern double significand(double __x) noexcept(true); extern double __significand(double __x) noexcept(true); 
# 198
extern double copysign(double __x, double __y) noexcept(true) __attribute((const)); extern double __copysign(double __x, double __y) noexcept(true) __attribute((const)); 
# 203
extern double nan(const char * __tagb) noexcept(true); extern double __nan(const char * __tagb) noexcept(true); 
# 220 "/usr/include/bits/mathcalls.h" 3
extern double j0(double) noexcept(true); extern double __j0(double) noexcept(true); 
# 221
extern double j1(double) noexcept(true); extern double __j1(double) noexcept(true); 
# 222
extern double jn(int, double) noexcept(true); extern double __jn(int, double) noexcept(true); 
# 223
extern double y0(double) noexcept(true); extern double __y0(double) noexcept(true); 
# 224
extern double y1(double) noexcept(true); extern double __y1(double) noexcept(true); 
# 225
extern double yn(int, double) noexcept(true); extern double __yn(int, double) noexcept(true); 
# 231
extern double erf(double) noexcept(true); extern double __erf(double) noexcept(true); 
# 232
extern double erfc(double) noexcept(true); extern double __erfc(double) noexcept(true); 
# 233
extern double lgamma(double) noexcept(true); extern double __lgamma(double) noexcept(true); 
# 238
extern double tgamma(double) noexcept(true); extern double __tgamma(double) noexcept(true); 
# 244
extern double gamma(double) noexcept(true); extern double __gamma(double) noexcept(true); 
# 252
extern double lgamma_r(double, int * __signgamp) noexcept(true); extern double __lgamma_r(double, int * __signgamp) noexcept(true); 
# 259
extern double rint(double __x) noexcept(true); extern double __rint(double __x) noexcept(true); 
# 262
extern double nextafter(double __x, double __y) noexcept(true); extern double __nextafter(double __x, double __y) noexcept(true); 
# 264
extern double nexttoward(double __x, long double __y) noexcept(true); extern double __nexttoward(double __x, long double __y) noexcept(true); 
# 269
extern double nextdown(double __x) noexcept(true); extern double __nextdown(double __x) noexcept(true); 
# 271
extern double nextup(double __x) noexcept(true); extern double __nextup(double __x) noexcept(true); 
# 275
extern double remainder(double __x, double __y) noexcept(true); extern double __remainder(double __x, double __y) noexcept(true); 
# 279
extern double scalbn(double __x, int __n) noexcept(true); extern double __scalbn(double __x, int __n) noexcept(true); 
# 283
extern int ilogb(double __x) noexcept(true); extern int __ilogb(double __x) noexcept(true); 
# 288
extern long llogb(double __x) noexcept(true); extern long __llogb(double __x) noexcept(true); 
# 293
extern double scalbln(double __x, long __n) noexcept(true); extern double __scalbln(double __x, long __n) noexcept(true); 
# 297
extern double nearbyint(double __x) noexcept(true); extern double __nearbyint(double __x) noexcept(true); 
# 301
extern double round(double __x) noexcept(true) __attribute((const)); extern double __round(double __x) noexcept(true) __attribute((const)); 
# 305
extern double trunc(double __x) noexcept(true) __attribute((const)); extern double __trunc(double __x) noexcept(true) __attribute((const)); 
# 310
extern double remquo(double __x, double __y, int * __quo) noexcept(true); extern double __remquo(double __x, double __y, int * __quo) noexcept(true); 
# 317
extern long lrint(double __x) noexcept(true); extern long __lrint(double __x) noexcept(true); 
# 319
__extension__ extern long long llrint(double __x) noexcept(true); extern long long __llrint(double __x) noexcept(true); 
# 323
extern long lround(double __x) noexcept(true); extern long __lround(double __x) noexcept(true); 
# 325
__extension__ extern long long llround(double __x) noexcept(true); extern long long __llround(double __x) noexcept(true); 
# 329
extern double fdim(double __x, double __y) noexcept(true); extern double __fdim(double __x, double __y) noexcept(true); 
# 333
extern double fmax(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmax(double __x, double __y) noexcept(true) __attribute((const)); 
# 336
extern double fmin(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmin(double __x, double __y) noexcept(true) __attribute((const)); 
# 340
extern double fma(double __x, double __y, double __z) noexcept(true); extern double __fma(double __x, double __y, double __z) noexcept(true); 
# 345
extern double roundeven(double __x) noexcept(true) __attribute((const)); extern double __roundeven(double __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfp(double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfp(double __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfp(double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfp(double __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpx(double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpx(double __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpx(double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpx(double __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalize(double * __cx, const double * __x) noexcept(true); 
# 377
extern double fmaxmag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaxmag(double __x, double __y) noexcept(true) __attribute((const)); 
# 380
extern double fminmag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminmag(double __x, double __y) noexcept(true) __attribute((const)); 
# 385
extern double fmaximum(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum(double __x, double __y) noexcept(true) __attribute((const)); 
# 388
extern double fminimum(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum(double __x, double __y) noexcept(true) __attribute((const)); 
# 391
extern double fmaximum_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 394
extern double fminimum_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 397
extern double fmaximum_mag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_mag(double __x, double __y) noexcept(true) __attribute((const)); 
# 400
extern double fminimum_mag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_mag(double __x, double __y) noexcept(true) __attribute((const)); 
# 403
extern double fmaximum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 406
extern double fminimum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorder(const double * __x, const double * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermag(const double * __x, const double * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern double getpayload(const double * __x) noexcept(true); extern double __getpayload(const double * __x) noexcept(true); 
# 424
extern int setpayload(double * __x, double __payload) noexcept(true); 
# 427
extern int setpayloadsig(double * __x, double __payload) noexcept(true); 
# 435
extern double scalb(double __x, double __n) noexcept(true); extern double __scalb(double __x, double __n) noexcept(true); 
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf(float __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitf(float __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinff(float __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitef(float __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanf(float __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigf(float __x, float __y) noexcept(true); 
# 44
extern int __issignalingf(float __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/bits/mathcalls.h" 3
extern float acosf(float __x) noexcept(true); extern float __acosf(float __x) noexcept(true); 
# 55
extern float asinf(float __x) noexcept(true); extern float __asinf(float __x) noexcept(true); 
# 57
extern float atanf(float __x) noexcept(true); extern float __atanf(float __x) noexcept(true); 
# 59
extern float atan2f(float __y, float __x) noexcept(true); extern float __atan2f(float __y, float __x) noexcept(true); 
# 62
extern float cosf(float __x) noexcept(true); 
# 64
extern float sinf(float __x) noexcept(true); 
# 66
extern float tanf(float __x) noexcept(true); 
# 71
extern float coshf(float __x) noexcept(true); extern float __coshf(float __x) noexcept(true); 
# 73
extern float sinhf(float __x) noexcept(true); extern float __sinhf(float __x) noexcept(true); 
# 75
extern float tanhf(float __x) noexcept(true); extern float __tanhf(float __x) noexcept(true); 
# 79
extern void sincosf(float __x, float * __sinx, float * __cosx) noexcept(true); 
# 85
extern float acoshf(float __x) noexcept(true); extern float __acoshf(float __x) noexcept(true); 
# 87
extern float asinhf(float __x) noexcept(true); extern float __asinhf(float __x) noexcept(true); 
# 89
extern float atanhf(float __x) noexcept(true); extern float __atanhf(float __x) noexcept(true); 
# 95
extern float expf(float __x) noexcept(true); 
# 98
extern float frexpf(float __x, int * __exponent) noexcept(true); extern float __frexpf(float __x, int * __exponent) noexcept(true); 
# 101
extern float ldexpf(float __x, int __exponent) noexcept(true); extern float __ldexpf(float __x, int __exponent) noexcept(true); 
# 104
extern float logf(float __x) noexcept(true); 
# 107
extern float log10f(float __x) noexcept(true); 
# 110
extern float modff(float __x, float * __iptr) noexcept(true); extern float __modff(float __x, float * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern float exp10f(float __x) noexcept(true); 
# 119
extern float expm1f(float __x) noexcept(true); extern float __expm1f(float __x) noexcept(true); 
# 122
extern float log1pf(float __x) noexcept(true); extern float __log1pf(float __x) noexcept(true); 
# 125
extern float logbf(float __x) noexcept(true); extern float __logbf(float __x) noexcept(true); 
# 130
extern float exp2f(float __x) noexcept(true); extern float __exp2f(float __x) noexcept(true); 
# 133
extern float log2f(float __x) noexcept(true); 
# 140
extern float powf(float __x, float __y) noexcept(true); 
# 143
extern float sqrtf(float __x) noexcept(true); extern float __sqrtf(float __x) noexcept(true); 
# 147
extern float hypotf(float __x, float __y) noexcept(true); extern float __hypotf(float __x, float __y) noexcept(true); 
# 152
extern float cbrtf(float __x) noexcept(true); extern float __cbrtf(float __x) noexcept(true); 
# 159
extern float ceilf(float __x) noexcept(true) __attribute((const)); extern float __ceilf(float __x) noexcept(true) __attribute((const)); 
# 162
extern float fabsf(float __x) noexcept(true) __attribute((const)); extern float __fabsf(float __x) noexcept(true) __attribute((const)); 
# 165
extern float floorf(float __x) noexcept(true) __attribute((const)); extern float __floorf(float __x) noexcept(true) __attribute((const)); 
# 168
extern float fmodf(float __x, float __y) noexcept(true); extern float __fmodf(float __x, float __y) noexcept(true); 
# 177 "/usr/include/bits/mathcalls.h" 3
extern int isinff(float __value) noexcept(true)
# 178
 __attribute((const)); 
# 183
extern int finitef(float __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern float dremf(float __x, float __y) noexcept(true); extern float __dremf(float __x, float __y) noexcept(true); 
# 191
extern float significandf(float __x) noexcept(true); extern float __significandf(float __x) noexcept(true); 
# 198
extern float copysignf(float __x, float __y) noexcept(true) __attribute((const)); extern float __copysignf(float __x, float __y) noexcept(true) __attribute((const)); 
# 203
extern float nanf(const char * __tagb) noexcept(true); extern float __nanf(const char * __tagb) noexcept(true); 
# 213 "/usr/include/bits/mathcalls.h" 3
extern int isnanf(float __value) noexcept(true)
# 214
 __attribute((const)); 
# 220
extern float j0f(float) noexcept(true); extern float __j0f(float) noexcept(true); 
# 221
extern float j1f(float) noexcept(true); extern float __j1f(float) noexcept(true); 
# 222
extern float jnf(int, float) noexcept(true); extern float __jnf(int, float) noexcept(true); 
# 223
extern float y0f(float) noexcept(true); extern float __y0f(float) noexcept(true); 
# 224
extern float y1f(float) noexcept(true); extern float __y1f(float) noexcept(true); 
# 225
extern float ynf(int, float) noexcept(true); extern float __ynf(int, float) noexcept(true); 
# 231
extern float erff(float) noexcept(true); extern float __erff(float) noexcept(true); 
# 232
extern float erfcf(float) noexcept(true); extern float __erfcf(float) noexcept(true); 
# 233
extern float lgammaf(float) noexcept(true); extern float __lgammaf(float) noexcept(true); 
# 238
extern float tgammaf(float) noexcept(true); extern float __tgammaf(float) noexcept(true); 
# 244
extern float gammaf(float) noexcept(true); extern float __gammaf(float) noexcept(true); 
# 252
extern float lgammaf_r(float, int * __signgamp) noexcept(true); extern float __lgammaf_r(float, int * __signgamp) noexcept(true); 
# 259
extern float rintf(float __x) noexcept(true); extern float __rintf(float __x) noexcept(true); 
# 262
extern float nextafterf(float __x, float __y) noexcept(true); extern float __nextafterf(float __x, float __y) noexcept(true); 
# 264
extern float nexttowardf(float __x, long double __y) noexcept(true); extern float __nexttowardf(float __x, long double __y) noexcept(true); 
# 269
extern float nextdownf(float __x) noexcept(true); extern float __nextdownf(float __x) noexcept(true); 
# 271
extern float nextupf(float __x) noexcept(true); extern float __nextupf(float __x) noexcept(true); 
# 275
extern float remainderf(float __x, float __y) noexcept(true); extern float __remainderf(float __x, float __y) noexcept(true); 
# 279
extern float scalbnf(float __x, int __n) noexcept(true); extern float __scalbnf(float __x, int __n) noexcept(true); 
# 283
extern int ilogbf(float __x) noexcept(true); extern int __ilogbf(float __x) noexcept(true); 
# 288
extern long llogbf(float __x) noexcept(true); extern long __llogbf(float __x) noexcept(true); 
# 293
extern float scalblnf(float __x, long __n) noexcept(true); extern float __scalblnf(float __x, long __n) noexcept(true); 
# 297
extern float nearbyintf(float __x) noexcept(true); extern float __nearbyintf(float __x) noexcept(true); 
# 301
extern float roundf(float __x) noexcept(true) __attribute((const)); extern float __roundf(float __x) noexcept(true) __attribute((const)); 
# 305
extern float truncf(float __x) noexcept(true) __attribute((const)); extern float __truncf(float __x) noexcept(true) __attribute((const)); 
# 310
extern float remquof(float __x, float __y, int * __quo) noexcept(true); extern float __remquof(float __x, float __y, int * __quo) noexcept(true); 
# 317
extern long lrintf(float __x) noexcept(true); extern long __lrintf(float __x) noexcept(true); 
# 319
__extension__ extern long long llrintf(float __x) noexcept(true); extern long long __llrintf(float __x) noexcept(true); 
# 323
extern long lroundf(float __x) noexcept(true); extern long __lroundf(float __x) noexcept(true); 
# 325
__extension__ extern long long llroundf(float __x) noexcept(true); extern long long __llroundf(float __x) noexcept(true); 
# 329
extern float fdimf(float __x, float __y) noexcept(true); extern float __fdimf(float __x, float __y) noexcept(true); 
# 333
extern float fmaxf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaxf(float __x, float __y) noexcept(true) __attribute((const)); 
# 336
extern float fminf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminf(float __x, float __y) noexcept(true) __attribute((const)); 
# 340
extern float fmaf(float __x, float __y, float __z) noexcept(true); extern float __fmaf(float __x, float __y, float __z) noexcept(true); 
# 345
extern float roundevenf(float __x) noexcept(true) __attribute((const)); extern float __roundevenf(float __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf(float __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf(float __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf(float __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf(float __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf(float __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf(float __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf(float __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf(float __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef(float * __cx, const float * __x) noexcept(true); 
# 377
extern float fmaxmagf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaxmagf(float __x, float __y) noexcept(true) __attribute((const)); 
# 380
extern float fminmagf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminmagf(float __x, float __y) noexcept(true) __attribute((const)); 
# 385
extern float fmaximumf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximumf(float __x, float __y) noexcept(true) __attribute((const)); 
# 388
extern float fminimumf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimumf(float __x, float __y) noexcept(true) __attribute((const)); 
# 391
extern float fmaximum_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 394
extern float fminimum_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 397
extern float fmaximum_magf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_magf(float __x, float __y) noexcept(true) __attribute((const)); 
# 400
extern float fminimum_magf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_magf(float __x, float __y) noexcept(true) __attribute((const)); 
# 403
extern float fmaximum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 406
extern float fminimum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf(const float * __x, const float * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf(const float * __x, const float * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern float getpayloadf(const float * __x) noexcept(true); extern float __getpayloadf(const float * __x) noexcept(true); 
# 424
extern int setpayloadf(float * __x, float __payload) noexcept(true); 
# 427
extern int setpayloadsigf(float * __x, float __payload) noexcept(true); 
# 435
extern float scalbf(float __x, float __n) noexcept(true); extern float __scalbf(float __x, float __n) noexcept(true); 
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyl(long double __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitl(long double __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinfl(long double __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitel(long double __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanl(long double __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigl(long double __x, long double __y) noexcept(true); 
# 44
extern int __issignalingl(long double __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/bits/mathcalls.h" 3
extern long double acosl(long double __x) noexcept(true); extern long double __acosl(long double __x) noexcept(true); 
# 55
extern long double asinl(long double __x) noexcept(true); extern long double __asinl(long double __x) noexcept(true); 
# 57
extern long double atanl(long double __x) noexcept(true); extern long double __atanl(long double __x) noexcept(true); 
# 59
extern long double atan2l(long double __y, long double __x) noexcept(true); extern long double __atan2l(long double __y, long double __x) noexcept(true); 
# 62
extern long double cosl(long double __x) noexcept(true); extern long double __cosl(long double __x) noexcept(true); 
# 64
extern long double sinl(long double __x) noexcept(true); extern long double __sinl(long double __x) noexcept(true); 
# 66
extern long double tanl(long double __x) noexcept(true); extern long double __tanl(long double __x) noexcept(true); 
# 71
extern long double coshl(long double __x) noexcept(true); extern long double __coshl(long double __x) noexcept(true); 
# 73
extern long double sinhl(long double __x) noexcept(true); extern long double __sinhl(long double __x) noexcept(true); 
# 75
extern long double tanhl(long double __x) noexcept(true); extern long double __tanhl(long double __x) noexcept(true); 
# 79
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) noexcept(true); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) noexcept(true); 
# 85
extern long double acoshl(long double __x) noexcept(true); extern long double __acoshl(long double __x) noexcept(true); 
# 87
extern long double asinhl(long double __x) noexcept(true); extern long double __asinhl(long double __x) noexcept(true); 
# 89
extern long double atanhl(long double __x) noexcept(true); extern long double __atanhl(long double __x) noexcept(true); 
# 95
extern long double expl(long double __x) noexcept(true); extern long double __expl(long double __x) noexcept(true); 
# 98
extern long double frexpl(long double __x, int * __exponent) noexcept(true); extern long double __frexpl(long double __x, int * __exponent) noexcept(true); 
# 101
extern long double ldexpl(long double __x, int __exponent) noexcept(true); extern long double __ldexpl(long double __x, int __exponent) noexcept(true); 
# 104
extern long double logl(long double __x) noexcept(true); extern long double __logl(long double __x) noexcept(true); 
# 107
extern long double log10l(long double __x) noexcept(true); extern long double __log10l(long double __x) noexcept(true); 
# 110
extern long double modfl(long double __x, long double * __iptr) noexcept(true); extern long double __modfl(long double __x, long double * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern long double exp10l(long double __x) noexcept(true); extern long double __exp10l(long double __x) noexcept(true); 
# 119
extern long double expm1l(long double __x) noexcept(true); extern long double __expm1l(long double __x) noexcept(true); 
# 122
extern long double log1pl(long double __x) noexcept(true); extern long double __log1pl(long double __x) noexcept(true); 
# 125
extern long double logbl(long double __x) noexcept(true); extern long double __logbl(long double __x) noexcept(true); 
# 130
extern long double exp2l(long double __x) noexcept(true); extern long double __exp2l(long double __x) noexcept(true); 
# 133
extern long double log2l(long double __x) noexcept(true); extern long double __log2l(long double __x) noexcept(true); 
# 140
extern long double powl(long double __x, long double __y) noexcept(true); extern long double __powl(long double __x, long double __y) noexcept(true); 
# 143
extern long double sqrtl(long double __x) noexcept(true); extern long double __sqrtl(long double __x) noexcept(true); 
# 147
extern long double hypotl(long double __x, long double __y) noexcept(true); extern long double __hypotl(long double __x, long double __y) noexcept(true); 
# 152
extern long double cbrtl(long double __x) noexcept(true); extern long double __cbrtl(long double __x) noexcept(true); 
# 159
extern long double ceill(long double __x) noexcept(true) __attribute((const)); extern long double __ceill(long double __x) noexcept(true) __attribute((const)); 
# 162
extern long double fabsl(long double __x) noexcept(true) __attribute((const)); extern long double __fabsl(long double __x) noexcept(true) __attribute((const)); 
# 165
extern long double floorl(long double __x) noexcept(true) __attribute((const)); extern long double __floorl(long double __x) noexcept(true) __attribute((const)); 
# 168
extern long double fmodl(long double __x, long double __y) noexcept(true); extern long double __fmodl(long double __x, long double __y) noexcept(true); 
# 177 "/usr/include/bits/mathcalls.h" 3
extern int isinfl(long double __value) noexcept(true)
# 178
 __attribute((const)); 
# 183
extern int finitel(long double __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern long double dreml(long double __x, long double __y) noexcept(true); extern long double __dreml(long double __x, long double __y) noexcept(true); 
# 191
extern long double significandl(long double __x) noexcept(true); extern long double __significandl(long double __x) noexcept(true); 
# 198
extern long double copysignl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __copysignl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 203
extern long double nanl(const char * __tagb) noexcept(true); extern long double __nanl(const char * __tagb) noexcept(true); 
# 213 "/usr/include/bits/mathcalls.h" 3
extern int isnanl(long double __value) noexcept(true)
# 214
 __attribute((const)); 
# 220
extern long double j0l(long double) noexcept(true); extern long double __j0l(long double) noexcept(true); 
# 221
extern long double j1l(long double) noexcept(true); extern long double __j1l(long double) noexcept(true); 
# 222
extern long double jnl(int, long double) noexcept(true); extern long double __jnl(int, long double) noexcept(true); 
# 223
extern long double y0l(long double) noexcept(true); extern long double __y0l(long double) noexcept(true); 
# 224
extern long double y1l(long double) noexcept(true); extern long double __y1l(long double) noexcept(true); 
# 225
extern long double ynl(int, long double) noexcept(true); extern long double __ynl(int, long double) noexcept(true); 
# 231
extern long double erfl(long double) noexcept(true); extern long double __erfl(long double) noexcept(true); 
# 232
extern long double erfcl(long double) noexcept(true); extern long double __erfcl(long double) noexcept(true); 
# 233
extern long double lgammal(long double) noexcept(true); extern long double __lgammal(long double) noexcept(true); 
# 238
extern long double tgammal(long double) noexcept(true); extern long double __tgammal(long double) noexcept(true); 
# 244
extern long double gammal(long double) noexcept(true); extern long double __gammal(long double) noexcept(true); 
# 252
extern long double lgammal_r(long double, int * __signgamp) noexcept(true); extern long double __lgammal_r(long double, int * __signgamp) noexcept(true); 
# 259
extern long double rintl(long double __x) noexcept(true); extern long double __rintl(long double __x) noexcept(true); 
# 262
extern long double nextafterl(long double __x, long double __y) noexcept(true); extern long double __nextafterl(long double __x, long double __y) noexcept(true); 
# 264
extern long double nexttowardl(long double __x, long double __y) noexcept(true); extern long double __nexttowardl(long double __x, long double __y) noexcept(true); 
# 269
extern long double nextdownl(long double __x) noexcept(true); extern long double __nextdownl(long double __x) noexcept(true); 
# 271
extern long double nextupl(long double __x) noexcept(true); extern long double __nextupl(long double __x) noexcept(true); 
# 275
extern long double remainderl(long double __x, long double __y) noexcept(true); extern long double __remainderl(long double __x, long double __y) noexcept(true); 
# 279
extern long double scalbnl(long double __x, int __n) noexcept(true); extern long double __scalbnl(long double __x, int __n) noexcept(true); 
# 283
extern int ilogbl(long double __x) noexcept(true); extern int __ilogbl(long double __x) noexcept(true); 
# 288
extern long llogbl(long double __x) noexcept(true); extern long __llogbl(long double __x) noexcept(true); 
# 293
extern long double scalblnl(long double __x, long __n) noexcept(true); extern long double __scalblnl(long double __x, long __n) noexcept(true); 
# 297
extern long double nearbyintl(long double __x) noexcept(true); extern long double __nearbyintl(long double __x) noexcept(true); 
# 301
extern long double roundl(long double __x) noexcept(true) __attribute((const)); extern long double __roundl(long double __x) noexcept(true) __attribute((const)); 
# 305
extern long double truncl(long double __x) noexcept(true) __attribute((const)); extern long double __truncl(long double __x) noexcept(true) __attribute((const)); 
# 310
extern long double remquol(long double __x, long double __y, int * __quo) noexcept(true); extern long double __remquol(long double __x, long double __y, int * __quo) noexcept(true); 
# 317
extern long lrintl(long double __x) noexcept(true); extern long __lrintl(long double __x) noexcept(true); 
# 319
__extension__ extern long long llrintl(long double __x) noexcept(true); extern long long __llrintl(long double __x) noexcept(true); 
# 323
extern long lroundl(long double __x) noexcept(true); extern long __lroundl(long double __x) noexcept(true); 
# 325
__extension__ extern long long llroundl(long double __x) noexcept(true); extern long long __llroundl(long double __x) noexcept(true); 
# 329
extern long double fdiml(long double __x, long double __y) noexcept(true); extern long double __fdiml(long double __x, long double __y) noexcept(true); 
# 333
extern long double fmaxl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaxl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 336
extern long double fminl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 340
extern long double fmal(long double __x, long double __y, long double __z) noexcept(true); extern long double __fmal(long double __x, long double __y, long double __z) noexcept(true); 
# 345
extern long double roundevenl(long double __x) noexcept(true) __attribute((const)); extern long double __roundevenl(long double __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpl(long double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpl(long double __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpl(long double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpl(long double __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxl(long double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxl(long double __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxl(long double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxl(long double __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizel(long double * __cx, const long double * __x) noexcept(true); 
# 377
extern long double fmaxmagl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaxmagl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 380
extern long double fminmagl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminmagl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 385
extern long double fmaximuml(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximuml(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 388
extern long double fminimuml(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimuml(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 391
extern long double fmaximum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 394
extern long double fminimum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 397
extern long double fmaximum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 400
extern long double fminimum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 403
extern long double fmaximum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 406
extern long double fminimum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderl(const long double * __x, const long double * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagl(const long double * __x, const long double * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern long double getpayloadl(const long double * __x) noexcept(true); extern long double __getpayloadl(const long double * __x) noexcept(true); 
# 424
extern int setpayloadl(long double * __x, long double __payload) noexcept(true); 
# 427
extern int setpayloadsigl(long double * __x, long double __payload) noexcept(true); 
# 435
extern long double scalbl(long double __x, long double __n) noexcept(true); extern long double __scalbl(long double __x, long double __n) noexcept(true); 
# 53 "/usr/include/bits/mathcalls.h" 3
extern _Float32 acosf32(_Float32 __x) noexcept(true); extern _Float32 __acosf32(_Float32 __x) noexcept(true); 
# 55
extern _Float32 asinf32(_Float32 __x) noexcept(true); extern _Float32 __asinf32(_Float32 __x) noexcept(true); 
# 57
extern _Float32 atanf32(_Float32 __x) noexcept(true); extern _Float32 __atanf32(_Float32 __x) noexcept(true); 
# 59
extern _Float32 atan2f32(_Float32 __y, _Float32 __x) noexcept(true); extern _Float32 __atan2f32(_Float32 __y, _Float32 __x) noexcept(true); 
# 62
extern _Float32 cosf32(_Float32 __x) noexcept(true); extern _Float32 __cosf32(_Float32 __x) noexcept(true); 
# 64
extern _Float32 sinf32(_Float32 __x) noexcept(true); extern _Float32 __sinf32(_Float32 __x) noexcept(true); 
# 66
extern _Float32 tanf32(_Float32 __x) noexcept(true); extern _Float32 __tanf32(_Float32 __x) noexcept(true); 
# 71
extern _Float32 coshf32(_Float32 __x) noexcept(true); extern _Float32 __coshf32(_Float32 __x) noexcept(true); 
# 73
extern _Float32 sinhf32(_Float32 __x) noexcept(true); extern _Float32 __sinhf32(_Float32 __x) noexcept(true); 
# 75
extern _Float32 tanhf32(_Float32 __x) noexcept(true); extern _Float32 __tanhf32(_Float32 __x) noexcept(true); 
# 79
extern void sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) noexcept(true); extern void __sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) noexcept(true); 
# 85
extern _Float32 acoshf32(_Float32 __x) noexcept(true); extern _Float32 __acoshf32(_Float32 __x) noexcept(true); 
# 87
extern _Float32 asinhf32(_Float32 __x) noexcept(true); extern _Float32 __asinhf32(_Float32 __x) noexcept(true); 
# 89
extern _Float32 atanhf32(_Float32 __x) noexcept(true); extern _Float32 __atanhf32(_Float32 __x) noexcept(true); 
# 95
extern _Float32 expf32(_Float32 __x) noexcept(true); extern _Float32 __expf32(_Float32 __x) noexcept(true); 
# 98
extern _Float32 frexpf32(_Float32 __x, int * __exponent) noexcept(true); extern _Float32 __frexpf32(_Float32 __x, int * __exponent) noexcept(true); 
# 101
extern _Float32 ldexpf32(_Float32 __x, int __exponent) noexcept(true); extern _Float32 __ldexpf32(_Float32 __x, int __exponent) noexcept(true); 
# 104
extern _Float32 logf32(_Float32 __x) noexcept(true); extern _Float32 __logf32(_Float32 __x) noexcept(true); 
# 107
extern _Float32 log10f32(_Float32 __x) noexcept(true); extern _Float32 __log10f32(_Float32 __x) noexcept(true); 
# 110
extern _Float32 modff32(_Float32 __x, _Float32 * __iptr) noexcept(true); extern _Float32 __modff32(_Float32 __x, _Float32 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float32 exp10f32(_Float32 __x) noexcept(true); extern _Float32 __exp10f32(_Float32 __x) noexcept(true); 
# 119
extern _Float32 expm1f32(_Float32 __x) noexcept(true); extern _Float32 __expm1f32(_Float32 __x) noexcept(true); 
# 122
extern _Float32 log1pf32(_Float32 __x) noexcept(true); extern _Float32 __log1pf32(_Float32 __x) noexcept(true); 
# 125
extern _Float32 logbf32(_Float32 __x) noexcept(true); extern _Float32 __logbf32(_Float32 __x) noexcept(true); 
# 130
extern _Float32 exp2f32(_Float32 __x) noexcept(true); extern _Float32 __exp2f32(_Float32 __x) noexcept(true); 
# 133
extern _Float32 log2f32(_Float32 __x) noexcept(true); extern _Float32 __log2f32(_Float32 __x) noexcept(true); 
# 140
extern _Float32 powf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __powf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 143
extern _Float32 sqrtf32(_Float32 __x) noexcept(true); extern _Float32 __sqrtf32(_Float32 __x) noexcept(true); 
# 147
extern _Float32 hypotf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __hypotf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 152
extern _Float32 cbrtf32(_Float32 __x) noexcept(true); extern _Float32 __cbrtf32(_Float32 __x) noexcept(true); 
# 159
extern _Float32 ceilf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __ceilf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float32 fabsf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __fabsf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float32 floorf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __floorf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float32 fmodf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __fmodf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 198 "/usr/include/bits/mathcalls.h" 3
extern _Float32 copysignf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __copysignf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float32 nanf32(const char * __tagb) noexcept(true); extern _Float32 __nanf32(const char * __tagb) noexcept(true); 
# 220 "/usr/include/bits/mathcalls.h" 3
extern _Float32 j0f32(_Float32) noexcept(true); extern _Float32 __j0f32(_Float32) noexcept(true); 
# 221
extern _Float32 j1f32(_Float32) noexcept(true); extern _Float32 __j1f32(_Float32) noexcept(true); 
# 222
extern _Float32 jnf32(int, _Float32) noexcept(true); extern _Float32 __jnf32(int, _Float32) noexcept(true); 
# 223
extern _Float32 y0f32(_Float32) noexcept(true); extern _Float32 __y0f32(_Float32) noexcept(true); 
# 224
extern _Float32 y1f32(_Float32) noexcept(true); extern _Float32 __y1f32(_Float32) noexcept(true); 
# 225
extern _Float32 ynf32(int, _Float32) noexcept(true); extern _Float32 __ynf32(int, _Float32) noexcept(true); 
# 231
extern _Float32 erff32(_Float32) noexcept(true); extern _Float32 __erff32(_Float32) noexcept(true); 
# 232
extern _Float32 erfcf32(_Float32) noexcept(true); extern _Float32 __erfcf32(_Float32) noexcept(true); 
# 233
extern _Float32 lgammaf32(_Float32) noexcept(true); extern _Float32 __lgammaf32(_Float32) noexcept(true); 
# 238
extern _Float32 tgammaf32(_Float32) noexcept(true); extern _Float32 __tgammaf32(_Float32) noexcept(true); 
# 252 "/usr/include/bits/mathcalls.h" 3
extern _Float32 lgammaf32_r(_Float32, int * __signgamp) noexcept(true); extern _Float32 __lgammaf32_r(_Float32, int * __signgamp) noexcept(true); 
# 259
extern _Float32 rintf32(_Float32 __x) noexcept(true); extern _Float32 __rintf32(_Float32 __x) noexcept(true); 
# 262
extern _Float32 nextafterf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __nextafterf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 269
extern _Float32 nextdownf32(_Float32 __x) noexcept(true); extern _Float32 __nextdownf32(_Float32 __x) noexcept(true); 
# 271
extern _Float32 nextupf32(_Float32 __x) noexcept(true); extern _Float32 __nextupf32(_Float32 __x) noexcept(true); 
# 275
extern _Float32 remainderf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __remainderf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 279
extern _Float32 scalbnf32(_Float32 __x, int __n) noexcept(true); extern _Float32 __scalbnf32(_Float32 __x, int __n) noexcept(true); 
# 283
extern int ilogbf32(_Float32 __x) noexcept(true); extern int __ilogbf32(_Float32 __x) noexcept(true); 
# 288
extern long llogbf32(_Float32 __x) noexcept(true); extern long __llogbf32(_Float32 __x) noexcept(true); 
# 293
extern _Float32 scalblnf32(_Float32 __x, long __n) noexcept(true); extern _Float32 __scalblnf32(_Float32 __x, long __n) noexcept(true); 
# 297
extern _Float32 nearbyintf32(_Float32 __x) noexcept(true); extern _Float32 __nearbyintf32(_Float32 __x) noexcept(true); 
# 301
extern _Float32 roundf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __roundf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float32 truncf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __truncf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float32 remquof32(_Float32 __x, _Float32 __y, int * __quo) noexcept(true); extern _Float32 __remquof32(_Float32 __x, _Float32 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf32(_Float32 __x) noexcept(true); extern long __lrintf32(_Float32 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf32(_Float32 __x) noexcept(true); extern long long __llrintf32(_Float32 __x) noexcept(true); 
# 323
extern long lroundf32(_Float32 __x) noexcept(true); extern long __lroundf32(_Float32 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf32(_Float32 __x) noexcept(true); extern long long __llroundf32(_Float32 __x) noexcept(true); 
# 329
extern _Float32 fdimf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __fdimf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 333
extern _Float32 fmaxf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaxf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float32 fminf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float32 fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) noexcept(true); extern _Float32 __fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) noexcept(true); 
# 345
extern _Float32 roundevenf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __roundevenf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef32(_Float32 * __cx, const _Float32 * __x) noexcept(true); 
# 377
extern _Float32 fmaxmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaxmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float32 fminmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float32 fmaximumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float32 fminimumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float32 fmaximum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float32 fminimum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float32 fmaximum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float32 fminimum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float32 fmaximum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float32 fminimum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf32(const _Float32 * __x, const _Float32 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf32(const _Float32 * __x, const _Float32 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float32 getpayloadf32(const _Float32 * __x) noexcept(true); extern _Float32 __getpayloadf32(const _Float32 * __x) noexcept(true); 
# 424
extern int setpayloadf32(_Float32 * __x, _Float32 __payload) noexcept(true); 
# 427
extern int setpayloadsigf32(_Float32 * __x, _Float32 __payload) noexcept(true); 
# 53 "/usr/include/bits/mathcalls.h" 3
extern _Float64 acosf64(_Float64 __x) noexcept(true); extern _Float64 __acosf64(_Float64 __x) noexcept(true); 
# 55
extern _Float64 asinf64(_Float64 __x) noexcept(true); extern _Float64 __asinf64(_Float64 __x) noexcept(true); 
# 57
extern _Float64 atanf64(_Float64 __x) noexcept(true); extern _Float64 __atanf64(_Float64 __x) noexcept(true); 
# 59
extern _Float64 atan2f64(_Float64 __y, _Float64 __x) noexcept(true); extern _Float64 __atan2f64(_Float64 __y, _Float64 __x) noexcept(true); 
# 62
extern _Float64 cosf64(_Float64 __x) noexcept(true); extern _Float64 __cosf64(_Float64 __x) noexcept(true); 
# 64
extern _Float64 sinf64(_Float64 __x) noexcept(true); extern _Float64 __sinf64(_Float64 __x) noexcept(true); 
# 66
extern _Float64 tanf64(_Float64 __x) noexcept(true); extern _Float64 __tanf64(_Float64 __x) noexcept(true); 
# 71
extern _Float64 coshf64(_Float64 __x) noexcept(true); extern _Float64 __coshf64(_Float64 __x) noexcept(true); 
# 73
extern _Float64 sinhf64(_Float64 __x) noexcept(true); extern _Float64 __sinhf64(_Float64 __x) noexcept(true); 
# 75
extern _Float64 tanhf64(_Float64 __x) noexcept(true); extern _Float64 __tanhf64(_Float64 __x) noexcept(true); 
# 79
extern void sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) noexcept(true); extern void __sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) noexcept(true); 
# 85
extern _Float64 acoshf64(_Float64 __x) noexcept(true); extern _Float64 __acoshf64(_Float64 __x) noexcept(true); 
# 87
extern _Float64 asinhf64(_Float64 __x) noexcept(true); extern _Float64 __asinhf64(_Float64 __x) noexcept(true); 
# 89
extern _Float64 atanhf64(_Float64 __x) noexcept(true); extern _Float64 __atanhf64(_Float64 __x) noexcept(true); 
# 95
extern _Float64 expf64(_Float64 __x) noexcept(true); extern _Float64 __expf64(_Float64 __x) noexcept(true); 
# 98
extern _Float64 frexpf64(_Float64 __x, int * __exponent) noexcept(true); extern _Float64 __frexpf64(_Float64 __x, int * __exponent) noexcept(true); 
# 101
extern _Float64 ldexpf64(_Float64 __x, int __exponent) noexcept(true); extern _Float64 __ldexpf64(_Float64 __x, int __exponent) noexcept(true); 
# 104
extern _Float64 logf64(_Float64 __x) noexcept(true); extern _Float64 __logf64(_Float64 __x) noexcept(true); 
# 107
extern _Float64 log10f64(_Float64 __x) noexcept(true); extern _Float64 __log10f64(_Float64 __x) noexcept(true); 
# 110
extern _Float64 modff64(_Float64 __x, _Float64 * __iptr) noexcept(true); extern _Float64 __modff64(_Float64 __x, _Float64 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float64 exp10f64(_Float64 __x) noexcept(true); extern _Float64 __exp10f64(_Float64 __x) noexcept(true); 
# 119
extern _Float64 expm1f64(_Float64 __x) noexcept(true); extern _Float64 __expm1f64(_Float64 __x) noexcept(true); 
# 122
extern _Float64 log1pf64(_Float64 __x) noexcept(true); extern _Float64 __log1pf64(_Float64 __x) noexcept(true); 
# 125
extern _Float64 logbf64(_Float64 __x) noexcept(true); extern _Float64 __logbf64(_Float64 __x) noexcept(true); 
# 130
extern _Float64 exp2f64(_Float64 __x) noexcept(true); extern _Float64 __exp2f64(_Float64 __x) noexcept(true); 
# 133
extern _Float64 log2f64(_Float64 __x) noexcept(true); extern _Float64 __log2f64(_Float64 __x) noexcept(true); 
# 140
extern _Float64 powf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __powf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 143
extern _Float64 sqrtf64(_Float64 __x) noexcept(true); extern _Float64 __sqrtf64(_Float64 __x) noexcept(true); 
# 147
extern _Float64 hypotf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __hypotf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 152
extern _Float64 cbrtf64(_Float64 __x) noexcept(true); extern _Float64 __cbrtf64(_Float64 __x) noexcept(true); 
# 159
extern _Float64 ceilf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __ceilf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float64 fabsf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __fabsf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float64 floorf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __floorf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float64 fmodf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __fmodf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 198 "/usr/include/bits/mathcalls.h" 3
extern _Float64 copysignf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __copysignf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float64 nanf64(const char * __tagb) noexcept(true); extern _Float64 __nanf64(const char * __tagb) noexcept(true); 
# 220 "/usr/include/bits/mathcalls.h" 3
extern _Float64 j0f64(_Float64) noexcept(true); extern _Float64 __j0f64(_Float64) noexcept(true); 
# 221
extern _Float64 j1f64(_Float64) noexcept(true); extern _Float64 __j1f64(_Float64) noexcept(true); 
# 222
extern _Float64 jnf64(int, _Float64) noexcept(true); extern _Float64 __jnf64(int, _Float64) noexcept(true); 
# 223
extern _Float64 y0f64(_Float64) noexcept(true); extern _Float64 __y0f64(_Float64) noexcept(true); 
# 224
extern _Float64 y1f64(_Float64) noexcept(true); extern _Float64 __y1f64(_Float64) noexcept(true); 
# 225
extern _Float64 ynf64(int, _Float64) noexcept(true); extern _Float64 __ynf64(int, _Float64) noexcept(true); 
# 231
extern _Float64 erff64(_Float64) noexcept(true); extern _Float64 __erff64(_Float64) noexcept(true); 
# 232
extern _Float64 erfcf64(_Float64) noexcept(true); extern _Float64 __erfcf64(_Float64) noexcept(true); 
# 233
extern _Float64 lgammaf64(_Float64) noexcept(true); extern _Float64 __lgammaf64(_Float64) noexcept(true); 
# 238
extern _Float64 tgammaf64(_Float64) noexcept(true); extern _Float64 __tgammaf64(_Float64) noexcept(true); 
# 252 "/usr/include/bits/mathcalls.h" 3
extern _Float64 lgammaf64_r(_Float64, int * __signgamp) noexcept(true); extern _Float64 __lgammaf64_r(_Float64, int * __signgamp) noexcept(true); 
# 259
extern _Float64 rintf64(_Float64 __x) noexcept(true); extern _Float64 __rintf64(_Float64 __x) noexcept(true); 
# 262
extern _Float64 nextafterf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __nextafterf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 269
extern _Float64 nextdownf64(_Float64 __x) noexcept(true); extern _Float64 __nextdownf64(_Float64 __x) noexcept(true); 
# 271
extern _Float64 nextupf64(_Float64 __x) noexcept(true); extern _Float64 __nextupf64(_Float64 __x) noexcept(true); 
# 275
extern _Float64 remainderf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __remainderf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 279
extern _Float64 scalbnf64(_Float64 __x, int __n) noexcept(true); extern _Float64 __scalbnf64(_Float64 __x, int __n) noexcept(true); 
# 283
extern int ilogbf64(_Float64 __x) noexcept(true); extern int __ilogbf64(_Float64 __x) noexcept(true); 
# 288
extern long llogbf64(_Float64 __x) noexcept(true); extern long __llogbf64(_Float64 __x) noexcept(true); 
# 293
extern _Float64 scalblnf64(_Float64 __x, long __n) noexcept(true); extern _Float64 __scalblnf64(_Float64 __x, long __n) noexcept(true); 
# 297
extern _Float64 nearbyintf64(_Float64 __x) noexcept(true); extern _Float64 __nearbyintf64(_Float64 __x) noexcept(true); 
# 301
extern _Float64 roundf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __roundf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float64 truncf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __truncf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float64 remquof64(_Float64 __x, _Float64 __y, int * __quo) noexcept(true); extern _Float64 __remquof64(_Float64 __x, _Float64 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf64(_Float64 __x) noexcept(true); extern long __lrintf64(_Float64 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf64(_Float64 __x) noexcept(true); extern long long __llrintf64(_Float64 __x) noexcept(true); 
# 323
extern long lroundf64(_Float64 __x) noexcept(true); extern long __lroundf64(_Float64 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf64(_Float64 __x) noexcept(true); extern long long __llroundf64(_Float64 __x) noexcept(true); 
# 329
extern _Float64 fdimf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __fdimf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 333
extern _Float64 fmaxf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaxf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float64 fminf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float64 fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); extern _Float64 __fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 345
extern _Float64 roundevenf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __roundevenf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef64(_Float64 * __cx, const _Float64 * __x) noexcept(true); 
# 377
extern _Float64 fmaxmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaxmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float64 fminmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float64 fmaximumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float64 fminimumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float64 fmaximum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float64 fminimum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float64 fmaximum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float64 fminimum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float64 fmaximum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float64 fminimum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf64(const _Float64 * __x, const _Float64 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf64(const _Float64 * __x, const _Float64 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float64 getpayloadf64(const _Float64 * __x) noexcept(true); extern _Float64 __getpayloadf64(const _Float64 * __x) noexcept(true); 
# 424
extern int setpayloadf64(_Float64 * __x, _Float64 __payload) noexcept(true); 
# 427
extern int setpayloadsigf64(_Float64 * __x, _Float64 __payload) noexcept(true); 
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf128(_Float128 __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitf128(_Float128 __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinff128(_Float128 __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitef128(_Float128 __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanf128(_Float128 __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 44
extern int __issignalingf128(_Float128 __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/bits/mathcalls.h" 3
extern _Float128 acosf128(_Float128 __x) noexcept(true); extern _Float128 __acosf128(_Float128 __x) noexcept(true); 
# 55
extern _Float128 asinf128(_Float128 __x) noexcept(true); extern _Float128 __asinf128(_Float128 __x) noexcept(true); 
# 57
extern _Float128 atanf128(_Float128 __x) noexcept(true); extern _Float128 __atanf128(_Float128 __x) noexcept(true); 
# 59
extern _Float128 atan2f128(_Float128 __y, _Float128 __x) noexcept(true); extern _Float128 __atan2f128(_Float128 __y, _Float128 __x) noexcept(true); 
# 62
extern _Float128 cosf128(_Float128 __x) noexcept(true); extern _Float128 __cosf128(_Float128 __x) noexcept(true); 
# 64
extern _Float128 sinf128(_Float128 __x) noexcept(true); extern _Float128 __sinf128(_Float128 __x) noexcept(true); 
# 66
extern _Float128 tanf128(_Float128 __x) noexcept(true); extern _Float128 __tanf128(_Float128 __x) noexcept(true); 
# 71
extern _Float128 coshf128(_Float128 __x) noexcept(true); extern _Float128 __coshf128(_Float128 __x) noexcept(true); 
# 73
extern _Float128 sinhf128(_Float128 __x) noexcept(true); extern _Float128 __sinhf128(_Float128 __x) noexcept(true); 
# 75
extern _Float128 tanhf128(_Float128 __x) noexcept(true); extern _Float128 __tanhf128(_Float128 __x) noexcept(true); 
# 79
extern void sincosf128(_Float128 __x, _Float128 * __sinx, _Float128 * __cosx) noexcept(true); extern void __sincosf128(_Float128 __x, _Float128 * __sinx, _Float128 * __cosx) noexcept(true); 
# 85
extern _Float128 acoshf128(_Float128 __x) noexcept(true); extern _Float128 __acoshf128(_Float128 __x) noexcept(true); 
# 87
extern _Float128 asinhf128(_Float128 __x) noexcept(true); extern _Float128 __asinhf128(_Float128 __x) noexcept(true); 
# 89
extern _Float128 atanhf128(_Float128 __x) noexcept(true); extern _Float128 __atanhf128(_Float128 __x) noexcept(true); 
# 95
extern _Float128 expf128(_Float128 __x) noexcept(true); extern _Float128 __expf128(_Float128 __x) noexcept(true); 
# 98
extern _Float128 frexpf128(_Float128 __x, int * __exponent) noexcept(true); extern _Float128 __frexpf128(_Float128 __x, int * __exponent) noexcept(true); 
# 101
extern _Float128 ldexpf128(_Float128 __x, int __exponent) noexcept(true); extern _Float128 __ldexpf128(_Float128 __x, int __exponent) noexcept(true); 
# 104
extern _Float128 logf128(_Float128 __x) noexcept(true); extern _Float128 __logf128(_Float128 __x) noexcept(true); 
# 107
extern _Float128 log10f128(_Float128 __x) noexcept(true); extern _Float128 __log10f128(_Float128 __x) noexcept(true); 
# 110
extern _Float128 modff128(_Float128 __x, _Float128 * __iptr) noexcept(true); extern _Float128 __modff128(_Float128 __x, _Float128 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float128 exp10f128(_Float128 __x) noexcept(true); extern _Float128 __exp10f128(_Float128 __x) noexcept(true); 
# 119
extern _Float128 expm1f128(_Float128 __x) noexcept(true); extern _Float128 __expm1f128(_Float128 __x) noexcept(true); 
# 122
extern _Float128 log1pf128(_Float128 __x) noexcept(true); extern _Float128 __log1pf128(_Float128 __x) noexcept(true); 
# 125
extern _Float128 logbf128(_Float128 __x) noexcept(true); extern _Float128 __logbf128(_Float128 __x) noexcept(true); 
# 130
extern _Float128 exp2f128(_Float128 __x) noexcept(true); extern _Float128 __exp2f128(_Float128 __x) noexcept(true); 
# 133
extern _Float128 log2f128(_Float128 __x) noexcept(true); extern _Float128 __log2f128(_Float128 __x) noexcept(true); 
# 140
extern _Float128 powf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __powf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 143
extern _Float128 sqrtf128(_Float128 __x) noexcept(true); extern _Float128 __sqrtf128(_Float128 __x) noexcept(true); 
# 147
extern _Float128 hypotf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __hypotf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 152
extern _Float128 cbrtf128(_Float128 __x) noexcept(true); extern _Float128 __cbrtf128(_Float128 __x) noexcept(true); 
# 159
extern _Float128 ceilf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __ceilf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float128 fabsf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __fabsf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float128 floorf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __floorf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float128 fmodf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __fmodf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 198 "/usr/include/bits/mathcalls.h" 3
extern _Float128 copysignf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __copysignf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float128 nanf128(const char * __tagb) noexcept(true); extern _Float128 __nanf128(const char * __tagb) noexcept(true); 
# 220 "/usr/include/bits/mathcalls.h" 3
extern _Float128 j0f128(_Float128) noexcept(true); extern _Float128 __j0f128(_Float128) noexcept(true); 
# 221
extern _Float128 j1f128(_Float128) noexcept(true); extern _Float128 __j1f128(_Float128) noexcept(true); 
# 222
extern _Float128 jnf128(int, _Float128) noexcept(true); extern _Float128 __jnf128(int, _Float128) noexcept(true); 
# 223
extern _Float128 y0f128(_Float128) noexcept(true); extern _Float128 __y0f128(_Float128) noexcept(true); 
# 224
extern _Float128 y1f128(_Float128) noexcept(true); extern _Float128 __y1f128(_Float128) noexcept(true); 
# 225
extern _Float128 ynf128(int, _Float128) noexcept(true); extern _Float128 __ynf128(int, _Float128) noexcept(true); 
# 231
extern _Float128 erff128(_Float128) noexcept(true); extern _Float128 __erff128(_Float128) noexcept(true); 
# 232
extern _Float128 erfcf128(_Float128) noexcept(true); extern _Float128 __erfcf128(_Float128) noexcept(true); 
# 233
extern _Float128 lgammaf128(_Float128) noexcept(true); extern _Float128 __lgammaf128(_Float128) noexcept(true); 
# 238
extern _Float128 tgammaf128(_Float128) noexcept(true); extern _Float128 __tgammaf128(_Float128) noexcept(true); 
# 252 "/usr/include/bits/mathcalls.h" 3
extern _Float128 lgammaf128_r(_Float128, int * __signgamp) noexcept(true); extern _Float128 __lgammaf128_r(_Float128, int * __signgamp) noexcept(true); 
# 259
extern _Float128 rintf128(_Float128 __x) noexcept(true); extern _Float128 __rintf128(_Float128 __x) noexcept(true); 
# 262
extern _Float128 nextafterf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __nextafterf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 269
extern _Float128 nextdownf128(_Float128 __x) noexcept(true); extern _Float128 __nextdownf128(_Float128 __x) noexcept(true); 
# 271
extern _Float128 nextupf128(_Float128 __x) noexcept(true); extern _Float128 __nextupf128(_Float128 __x) noexcept(true); 
# 275
extern _Float128 remainderf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __remainderf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 279
extern _Float128 scalbnf128(_Float128 __x, int __n) noexcept(true); extern _Float128 __scalbnf128(_Float128 __x, int __n) noexcept(true); 
# 283
extern int ilogbf128(_Float128 __x) noexcept(true); extern int __ilogbf128(_Float128 __x) noexcept(true); 
# 288
extern long llogbf128(_Float128 __x) noexcept(true); extern long __llogbf128(_Float128 __x) noexcept(true); 
# 293
extern _Float128 scalblnf128(_Float128 __x, long __n) noexcept(true); extern _Float128 __scalblnf128(_Float128 __x, long __n) noexcept(true); 
# 297
extern _Float128 nearbyintf128(_Float128 __x) noexcept(true); extern _Float128 __nearbyintf128(_Float128 __x) noexcept(true); 
# 301
extern _Float128 roundf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __roundf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float128 truncf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __truncf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float128 remquof128(_Float128 __x, _Float128 __y, int * __quo) noexcept(true); extern _Float128 __remquof128(_Float128 __x, _Float128 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf128(_Float128 __x) noexcept(true); extern long __lrintf128(_Float128 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf128(_Float128 __x) noexcept(true); extern long long __llrintf128(_Float128 __x) noexcept(true); 
# 323
extern long lroundf128(_Float128 __x) noexcept(true); extern long __lroundf128(_Float128 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf128(_Float128 __x) noexcept(true); extern long long __llroundf128(_Float128 __x) noexcept(true); 
# 329
extern _Float128 fdimf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __fdimf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 333
extern _Float128 fmaxf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaxf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float128 fminf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float128 fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); extern _Float128 __fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 345
extern _Float128 roundevenf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __roundevenf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef128(_Float128 * __cx, const _Float128 * __x) noexcept(true); 
# 377
extern _Float128 fmaxmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaxmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float128 fminmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float128 fmaximumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float128 fminimumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float128 fmaximum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float128 fminimum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float128 fmaximum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float128 fminimum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float128 fmaximum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float128 fminimum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf128(const _Float128 * __x, const _Float128 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf128(const _Float128 * __x, const _Float128 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float128 getpayloadf128(const _Float128 * __x) noexcept(true); extern _Float128 __getpayloadf128(const _Float128 * __x) noexcept(true); 
# 424
extern int setpayloadf128(_Float128 * __x, _Float128 __payload) noexcept(true); 
# 427
extern int setpayloadsigf128(_Float128 * __x, _Float128 __payload) noexcept(true); 
# 53 "/usr/include/bits/mathcalls.h" 3
extern _Float32x acosf32x(_Float32x __x) noexcept(true); extern _Float32x __acosf32x(_Float32x __x) noexcept(true); 
# 55
extern _Float32x asinf32x(_Float32x __x) noexcept(true); extern _Float32x __asinf32x(_Float32x __x) noexcept(true); 
# 57
extern _Float32x atanf32x(_Float32x __x) noexcept(true); extern _Float32x __atanf32x(_Float32x __x) noexcept(true); 
# 59
extern _Float32x atan2f32x(_Float32x __y, _Float32x __x) noexcept(true); extern _Float32x __atan2f32x(_Float32x __y, _Float32x __x) noexcept(true); 
# 62
extern _Float32x cosf32x(_Float32x __x) noexcept(true); extern _Float32x __cosf32x(_Float32x __x) noexcept(true); 
# 64
extern _Float32x sinf32x(_Float32x __x) noexcept(true); extern _Float32x __sinf32x(_Float32x __x) noexcept(true); 
# 66
extern _Float32x tanf32x(_Float32x __x) noexcept(true); extern _Float32x __tanf32x(_Float32x __x) noexcept(true); 
# 71
extern _Float32x coshf32x(_Float32x __x) noexcept(true); extern _Float32x __coshf32x(_Float32x __x) noexcept(true); 
# 73
extern _Float32x sinhf32x(_Float32x __x) noexcept(true); extern _Float32x __sinhf32x(_Float32x __x) noexcept(true); 
# 75
extern _Float32x tanhf32x(_Float32x __x) noexcept(true); extern _Float32x __tanhf32x(_Float32x __x) noexcept(true); 
# 79
extern void sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) noexcept(true); extern void __sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) noexcept(true); 
# 85
extern _Float32x acoshf32x(_Float32x __x) noexcept(true); extern _Float32x __acoshf32x(_Float32x __x) noexcept(true); 
# 87
extern _Float32x asinhf32x(_Float32x __x) noexcept(true); extern _Float32x __asinhf32x(_Float32x __x) noexcept(true); 
# 89
extern _Float32x atanhf32x(_Float32x __x) noexcept(true); extern _Float32x __atanhf32x(_Float32x __x) noexcept(true); 
# 95
extern _Float32x expf32x(_Float32x __x) noexcept(true); extern _Float32x __expf32x(_Float32x __x) noexcept(true); 
# 98
extern _Float32x frexpf32x(_Float32x __x, int * __exponent) noexcept(true); extern _Float32x __frexpf32x(_Float32x __x, int * __exponent) noexcept(true); 
# 101
extern _Float32x ldexpf32x(_Float32x __x, int __exponent) noexcept(true); extern _Float32x __ldexpf32x(_Float32x __x, int __exponent) noexcept(true); 
# 104
extern _Float32x logf32x(_Float32x __x) noexcept(true); extern _Float32x __logf32x(_Float32x __x) noexcept(true); 
# 107
extern _Float32x log10f32x(_Float32x __x) noexcept(true); extern _Float32x __log10f32x(_Float32x __x) noexcept(true); 
# 110
extern _Float32x modff32x(_Float32x __x, _Float32x * __iptr) noexcept(true); extern _Float32x __modff32x(_Float32x __x, _Float32x * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float32x exp10f32x(_Float32x __x) noexcept(true); extern _Float32x __exp10f32x(_Float32x __x) noexcept(true); 
# 119
extern _Float32x expm1f32x(_Float32x __x) noexcept(true); extern _Float32x __expm1f32x(_Float32x __x) noexcept(true); 
# 122
extern _Float32x log1pf32x(_Float32x __x) noexcept(true); extern _Float32x __log1pf32x(_Float32x __x) noexcept(true); 
# 125
extern _Float32x logbf32x(_Float32x __x) noexcept(true); extern _Float32x __logbf32x(_Float32x __x) noexcept(true); 
# 130
extern _Float32x exp2f32x(_Float32x __x) noexcept(true); extern _Float32x __exp2f32x(_Float32x __x) noexcept(true); 
# 133
extern _Float32x log2f32x(_Float32x __x) noexcept(true); extern _Float32x __log2f32x(_Float32x __x) noexcept(true); 
# 140
extern _Float32x powf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __powf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 143
extern _Float32x sqrtf32x(_Float32x __x) noexcept(true); extern _Float32x __sqrtf32x(_Float32x __x) noexcept(true); 
# 147
extern _Float32x hypotf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __hypotf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 152
extern _Float32x cbrtf32x(_Float32x __x) noexcept(true); extern _Float32x __cbrtf32x(_Float32x __x) noexcept(true); 
# 159
extern _Float32x ceilf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __ceilf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 162
extern _Float32x fabsf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __fabsf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 165
extern _Float32x floorf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __floorf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 168
extern _Float32x fmodf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __fmodf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 198 "/usr/include/bits/mathcalls.h" 3
extern _Float32x copysignf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __copysignf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 203
extern _Float32x nanf32x(const char * __tagb) noexcept(true); extern _Float32x __nanf32x(const char * __tagb) noexcept(true); 
# 220 "/usr/include/bits/mathcalls.h" 3
extern _Float32x j0f32x(_Float32x) noexcept(true); extern _Float32x __j0f32x(_Float32x) noexcept(true); 
# 221
extern _Float32x j1f32x(_Float32x) noexcept(true); extern _Float32x __j1f32x(_Float32x) noexcept(true); 
# 222
extern _Float32x jnf32x(int, _Float32x) noexcept(true); extern _Float32x __jnf32x(int, _Float32x) noexcept(true); 
# 223
extern _Float32x y0f32x(_Float32x) noexcept(true); extern _Float32x __y0f32x(_Float32x) noexcept(true); 
# 224
extern _Float32x y1f32x(_Float32x) noexcept(true); extern _Float32x __y1f32x(_Float32x) noexcept(true); 
# 225
extern _Float32x ynf32x(int, _Float32x) noexcept(true); extern _Float32x __ynf32x(int, _Float32x) noexcept(true); 
# 231
extern _Float32x erff32x(_Float32x) noexcept(true); extern _Float32x __erff32x(_Float32x) noexcept(true); 
# 232
extern _Float32x erfcf32x(_Float32x) noexcept(true); extern _Float32x __erfcf32x(_Float32x) noexcept(true); 
# 233
extern _Float32x lgammaf32x(_Float32x) noexcept(true); extern _Float32x __lgammaf32x(_Float32x) noexcept(true); 
# 238
extern _Float32x tgammaf32x(_Float32x) noexcept(true); extern _Float32x __tgammaf32x(_Float32x) noexcept(true); 
# 252 "/usr/include/bits/mathcalls.h" 3
extern _Float32x lgammaf32x_r(_Float32x, int * __signgamp) noexcept(true); extern _Float32x __lgammaf32x_r(_Float32x, int * __signgamp) noexcept(true); 
# 259
extern _Float32x rintf32x(_Float32x __x) noexcept(true); extern _Float32x __rintf32x(_Float32x __x) noexcept(true); 
# 262
extern _Float32x nextafterf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __nextafterf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 269
extern _Float32x nextdownf32x(_Float32x __x) noexcept(true); extern _Float32x __nextdownf32x(_Float32x __x) noexcept(true); 
# 271
extern _Float32x nextupf32x(_Float32x __x) noexcept(true); extern _Float32x __nextupf32x(_Float32x __x) noexcept(true); 
# 275
extern _Float32x remainderf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __remainderf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 279
extern _Float32x scalbnf32x(_Float32x __x, int __n) noexcept(true); extern _Float32x __scalbnf32x(_Float32x __x, int __n) noexcept(true); 
# 283
extern int ilogbf32x(_Float32x __x) noexcept(true); extern int __ilogbf32x(_Float32x __x) noexcept(true); 
# 288
extern long llogbf32x(_Float32x __x) noexcept(true); extern long __llogbf32x(_Float32x __x) noexcept(true); 
# 293
extern _Float32x scalblnf32x(_Float32x __x, long __n) noexcept(true); extern _Float32x __scalblnf32x(_Float32x __x, long __n) noexcept(true); 
# 297
extern _Float32x nearbyintf32x(_Float32x __x) noexcept(true); extern _Float32x __nearbyintf32x(_Float32x __x) noexcept(true); 
# 301
extern _Float32x roundf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __roundf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 305
extern _Float32x truncf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __truncf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 310
extern _Float32x remquof32x(_Float32x __x, _Float32x __y, int * __quo) noexcept(true); extern _Float32x __remquof32x(_Float32x __x, _Float32x __y, int * __quo) noexcept(true); 
# 317
extern long lrintf32x(_Float32x __x) noexcept(true); extern long __lrintf32x(_Float32x __x) noexcept(true); 
# 319
__extension__ extern long long llrintf32x(_Float32x __x) noexcept(true); extern long long __llrintf32x(_Float32x __x) noexcept(true); 
# 323
extern long lroundf32x(_Float32x __x) noexcept(true); extern long __lroundf32x(_Float32x __x) noexcept(true); 
# 325
__extension__ extern long long llroundf32x(_Float32x __x) noexcept(true); extern long long __llroundf32x(_Float32x __x) noexcept(true); 
# 329
extern _Float32x fdimf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __fdimf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 333
extern _Float32x fmaxf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaxf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 336
extern _Float32x fminf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 340
extern _Float32x fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); extern _Float32x __fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); 
# 345
extern _Float32x roundevenf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __roundevenf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef32x(_Float32x * __cx, const _Float32x * __x) noexcept(true); 
# 377
extern _Float32x fmaxmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaxmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 380
extern _Float32x fminmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 385
extern _Float32x fmaximumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 388
extern _Float32x fminimumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 391
extern _Float32x fmaximum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 394
extern _Float32x fminimum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 397
extern _Float32x fmaximum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 400
extern _Float32x fminimum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 403
extern _Float32x fmaximum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 406
extern _Float32x fminimum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf32x(const _Float32x * __x, const _Float32x * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf32x(const _Float32x * __x, const _Float32x * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float32x getpayloadf32x(const _Float32x * __x) noexcept(true); extern _Float32x __getpayloadf32x(const _Float32x * __x) noexcept(true); 
# 424
extern int setpayloadf32x(_Float32x * __x, _Float32x __payload) noexcept(true); 
# 427
extern int setpayloadsigf32x(_Float32x * __x, _Float32x __payload) noexcept(true); 
# 53 "/usr/include/bits/mathcalls.h" 3
extern _Float64x acosf64x(_Float64x __x) noexcept(true); extern _Float64x __acosf64x(_Float64x __x) noexcept(true); 
# 55
extern _Float64x asinf64x(_Float64x __x) noexcept(true); extern _Float64x __asinf64x(_Float64x __x) noexcept(true); 
# 57
extern _Float64x atanf64x(_Float64x __x) noexcept(true); extern _Float64x __atanf64x(_Float64x __x) noexcept(true); 
# 59
extern _Float64x atan2f64x(_Float64x __y, _Float64x __x) noexcept(true); extern _Float64x __atan2f64x(_Float64x __y, _Float64x __x) noexcept(true); 
# 62
extern _Float64x cosf64x(_Float64x __x) noexcept(true); extern _Float64x __cosf64x(_Float64x __x) noexcept(true); 
# 64
extern _Float64x sinf64x(_Float64x __x) noexcept(true); extern _Float64x __sinf64x(_Float64x __x) noexcept(true); 
# 66
extern _Float64x tanf64x(_Float64x __x) noexcept(true); extern _Float64x __tanf64x(_Float64x __x) noexcept(true); 
# 71
extern _Float64x coshf64x(_Float64x __x) noexcept(true); extern _Float64x __coshf64x(_Float64x __x) noexcept(true); 
# 73
extern _Float64x sinhf64x(_Float64x __x) noexcept(true); extern _Float64x __sinhf64x(_Float64x __x) noexcept(true); 
# 75
extern _Float64x tanhf64x(_Float64x __x) noexcept(true); extern _Float64x __tanhf64x(_Float64x __x) noexcept(true); 
# 79
extern void sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) noexcept(true); extern void __sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) noexcept(true); 
# 85
extern _Float64x acoshf64x(_Float64x __x) noexcept(true); extern _Float64x __acoshf64x(_Float64x __x) noexcept(true); 
# 87
extern _Float64x asinhf64x(_Float64x __x) noexcept(true); extern _Float64x __asinhf64x(_Float64x __x) noexcept(true); 
# 89
extern _Float64x atanhf64x(_Float64x __x) noexcept(true); extern _Float64x __atanhf64x(_Float64x __x) noexcept(true); 
# 95
extern _Float64x expf64x(_Float64x __x) noexcept(true); extern _Float64x __expf64x(_Float64x __x) noexcept(true); 
# 98
extern _Float64x frexpf64x(_Float64x __x, int * __exponent) noexcept(true); extern _Float64x __frexpf64x(_Float64x __x, int * __exponent) noexcept(true); 
# 101
extern _Float64x ldexpf64x(_Float64x __x, int __exponent) noexcept(true); extern _Float64x __ldexpf64x(_Float64x __x, int __exponent) noexcept(true); 
# 104
extern _Float64x logf64x(_Float64x __x) noexcept(true); extern _Float64x __logf64x(_Float64x __x) noexcept(true); 
# 107
extern _Float64x log10f64x(_Float64x __x) noexcept(true); extern _Float64x __log10f64x(_Float64x __x) noexcept(true); 
# 110
extern _Float64x modff64x(_Float64x __x, _Float64x * __iptr) noexcept(true); extern _Float64x __modff64x(_Float64x __x, _Float64x * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float64x exp10f64x(_Float64x __x) noexcept(true); extern _Float64x __exp10f64x(_Float64x __x) noexcept(true); 
# 119
extern _Float64x expm1f64x(_Float64x __x) noexcept(true); extern _Float64x __expm1f64x(_Float64x __x) noexcept(true); 
# 122
extern _Float64x log1pf64x(_Float64x __x) noexcept(true); extern _Float64x __log1pf64x(_Float64x __x) noexcept(true); 
# 125
extern _Float64x logbf64x(_Float64x __x) noexcept(true); extern _Float64x __logbf64x(_Float64x __x) noexcept(true); 
# 130
extern _Float64x exp2f64x(_Float64x __x) noexcept(true); extern _Float64x __exp2f64x(_Float64x __x) noexcept(true); 
# 133
extern _Float64x log2f64x(_Float64x __x) noexcept(true); extern _Float64x __log2f64x(_Float64x __x) noexcept(true); 
# 140
extern _Float64x powf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __powf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 143
extern _Float64x sqrtf64x(_Float64x __x) noexcept(true); extern _Float64x __sqrtf64x(_Float64x __x) noexcept(true); 
# 147
extern _Float64x hypotf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __hypotf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 152
extern _Float64x cbrtf64x(_Float64x __x) noexcept(true); extern _Float64x __cbrtf64x(_Float64x __x) noexcept(true); 
# 159
extern _Float64x ceilf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __ceilf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 162
extern _Float64x fabsf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __fabsf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 165
extern _Float64x floorf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __floorf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 168
extern _Float64x fmodf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __fmodf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 198 "/usr/include/bits/mathcalls.h" 3
extern _Float64x copysignf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __copysignf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 203
extern _Float64x nanf64x(const char * __tagb) noexcept(true); extern _Float64x __nanf64x(const char * __tagb) noexcept(true); 
# 220 "/usr/include/bits/mathcalls.h" 3
extern _Float64x j0f64x(_Float64x) noexcept(true); extern _Float64x __j0f64x(_Float64x) noexcept(true); 
# 221
extern _Float64x j1f64x(_Float64x) noexcept(true); extern _Float64x __j1f64x(_Float64x) noexcept(true); 
# 222
extern _Float64x jnf64x(int, _Float64x) noexcept(true); extern _Float64x __jnf64x(int, _Float64x) noexcept(true); 
# 223
extern _Float64x y0f64x(_Float64x) noexcept(true); extern _Float64x __y0f64x(_Float64x) noexcept(true); 
# 224
extern _Float64x y1f64x(_Float64x) noexcept(true); extern _Float64x __y1f64x(_Float64x) noexcept(true); 
# 225
extern _Float64x ynf64x(int, _Float64x) noexcept(true); extern _Float64x __ynf64x(int, _Float64x) noexcept(true); 
# 231
extern _Float64x erff64x(_Float64x) noexcept(true); extern _Float64x __erff64x(_Float64x) noexcept(true); 
# 232
extern _Float64x erfcf64x(_Float64x) noexcept(true); extern _Float64x __erfcf64x(_Float64x) noexcept(true); 
# 233
extern _Float64x lgammaf64x(_Float64x) noexcept(true); extern _Float64x __lgammaf64x(_Float64x) noexcept(true); 
# 238
extern _Float64x tgammaf64x(_Float64x) noexcept(true); extern _Float64x __tgammaf64x(_Float64x) noexcept(true); 
# 252 "/usr/include/bits/mathcalls.h" 3
extern _Float64x lgammaf64x_r(_Float64x, int * __signgamp) noexcept(true); extern _Float64x __lgammaf64x_r(_Float64x, int * __signgamp) noexcept(true); 
# 259
extern _Float64x rintf64x(_Float64x __x) noexcept(true); extern _Float64x __rintf64x(_Float64x __x) noexcept(true); 
# 262
extern _Float64x nextafterf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __nextafterf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 269
extern _Float64x nextdownf64x(_Float64x __x) noexcept(true); extern _Float64x __nextdownf64x(_Float64x __x) noexcept(true); 
# 271
extern _Float64x nextupf64x(_Float64x __x) noexcept(true); extern _Float64x __nextupf64x(_Float64x __x) noexcept(true); 
# 275
extern _Float64x remainderf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __remainderf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 279
extern _Float64x scalbnf64x(_Float64x __x, int __n) noexcept(true); extern _Float64x __scalbnf64x(_Float64x __x, int __n) noexcept(true); 
# 283
extern int ilogbf64x(_Float64x __x) noexcept(true); extern int __ilogbf64x(_Float64x __x) noexcept(true); 
# 288
extern long llogbf64x(_Float64x __x) noexcept(true); extern long __llogbf64x(_Float64x __x) noexcept(true); 
# 293
extern _Float64x scalblnf64x(_Float64x __x, long __n) noexcept(true); extern _Float64x __scalblnf64x(_Float64x __x, long __n) noexcept(true); 
# 297
extern _Float64x nearbyintf64x(_Float64x __x) noexcept(true); extern _Float64x __nearbyintf64x(_Float64x __x) noexcept(true); 
# 301
extern _Float64x roundf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __roundf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 305
extern _Float64x truncf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __truncf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 310
extern _Float64x remquof64x(_Float64x __x, _Float64x __y, int * __quo) noexcept(true); extern _Float64x __remquof64x(_Float64x __x, _Float64x __y, int * __quo) noexcept(true); 
# 317
extern long lrintf64x(_Float64x __x) noexcept(true); extern long __lrintf64x(_Float64x __x) noexcept(true); 
# 319
__extension__ extern long long llrintf64x(_Float64x __x) noexcept(true); extern long long __llrintf64x(_Float64x __x) noexcept(true); 
# 323
extern long lroundf64x(_Float64x __x) noexcept(true); extern long __lroundf64x(_Float64x __x) noexcept(true); 
# 325
__extension__ extern long long llroundf64x(_Float64x __x) noexcept(true); extern long long __llroundf64x(_Float64x __x) noexcept(true); 
# 329
extern _Float64x fdimf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __fdimf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 333
extern _Float64x fmaxf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaxf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 336
extern _Float64x fminf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 340
extern _Float64x fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); extern _Float64x __fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 345
extern _Float64x roundevenf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __roundevenf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef64x(_Float64x * __cx, const _Float64x * __x) noexcept(true); 
# 377
extern _Float64x fmaxmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaxmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 380
extern _Float64x fminmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 385
extern _Float64x fmaximumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 388
extern _Float64x fminimumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 391
extern _Float64x fmaximum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 394
extern _Float64x fminimum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 397
extern _Float64x fmaximum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 400
extern _Float64x fminimum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 403
extern _Float64x fmaximum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 406
extern _Float64x fminimum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf64x(const _Float64x * __x, const _Float64x * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf64x(const _Float64x * __x, const _Float64x * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float64x getpayloadf64x(const _Float64x * __x) noexcept(true); extern _Float64x __getpayloadf64x(const _Float64x * __x) noexcept(true); 
# 424
extern int setpayloadf64x(_Float64x * __x, _Float64x __payload) noexcept(true); 
# 427
extern int setpayloadsigf64x(_Float64x * __x, _Float64x __payload) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern float fadd(double __x, double __y) noexcept(true); 
# 27
extern float fdiv(double __x, double __y) noexcept(true); 
# 30
extern float ffma(double __x, double __y, double __z) noexcept(true); 
# 33
extern float fmul(double __x, double __y) noexcept(true); 
# 36
extern float fsqrt(double __x) noexcept(true); 
# 39
extern float fsub(double __x, double __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern float faddl(long double __x, long double __y) noexcept(true); 
# 27
extern float fdivl(long double __x, long double __y) noexcept(true); 
# 30
extern float ffmal(long double __x, long double __y, long double __z) noexcept(true); 
# 33
extern float fmull(long double __x, long double __y) noexcept(true); 
# 36
extern float fsqrtl(long double __x) noexcept(true); 
# 39
extern float fsubl(long double __x, long double __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern double daddl(long double __x, long double __y) noexcept(true); 
# 27
extern double ddivl(long double __x, long double __y) noexcept(true); 
# 30
extern double dfmal(long double __x, long double __y, long double __z) noexcept(true); 
# 33
extern double dmull(long double __x, long double __y) noexcept(true); 
# 36
extern double dsqrtl(long double __x) noexcept(true); 
# 39
extern double dsubl(long double __x, long double __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 27
extern _Float32 f32divf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 30
extern _Float32 f32fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); 
# 33
extern _Float32 f32mulf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf32x(_Float32x __x) noexcept(true); 
# 39
extern _Float32 f32subf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 27
extern _Float32 f32divf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 30
extern _Float32 f32fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 33
extern _Float32 f32mulf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf64(_Float64 __x) noexcept(true); 
# 39
extern _Float32 f32subf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float32 f32divf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float32 f32fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float32 f32mulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float32 f32subf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float32 f32divf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float32 f32fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float32 f32mulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float32 f32subf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 27
extern _Float32x f32xdivf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 33
extern _Float32x f32xmulf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf64(_Float64 __x) noexcept(true); 
# 39
extern _Float32x f32xsubf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float32x f32xdivf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float32x f32xmulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float32x f32xsubf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float32x f32xdivf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float32x f32xmulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float32x f32xsubf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float64 f64divf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float64 f64fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float64 f64mulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float64 f64sqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float64 f64subf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float64 f64divf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float64 f64fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float64 f64mulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float64 f64sqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float64 f64subf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/bits/mathcalls-narrow.h" 3
extern _Float64x f64xaddf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float64x f64xdivf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float64x f64xfmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float64x f64xmulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float64x f64xsqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float64x f64xsubf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 854 "/usr/include/math.h" 3
extern int signgam; 
# 935 "/usr/include/math.h" 3
enum { 
# 936
FP_NAN, 
# 939
FP_INFINITE, 
# 942
FP_ZERO, 
# 945
FP_SUBNORMAL, 
# 948
FP_NORMAL
# 951
}; 
# 23 "/usr/include/bits/iscanonical.h" 3
extern int __iscanonicall(long double __x) noexcept(true)
# 24
 __attribute((const)); 
# 46 "/usr/include/bits/iscanonical.h" 3
extern "C++" {
# 47
inline int iscanonical(float __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 48
inline int iscanonical(double __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 49
inline int iscanonical(long double __val) { return __iscanonicall(__val); } 
# 51
inline int iscanonical(_Float128 __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 53
}
# 1066 "/usr/include/math.h" 3
extern "C++" {
# 1067
inline int issignaling(float __val) { return __issignalingf(__val); } 
# 1068
inline int issignaling(double __val) { return __issignaling(__val); } 
# 1070
inline int issignaling(long double __val) 
# 1071
{ 
# 1075
return __issignalingl(__val); 
# 1077
} 
# 1081
inline int issignaling(_Float128 __val) { return __issignalingf128(__val); } 
# 1083
}
# 1097 "/usr/include/math.h" 3
extern "C++" {
# 1128 "/usr/include/math.h" 3
template< class __T> inline bool 
# 1129
iszero(__T __val) 
# 1130
{ 
# 1131
return __val == 0; 
# 1132
} 
# 1134
}
# 1363 "/usr/include/math.h" 3
extern "C++" {
# 1364
template< class > struct __iseqsig_type; 
# 1366
template<> struct __iseqsig_type< float>  { 
# 1368
static int __call(float __x, float __y) throw() 
# 1369
{ 
# 1370
return __iseqsigf(__x, __y); 
# 1371
} 
# 1372
}; 
# 1374
template<> struct __iseqsig_type< double>  { 
# 1376
static int __call(double __x, double __y) throw() 
# 1377
{ 
# 1378
return __iseqsig(__x, __y); 
# 1379
} 
# 1380
}; 
# 1382
template<> struct __iseqsig_type< long double>  { 
# 1384
static int __call(long double __x, long double __y) throw() 
# 1385
{ 
# 1387
return __iseqsigl(__x, __y); 
# 1391
} 
# 1392
}; 
# 1417 "/usr/include/math.h" 3
template<> struct __iseqsig_type< __float128>  { 
# 1419
static int __call(_Float128 __x, _Float128 __y) throw() 
# 1420
{ 
# 1422
return __iseqsigf128(__x, __y); 
# 1426
} 
# 1427
}; 
# 1454 "/usr/include/math.h" 3
template< class _T1, class _T2> inline int 
# 1456
iseqsig(_T1 __x, _T2 __y) throw() 
# 1457
{ 
# 1459
typedef __decltype(((__x + __y) + (0.0F))) _T3; 
# 1463
return __iseqsig_type< __decltype(((__x + __y) + (0.0F)))> ::__call(__x, __y); 
# 1464
} 
# 1466
}
# 1471
}
# 77 "/usr/include/c++/12.2.1/cmath" 3
extern "C++" {
# 79
namespace std __attribute((__visibility__("default"))) { 
# 83
using ::acos;
# 87
constexpr float acos(float __x) 
# 88
{ return __builtin_acosf(__x); } 
# 91
constexpr long double acos(long double __x) 
# 92
{ return __builtin_acosl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
acos(_Tp __x) 
# 100
{ return __builtin_acos(__x); } 
# 102
using ::asin;
# 106
constexpr float asin(float __x) 
# 107
{ return __builtin_asinf(__x); } 
# 110
constexpr long double asin(long double __x) 
# 111
{ return __builtin_asinl(__x); } 
# 114
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
asin(_Tp __x) 
# 119
{ return __builtin_asin(__x); } 
# 121
using ::atan;
# 125
constexpr float atan(float __x) 
# 126
{ return __builtin_atanf(__x); } 
# 129
constexpr long double atan(long double __x) 
# 130
{ return __builtin_atanl(__x); } 
# 133
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
atan(_Tp __x) 
# 138
{ return __builtin_atan(__x); } 
# 140
using ::atan2;
# 144
constexpr float atan2(float __y, float __x) 
# 145
{ return __builtin_atan2f(__y, __x); } 
# 148
constexpr long double atan2(long double __y, long double __x) 
# 149
{ return __builtin_atan2l(__y, __x); } 
# 152
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 155
atan2(_Tp __y, _Up __x) 
# 156
{ 
# 157
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 158
return atan2((__type)__y, (__type)__x); 
# 159
} 
# 161
using ::ceil;
# 165
constexpr float ceil(float __x) 
# 166
{ return __builtin_ceilf(__x); } 
# 169
constexpr long double ceil(long double __x) 
# 170
{ return __builtin_ceill(__x); } 
# 173
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 177
ceil(_Tp __x) 
# 178
{ return __builtin_ceil(__x); } 
# 180
using ::cos;
# 184
constexpr float cos(float __x) 
# 185
{ return __builtin_cosf(__x); } 
# 188
constexpr long double cos(long double __x) 
# 189
{ return __builtin_cosl(__x); } 
# 192
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
cos(_Tp __x) 
# 197
{ return __builtin_cos(__x); } 
# 199
using ::cosh;
# 203
constexpr float cosh(float __x) 
# 204
{ return __builtin_coshf(__x); } 
# 207
constexpr long double cosh(long double __x) 
# 208
{ return __builtin_coshl(__x); } 
# 211
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cosh(_Tp __x) 
# 216
{ return __builtin_cosh(__x); } 
# 218
using ::exp;
# 222
constexpr float exp(float __x) 
# 223
{ return __builtin_expf(__x); } 
# 226
constexpr long double exp(long double __x) 
# 227
{ return __builtin_expl(__x); } 
# 230
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
exp(_Tp __x) 
# 235
{ return __builtin_exp(__x); } 
# 237
using ::fabs;
# 241
constexpr float fabs(float __x) 
# 242
{ return __builtin_fabsf(__x); } 
# 245
constexpr long double fabs(long double __x) 
# 246
{ return __builtin_fabsl(__x); } 
# 249
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
fabs(_Tp __x) 
# 254
{ return __builtin_fabs(__x); } 
# 256
using ::floor;
# 260
constexpr float floor(float __x) 
# 261
{ return __builtin_floorf(__x); } 
# 264
constexpr long double floor(long double __x) 
# 265
{ return __builtin_floorl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
floor(_Tp __x) 
# 273
{ return __builtin_floor(__x); } 
# 275
using ::fmod;
# 279
constexpr float fmod(float __x, float __y) 
# 280
{ return __builtin_fmodf(__x, __y); } 
# 283
constexpr long double fmod(long double __x, long double __y) 
# 284
{ return __builtin_fmodl(__x, __y); } 
# 287
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 290
fmod(_Tp __x, _Up __y) 
# 291
{ 
# 292
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 293
return fmod((__type)__x, (__type)__y); 
# 294
} 
# 296
using ::frexp;
# 300
inline float frexp(float __x, int *__exp) 
# 301
{ return __builtin_frexpf(__x, __exp); } 
# 304
inline long double frexp(long double __x, int *__exp) 
# 305
{ return __builtin_frexpl(__x, __exp); } 
# 308
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 312
frexp(_Tp __x, int *__exp) 
# 313
{ return __builtin_frexp(__x, __exp); } 
# 315
using ::ldexp;
# 319
constexpr float ldexp(float __x, int __exp) 
# 320
{ return __builtin_ldexpf(__x, __exp); } 
# 323
constexpr long double ldexp(long double __x, int __exp) 
# 324
{ return __builtin_ldexpl(__x, __exp); } 
# 327
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
ldexp(_Tp __x, int __exp) 
# 332
{ return __builtin_ldexp(__x, __exp); } 
# 334
using ::log;
# 338
constexpr float log(float __x) 
# 339
{ return __builtin_logf(__x); } 
# 342
constexpr long double log(long double __x) 
# 343
{ return __builtin_logl(__x); } 
# 346
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
log(_Tp __x) 
# 351
{ return __builtin_log(__x); } 
# 353
using ::log10;
# 357
constexpr float log10(float __x) 
# 358
{ return __builtin_log10f(__x); } 
# 361
constexpr long double log10(long double __x) 
# 362
{ return __builtin_log10l(__x); } 
# 365
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log10(_Tp __x) 
# 370
{ return __builtin_log10(__x); } 
# 372
using ::modf;
# 376
inline float modf(float __x, float *__iptr) 
# 377
{ return __builtin_modff(__x, __iptr); } 
# 380
inline long double modf(long double __x, long double *__iptr) 
# 381
{ return __builtin_modfl(__x, __iptr); } 
# 384
using ::pow;
# 388
constexpr float pow(float __x, float __y) 
# 389
{ return __builtin_powf(__x, __y); } 
# 392
constexpr long double pow(long double __x, long double __y) 
# 393
{ return __builtin_powl(__x, __y); } 
# 412 "/usr/include/c++/12.2.1/cmath" 3
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 415
pow(_Tp __x, _Up __y) 
# 416
{ 
# 417
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 418
return pow((__type)__x, (__type)__y); 
# 419
} 
# 421
using ::sin;
# 425
constexpr float sin(float __x) 
# 426
{ return __builtin_sinf(__x); } 
# 429
constexpr long double sin(long double __x) 
# 430
{ return __builtin_sinl(__x); } 
# 433
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 437
sin(_Tp __x) 
# 438
{ return __builtin_sin(__x); } 
# 440
using ::sinh;
# 444
constexpr float sinh(float __x) 
# 445
{ return __builtin_sinhf(__x); } 
# 448
constexpr long double sinh(long double __x) 
# 449
{ return __builtin_sinhl(__x); } 
# 452
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sinh(_Tp __x) 
# 457
{ return __builtin_sinh(__x); } 
# 459
using ::sqrt;
# 463
constexpr float sqrt(float __x) 
# 464
{ return __builtin_sqrtf(__x); } 
# 467
constexpr long double sqrt(long double __x) 
# 468
{ return __builtin_sqrtl(__x); } 
# 471
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sqrt(_Tp __x) 
# 476
{ return __builtin_sqrt(__x); } 
# 478
using ::tan;
# 482
constexpr float tan(float __x) 
# 483
{ return __builtin_tanf(__x); } 
# 486
constexpr long double tan(long double __x) 
# 487
{ return __builtin_tanl(__x); } 
# 490
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
tan(_Tp __x) 
# 495
{ return __builtin_tan(__x); } 
# 497
using ::tanh;
# 501
constexpr float tanh(float __x) 
# 502
{ return __builtin_tanhf(__x); } 
# 505
constexpr long double tanh(long double __x) 
# 506
{ return __builtin_tanhl(__x); } 
# 509
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tanh(_Tp __x) 
# 514
{ return __builtin_tanh(__x); } 
# 537 "/usr/include/c++/12.2.1/cmath" 3
constexpr int fpclassify(float __x) 
# 538
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 539
} 
# 542
constexpr int fpclassify(double __x) 
# 543
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 544
} 
# 547
constexpr int fpclassify(long double __x) 
# 548
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 549
} 
# 553
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 556
fpclassify(_Tp __x) 
# 557
{ return (__x != 0) ? 4 : 2; } 
# 562
constexpr bool isfinite(float __x) 
# 563
{ return __builtin_isfinite(__x); } 
# 566
constexpr bool isfinite(double __x) 
# 567
{ return __builtin_isfinite(__x); } 
# 570
constexpr bool isfinite(long double __x) 
# 571
{ return __builtin_isfinite(__x); } 
# 575
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 578
isfinite(_Tp __x) 
# 579
{ return true; } 
# 584
constexpr bool isinf(float __x) 
# 585
{ return __builtin_isinf(__x); } 
# 592
constexpr bool isinf(double __x) 
# 593
{ return __builtin_isinf(__x); } 
# 597
constexpr bool isinf(long double __x) 
# 598
{ return __builtin_isinf(__x); } 
# 602
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 605
isinf(_Tp __x) 
# 606
{ return false; } 
# 611
constexpr bool isnan(float __x) 
# 612
{ return __builtin_isnan(__x); } 
# 619
constexpr bool isnan(double __x) 
# 620
{ return __builtin_isnan(__x); } 
# 624
constexpr bool isnan(long double __x) 
# 625
{ return __builtin_isnan(__x); } 
# 629
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 632
isnan(_Tp __x) 
# 633
{ return false; } 
# 638
constexpr bool isnormal(float __x) 
# 639
{ return __builtin_isnormal(__x); } 
# 642
constexpr bool isnormal(double __x) 
# 643
{ return __builtin_isnormal(__x); } 
# 646
constexpr bool isnormal(long double __x) 
# 647
{ return __builtin_isnormal(__x); } 
# 651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 654
isnormal(_Tp __x) 
# 655
{ return (__x != 0) ? true : false; } 
# 661
constexpr bool signbit(float __x) 
# 662
{ return __builtin_signbit(__x); } 
# 665
constexpr bool signbit(double __x) 
# 666
{ return __builtin_signbit(__x); } 
# 669
constexpr bool signbit(long double __x) 
# 670
{ return __builtin_signbit(__x); } 
# 674
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 677
signbit(_Tp __x) 
# 678
{ return (__x < 0) ? true : false; } 
# 683
constexpr bool isgreater(float __x, float __y) 
# 684
{ return __builtin_isgreater(__x, __y); } 
# 687
constexpr bool isgreater(double __x, double __y) 
# 688
{ return __builtin_isgreater(__x, __y); } 
# 691
constexpr bool isgreater(long double __x, long double __y) 
# 692
{ return __builtin_isgreater(__x, __y); } 
# 696
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 700
isgreater(_Tp __x, _Up __y) 
# 701
{ 
# 702
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 703
return __builtin_isgreater((__type)__x, (__type)__y); 
# 704
} 
# 709
constexpr bool isgreaterequal(float __x, float __y) 
# 710
{ return __builtin_isgreaterequal(__x, __y); } 
# 713
constexpr bool isgreaterequal(double __x, double __y) 
# 714
{ return __builtin_isgreaterequal(__x, __y); } 
# 717
constexpr bool isgreaterequal(long double __x, long double __y) 
# 718
{ return __builtin_isgreaterequal(__x, __y); } 
# 722
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 726
isgreaterequal(_Tp __x, _Up __y) 
# 727
{ 
# 728
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 729
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 730
} 
# 735
constexpr bool isless(float __x, float __y) 
# 736
{ return __builtin_isless(__x, __y); } 
# 739
constexpr bool isless(double __x, double __y) 
# 740
{ return __builtin_isless(__x, __y); } 
# 743
constexpr bool isless(long double __x, long double __y) 
# 744
{ return __builtin_isless(__x, __y); } 
# 748
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 752
isless(_Tp __x, _Up __y) 
# 753
{ 
# 754
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 755
return __builtin_isless((__type)__x, (__type)__y); 
# 756
} 
# 761
constexpr bool islessequal(float __x, float __y) 
# 762
{ return __builtin_islessequal(__x, __y); } 
# 765
constexpr bool islessequal(double __x, double __y) 
# 766
{ return __builtin_islessequal(__x, __y); } 
# 769
constexpr bool islessequal(long double __x, long double __y) 
# 770
{ return __builtin_islessequal(__x, __y); } 
# 774
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 778
islessequal(_Tp __x, _Up __y) 
# 779
{ 
# 780
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 781
return __builtin_islessequal((__type)__x, (__type)__y); 
# 782
} 
# 787
constexpr bool islessgreater(float __x, float __y) 
# 788
{ return __builtin_islessgreater(__x, __y); } 
# 791
constexpr bool islessgreater(double __x, double __y) 
# 792
{ return __builtin_islessgreater(__x, __y); } 
# 795
constexpr bool islessgreater(long double __x, long double __y) 
# 796
{ return __builtin_islessgreater(__x, __y); } 
# 800
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 804
islessgreater(_Tp __x, _Up __y) 
# 805
{ 
# 806
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 807
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 808
} 
# 813
constexpr bool isunordered(float __x, float __y) 
# 814
{ return __builtin_isunordered(__x, __y); } 
# 817
constexpr bool isunordered(double __x, double __y) 
# 818
{ return __builtin_isunordered(__x, __y); } 
# 821
constexpr bool isunordered(long double __x, long double __y) 
# 822
{ return __builtin_isunordered(__x, __y); } 
# 826
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 830
isunordered(_Tp __x, _Up __y) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 833
return __builtin_isunordered((__type)__x, (__type)__y); 
# 834
} 
# 1065 "/usr/include/c++/12.2.1/cmath" 3
using ::double_t;
# 1066
using ::float_t;
# 1069
using ::acosh;
# 1070
using ::acoshf;
# 1071
using ::acoshl;
# 1073
using ::asinh;
# 1074
using ::asinhf;
# 1075
using ::asinhl;
# 1077
using ::atanh;
# 1078
using ::atanhf;
# 1079
using ::atanhl;
# 1081
using ::cbrt;
# 1082
using ::cbrtf;
# 1083
using ::cbrtl;
# 1085
using ::copysign;
# 1086
using ::copysignf;
# 1087
using ::copysignl;
# 1089
using ::erf;
# 1090
using ::erff;
# 1091
using ::erfl;
# 1093
using ::erfc;
# 1094
using ::erfcf;
# 1095
using ::erfcl;
# 1097
using ::exp2;
# 1098
using ::exp2f;
# 1099
using ::exp2l;
# 1101
using ::expm1;
# 1102
using ::expm1f;
# 1103
using ::expm1l;
# 1105
using ::fdim;
# 1106
using ::fdimf;
# 1107
using ::fdiml;
# 1109
using ::fma;
# 1110
using ::fmaf;
# 1111
using ::fmal;
# 1113
using ::fmax;
# 1114
using ::fmaxf;
# 1115
using ::fmaxl;
# 1117
using ::fmin;
# 1118
using ::fminf;
# 1119
using ::fminl;
# 1121
using ::hypot;
# 1122
using ::hypotf;
# 1123
using ::hypotl;
# 1125
using ::ilogb;
# 1126
using ::ilogbf;
# 1127
using ::ilogbl;
# 1129
using ::lgamma;
# 1130
using ::lgammaf;
# 1131
using ::lgammal;
# 1134
using ::llrint;
# 1135
using ::llrintf;
# 1136
using ::llrintl;
# 1138
using ::llround;
# 1139
using ::llroundf;
# 1140
using ::llroundl;
# 1143
using ::log1p;
# 1144
using ::log1pf;
# 1145
using ::log1pl;
# 1147
using ::log2;
# 1148
using ::log2f;
# 1149
using ::log2l;
# 1151
using ::logb;
# 1152
using ::logbf;
# 1153
using ::logbl;
# 1155
using ::lrint;
# 1156
using ::lrintf;
# 1157
using ::lrintl;
# 1159
using ::lround;
# 1160
using ::lroundf;
# 1161
using ::lroundl;
# 1163
using ::nan;
# 1164
using ::nanf;
# 1165
using ::nanl;
# 1167
using ::nearbyint;
# 1168
using ::nearbyintf;
# 1169
using ::nearbyintl;
# 1171
using ::nextafter;
# 1172
using ::nextafterf;
# 1173
using ::nextafterl;
# 1175
using ::nexttoward;
# 1176
using ::nexttowardf;
# 1177
using ::nexttowardl;
# 1179
using ::remainder;
# 1180
using ::remainderf;
# 1181
using ::remainderl;
# 1183
using ::remquo;
# 1184
using ::remquof;
# 1185
using ::remquol;
# 1187
using ::rint;
# 1188
using ::rintf;
# 1189
using ::rintl;
# 1191
using ::round;
# 1192
using ::roundf;
# 1193
using ::roundl;
# 1195
using ::scalbln;
# 1196
using ::scalblnf;
# 1197
using ::scalblnl;
# 1199
using ::scalbn;
# 1200
using ::scalbnf;
# 1201
using ::scalbnl;
# 1203
using ::tgamma;
# 1204
using ::tgammaf;
# 1205
using ::tgammal;
# 1207
using ::trunc;
# 1208
using ::truncf;
# 1209
using ::truncl;
# 1214
constexpr float acosh(float __x) 
# 1215
{ return __builtin_acoshf(__x); } 
# 1218
constexpr long double acosh(long double __x) 
# 1219
{ return __builtin_acoshl(__x); } 
# 1223
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1226
acosh(_Tp __x) 
# 1227
{ return __builtin_acosh(__x); } 
# 1232
constexpr float asinh(float __x) 
# 1233
{ return __builtin_asinhf(__x); } 
# 1236
constexpr long double asinh(long double __x) 
# 1237
{ return __builtin_asinhl(__x); } 
# 1241
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1244
asinh(_Tp __x) 
# 1245
{ return __builtin_asinh(__x); } 
# 1250
constexpr float atanh(float __x) 
# 1251
{ return __builtin_atanhf(__x); } 
# 1254
constexpr long double atanh(long double __x) 
# 1255
{ return __builtin_atanhl(__x); } 
# 1259
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1262
atanh(_Tp __x) 
# 1263
{ return __builtin_atanh(__x); } 
# 1268
constexpr float cbrt(float __x) 
# 1269
{ return __builtin_cbrtf(__x); } 
# 1272
constexpr long double cbrt(long double __x) 
# 1273
{ return __builtin_cbrtl(__x); } 
# 1277
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1280
cbrt(_Tp __x) 
# 1281
{ return __builtin_cbrt(__x); } 
# 1286
constexpr float copysign(float __x, float __y) 
# 1287
{ return __builtin_copysignf(__x, __y); } 
# 1290
constexpr long double copysign(long double __x, long double __y) 
# 1291
{ return __builtin_copysignl(__x, __y); } 
# 1295
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1297
copysign(_Tp __x, _Up __y) 
# 1298
{ 
# 1299
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1300
return copysign((__type)__x, (__type)__y); 
# 1301
} 
# 1306
constexpr float erf(float __x) 
# 1307
{ return __builtin_erff(__x); } 
# 1310
constexpr long double erf(long double __x) 
# 1311
{ return __builtin_erfl(__x); } 
# 1315
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1318
erf(_Tp __x) 
# 1319
{ return __builtin_erf(__x); } 
# 1324
constexpr float erfc(float __x) 
# 1325
{ return __builtin_erfcf(__x); } 
# 1328
constexpr long double erfc(long double __x) 
# 1329
{ return __builtin_erfcl(__x); } 
# 1333
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1336
erfc(_Tp __x) 
# 1337
{ return __builtin_erfc(__x); } 
# 1342
constexpr float exp2(float __x) 
# 1343
{ return __builtin_exp2f(__x); } 
# 1346
constexpr long double exp2(long double __x) 
# 1347
{ return __builtin_exp2l(__x); } 
# 1351
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1354
exp2(_Tp __x) 
# 1355
{ return __builtin_exp2(__x); } 
# 1360
constexpr float expm1(float __x) 
# 1361
{ return __builtin_expm1f(__x); } 
# 1364
constexpr long double expm1(long double __x) 
# 1365
{ return __builtin_expm1l(__x); } 
# 1369
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1372
expm1(_Tp __x) 
# 1373
{ return __builtin_expm1(__x); } 
# 1378
constexpr float fdim(float __x, float __y) 
# 1379
{ return __builtin_fdimf(__x, __y); } 
# 1382
constexpr long double fdim(long double __x, long double __y) 
# 1383
{ return __builtin_fdiml(__x, __y); } 
# 1387
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1389
fdim(_Tp __x, _Up __y) 
# 1390
{ 
# 1391
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1392
return fdim((__type)__x, (__type)__y); 
# 1393
} 
# 1398
constexpr float fma(float __x, float __y, float __z) 
# 1399
{ return __builtin_fmaf(__x, __y, __z); } 
# 1402
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1403
{ return __builtin_fmal(__x, __y, __z); } 
# 1407
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1409
fma(_Tp __x, _Up __y, _Vp __z) 
# 1410
{ 
# 1411
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1412
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1413
} 
# 1418
constexpr float fmax(float __x, float __y) 
# 1419
{ return __builtin_fmaxf(__x, __y); } 
# 1422
constexpr long double fmax(long double __x, long double __y) 
# 1423
{ return __builtin_fmaxl(__x, __y); } 
# 1427
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1429
fmax(_Tp __x, _Up __y) 
# 1430
{ 
# 1431
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1432
return fmax((__type)__x, (__type)__y); 
# 1433
} 
# 1438
constexpr float fmin(float __x, float __y) 
# 1439
{ return __builtin_fminf(__x, __y); } 
# 1442
constexpr long double fmin(long double __x, long double __y) 
# 1443
{ return __builtin_fminl(__x, __y); } 
# 1447
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1449
fmin(_Tp __x, _Up __y) 
# 1450
{ 
# 1451
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1452
return fmin((__type)__x, (__type)__y); 
# 1453
} 
# 1458
constexpr float hypot(float __x, float __y) 
# 1459
{ return __builtin_hypotf(__x, __y); } 
# 1462
constexpr long double hypot(long double __x, long double __y) 
# 1463
{ return __builtin_hypotl(__x, __y); } 
# 1467
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1469
hypot(_Tp __x, _Up __y) 
# 1470
{ 
# 1471
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1472
return hypot((__type)__x, (__type)__y); 
# 1473
} 
# 1478
constexpr int ilogb(float __x) 
# 1479
{ return __builtin_ilogbf(__x); } 
# 1482
constexpr int ilogb(long double __x) 
# 1483
{ return __builtin_ilogbl(__x); } 
# 1487
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1491
ilogb(_Tp __x) 
# 1492
{ return __builtin_ilogb(__x); } 
# 1497
constexpr float lgamma(float __x) 
# 1498
{ return __builtin_lgammaf(__x); } 
# 1501
constexpr long double lgamma(long double __x) 
# 1502
{ return __builtin_lgammal(__x); } 
# 1506
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1509
lgamma(_Tp __x) 
# 1510
{ return __builtin_lgamma(__x); } 
# 1515
constexpr long long llrint(float __x) 
# 1516
{ return __builtin_llrintf(__x); } 
# 1519
constexpr long long llrint(long double __x) 
# 1520
{ return __builtin_llrintl(__x); } 
# 1524
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1527
llrint(_Tp __x) 
# 1528
{ return __builtin_llrint(__x); } 
# 1533
constexpr long long llround(float __x) 
# 1534
{ return __builtin_llroundf(__x); } 
# 1537
constexpr long long llround(long double __x) 
# 1538
{ return __builtin_llroundl(__x); } 
# 1542
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1545
llround(_Tp __x) 
# 1546
{ return __builtin_llround(__x); } 
# 1551
constexpr float log1p(float __x) 
# 1552
{ return __builtin_log1pf(__x); } 
# 1555
constexpr long double log1p(long double __x) 
# 1556
{ return __builtin_log1pl(__x); } 
# 1560
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1563
log1p(_Tp __x) 
# 1564
{ return __builtin_log1p(__x); } 
# 1570
constexpr float log2(float __x) 
# 1571
{ return __builtin_log2f(__x); } 
# 1574
constexpr long double log2(long double __x) 
# 1575
{ return __builtin_log2l(__x); } 
# 1579
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1582
log2(_Tp __x) 
# 1583
{ return __builtin_log2(__x); } 
# 1588
constexpr float logb(float __x) 
# 1589
{ return __builtin_logbf(__x); } 
# 1592
constexpr long double logb(long double __x) 
# 1593
{ return __builtin_logbl(__x); } 
# 1597
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1600
logb(_Tp __x) 
# 1601
{ return __builtin_logb(__x); } 
# 1606
constexpr long lrint(float __x) 
# 1607
{ return __builtin_lrintf(__x); } 
# 1610
constexpr long lrint(long double __x) 
# 1611
{ return __builtin_lrintl(__x); } 
# 1615
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1618
lrint(_Tp __x) 
# 1619
{ return __builtin_lrint(__x); } 
# 1624
constexpr long lround(float __x) 
# 1625
{ return __builtin_lroundf(__x); } 
# 1628
constexpr long lround(long double __x) 
# 1629
{ return __builtin_lroundl(__x); } 
# 1633
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1636
lround(_Tp __x) 
# 1637
{ return __builtin_lround(__x); } 
# 1642
constexpr float nearbyint(float __x) 
# 1643
{ return __builtin_nearbyintf(__x); } 
# 1646
constexpr long double nearbyint(long double __x) 
# 1647
{ return __builtin_nearbyintl(__x); } 
# 1651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1654
nearbyint(_Tp __x) 
# 1655
{ return __builtin_nearbyint(__x); } 
# 1660
constexpr float nextafter(float __x, float __y) 
# 1661
{ return __builtin_nextafterf(__x, __y); } 
# 1664
constexpr long double nextafter(long double __x, long double __y) 
# 1665
{ return __builtin_nextafterl(__x, __y); } 
# 1669
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1671
nextafter(_Tp __x, _Up __y) 
# 1672
{ 
# 1673
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1674
return nextafter((__type)__x, (__type)__y); 
# 1675
} 
# 1680
constexpr float nexttoward(float __x, long double __y) 
# 1681
{ return __builtin_nexttowardf(__x, __y); } 
# 1684
constexpr long double nexttoward(long double __x, long double __y) 
# 1685
{ return __builtin_nexttowardl(__x, __y); } 
# 1689
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1692
nexttoward(_Tp __x, long double __y) 
# 1693
{ return __builtin_nexttoward(__x, __y); } 
# 1698
constexpr float remainder(float __x, float __y) 
# 1699
{ return __builtin_remainderf(__x, __y); } 
# 1702
constexpr long double remainder(long double __x, long double __y) 
# 1703
{ return __builtin_remainderl(__x, __y); } 
# 1707
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1709
remainder(_Tp __x, _Up __y) 
# 1710
{ 
# 1711
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1712
return remainder((__type)__x, (__type)__y); 
# 1713
} 
# 1718
inline float remquo(float __x, float __y, int *__pquo) 
# 1719
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1722
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1723
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1727
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1729
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1730
{ 
# 1731
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1732
return remquo((__type)__x, (__type)__y, __pquo); 
# 1733
} 
# 1738
constexpr float rint(float __x) 
# 1739
{ return __builtin_rintf(__x); } 
# 1742
constexpr long double rint(long double __x) 
# 1743
{ return __builtin_rintl(__x); } 
# 1747
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1750
rint(_Tp __x) 
# 1751
{ return __builtin_rint(__x); } 
# 1756
constexpr float round(float __x) 
# 1757
{ return __builtin_roundf(__x); } 
# 1760
constexpr long double round(long double __x) 
# 1761
{ return __builtin_roundl(__x); } 
# 1765
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1768
round(_Tp __x) 
# 1769
{ return __builtin_round(__x); } 
# 1774
constexpr float scalbln(float __x, long __ex) 
# 1775
{ return __builtin_scalblnf(__x, __ex); } 
# 1778
constexpr long double scalbln(long double __x, long __ex) 
# 1779
{ return __builtin_scalblnl(__x, __ex); } 
# 1783
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1786
scalbln(_Tp __x, long __ex) 
# 1787
{ return __builtin_scalbln(__x, __ex); } 
# 1792
constexpr float scalbn(float __x, int __ex) 
# 1793
{ return __builtin_scalbnf(__x, __ex); } 
# 1796
constexpr long double scalbn(long double __x, int __ex) 
# 1797
{ return __builtin_scalbnl(__x, __ex); } 
# 1801
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1804
scalbn(_Tp __x, int __ex) 
# 1805
{ return __builtin_scalbn(__x, __ex); } 
# 1810
constexpr float tgamma(float __x) 
# 1811
{ return __builtin_tgammaf(__x); } 
# 1814
constexpr long double tgamma(long double __x) 
# 1815
{ return __builtin_tgammal(__x); } 
# 1819
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1822
tgamma(_Tp __x) 
# 1823
{ return __builtin_tgamma(__x); } 
# 1828
constexpr float trunc(float __x) 
# 1829
{ return __builtin_truncf(__x); } 
# 1832
constexpr long double trunc(long double __x) 
# 1833
{ return __builtin_truncl(__x); } 
# 1837
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1840
trunc(_Tp __x) 
# 1841
{ return __builtin_trunc(__x); } 
# 1852 "/usr/include/c++/12.2.1/cmath" 3
template< class _Tp> inline _Tp 
# 1854
__hypot3(_Tp __x, _Tp __y, _Tp __z) 
# 1855
{ 
# 1856
__x = std::abs(__x); 
# 1857
__y = std::abs(__y); 
# 1858
__z = std::abs(__z); 
# 1859
if (_Tp __a = (__x < __y) ? (__y < __z) ? __z : __y : ((__x < __z) ? __z : __x)) { 
# 1860
return __a * std::sqrt((((__x / __a) * (__x / __a)) + ((__y / __a) * (__y / __a))) + ((__z / __a) * (__z / __a))); } else { 
# 1864
return {}; }  
# 1865
} 
# 1868
inline float hypot(float __x, float __y, float __z) 
# 1869
{ return std::__hypot3< float> (__x, __y, __z); } 
# 1872
inline double hypot(double __x, double __y, double __z) 
# 1873
{ return std::__hypot3< double> (__x, __y, __z); } 
# 1876
inline long double hypot(long double __x, long double __y, long double __z) 
# 1877
{ return std::__hypot3< long double> (__x, __y, __z); } 
# 1879
template< class _Tp, class _Up, class _Vp> __gnu_cxx::__promoted_t< _Tp, _Up, _Vp>  
# 1881
hypot(_Tp __x, _Up __y, _Vp __z) 
# 1882
{ 
# 1883
using __type = __gnu_cxx::__promoted_t< _Tp, _Up, _Vp> ; 
# 1884
return std::__hypot3< __gnu_cxx::__promoted_t< _Tp, _Up, _Vp> > (__x, __y, __z); 
# 1885
} 
# 1932 "/usr/include/c++/12.2.1/cmath" 3
}
# 33 "/usr/include/c++/12.2.1/bits/specfun.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/12.2.1/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 55
void __throw_bad_array_new_length() __attribute((__noreturn__)); 
# 59
void __throw_bad_cast() __attribute((__noreturn__)); 
# 62
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 66
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 72
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 75
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 81
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 82
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 85
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 94
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 98
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 101
void __throw_ios_failure(const char *, int) __attribute((__noreturn__)); 
# 105
void __throw_system_error(int) __attribute((__noreturn__)); 
# 109
void __throw_future_error(int) __attribute((__noreturn__)); 
# 113
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 116
}
# 37 "/usr/include/c++/12.2.1/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/12.2.1/ext/numeric_traits.h" 3
template< class _Tp> 
# 51
struct __is_integer_nonstrict : public std::__is_integer< _Tp>  { 
# 54
using std::__is_integer< _Tp> ::__value;
# 57
enum { __width = (__value) ? sizeof(_Tp) * (8) : (0)}; 
# 58
}; 
# 60
template< class _Value> 
# 61
struct __numeric_traits_integer { 
# 64
static_assert((__is_integer_nonstrict< _Value> ::__value), "invalid specialization");
# 70
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 71
static const int __digits = (__is_integer_nonstrict< _Value> ::__width - __is_signed); 
# 75
static const _Value __max = (__is_signed ? (((((_Value)1) << (__digits - 1)) - 1) << 1) + 1 : (~((_Value)0))); 
# 78
static const _Value __min = (__is_signed ? (-__max) - 1 : ((_Value)0)); 
# 79
}; 
# 81
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 84
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 87
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 90
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 130 "/usr/include/c++/12.2.1/ext/numeric_traits.h" 3
template<> struct __is_integer_nonstrict< __int128>  { enum { __value = 1}; typedef std::__true_type __type; enum { __width = 128}; }; template<> struct __is_integer_nonstrict< unsigned __int128>  { enum { __value = 1}; typedef std::__true_type __type; enum { __width = 128}; }; 
# 137
template< class _Tp> using __int_traits = __numeric_traits_integer< _Tp> ; 
# 157 "/usr/include/c++/12.2.1/ext/numeric_traits.h" 3
template< class _Value> 
# 158
struct __numeric_traits_floating { 
# 161
static const int __max_digits10 = ((2) + ((((std::template __are_same< _Value, float> ::__value) ? 24 : ((std::template __are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136))); 
# 164
static const bool __is_signed = true; 
# 165
static const int __digits10 = ((std::template __are_same< _Value, float> ::__value) ? 6 : ((std::template __are_same< _Value, double> ::__value) ? 15 : 18)); 
# 166
static const int __max_exponent10 = ((std::template __are_same< _Value, float> ::__value) ? 38 : ((std::template __are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 167
}; 
# 169
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 172
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 175
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 178
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 186
template< class _Value> 
# 187
struct __numeric_traits : public __numeric_traits_integer< _Value>  { 
# 189
}; 
# 192
template<> struct __numeric_traits< float>  : public __numeric_traits_floating< float>  { 
# 194
}; 
# 197
template<> struct __numeric_traits< double>  : public __numeric_traits_floating< double>  { 
# 199
}; 
# 202
template<> struct __numeric_traits< long double>  : public __numeric_traits_floating< long double>  { 
# 204
}; 
# 239 "/usr/include/c++/12.2.1/ext/numeric_traits.h" 3
}
# 40 "/usr/include/c++/12.2.1/type_traits" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template< class _Tp> class reference_wrapper; 
# 61 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp, _Tp __v> 
# 62
struct integral_constant { 
# 64
static constexpr inline _Tp value = (__v); 
# 65
typedef _Tp value_type; 
# 66
typedef integral_constant type; 
# 67
constexpr operator value_type() const noexcept { return value; } 
# 72
constexpr value_type operator()() const noexcept { return value; } 
# 74
}; 
# 82
using true_type = integral_constant< bool, true> ; 
# 85
using false_type = integral_constant< bool, false> ; 
# 89
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 97
template< bool __v> using bool_constant = integral_constant< bool, __v> ; 
# 103
template< bool > 
# 104
struct __conditional { 
# 106
template< class _Tp, class > using type = _Tp; 
# 108
}; 
# 111
template<> struct __conditional< false>  { 
# 113
template< class , class _Up> using type = _Up; 
# 115
}; 
# 118
template< bool _Cond, class _If, class _Else> using __conditional_t = typename __conditional< _Cond> ::template type< _If, _Else> ; 
# 123
template< class _Type> 
# 124
struct __type_identity { 
# 125
using type = _Type; }; 
# 127
template< class _Tp> using __type_identity_t = typename __type_identity< _Tp> ::type; 
# 130
template< class ...> struct __or_; 
# 134
template<> struct __or_< >  : public false_type { 
# 136
}; 
# 138
template< class _B1> 
# 139
struct __or_< _B1>  : public _B1 { 
# 141
}; 
# 143
template< class _B1, class _B2> 
# 144
struct __or_< _B1, _B2>  : public __conditional_t< _B1::value, _B1, _B2>  { 
# 146
}; 
# 148
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 149
struct __or_< _B1, _B2, _B3, _Bn...>  : public __conditional_t< _B1::value, _B1, std::__or_< _B2, _B3, _Bn...> >  { 
# 151
}; 
# 153
template< class ...> struct __and_; 
# 157
template<> struct __and_< >  : public true_type { 
# 159
}; 
# 161
template< class _B1> 
# 162
struct __and_< _B1>  : public _B1 { 
# 164
}; 
# 166
template< class _B1, class _B2> 
# 167
struct __and_< _B1, _B2>  : public __conditional_t< _B1::value, _B2, _B1>  { 
# 169
}; 
# 171
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 172
struct __and_< _B1, _B2, _B3, _Bn...>  : public __conditional_t< _B1::value, std::__and_< _B2, _B3, _Bn...> , _B1>  { 
# 174
}; 
# 176
template< class _Pp> 
# 177
struct __not_ : public __bool_constant< !((bool)_Pp::value)>  { 
# 179
}; 
# 185
template< class ..._Bn> constexpr bool 
# 186
__or_v = (__or_< _Bn...> ::value); 
# 187
template< class ..._Bn> constexpr bool 
# 188
__and_v = (__and_< _Bn...> ::value); 
# 193
template< class ..._Bn> 
# 194
struct conjunction : public __and_< _Bn...>  { 
# 196
}; 
# 198
template< class ..._Bn> 
# 199
struct disjunction : public __or_< _Bn...>  { 
# 201
}; 
# 203
template< class _Pp> 
# 204
struct negation : public __not_< _Pp>  { 
# 206
}; 
# 211
template< class ..._Bn> constexpr bool 
# 212
conjunction_v = (conjunction< _Bn...> ::value); 
# 214
template< class ..._Bn> constexpr bool 
# 215
disjunction_v = (disjunction< _Bn...> ::value); 
# 217
template< class _Pp> constexpr bool 
# 218
negation_v = (negation< _Pp> ::value); 
# 224
template< class > struct is_reference; 
# 226
template< class > struct is_function; 
# 228
template< class > struct is_void; 
# 230
template< class > struct remove_cv; 
# 232
template< class > struct is_const; 
# 236
template< class > struct __is_array_unknown_bounds; 
# 242
template< class _Tp, size_t  = sizeof(_Tp)> constexpr true_type 
# 243
__is_complete_or_unbounded(__type_identity< _Tp> ) 
# 244
{ return {}; } 
# 246
template< class _TypeIdentity, class 
# 247
_NestedType = typename _TypeIdentity::type> constexpr typename __or_< is_reference< _NestedType> , is_function< _NestedType> , is_void< _NestedType> , __is_array_unknown_bounds< _NestedType> > ::type 
# 253
__is_complete_or_unbounded(_TypeIdentity) 
# 254
{ return {}; } 
# 261
template< class _Tp> 
# 262
struct __success_type { 
# 263
typedef _Tp type; }; 
# 265
struct __failure_type { 
# 266
}; 
# 269
template< class _Tp> using __remove_cv_t = typename remove_cv< _Tp> ::type; 
# 274
template< class > 
# 275
struct __is_void_helper : public false_type { 
# 276
}; 
# 279
template<> struct __is_void_helper< void>  : public true_type { 
# 280
}; 
# 284
template< class _Tp> 
# 285
struct is_void : public __is_void_helper< __remove_cv_t< _Tp> > ::type { 
# 287
}; 
# 290
template< class > 
# 291
struct __is_integral_helper : public false_type { 
# 292
}; 
# 295
template<> struct __is_integral_helper< bool>  : public true_type { 
# 296
}; 
# 299
template<> struct __is_integral_helper< char>  : public true_type { 
# 300
}; 
# 303
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 304
}; 
# 307
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 308
}; 
# 314
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 315
}; 
# 324
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 325
}; 
# 328
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 329
}; 
# 332
template<> struct __is_integral_helper< short>  : public true_type { 
# 333
}; 
# 336
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 337
}; 
# 340
template<> struct __is_integral_helper< int>  : public true_type { 
# 341
}; 
# 344
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 345
}; 
# 348
template<> struct __is_integral_helper< long>  : public true_type { 
# 349
}; 
# 352
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 353
}; 
# 356
template<> struct __is_integral_helper< long long>  : public true_type { 
# 357
}; 
# 360
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 361
}; 
# 412 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp> 
# 413
struct is_integral : public __is_integral_helper< __remove_cv_t< _Tp> > ::type { 
# 415
}; 
# 418
template< class > 
# 419
struct __is_floating_point_helper : public false_type { 
# 420
}; 
# 423
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 424
}; 
# 427
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 428
}; 
# 431
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 432
}; 
# 442 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp> 
# 443
struct is_floating_point : public __is_floating_point_helper< __remove_cv_t< _Tp> > ::type { 
# 445
}; 
# 448
template< class > 
# 449
struct is_array : public false_type { 
# 450
}; 
# 452
template< class _Tp, size_t _Size> 
# 453
struct is_array< _Tp [_Size]>  : public true_type { 
# 454
}; 
# 456
template< class _Tp> 
# 457
struct is_array< _Tp []>  : public true_type { 
# 458
}; 
# 460
template< class > 
# 461
struct __is_pointer_helper : public false_type { 
# 462
}; 
# 464
template< class _Tp> 
# 465
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 466
}; 
# 469
template< class _Tp> 
# 470
struct is_pointer : public __is_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 472
}; 
# 475
template< class > 
# 476
struct is_lvalue_reference : public false_type { 
# 477
}; 
# 479
template< class _Tp> 
# 480
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 481
}; 
# 484
template< class > 
# 485
struct is_rvalue_reference : public false_type { 
# 486
}; 
# 488
template< class _Tp> 
# 489
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 490
}; 
# 492
template< class > 
# 493
struct __is_member_object_pointer_helper : public false_type { 
# 494
}; 
# 496
template< class _Tp, class _Cp> 
# 497
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public __not_< is_function< _Tp> > ::type { 
# 498
}; 
# 501
template< class _Tp> 
# 502
struct is_member_object_pointer : public __is_member_object_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 504
}; 
# 506
template< class > 
# 507
struct __is_member_function_pointer_helper : public false_type { 
# 508
}; 
# 510
template< class _Tp, class _Cp> 
# 511
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public is_function< _Tp> ::type { 
# 512
}; 
# 515
template< class _Tp> 
# 516
struct is_member_function_pointer : public __is_member_function_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 518
}; 
# 521
template< class _Tp> 
# 522
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 524
}; 
# 527
template< class _Tp> 
# 528
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 530
}; 
# 533
template< class _Tp> 
# 534
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 536
}; 
# 539
template< class _Tp> 
# 540
struct is_function : public __bool_constant< !is_const< const _Tp> ::value>  { 
# 541
}; 
# 543
template< class _Tp> 
# 544
struct is_function< _Tp &>  : public false_type { 
# 545
}; 
# 547
template< class _Tp> 
# 548
struct is_function< _Tp &&>  : public false_type { 
# 549
}; 
# 553
template< class > 
# 554
struct __is_null_pointer_helper : public false_type { 
# 555
}; 
# 558
template<> struct __is_null_pointer_helper< __decltype((nullptr))>  : public true_type { 
# 559
}; 
# 562
template< class _Tp> 
# 563
struct is_null_pointer : public __is_null_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 565
}; 
# 569
template< class _Tp> 
# 570
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 572
} __attribute((__deprecated__("use \'std::is_null_pointer\' instead"))); 
# 577
template< class _Tp> 
# 578
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 581
}; 
# 584
template< class _Tp> 
# 585
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 587
}; 
# 590
template< class _Tp> 
# 591
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 594
}; 
# 597
template< class _Tp> 
# 598
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 601
}; 
# 603
template< class > struct is_member_pointer; 
# 607
template< class _Tp> 
# 608
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 611
}; 
# 614
template< class _Tp> 
# 615
struct is_compound : public __not_< is_fundamental< _Tp> > ::type { 
# 616
}; 
# 619
template< class _Tp> 
# 620
struct __is_member_pointer_helper : public false_type { 
# 621
}; 
# 623
template< class _Tp, class _Cp> 
# 624
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 625
}; 
# 629
template< class _Tp> 
# 630
struct is_member_pointer : public __is_member_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 632
}; 
# 634
template< class , class > struct is_same; 
# 638
template< class _Tp, class ..._Types> using __is_one_of = __or_< is_same< _Tp, _Types> ...> ; 
# 643
template< class _Tp> using __is_signed_integer = __is_one_of< __remove_cv_t< _Tp> , signed char, signed short, signed int, signed long, signed long long> ; 
# 663 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp> using __is_unsigned_integer = __is_one_of< __remove_cv_t< _Tp> , unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> ; 
# 682 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp> using __is_standard_integer = __or_< __is_signed_integer< _Tp> , __is_unsigned_integer< _Tp> > ; 
# 687
template< class ...> using __void_t = void; 
# 691
template< class _Tp, class  = void> 
# 692
struct __is_referenceable : public false_type { 
# 694
}; 
# 696
template< class _Tp> 
# 697
struct __is_referenceable< _Tp, __void_t< _Tp &> >  : public true_type { 
# 699
}; 
# 705
template< class > 
# 706
struct is_const : public false_type { 
# 707
}; 
# 709
template< class _Tp> 
# 710
struct is_const< const _Tp>  : public true_type { 
# 711
}; 
# 714
template< class > 
# 715
struct is_volatile : public false_type { 
# 716
}; 
# 718
template< class _Tp> 
# 719
struct is_volatile< volatile _Tp>  : public true_type { 
# 720
}; 
# 723
template< class _Tp> 
# 724
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 727
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 729
}; 
# 732
template< class _Tp> 
# 733
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 736
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 738
}; 
# 741
template< class _Tp> 
# 742
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 745
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 747
}; 
# 754
template< class _Tp> 
# 757
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 760
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 762
}; 
# 768
template< class _Tp> 
# 771
struct
# 770
 [[__deprecated__]] is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 774
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 776
}; 
# 779
template< class _Tp> 
# 780
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 782
}; 
# 785
template< class _Tp> 
# 786
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 788
}; 
# 794
template< class _Tp> 
# 795
struct is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 797
}; 
# 801
template< class _Tp> 
# 802
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 804
}; 
# 807
template< class _Tp, bool 
# 808
 = is_arithmetic< _Tp> ::value> 
# 809
struct __is_signed_helper : public false_type { 
# 810
}; 
# 812
template< class _Tp> 
# 813
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 815
}; 
# 819
template< class _Tp> 
# 820
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 822
}; 
# 825
template< class _Tp> 
# 826
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > >  { 
# 828
}; 
# 831
template< class _Tp, class _Up = _Tp &&> _Up __declval(int); 
# 835
template< class _Tp> _Tp __declval(long); 
# 840
template< class _Tp> auto declval() noexcept->__decltype((__declval< _Tp> (0))); 
# 843
template< class , unsigned  = 0U> struct extent; 
# 846
template< class > struct remove_all_extents; 
# 850
template< class _Tp> 
# 851
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 853
}; 
# 855
template< class _Tp> 
# 856
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > >  { 
# 858
}; 
# 867 "/usr/include/c++/12.2.1/type_traits" 3
struct __do_is_destructible_impl { 
# 869
template< class _Tp, class  = __decltype((declval< _Tp &> ().~_Tp()))> static true_type __test(int); 
# 872
template< class > static false_type __test(...); 
# 874
}; 
# 876
template< class _Tp> 
# 877
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 880
typedef __decltype((__test< _Tp> (0))) type; 
# 881
}; 
# 883
template< class _Tp, bool 
# 884
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 887
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 890
template< class _Tp> 
# 891
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 894
}; 
# 896
template< class _Tp> 
# 897
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 898
}; 
# 900
template< class _Tp> 
# 901
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 902
}; 
# 906
template< class _Tp> 
# 907
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 910
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 912
}; 
# 920
struct __do_is_nt_destructible_impl { 
# 922
template< class _Tp> static __bool_constant< noexcept(declval< _Tp &> ().~_Tp())>  __test(int); 
# 926
template< class > static false_type __test(...); 
# 928
}; 
# 930
template< class _Tp> 
# 931
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 934
typedef __decltype((__test< _Tp> (0))) type; 
# 935
}; 
# 937
template< class _Tp, bool 
# 938
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 941
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 944
template< class _Tp> 
# 945
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 948
}; 
# 950
template< class _Tp> 
# 951
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 952
}; 
# 954
template< class _Tp> 
# 955
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 956
}; 
# 960
template< class _Tp> 
# 961
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 964
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 966
}; 
# 969
template< class _Tp, class ..._Args> 
# 970
struct __is_constructible_impl : public __bool_constant< __is_constructible(_Tp, _Args...)>  { 
# 972
}; 
# 976
template< class _Tp, class ..._Args> 
# 977
struct is_constructible : public __is_constructible_impl< _Tp, _Args...>  { 
# 980
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 982
}; 
# 985
template< class _Tp> 
# 986
struct is_default_constructible : public __is_constructible_impl< _Tp> ::type { 
# 989
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 991
}; 
# 994
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 997
template< class _Tp> 
# 998
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 999
}; 
# 1001
template< class _Tp> 
# 1002
struct __is_copy_constructible_impl< _Tp, true>  : public __is_constructible_impl< _Tp, const _Tp &>  { 
# 1004
}; 
# 1008
template< class _Tp> 
# 1009
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 1012
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1014
}; 
# 1017
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 1020
template< class _Tp> 
# 1021
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 1022
}; 
# 1024
template< class _Tp> 
# 1025
struct __is_move_constructible_impl< _Tp, true>  : public __is_constructible_impl< _Tp, _Tp &&>  { 
# 1027
}; 
# 1031
template< class _Tp> 
# 1032
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 1035
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1037
}; 
# 1040
template< class _Tp, class ..._Args> using __is_nothrow_constructible_impl = __bool_constant< __is_nothrow_constructible(_Tp, _Args...)> ; 
# 1046
template< class _Tp, class ..._Args> 
# 1047
struct is_nothrow_constructible : public __is_nothrow_constructible_impl< _Tp, _Args...> ::type { 
# 1050
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1052
}; 
# 1055
template< class _Tp> 
# 1056
struct is_nothrow_default_constructible : public __bool_constant< __is_nothrow_constructible(_Tp)>  { 
# 1059
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1061
}; 
# 1064
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 1067
template< class _Tp> 
# 1068
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1069
}; 
# 1071
template< class _Tp> 
# 1072
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public __is_nothrow_constructible_impl< _Tp, const _Tp &>  { 
# 1074
}; 
# 1078
template< class _Tp> 
# 1079
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp> ::type { 
# 1082
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1084
}; 
# 1087
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 1090
template< class _Tp> 
# 1091
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 1092
}; 
# 1094
template< class _Tp> 
# 1095
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public __is_nothrow_constructible_impl< _Tp, _Tp &&>  { 
# 1097
}; 
# 1101
template< class _Tp> 
# 1102
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp> ::type { 
# 1105
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1107
}; 
# 1110
template< class _Tp, class _Up> 
# 1111
struct is_assignable : public __bool_constant< __is_assignable(_Tp, _Up)>  { 
# 1114
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1116
}; 
# 1118
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1121
template< class _Tp> 
# 1122
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1123
}; 
# 1125
template< class _Tp> 
# 1126
struct __is_copy_assignable_impl< _Tp, true>  : public __bool_constant< __is_assignable(_Tp &, const _Tp &)>  { 
# 1128
}; 
# 1131
template< class _Tp> 
# 1132
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp> ::type { 
# 1135
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1137
}; 
# 1139
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1142
template< class _Tp> 
# 1143
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1144
}; 
# 1146
template< class _Tp> 
# 1147
struct __is_move_assignable_impl< _Tp, true>  : public __bool_constant< __is_assignable(_Tp &, _Tp &&)>  { 
# 1149
}; 
# 1152
template< class _Tp> 
# 1153
struct is_move_assignable : public __is_move_assignable_impl< _Tp> ::type { 
# 1156
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1158
}; 
# 1160
template< class _Tp, class _Up> using __is_nothrow_assignable_impl = __bool_constant< __is_nothrow_assignable(_Tp, _Up)> ; 
# 1165
template< class _Tp, class _Up> 
# 1166
struct is_nothrow_assignable : public __is_nothrow_assignable_impl< _Tp, _Up>  { 
# 1169
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1171
}; 
# 1173
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1176
template< class _Tp> 
# 1177
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1178
}; 
# 1180
template< class _Tp> 
# 1181
struct __is_nt_copy_assignable_impl< _Tp, true>  : public __is_nothrow_assignable_impl< _Tp &, const _Tp &>  { 
# 1183
}; 
# 1186
template< class _Tp> 
# 1187
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1190
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1192
}; 
# 1194
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1197
template< class _Tp> 
# 1198
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1199
}; 
# 1201
template< class _Tp> 
# 1202
struct __is_nt_move_assignable_impl< _Tp, true>  : public __is_nothrow_assignable_impl< _Tp &, _Tp &&>  { 
# 1204
}; 
# 1207
template< class _Tp> 
# 1208
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1211
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1213
}; 
# 1216
template< class _Tp, class ..._Args> 
# 1217
struct is_trivially_constructible : public __bool_constant< __is_trivially_constructible(_Tp, _Args...)>  { 
# 1220
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1222
}; 
# 1225
template< class _Tp> 
# 1226
struct is_trivially_default_constructible : public __bool_constant< __is_trivially_constructible(_Tp)>  { 
# 1229
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1231
}; 
# 1233
struct __do_is_implicitly_default_constructible_impl { 
# 1235
template< class _Tp> static void __helper(const _Tp &); 
# 1238
template< class _Tp> static true_type __test(const _Tp &, __decltype((__helper< const _Tp &> ({}))) * = 0); 
# 1242
static false_type __test(...); 
# 1243
}; 
# 1245
template< class _Tp> 
# 1246
struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl { 
# 1249
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1250
}; 
# 1252
template< class _Tp> 
# 1253
struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl< _Tp> ::type { 
# 1255
}; 
# 1257
template< class _Tp> 
# 1258
struct __is_implicitly_default_constructible : public __and_< __is_constructible_impl< _Tp> , __is_implicitly_default_constructible_safe< _Tp> >  { 
# 1261
}; 
# 1263
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_constructible_impl; 
# 1266
template< class _Tp> 
# 1267
struct __is_trivially_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1268
}; 
# 1270
template< class _Tp> 
# 1271
struct __is_trivially_copy_constructible_impl< _Tp, true>  : public __and_< __is_copy_constructible_impl< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> >  { 
# 1275
}; 
# 1278
template< class _Tp> 
# 1279
struct is_trivially_copy_constructible : public __is_trivially_copy_constructible_impl< _Tp>  { 
# 1282
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1284
}; 
# 1286
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_constructible_impl; 
# 1289
template< class _Tp> 
# 1290
struct __is_trivially_move_constructible_impl< _Tp, false>  : public false_type { 
# 1291
}; 
# 1293
template< class _Tp> 
# 1294
struct __is_trivially_move_constructible_impl< _Tp, true>  : public __and_< __is_move_constructible_impl< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> >  { 
# 1298
}; 
# 1301
template< class _Tp> 
# 1302
struct is_trivially_move_constructible : public __is_trivially_move_constructible_impl< _Tp>  { 
# 1305
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1307
}; 
# 1310
template< class _Tp, class _Up> 
# 1311
struct is_trivially_assignable : public __bool_constant< __is_trivially_assignable(_Tp, _Up)>  { 
# 1314
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1316
}; 
# 1318
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_assignable_impl; 
# 1321
template< class _Tp> 
# 1322
struct __is_trivially_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1323
}; 
# 1325
template< class _Tp> 
# 1326
struct __is_trivially_copy_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, const _Tp &)>  { 
# 1328
}; 
# 1331
template< class _Tp> 
# 1332
struct is_trivially_copy_assignable : public __is_trivially_copy_assignable_impl< _Tp>  { 
# 1335
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1337
}; 
# 1339
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_assignable_impl; 
# 1342
template< class _Tp> 
# 1343
struct __is_trivially_move_assignable_impl< _Tp, false>  : public false_type { 
# 1344
}; 
# 1346
template< class _Tp> 
# 1347
struct __is_trivially_move_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, _Tp &&)>  { 
# 1349
}; 
# 1352
template< class _Tp> 
# 1353
struct is_trivially_move_assignable : public __is_trivially_move_assignable_impl< _Tp>  { 
# 1356
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1358
}; 
# 1361
template< class _Tp> 
# 1362
struct is_trivially_destructible : public __and_< __is_destructible_safe< _Tp> , __bool_constant< __has_trivial_destructor(_Tp)> >  { 
# 1366
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1368
}; 
# 1372
template< class _Tp> 
# 1373
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1376
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1378
}; 
# 1384
template< class _Tp> 
# 1385
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1388
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1390
}; 
# 1393
template< class > 
# 1394
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1395
}; 
# 1397
template< class _Tp, size_t _Size> 
# 1398
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1399
}; 
# 1401
template< class _Tp> 
# 1402
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1403
}; 
# 1406
template< class , unsigned _Uint> 
# 1407
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1408
}; 
# 1410
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1411
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1415
}; 
# 1417
template< class _Tp, unsigned _Uint> 
# 1418
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1422
}; 
# 1428
template< class _Tp, class _Up> 
# 1429
struct is_same : public integral_constant< bool, __is_same(_Tp, _Up)>  { 
# 1435
}; 
# 1445 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Base, class _Derived> 
# 1446
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1448
}; 
# 1450
template< class _From, class _To, bool 
# 1451
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1453
struct __is_convertible_helper { 
# 1455
typedef typename is_void< _To> ::type type; 
# 1456
}; 
# 1458
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
template< class _From, class _To> 
# 1461
class __is_convertible_helper< _From, _To, false>  { 
# 1463
template< class _To1> static void __test_aux(_To1) noexcept; 
# 1466
template< class _From1, class _To1, class 
# 1467
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1466
__test(int); 
# 1471
template< class , class > static false_type __test(...); 
# 1476
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1477
}; 
#pragma GCC diagnostic pop
# 1481
template< class _From, class _To> 
# 1482
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1484
}; 
# 1487
template< class _ToElementType, class _FromElementType> using __is_array_convertible = is_convertible< _FromElementType (*)[], _ToElementType (*)[]> ; 
# 1491
template< class _From, class _To, bool 
# 1492
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1494
struct __is_nt_convertible_helper : public is_void< _To>  { 
# 1496
}; 
# 1498
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
template< class _From, class _To> 
# 1501
class __is_nt_convertible_helper< _From, _To, false>  { 
# 1503
template< class _To1> static void __test_aux(_To1) noexcept; 
# 1506
template< class _From1, class _To1> static __bool_constant< noexcept(__test_aux< _To1> (std::declval< _From1> ()))>  __test(int); 
# 1511
template< class , class > static false_type __test(...); 
# 1516
public: using type = __decltype((__test< _From, _To> (0))); 
# 1517
}; 
#pragma GCC diagnostic pop
# 1537 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp> 
# 1538
struct remove_const { 
# 1539
typedef _Tp type; }; 
# 1541
template< class _Tp> 
# 1542
struct remove_const< const _Tp>  { 
# 1543
typedef _Tp type; }; 
# 1546
template< class _Tp> 
# 1547
struct remove_volatile { 
# 1548
typedef _Tp type; }; 
# 1550
template< class _Tp> 
# 1551
struct remove_volatile< volatile _Tp>  { 
# 1552
typedef _Tp type; }; 
# 1555
template< class _Tp> 
# 1556
struct remove_cv { 
# 1557
using type = _Tp; }; 
# 1559
template< class _Tp> 
# 1560
struct remove_cv< const _Tp>  { 
# 1561
using type = _Tp; }; 
# 1563
template< class _Tp> 
# 1564
struct remove_cv< volatile _Tp>  { 
# 1565
using type = _Tp; }; 
# 1567
template< class _Tp> 
# 1568
struct remove_cv< const volatile _Tp>  { 
# 1569
using type = _Tp; }; 
# 1572
template< class _Tp> 
# 1573
struct add_const { 
# 1574
typedef const _Tp type; }; 
# 1577
template< class _Tp> 
# 1578
struct add_volatile { 
# 1579
typedef volatile _Tp type; }; 
# 1582
template< class _Tp> 
# 1583
struct add_cv { 
# 1586
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1587
}; 
# 1594
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 1598
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 1602
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 1606
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1610
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1614
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1621
template< class _Tp> 
# 1622
struct remove_reference { 
# 1623
typedef _Tp type; }; 
# 1625
template< class _Tp> 
# 1626
struct remove_reference< _Tp &>  { 
# 1627
typedef _Tp type; }; 
# 1629
template< class _Tp> 
# 1630
struct remove_reference< _Tp &&>  { 
# 1631
typedef _Tp type; }; 
# 1633
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1634
struct __add_lvalue_reference_helper { 
# 1635
typedef _Tp type; }; 
# 1637
template< class _Tp> 
# 1638
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1639
typedef _Tp &type; }; 
# 1642
template< class _Tp> 
# 1643
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1645
}; 
# 1647
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1648
struct __add_rvalue_reference_helper { 
# 1649
typedef _Tp type; }; 
# 1651
template< class _Tp> 
# 1652
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1653
typedef _Tp &&type; }; 
# 1656
template< class _Tp> 
# 1657
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1659
}; 
# 1663
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1667
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1671
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1680
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1683
template< class _Unqualified> 
# 1684
struct __cv_selector< _Unqualified, false, false>  { 
# 1685
typedef _Unqualified __type; }; 
# 1687
template< class _Unqualified> 
# 1688
struct __cv_selector< _Unqualified, false, true>  { 
# 1689
typedef volatile _Unqualified __type; }; 
# 1691
template< class _Unqualified> 
# 1692
struct __cv_selector< _Unqualified, true, false>  { 
# 1693
typedef const _Unqualified __type; }; 
# 1695
template< class _Unqualified> 
# 1696
struct __cv_selector< _Unqualified, true, true>  { 
# 1697
typedef const volatile _Unqualified __type; }; 
# 1699
template< class _Qualified, class _Unqualified, bool 
# 1700
_IsConst = is_const< _Qualified> ::value, bool 
# 1701
_IsVol = is_volatile< _Qualified> ::value> 
# 1702
class __match_cv_qualifiers { 
# 1704
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1707
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1708
}; 
# 1711
template< class _Tp> 
# 1712
struct __make_unsigned { 
# 1713
typedef _Tp __type; }; 
# 1716
template<> struct __make_unsigned< char>  { 
# 1717
typedef unsigned char __type; }; 
# 1720
template<> struct __make_unsigned< signed char>  { 
# 1721
typedef unsigned char __type; }; 
# 1724
template<> struct __make_unsigned< short>  { 
# 1725
typedef unsigned short __type; }; 
# 1728
template<> struct __make_unsigned< int>  { 
# 1729
typedef unsigned __type; }; 
# 1732
template<> struct __make_unsigned< long>  { 
# 1733
typedef unsigned long __type; }; 
# 1736
template<> struct __make_unsigned< long long>  { 
# 1737
typedef unsigned long long __type; }; 
# 1765 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp, bool 
# 1766
_IsInt = is_integral< _Tp> ::value, bool 
# 1767
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1770
template< class _Tp> 
# 1771
class __make_unsigned_selector< _Tp, true, false>  { 
# 1773
using __unsigned_type = typename __make_unsigned< __remove_cv_t< _Tp> > ::__type; 
# 1777
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1779
}; 
# 1781
class __make_unsigned_selector_base { 
# 1784
protected: template< class ...> struct _List { }; 
# 1786
template< class _Tp, class ..._Up> 
# 1787
struct _List< _Tp, _Up...>  : public __make_unsigned_selector_base::_List< _Up...>  { 
# 1788
static constexpr inline std::size_t __size = sizeof(_Tp); }; 
# 1790
template< size_t _Sz, class _Tp, bool  = _Sz <= _Tp::__size> struct __select; 
# 1793
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1794
struct __select< _Sz, _List< _Uint, _UInts...> , true>  { 
# 1795
using __type = _Uint; }; 
# 1797
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1798
struct __select< _Sz, _List< _Uint, _UInts...> , false>  : public __make_unsigned_selector_base::__select< _Sz, _List< _UInts...> >  { 
# 1800
}; 
# 1801
}; 
# 1804
template< class _Tp> 
# 1805
class __make_unsigned_selector< _Tp, false, true>  : private __make_unsigned_selector_base { 
# 1809
using _UInts = _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> ; 
# 1812
using __unsigned_type = typename __select< sizeof(_Tp), _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> > ::__type; 
# 1815
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1817
}; 
# 1824
template<> struct __make_unsigned< wchar_t>  { 
# 1826
using __type = __make_unsigned_selector< wchar_t, false, true> ::__type; 
# 1828
}; 
# 1840 "/usr/include/c++/12.2.1/type_traits" 3
template<> struct __make_unsigned< char16_t>  { 
# 1842
using __type = __make_unsigned_selector< char16_t, false, true> ::__type; 
# 1844
}; 
# 1847
template<> struct __make_unsigned< char32_t>  { 
# 1849
using __type = __make_unsigned_selector< char32_t, false, true> ::__type; 
# 1851
}; 
# 1858
template< class _Tp> 
# 1859
struct make_unsigned { 
# 1860
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1864
template<> struct make_unsigned< bool> ; 
# 1869
template< class _Tp> 
# 1870
struct __make_signed { 
# 1871
typedef _Tp __type; }; 
# 1874
template<> struct __make_signed< char>  { 
# 1875
typedef signed char __type; }; 
# 1878
template<> struct __make_signed< unsigned char>  { 
# 1879
typedef signed char __type; }; 
# 1882
template<> struct __make_signed< unsigned short>  { 
# 1883
typedef signed short __type; }; 
# 1886
template<> struct __make_signed< unsigned>  { 
# 1887
typedef signed int __type; }; 
# 1890
template<> struct __make_signed< unsigned long>  { 
# 1891
typedef signed long __type; }; 
# 1894
template<> struct __make_signed< unsigned long long>  { 
# 1895
typedef signed long long __type; }; 
# 1923 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp, bool 
# 1924
_IsInt = is_integral< _Tp> ::value, bool 
# 1925
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1928
template< class _Tp> 
# 1929
class __make_signed_selector< _Tp, true, false>  { 
# 1931
using __signed_type = typename __make_signed< __remove_cv_t< _Tp> > ::__type; 
# 1935
public: using __type = typename __match_cv_qualifiers< _Tp, __signed_type> ::__type; 
# 1937
}; 
# 1940
template< class _Tp> 
# 1941
class __make_signed_selector< _Tp, false, true>  { 
# 1943
typedef typename __make_unsigned_selector< _Tp> ::__type __unsigned_type; 
# 1946
public: typedef typename std::__make_signed_selector< __unsigned_type> ::__type __type; 
# 1947
}; 
# 1954
template<> struct __make_signed< wchar_t>  { 
# 1956
using __type = __make_signed_selector< wchar_t, false, true> ::__type; 
# 1958
}; 
# 1970 "/usr/include/c++/12.2.1/type_traits" 3
template<> struct __make_signed< char16_t>  { 
# 1972
using __type = __make_signed_selector< char16_t, false, true> ::__type; 
# 1974
}; 
# 1977
template<> struct __make_signed< char32_t>  { 
# 1979
using __type = __make_signed_selector< char32_t, false, true> ::__type; 
# 1981
}; 
# 1988
template< class _Tp> 
# 1989
struct make_signed { 
# 1990
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1994
template<> struct make_signed< bool> ; 
# 1998
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 2002
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 2009
template< class _Tp> 
# 2010
struct remove_extent { 
# 2011
typedef _Tp type; }; 
# 2013
template< class _Tp, size_t _Size> 
# 2014
struct remove_extent< _Tp [_Size]>  { 
# 2015
typedef _Tp type; }; 
# 2017
template< class _Tp> 
# 2018
struct remove_extent< _Tp []>  { 
# 2019
typedef _Tp type; }; 
# 2022
template< class _Tp> 
# 2023
struct remove_all_extents { 
# 2024
typedef _Tp type; }; 
# 2026
template< class _Tp, size_t _Size> 
# 2027
struct remove_all_extents< _Tp [_Size]>  { 
# 2028
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 2030
template< class _Tp> 
# 2031
struct remove_all_extents< _Tp []>  { 
# 2032
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 2036
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 2040
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 2046
template< class _Tp, class > 
# 2047
struct __remove_pointer_helper { 
# 2048
typedef _Tp type; }; 
# 2050
template< class _Tp, class _Up> 
# 2051
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 2052
typedef _Up type; }; 
# 2055
template< class _Tp> 
# 2056
struct remove_pointer : public __remove_pointer_helper< _Tp, __remove_cv_t< _Tp> >  { 
# 2058
}; 
# 2060
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 2062
struct __add_pointer_helper { 
# 2063
typedef _Tp type; }; 
# 2065
template< class _Tp> 
# 2066
struct __add_pointer_helper< _Tp, true>  { 
# 2067
typedef typename remove_reference< _Tp> ::type *type; }; 
# 2070
template< class _Tp> 
# 2071
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 2073
}; 
# 2077
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 2081
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 2085
template< size_t _Len> 
# 2086
struct __aligned_storage_msa { 
# 2088
union __type { 
# 2090
unsigned char __data[_Len]; 
# 2091
struct __attribute((__aligned__)) { } __align; 
# 2092
}; 
# 2093
}; 
# 2105 "/usr/include/c++/12.2.1/type_traits" 3
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 2107
struct aligned_storage { 
# 2109
union type { 
# 2111
unsigned char __data[_Len]; 
# 2112
struct __attribute((__aligned__(_Align))) { } __align; 
# 2113
}; 
# 2114
}; 
# 2116
template< class ..._Types> 
# 2117
struct __strictest_alignment { 
# 2119
static const size_t _S_alignment = (0); 
# 2120
static const size_t _S_size = (0); 
# 2121
}; 
# 2123
template< class _Tp, class ..._Types> 
# 2124
struct __strictest_alignment< _Tp, _Types...>  { 
# 2126
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 2129
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 2132
}; 
# 2144 "/usr/include/c++/12.2.1/type_traits" 3
template< size_t _Len, class ..._Types> 
# 2145
struct aligned_union { 
# 2148
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 2150
private: using __strictest = __strictest_alignment< _Types...> ; 
# 2151
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 2155
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 2157
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 2158
}; 
# 2160
template< size_t _Len, class ..._Types> const size_t aligned_union< _Len, _Types...> ::alignment_value; 
# 2167
template< class _Up, bool 
# 2168
_IsArray = is_array< _Up> ::value, bool 
# 2169
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 2173
template< class _Up> 
# 2174
struct __decay_selector< _Up, false, false>  { 
# 2175
typedef __remove_cv_t< _Up>  __type; }; 
# 2177
template< class _Up> 
# 2178
struct __decay_selector< _Up, true, false>  { 
# 2179
typedef typename remove_extent< _Up> ::type *__type; }; 
# 2181
template< class _Up> 
# 2182
struct __decay_selector< _Up, false, true>  { 
# 2183
typedef typename add_pointer< _Up> ::type __type; }; 
# 2187
template< class _Tp> 
# 2188
class decay { 
# 2190
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 2193
public: typedef typename __decay_selector< __remove_type> ::__type type; 
# 2194
}; 
# 2199
template< class _Tp> 
# 2200
struct __strip_reference_wrapper { 
# 2202
typedef _Tp __type; 
# 2203
}; 
# 2205
template< class _Tp> 
# 2206
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 2208
typedef _Tp &__type; 
# 2209
}; 
# 2212
template< class _Tp> using __decay_t = typename decay< _Tp> ::type; 
# 2215
template< class _Tp> using __decay_and_strip = __strip_reference_wrapper< __decay_t< _Tp> > ; 
# 2221
template< bool , class _Tp = void> 
# 2222
struct enable_if { 
# 2223
}; 
# 2226
template< class _Tp> 
# 2227
struct enable_if< true, _Tp>  { 
# 2228
typedef _Tp type; }; 
# 2233
template< bool _Cond, class _Tp = void> using __enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2237
template< class ..._Cond> using _Require = __enable_if_t< __and_< _Cond...> ::value> ; 
# 2241
template< class _Tp> using __remove_cvref_t = typename remove_cv< typename remove_reference< _Tp> ::type> ::type; 
# 2248
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 2249
struct conditional { 
# 2250
typedef _Iftrue type; }; 
# 2253
template< class _Iftrue, class _Iffalse> 
# 2254
struct conditional< false, _Iftrue, _Iffalse>  { 
# 2255
typedef _Iffalse type; }; 
# 2258
template< class ..._Tp> struct common_type; 
# 2264
struct __do_common_type_impl { 
# 2266
template< class _Tp, class _Up> using __cond_t = __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ())); 
# 2272
template< class _Tp, class _Up> static __success_type< __decay_t< __cond_t< _Tp, _Up> > >  _S_test(int); 
# 2284 "/usr/include/c++/12.2.1/type_traits" 3
template< class , class > static __failure_type _S_test_2(...); 
# 2288
template< class _Tp, class _Up> static __decltype((_S_test_2< _Tp, _Up> (0))) _S_test(...); 
# 2291
}; 
# 2295
template<> struct common_type< >  { 
# 2296
}; 
# 2299
template< class _Tp0> 
# 2300
struct common_type< _Tp0>  : public std::common_type< _Tp0, _Tp0>  { 
# 2302
}; 
# 2305
template< class _Tp1, class _Tp2, class 
# 2306
_Dp1 = __decay_t< _Tp1> , class _Dp2 = __decay_t< _Tp2> > 
# 2307
struct __common_type_impl { 
# 2311
using type = common_type< _Dp1, _Dp2> ; 
# 2312
}; 
# 2314
template< class _Tp1, class _Tp2> 
# 2315
struct __common_type_impl< _Tp1, _Tp2, _Tp1, _Tp2>  : private __do_common_type_impl { 
# 2320
using type = __decltype((_S_test< _Tp1, _Tp2> (0))); 
# 2321
}; 
# 2324
template< class _Tp1, class _Tp2> 
# 2325
struct common_type< _Tp1, _Tp2>  : public __common_type_impl< _Tp1, _Tp2> ::type { 
# 2327
}; 
# 2329
template< class ...> 
# 2330
struct __common_type_pack { 
# 2331
}; 
# 2333
template< class , class , class  = void> struct __common_type_fold; 
# 2337
template< class _Tp1, class _Tp2, class ..._Rp> 
# 2338
struct common_type< _Tp1, _Tp2, _Rp...>  : public __common_type_fold< std::common_type< _Tp1, _Tp2> , __common_type_pack< _Rp...> >  { 
# 2341
}; 
# 2346
template< class _CTp, class ..._Rp> 
# 2347
struct __common_type_fold< _CTp, __common_type_pack< _Rp...> , __void_t< typename _CTp::type> >  : public common_type< typename _CTp::type, _Rp...>  { 
# 2350
}; 
# 2353
template< class _CTp, class _Rp> 
# 2354
struct __common_type_fold< _CTp, _Rp, void>  { 
# 2355
}; 
# 2357
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 2358
struct __underlying_type_impl { 
# 2360
using type = __underlying_type(_Tp); 
# 2361
}; 
# 2363
template< class _Tp> 
# 2364
struct __underlying_type_impl< _Tp, false>  { 
# 2365
}; 
# 2369
template< class _Tp> 
# 2370
struct underlying_type : public __underlying_type_impl< _Tp>  { 
# 2372
}; 
# 2375
template< class _Tp> 
# 2376
struct __declval_protector { 
# 2378
static const bool __stop = false; 
# 2379
}; 
# 2386
template< class _Tp> auto 
# 2387
declval() noexcept->__decltype((__declval< _Tp> (0))) 
# 2388
{ 
# 2389
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2391
return __declval< _Tp> (0); 
# 2392
} 
# 2395
template< class _Signature> struct result_of; 
# 2403
struct __invoke_memfun_ref { }; 
# 2404
struct __invoke_memfun_deref { }; 
# 2405
struct __invoke_memobj_ref { }; 
# 2406
struct __invoke_memobj_deref { }; 
# 2407
struct __invoke_other { }; 
# 2410
template< class _Tp, class _Tag> 
# 2411
struct __result_of_success : public __success_type< _Tp>  { 
# 2412
using __invoke_type = _Tag; }; 
# 2415
struct __result_of_memfun_ref_impl { 
# 2417
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_ref>  _S_test(int); 
# 2422
template< class ...> static __failure_type _S_test(...); 
# 2424
}; 
# 2426
template< class _MemPtr, class _Arg, class ..._Args> 
# 2427
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2430
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2431
}; 
# 2434
struct __result_of_memfun_deref_impl { 
# 2436
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_deref>  _S_test(int); 
# 2441
template< class ...> static __failure_type _S_test(...); 
# 2443
}; 
# 2445
template< class _MemPtr, class _Arg, class ..._Args> 
# 2446
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2449
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2450
}; 
# 2453
struct __result_of_memobj_ref_impl { 
# 2455
template< class _Fp, class _Tp1> static __result_of_success< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ())), __invoke_memobj_ref>  _S_test(int); 
# 2460
template< class , class > static __failure_type _S_test(...); 
# 2462
}; 
# 2464
template< class _MemPtr, class _Arg> 
# 2465
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2468
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2469
}; 
# 2472
struct __result_of_memobj_deref_impl { 
# 2474
template< class _Fp, class _Tp1> static __result_of_success< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ())), __invoke_memobj_deref>  _S_test(int); 
# 2479
template< class , class > static __failure_type _S_test(...); 
# 2481
}; 
# 2483
template< class _MemPtr, class _Arg> 
# 2484
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2487
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2488
}; 
# 2490
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2493
template< class _Res, class _Class, class _Arg> 
# 2494
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2496
typedef __remove_cvref_t< _Arg>  _Argval; 
# 2497
typedef _Res (_Class::*_MemPtr); 
# 2502
typedef typename __conditional_t< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memobj_ref< _MemPtr, _Arg> , __result_of_memobj_deref< _MemPtr, _Arg> > ::type type; 
# 2503
}; 
# 2505
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2508
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2509
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2511
typedef typename remove_reference< _Arg> ::type _Argval; 
# 2512
typedef _Res (_Class::*_MemPtr); 
# 2516
typedef typename __conditional_t< is_base_of< _Class, _Argval> ::value, __result_of_memfun_ref< _MemPtr, _Arg, _Args...> , __result_of_memfun_deref< _MemPtr, _Arg, _Args...> > ::type type; 
# 2517
}; 
# 2524
template< class _Tp, class _Up = __remove_cvref_t< _Tp> > 
# 2525
struct __inv_unwrap { 
# 2527
using type = _Tp; 
# 2528
}; 
# 2530
template< class _Tp, class _Up> 
# 2531
struct __inv_unwrap< _Tp, reference_wrapper< _Up> >  { 
# 2533
using type = _Up &; 
# 2534
}; 
# 2536
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2537
struct __result_of_impl { 
# 2539
typedef __failure_type type; 
# 2540
}; 
# 2542
template< class _MemPtr, class _Arg> 
# 2543
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< __decay_t< _MemPtr> , typename __inv_unwrap< _Arg> ::type>  { 
# 2546
}; 
# 2548
template< class _MemPtr, class _Arg, class ..._Args> 
# 2549
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< __decay_t< _MemPtr> , typename __inv_unwrap< _Arg> ::type, _Args...>  { 
# 2552
}; 
# 2555
struct __result_of_other_impl { 
# 2557
template< class _Fn, class ..._Args> static __result_of_success< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...))), __invoke_other>  _S_test(int); 
# 2562
template< class ...> static __failure_type _S_test(...); 
# 2564
}; 
# 2566
template< class _Functor, class ..._ArgTypes> 
# 2567
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2570
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2571
}; 
# 2574
template< class _Functor, class ..._ArgTypes> 
# 2575
struct __invoke_result : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2585
}; 
# 2588
template< class _Functor, class ..._ArgTypes> 
# 2589
struct result_of< _Functor (_ArgTypes ...)>  : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2591
} __attribute((__deprecated__("use \'std::invoke_result\' instead"))); 
# 2595
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 2599
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 2603
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 2607
template< bool _Cond, class _Tp = void> using enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2611
template< bool _Cond, class _Iftrue, class _Iffalse> using conditional_t = typename conditional< _Cond, _Iftrue, _Iffalse> ::type; 
# 2615
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2619
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 2623
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 2630
template< class ...> using void_t = void; 
# 2636
template< class _Default, class _AlwaysVoid, 
# 2637
template< class ...>  class _Op, class ..._Args> 
# 2638
struct __detector { 
# 2640
using value_t = false_type; 
# 2641
using type = _Default; 
# 2642
}; 
# 2645
template< class _Default, template< class ...>  class _Op, class ...
# 2646
_Args> 
# 2647
struct __detector< _Default, __void_t< _Op< _Args...> > , _Op, _Args...>  { 
# 2649
using value_t = true_type; 
# 2650
using type = _Op< _Args...> ; 
# 2651
}; 
# 2654
template< class _Default, template< class ...>  class _Op, class ...
# 2655
_Args> using __detected_or = __detector< _Default, void, _Op, _Args...> ; 
# 2659
template< class _Default, template< class ...>  class _Op, class ...
# 2660
_Args> using __detected_or_t = typename __detected_or< _Default, _Op, _Args...> ::type; 
# 2678 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp> struct __is_swappable; 
# 2681
template< class _Tp> struct __is_nothrow_swappable; 
# 2684
template< class > 
# 2685
struct __is_tuple_like_impl : public false_type { 
# 2686
}; 
# 2689
template< class _Tp> 
# 2690
struct __is_tuple_like : public __is_tuple_like_impl< __remove_cvref_t< _Tp> > ::type { 
# 2692
}; 
# 2695
template< class _Tp> inline _Require< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> >  swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 2705
template< class _Tp, size_t _Nm> inline __enable_if_t< __is_swappable< _Tp> ::value>  swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value); 
# 2713
namespace __swappable_details { 
# 2714
using std::swap;
# 2716
struct __do_is_swappable_impl { 
# 2718
template< class _Tp, class 
# 2719
 = __decltype((swap(std::declval< _Tp &> (), std::declval< _Tp &> ())))> static true_type 
# 2718
__test(int); 
# 2722
template< class > static false_type __test(...); 
# 2724
}; 
# 2726
struct __do_is_nothrow_swappable_impl { 
# 2728
template< class _Tp> static __bool_constant< noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))>  __test(int); 
# 2733
template< class > static false_type __test(...); 
# 2735
}; 
# 2737
}
# 2739
template< class _Tp> 
# 2740
struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl { 
# 2743
typedef __decltype((__test< _Tp> (0))) type; 
# 2744
}; 
# 2746
template< class _Tp> 
# 2747
struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2750
typedef __decltype((__test< _Tp> (0))) type; 
# 2751
}; 
# 2753
template< class _Tp> 
# 2754
struct __is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2756
}; 
# 2758
template< class _Tp> 
# 2759
struct __is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2761
}; 
# 2769
template< class _Tp> 
# 2770
struct is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2773
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 2775
}; 
# 2778
template< class _Tp> 
# 2779
struct is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2782
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 2784
}; 
# 2788
template< class _Tp> constexpr bool 
# 2789
is_swappable_v = (is_swappable< _Tp> ::value); 
# 2793
template< class _Tp> constexpr bool 
# 2794
is_nothrow_swappable_v = (is_nothrow_swappable< _Tp> ::value); 
# 2799
namespace __swappable_with_details { 
# 2800
using std::swap;
# 2802
struct __do_is_swappable_with_impl { 
# 2804
template< class _Tp, class _Up, class 
# 2805
 = __decltype((swap(std::declval< _Tp> (), std::declval< _Up> ()))), class 
# 2807
 = __decltype((swap(std::declval< _Up> (), std::declval< _Tp> ())))> static true_type 
# 2804
__test(int); 
# 2810
template< class , class > static false_type __test(...); 
# 2812
}; 
# 2814
struct __do_is_nothrow_swappable_with_impl { 
# 2816
template< class _Tp, class _Up> static __bool_constant< noexcept(swap(std::declval< _Tp> (), std::declval< _Up> ())) && noexcept(swap(std::declval< _Up> (), std::declval< _Tp> ()))>  __test(int); 
# 2823
template< class , class > static false_type __test(...); 
# 2825
}; 
# 2827
}
# 2829
template< class _Tp, class _Up> 
# 2830
struct __is_swappable_with_impl : public __swappable_with_details::__do_is_swappable_with_impl { 
# 2833
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2834
}; 
# 2837
template< class _Tp> 
# 2838
struct __is_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_swappable_impl { 
# 2841
typedef __decltype((__test< _Tp &> (0))) type; 
# 2842
}; 
# 2844
template< class _Tp, class _Up> 
# 2845
struct __is_nothrow_swappable_with_impl : public __swappable_with_details::__do_is_nothrow_swappable_with_impl { 
# 2848
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2849
}; 
# 2852
template< class _Tp> 
# 2853
struct __is_nothrow_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2856
typedef __decltype((__test< _Tp &> (0))) type; 
# 2857
}; 
# 2861
template< class _Tp, class _Up> 
# 2862
struct is_swappable_with : public __is_swappable_with_impl< _Tp, _Up> ::type { 
# 2865
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "first template argument must be a complete class or an unbounded array");
# 2867
static_assert((std::__is_complete_or_unbounded(__type_identity< _Up> {})), "second template argument must be a complete class or an unbounded array");
# 2869
}; 
# 2872
template< class _Tp, class _Up> 
# 2873
struct is_nothrow_swappable_with : public __is_nothrow_swappable_with_impl< _Tp, _Up> ::type { 
# 2876
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "first template argument must be a complete class or an unbounded array");
# 2878
static_assert((std::__is_complete_or_unbounded(__type_identity< _Up> {})), "second template argument must be a complete class or an unbounded array");
# 2880
}; 
# 2884
template< class _Tp, class _Up> constexpr bool 
# 2885
is_swappable_with_v = (is_swappable_with< _Tp, _Up> ::value); 
# 2889
template< class _Tp, class _Up> constexpr bool 
# 2890
is_nothrow_swappable_with_v = (is_nothrow_swappable_with< _Tp, _Up> ::value); 
# 2901 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Result, class _Ret, bool 
# 2902
 = is_void< _Ret> ::value, class  = void> 
# 2903
struct __is_invocable_impl : public false_type { 
# 2906
using __nothrow_type = false_type; 
# 2907
}; 
# 2910
template< class _Result, class _Ret> 
# 2911
struct __is_invocable_impl< _Result, _Ret, true, __void_t< typename _Result::type> >  : public true_type { 
# 2916
using __nothrow_type = true_type; 
# 2917
}; 
# 2919
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
# 2922
template< class _Result, class _Ret> 
# 2923
struct __is_invocable_impl< _Result, _Ret, false, __void_t< typename _Result::type> >  { 
# 2931
private: static typename _Result::type _S_get() noexcept; 
# 2933
template< class _Tp> static void _S_conv(_Tp) noexcept; 
# 2937
template< class _Tp, bool _Check_Noex = false, class 
# 2938
 = __decltype((_S_conv< _Tp> ((_S_get)()))), bool 
# 2939
_Noex = noexcept(_S_conv< _Tp> ((_S_get)()))> static __bool_constant< _Check_Noex ? _Noex : true>  
# 2937
_S_test(int); 
# 2943
template< class _Tp, bool  = false> static false_type _S_test(...); 
# 2949
public: using type = __decltype((_S_test< _Ret> (1))); 
# 2952
using __nothrow_type = __decltype((_S_test< _Ret, true> (1))); 
# 2953
}; 
#pragma GCC diagnostic pop
# 2956
template< class _Fn, class ..._ArgTypes> 
# 2957
struct __is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2959
}; 
# 2961
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2962
__call_is_nt(__invoke_memfun_ref) 
# 2963
{ 
# 2964
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2965
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2967
} 
# 2969
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2970
__call_is_nt(__invoke_memfun_deref) 
# 2971
{ 
# 2972
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2974
} 
# 2976
template< class _Fn, class _Tp> constexpr bool 
# 2977
__call_is_nt(__invoke_memobj_ref) 
# 2978
{ 
# 2979
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2980
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())); 
# 2981
} 
# 2983
template< class _Fn, class _Tp> constexpr bool 
# 2984
__call_is_nt(__invoke_memobj_deref) 
# 2985
{ 
# 2986
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())); 
# 2987
} 
# 2989
template< class _Fn, class ..._Args> constexpr bool 
# 2990
__call_is_nt(__invoke_other) 
# 2991
{ 
# 2992
return noexcept(std::declval< _Fn> ()(std::declval< _Args> ()...)); 
# 2993
} 
# 2995
template< class _Result, class _Fn, class ..._Args> 
# 2996
struct __call_is_nothrow : public __bool_constant< std::__call_is_nt< _Fn, _Args...> (typename _Result::__invoke_type{})>  { 
# 3000
}; 
# 3002
template< class _Fn, class ..._Args> using __call_is_nothrow_ = __call_is_nothrow< __invoke_result< _Fn, _Args...> , _Fn, _Args...> ; 
# 3007
template< class _Fn, class ..._Args> 
# 3008
struct __is_nothrow_invocable : public __and_< __is_invocable< _Fn, _Args...> , __call_is_nothrow_< _Fn, _Args...> > ::type { 
# 3011
}; 
# 3013
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
struct __nonesuchbase { }; 
# 3016
struct __nonesuch : private __nonesuchbase { 
# 3017
~__nonesuch() = delete;
# 3018
__nonesuch(const __nonesuch &) = delete;
# 3019
void operator=(const __nonesuch &) = delete;
# 3020
}; 
#pragma GCC diagnostic pop
# 3028
template< class _Functor, class ..._ArgTypes> 
# 3029
struct invoke_result : public __invoke_result< _Functor, _ArgTypes...>  { 
# 3032
static_assert((std::__is_complete_or_unbounded(__type_identity< _Functor> {})), "_Functor must be a complete class or an unbounded array");
# 3034
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3037
}; 
# 3040
template< class _Fn, class ..._Args> using invoke_result_t = typename invoke_result< _Fn, _Args...> ::type; 
# 3044
template< class _Fn, class ..._ArgTypes> 
# 3045
struct is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 3048
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3050
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3053
}; 
# 3056
template< class _Ret, class _Fn, class ..._ArgTypes> 
# 3057
struct is_invocable_r : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , _Ret> ::type { 
# 3060
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3062
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3065
static_assert((std::__is_complete_or_unbounded(__type_identity< _Ret> {})), "_Ret must be a complete class or an unbounded array");
# 3067
}; 
# 3070
template< class _Fn, class ..._ArgTypes> 
# 3071
struct is_nothrow_invocable : public __and_< __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> , __call_is_nothrow_< _Fn, _ArgTypes...> > ::type { 
# 3075
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3077
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3080
}; 
# 3083
template< class _Result, class _Ret> using __is_nt_invocable_impl = typename __is_invocable_impl< _Result, _Ret> ::__nothrow_type; 
# 3089
template< class _Ret, class _Fn, class ..._ArgTypes> 
# 3090
struct is_nothrow_invocable_r : public __and_< __is_nt_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , _Ret> , __call_is_nothrow_< _Fn, _ArgTypes...> > ::type { 
# 3094
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3096
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3099
static_assert((std::__is_complete_or_unbounded(__type_identity< _Ret> {})), "_Ret must be a complete class or an unbounded array");
# 3101
}; 
# 3120 "/usr/include/c++/12.2.1/type_traits" 3
template< class _Tp> constexpr bool 
# 3121
is_void_v = (is_void< _Tp> ::value); 
# 3122
template< class _Tp> constexpr bool 
# 3123
is_null_pointer_v = (is_null_pointer< _Tp> ::value); 
# 3124
template< class _Tp> constexpr bool 
# 3125
is_integral_v = (is_integral< _Tp> ::value); 
# 3126
template< class _Tp> constexpr bool 
# 3127
is_floating_point_v = (is_floating_point< _Tp> ::value); 
# 3128
template< class _Tp> constexpr bool 
# 3129
is_array_v = (is_array< _Tp> ::value); 
# 3130
template< class _Tp> constexpr bool 
# 3131
is_pointer_v = (is_pointer< _Tp> ::value); 
# 3132
template< class _Tp> constexpr bool 
# 3133
is_lvalue_reference_v = (is_lvalue_reference< _Tp> ::value); 
# 3135
template< class _Tp> constexpr bool 
# 3136
is_rvalue_reference_v = (is_rvalue_reference< _Tp> ::value); 
# 3138
template< class _Tp> constexpr bool 
# 3139
is_member_object_pointer_v = (is_member_object_pointer< _Tp> ::value); 
# 3141
template< class _Tp> constexpr bool 
# 3142
is_member_function_pointer_v = (is_member_function_pointer< _Tp> ::value); 
# 3144
template< class _Tp> constexpr bool 
# 3145
is_enum_v = (is_enum< _Tp> ::value); 
# 3146
template< class _Tp> constexpr bool 
# 3147
is_union_v = (is_union< _Tp> ::value); 
# 3148
template< class _Tp> constexpr bool 
# 3149
is_class_v = (is_class< _Tp> ::value); 
# 3150
template< class _Tp> constexpr bool 
# 3151
is_function_v = (is_function< _Tp> ::value); 
# 3152
template< class _Tp> constexpr bool 
# 3153
is_reference_v = (is_reference< _Tp> ::value); 
# 3154
template< class _Tp> constexpr bool 
# 3155
is_arithmetic_v = (is_arithmetic< _Tp> ::value); 
# 3156
template< class _Tp> constexpr bool 
# 3157
is_fundamental_v = (is_fundamental< _Tp> ::value); 
# 3158
template< class _Tp> constexpr bool 
# 3159
is_object_v = (is_object< _Tp> ::value); 
# 3160
template< class _Tp> constexpr bool 
# 3161
is_scalar_v = (is_scalar< _Tp> ::value); 
# 3162
template< class _Tp> constexpr bool 
# 3163
is_compound_v = (is_compound< _Tp> ::value); 
# 3164
template< class _Tp> constexpr bool 
# 3165
is_member_pointer_v = (is_member_pointer< _Tp> ::value); 
# 3166
template< class _Tp> constexpr bool 
# 3167
is_const_v = (is_const< _Tp> ::value); 
# 3168
template< class _Tp> constexpr bool 
# 3169
is_volatile_v = (is_volatile< _Tp> ::value); 
# 3170
template< class _Tp> constexpr bool 
# 3171
is_trivial_v = (is_trivial< _Tp> ::value); 
# 3172
template< class _Tp> constexpr bool 
# 3173
is_trivially_copyable_v = (is_trivially_copyable< _Tp> ::value); 
# 3175
template< class _Tp> constexpr bool 
# 3176
is_standard_layout_v = (is_standard_layout< _Tp> ::value); 
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template< class _Tp> constexpr bool 
# 3181
is_pod_v = (is_pod< _Tp> ::value); 
# 3182
template< class _Tp> 
# 3183
[[__deprecated__]] constexpr bool 
# 3184
is_literal_type_v = (is_literal_type< _Tp> ::value); 
#pragma GCC diagnostic pop
template< class _Tp> constexpr bool 
# 3187
is_empty_v = (is_empty< _Tp> ::value); 
# 3188
template< class _Tp> constexpr bool 
# 3189
is_polymorphic_v = (is_polymorphic< _Tp> ::value); 
# 3190
template< class _Tp> constexpr bool 
# 3191
is_abstract_v = (is_abstract< _Tp> ::value); 
# 3192
template< class _Tp> constexpr bool 
# 3193
is_final_v = (is_final< _Tp> ::value); 
# 3194
template< class _Tp> constexpr bool 
# 3195
is_signed_v = (is_signed< _Tp> ::value); 
# 3196
template< class _Tp> constexpr bool 
# 3197
is_unsigned_v = (is_unsigned< _Tp> ::value); 
# 3198
template< class _Tp, class ..._Args> constexpr bool 
# 3199
is_constructible_v = (is_constructible< _Tp, _Args...> ::value); 
# 3201
template< class _Tp> constexpr bool 
# 3202
is_default_constructible_v = (is_default_constructible< _Tp> ::value); 
# 3204
template< class _Tp> constexpr bool 
# 3205
is_copy_constructible_v = (is_copy_constructible< _Tp> ::value); 
# 3207
template< class _Tp> constexpr bool 
# 3208
is_move_constructible_v = (is_move_constructible< _Tp> ::value); 
# 3210
template< class _Tp, class _Up> constexpr bool 
# 3211
is_assignable_v = (is_assignable< _Tp, _Up> ::value); 
# 3212
template< class _Tp> constexpr bool 
# 3213
is_copy_assignable_v = (is_copy_assignable< _Tp> ::value); 
# 3214
template< class _Tp> constexpr bool 
# 3215
is_move_assignable_v = (is_move_assignable< _Tp> ::value); 
# 3216
template< class _Tp> constexpr bool 
# 3217
is_destructible_v = (is_destructible< _Tp> ::value); 
# 3218
template< class _Tp, class ..._Args> constexpr bool 
# 3219
is_trivially_constructible_v = (is_trivially_constructible< _Tp, _Args...> ::value); 
# 3221
template< class _Tp> constexpr bool 
# 3222
is_trivially_default_constructible_v = (is_trivially_default_constructible< _Tp> ::value); 
# 3224
template< class _Tp> constexpr bool 
# 3225
is_trivially_copy_constructible_v = (is_trivially_copy_constructible< _Tp> ::value); 
# 3227
template< class _Tp> constexpr bool 
# 3228
is_trivially_move_constructible_v = (is_trivially_move_constructible< _Tp> ::value); 
# 3230
template< class _Tp, class _Up> constexpr bool 
# 3231
is_trivially_assignable_v = (is_trivially_assignable< _Tp, _Up> ::value); 
# 3233
template< class _Tp> constexpr bool 
# 3234
is_trivially_copy_assignable_v = (is_trivially_copy_assignable< _Tp> ::value); 
# 3236
template< class _Tp> constexpr bool 
# 3237
is_trivially_move_assignable_v = (is_trivially_move_assignable< _Tp> ::value); 
# 3239
template< class _Tp> constexpr bool 
# 3240
is_trivially_destructible_v = (is_trivially_destructible< _Tp> ::value); 
# 3242
template< class _Tp, class ..._Args> constexpr bool 
# 3243
is_nothrow_constructible_v = (is_nothrow_constructible< _Tp, _Args...> ::value); 
# 3245
template< class _Tp> constexpr bool 
# 3246
is_nothrow_default_constructible_v = (is_nothrow_default_constructible< _Tp> ::value); 
# 3248
template< class _Tp> constexpr bool 
# 3249
is_nothrow_copy_constructible_v = (is_nothrow_copy_constructible< _Tp> ::value); 
# 3251
template< class _Tp> constexpr bool 
# 3252
is_nothrow_move_constructible_v = (is_nothrow_move_constructible< _Tp> ::value); 
# 3254
template< class _Tp, class _Up> constexpr bool 
# 3255
is_nothrow_assignable_v = (is_nothrow_assignable< _Tp, _Up> ::value); 
# 3257
template< class _Tp> constexpr bool 
# 3258
is_nothrow_copy_assignable_v = (is_nothrow_copy_assignable< _Tp> ::value); 
# 3260
template< class _Tp> constexpr bool 
# 3261
is_nothrow_move_assignable_v = (is_nothrow_move_assignable< _Tp> ::value); 
# 3263
template< class _Tp> constexpr bool 
# 3264
is_nothrow_destructible_v = (is_nothrow_destructible< _Tp> ::value); 
# 3266
template< class _Tp> constexpr bool 
# 3267
has_virtual_destructor_v = (has_virtual_destructor< _Tp> ::value); 
# 3269
template< class _Tp> constexpr size_t 
# 3270
alignment_of_v = (alignment_of< _Tp> ::value); 
# 3271
template< class _Tp> constexpr size_t 
# 3272
rank_v = (rank< _Tp> ::value); 
# 3273
template< class _Tp, unsigned _Idx = 0U> constexpr size_t 
# 3274
extent_v = (extent< _Tp, _Idx> ::value); 
# 3276
template< class _Tp, class _Up> constexpr bool 
# 3277
is_same_v = __is_same(_Tp, _Up); 
# 3282
template< class _Base, class _Derived> constexpr bool 
# 3283
is_base_of_v = (is_base_of< _Base, _Derived> ::value); 
# 3284
template< class _From, class _To> constexpr bool 
# 3285
is_convertible_v = (is_convertible< _From, _To> ::value); 
# 3286
template< class _Fn, class ..._Args> constexpr bool 
# 3287
is_invocable_v = (is_invocable< _Fn, _Args...> ::value); 
# 3288
template< class _Fn, class ..._Args> constexpr bool 
# 3289
is_nothrow_invocable_v = (is_nothrow_invocable< _Fn, _Args...> ::value); 
# 3291
template< class _Ret, class _Fn, class ..._Args> constexpr bool 
# 3292
is_invocable_r_v = (is_invocable_r< _Ret, _Fn, _Args...> ::value); 
# 3294
template< class _Ret, class _Fn, class ..._Args> constexpr bool 
# 3295
is_nothrow_invocable_r_v = (is_nothrow_invocable_r< _Ret, _Fn, _Args...> ::value); 
# 3303
template< class _Tp> 
# 3304
struct has_unique_object_representations : public bool_constant< __has_unique_object_representations(remove_cv_t< remove_all_extents_t< _Tp> > )>  { 
# 3309
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 3311
}; 
# 3314
template< class _Tp> constexpr bool 
# 3315
has_unique_object_representations_v = (has_unique_object_representations< _Tp> ::value); 
# 3323
template< class _Tp> 
# 3324
struct is_aggregate : public bool_constant< __is_aggregate(remove_cv_t< _Tp> )>  { 
# 3326
}; 
# 3329
template< class _Tp> constexpr bool 
# 3330
is_aggregate_v = (is_aggregate< _Tp> ::value); 
# 3705 "/usr/include/c++/12.2.1/type_traits" 3
}
# 38 "/usr/include/c++/12.2.1/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
template< class _Tp> constexpr _Tp *
# 49
__addressof(_Tp &__r) noexcept 
# 50
{ return __builtin_addressof(__r); } 
# 55
}
# 59
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/12.2.1/bits/move.h" 3
template< class _Tp> 
# 75
[[__nodiscard__]] constexpr _Tp &&
# 77
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 78
{ return static_cast< _Tp &&>(__t); } 
# 86
template< class _Tp> 
# 87
[[__nodiscard__]] constexpr _Tp &&
# 89
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 90
{ 
# 91
static_assert((!std::template is_lvalue_reference< _Tp> ::value), "std::forward must not be used to convert an rvalue to an lvalue");
# 93
return static_cast< _Tp &&>(__t); 
# 94
} 
# 101
template< class _Tp> 
# 102
[[__nodiscard__]] constexpr typename remove_reference< _Tp> ::type &&
# 104
move(_Tp &&__t) noexcept 
# 105
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 108
template< class _Tp> 
# 109
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 111
}; 
# 121 "/usr/include/c++/12.2.1/bits/move.h" 3
template< class _Tp> 
# 122
[[__nodiscard__]] constexpr __conditional_t< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&>  
# 125
move_if_noexcept(_Tp &__x) noexcept 
# 126
{ return std::move(__x); } 
# 142 "/usr/include/c++/12.2.1/bits/move.h" 3
template< class _Tp> 
# 143
[[__nodiscard__]] constexpr _Tp *
# 145
addressof(_Tp &__r) noexcept 
# 146
{ return std::__addressof(__r); } 
# 150
template < typename _Tp >
    const _Tp * addressof ( const _Tp && ) = delete;
# 154
template< class _Tp, class _Up = _Tp> inline _Tp 
# 157
__exchange(_Tp &__obj, _Up &&__new_val) 
# 158
{ 
# 159
_Tp __old_val = std::move(__obj); 
# 160
__obj = std::forward< _Up> (__new_val); 
# 161
return __old_val; 
# 162
} 
# 186 "/usr/include/c++/12.2.1/bits/move.h" 3
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type 
# 196
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 199
{ 
# 204
_Tp __tmp = std::move(__a); 
# 205
__a = std::move(__b); 
# 206
__b = std::move(__tmp); 
# 207
} 
# 212
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 220
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 222
{ 
# 223
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 224
swap(__a[__n], __b[__n]); }  
# 225
} 
# 229
}
# 43 "/usr/include/c++/12.2.1/bits/utility.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
template< class _Tp> struct tuple_size; 
# 55
template< class _Tp, class 
# 56
_Up = typename remove_cv< _Tp> ::type, class 
# 57
 = typename enable_if< is_same< _Tp, _Up> ::value> ::type, size_t 
# 58
 = tuple_size< _Tp> ::value> using __enable_if_has_tuple_size = _Tp; 
# 61
template< class _Tp> 
# 62
struct tuple_size< const __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 63
}; 
# 65
template< class _Tp> 
# 66
struct tuple_size< volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 67
}; 
# 69
template< class _Tp> 
# 70
struct tuple_size< const volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 71
}; 
# 74
template< class _Tp> constexpr size_t 
# 75
tuple_size_v = (tuple_size< _Tp> ::value); 
# 79
template< size_t __i, class _Tp> struct tuple_element; 
# 83
template< size_t __i, class _Tp> using __tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 86
template< size_t __i, class _Tp> 
# 87
struct tuple_element< __i, const _Tp>  { 
# 89
typedef typename add_const< __tuple_element_t< __i, _Tp> > ::type type; 
# 90
}; 
# 92
template< size_t __i, class _Tp> 
# 93
struct tuple_element< __i, volatile _Tp>  { 
# 95
typedef typename add_volatile< __tuple_element_t< __i, _Tp> > ::type type; 
# 96
}; 
# 98
template< size_t __i, class _Tp> 
# 99
struct tuple_element< __i, const volatile _Tp>  { 
# 101
typedef typename add_cv< __tuple_element_t< __i, _Tp> > ::type type; 
# 102
}; 
# 108
template< class _Tp, class ..._Types> constexpr size_t 
# 110
__find_uniq_type_in_pack() 
# 111
{ 
# 112
constexpr size_t __sz = sizeof...(_Types); 
# 113
constexpr bool __found[__sz] = {__is_same(_Tp, _Types)...}; 
# 114
size_t __n = __sz; 
# 115
for (size_t __i = (0); __i < __sz; ++__i) 
# 116
{ 
# 117
if (__found[__i]) 
# 118
{ 
# 119
if (__n < __sz) { 
# 120
return __sz; }  
# 121
__n = __i; 
# 122
}  
# 123
}  
# 124
return __n; 
# 125
} 
# 134 "/usr/include/c++/12.2.1/bits/utility.h" 3
template< size_t __i, class _Tp> using tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 140
template< size_t ..._Indexes> struct _Index_tuple { }; 
# 143
template< size_t _Num> 
# 144
struct _Build_index_tuple { 
# 154 "/usr/include/c++/12.2.1/bits/utility.h" 3
using __type = _Index_tuple< __integer_pack(_Num)...> ; 
# 156
}; 
# 163
template< class _Tp, _Tp ..._Idx> 
# 164
struct integer_sequence { 
# 166
typedef _Tp value_type; 
# 167
static constexpr size_t size() noexcept { return sizeof...(_Idx); } 
# 168
}; 
# 171
template< class _Tp, _Tp _Num> using make_integer_sequence = integer_sequence< _Tp, __integer_pack(_Num)...> ; 
# 180
template< size_t ..._Idx> using index_sequence = integer_sequence< unsigned long, _Idx...> ; 
# 184
template< size_t _Num> using make_index_sequence = make_integer_sequence< unsigned long, _Num> ; 
# 188
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
# 193
struct in_place_t { 
# 194
explicit in_place_t() = default;
# 195
}; 
# 197
constexpr inline in_place_t in_place{}; 
# 199
template< class _Tp> struct in_place_type_t { 
# 201
explicit in_place_type_t() = default;
# 202
}; 
# 204
template< class _Tp> constexpr in_place_type_t< _Tp>  
# 205
in_place_type{}; 
# 207
template< size_t _Idx> struct in_place_index_t { 
# 209
explicit in_place_index_t() = default;
# 210
}; 
# 212
template< size_t _Idx> constexpr in_place_index_t< _Idx>  
# 213
in_place_index{}; 
# 215
template< class > constexpr bool 
# 216
__is_in_place_type_v = false; 
# 218
template< class _Tp> constexpr bool 
# 219
__is_in_place_type_v< in_place_type_t< _Tp> >  = true; 
# 221
template< class _Tp> using __is_in_place_type = bool_constant< __is_in_place_type_v< _Tp> > ; 
# 227
template< size_t _Np, class ..._Types> 
# 228
struct _Nth_type { 
# 229
}; 
# 231
template< class _Tp0, class ..._Rest> 
# 232
struct _Nth_type< 0, _Tp0, _Rest...>  { 
# 233
using type = _Tp0; }; 
# 235
template< class _Tp0, class _Tp1, class ..._Rest> 
# 236
struct _Nth_type< 1, _Tp0, _Tp1, _Rest...>  { 
# 237
using type = _Tp1; }; 
# 239
template< class _Tp0, class _Tp1, class _Tp2, class ..._Rest> 
# 240
struct _Nth_type< 2, _Tp0, _Tp1, _Tp2, _Rest...>  { 
# 241
using type = _Tp2; }; 
# 243
template< size_t _Np, class _Tp0, class _Tp1, class _Tp2, class ...
# 244
_Rest> 
# 248
struct _Nth_type< _Np, _Tp0, _Tp1, _Tp2, _Rest...>  : public std::_Nth_type< _Np - (3), _Rest...>  { 
# 250
}; 
# 253
template< class _Tp0, class _Tp1, class ..._Rest> 
# 254
struct _Nth_type< 0, _Tp0, _Tp1, _Rest...>  { 
# 255
using type = _Tp0; }; 
# 257
template< class _Tp0, class _Tp1, class _Tp2, class ..._Rest> 
# 258
struct _Nth_type< 0, _Tp0, _Tp1, _Tp2, _Rest...>  { 
# 259
using type = _Tp0; }; 
# 261
template< class _Tp0, class _Tp1, class _Tp2, class ..._Rest> 
# 262
struct _Nth_type< 1, _Tp0, _Tp1, _Tp2, _Rest...>  { 
# 263
using type = _Tp1; }; 
# 267
}
# 69 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
struct piecewise_construct_t { explicit piecewise_construct_t() = default;}; 
# 83
constexpr inline piecewise_construct_t piecewise_construct = piecewise_construct_t(); 
# 89
template< class ...> class tuple; 
# 92
template< size_t ...> struct _Index_tuple; 
# 101
template< bool , class _T1, class _T2> 
# 102
struct _PCC { 
# 104
template< class _U1, class _U2> static constexpr bool 
# 105
_ConstructiblePair() 
# 106
{ 
# 107
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, const _U2 &> > ::value; 
# 109
} 
# 111
template< class _U1, class _U2> static constexpr bool 
# 112
_ImplicitlyConvertiblePair() 
# 113
{ 
# 114
return __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value; 
# 116
} 
# 118
template< class _U1, class _U2> static constexpr bool 
# 119
_MoveConstructiblePair() 
# 120
{ 
# 121
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, _U2 &&> > ::value; 
# 123
} 
# 125
template< class _U1, class _U2> static constexpr bool 
# 126
_ImplicitlyMoveConvertiblePair() 
# 127
{ 
# 128
return __and_< is_convertible< _U1 &&, _T1> , is_convertible< _U2 &&, _T2> > ::value; 
# 130
} 
# 131
}; 
# 133
template< class _T1, class _T2> 
# 134
struct _PCC< false, _T1, _T2>  { 
# 136
template< class _U1, class _U2> static constexpr bool 
# 137
_ConstructiblePair() 
# 138
{ 
# 139
return false; 
# 140
} 
# 142
template< class _U1, class _U2> static constexpr bool 
# 143
_ImplicitlyConvertiblePair() 
# 144
{ 
# 145
return false; 
# 146
} 
# 148
template< class _U1, class _U2> static constexpr bool 
# 149
_MoveConstructiblePair() 
# 150
{ 
# 151
return false; 
# 152
} 
# 154
template< class _U1, class _U2> static constexpr bool 
# 155
_ImplicitlyMoveConvertiblePair() 
# 156
{ 
# 157
return false; 
# 158
} 
# 159
}; 
# 163
template< class _U1, class _U2> class __pair_base { 
# 166
template< class _T1, class _T2> friend struct pair; 
# 167
__pair_base() = default;
# 168
~__pair_base() = default;
# 169
__pair_base(const __pair_base &) = default;
# 170
__pair_base &operator=(const __pair_base &) = delete;
# 172
}; 
# 184 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
template< class _T1, class _T2> 
# 185
struct pair : public __pair_base< _T1, _T2>  { 
# 188
typedef _T1 first_type; 
# 189
typedef _T2 second_type; 
# 191
_T1 first; 
# 192
_T2 second; 
# 195
constexpr pair(const pair &) = default;
# 196
constexpr pair(pair &&) = default;
# 198
template< class ..._Args1, class ..._Args2> pair(std::piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 204
void swap(pair &__p) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 207
{ 
# 208
using std::swap;
# 209
swap(first, __p.first); 
# 210
swap(second, __p.second); 
# 211
} 
# 214
private: template< class ..._Args1, std::size_t ..._Indexes1, class ...
# 215
_Args2, std::size_t ..._Indexes2> 
# 214
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 384 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
public: 
# 378
template< class _U1 = _T1, class 
# 379
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 383
 = true> constexpr 
# 384
pair() : first(), second() 
# 385
{ } 
# 387
template< class _U1 = _T1, class 
# 388
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 395
 = false> constexpr explicit 
# 396
pair() : first(), second() 
# 397
{ } 
# 401
using _PCCP = _PCC< true, _T1, _T2> ; 
# 405
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 410
 = true> constexpr 
# 411
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 412
{ } 
# 415
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 420
 = false> constexpr explicit 
# 421
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 422
{ } 
# 426
template< class _U1, class _U2> using _PCCFP = _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ; 
# 432
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 437
 = true> constexpr 
# 438
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 439
{ } 
# 441
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 446
 = false> constexpr explicit 
# 447
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 448
{ } 
# 464 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
private: struct __zero_as_null_pointer_constant { 
# 466
__zero_as_null_pointer_constant(int (__zero_as_null_pointer_constant::*)) 
# 467
{ } 
# 468
template < typename _Tp,
   typename = __enable_if_t < is_null_pointer < _Tp > :: value > >
 __zero_as_null_pointer_constant ( _Tp ) = delete;
# 471
}; 
# 487
public: 
# 478
template< class _U1, std::__enable_if_t< __and_< __not_< is_reference< _U1> > , is_pointer< _T2> , is_constructible< _T1, _U1> , __not_< is_constructible< _T1, const _U1 &> > , is_convertible< _U1, _T1> > ::value, bool>  
# 484
 = true> 
# 485
__attribute((__deprecated__("use \'nullptr\' instead of \'0\' to initialize std::pair of move-only type and pointer"))) constexpr 
# 487
pair(_U1 &&__x, __zero_as_null_pointer_constant, ...) : first(std::forward< _U1> (__x)), second(nullptr) 
# 488
{ } 
# 490
template< class _U1, std::__enable_if_t< __and_< __not_< is_reference< _U1> > , is_pointer< _T2> , is_constructible< _T1, _U1> , __not_< is_constructible< _T1, const _U1 &> > , __not_< is_convertible< _U1, _T1> > > ::value, bool>  
# 496
 = false> 
# 497
__attribute((__deprecated__("use \'nullptr\' instead of \'0\' to initialize std::pair of move-only type and pointer"))) constexpr explicit 
# 499
pair(_U1 &&__x, __zero_as_null_pointer_constant, ...) : first(std::forward< _U1> (__x)), second(nullptr) 
# 500
{ } 
# 502
template< class _U2, std::__enable_if_t< __and_< is_pointer< _T1> , __not_< is_reference< _U2> > , is_constructible< _T2, _U2> , __not_< is_constructible< _T2, const _U2 &> > , is_convertible< _U2, _T2> > ::value, bool>  
# 508
 = true> 
# 509
__attribute((__deprecated__("use \'nullptr\' instead of \'0\' to initialize std::pair of move-only type and pointer"))) constexpr 
# 511
pair(__zero_as_null_pointer_constant, _U2 &&__y, ...) : first(nullptr), second(std::forward< _U2> (__y)) 
# 512
{ } 
# 514
template< class _U2, std::__enable_if_t< __and_< is_pointer< _T1> , __not_< is_reference< _U2> > , is_constructible< _T2, _U2> , __not_< is_constructible< _T2, const _U2 &> > , __not_< is_convertible< _U2, _T2> > > ::value, bool>  
# 520
 = false> 
# 521
__attribute((__deprecated__("use \'nullptr\' instead of \'0\' to initialize std::pair of move-only type and pointer"))) constexpr explicit 
# 523
pair(__zero_as_null_pointer_constant, _U2 &&__y, ...) : first(nullptr), second(std::forward< _U2> (__y)) 
# 524
{ } 
# 528
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 533
 = true> constexpr 
# 534
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 535
{ } 
# 537
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 542
 = false> constexpr explicit 
# 543
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 544
{ } 
# 547
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 552
 = true> constexpr 
# 553
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 555
{ } 
# 557
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 562
 = false> constexpr explicit 
# 563
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 565
{ } 
# 568
pair &operator=(std::__conditional_t< __and_< is_copy_assignable< _T1> , is_copy_assignable< _T2> > ::value, const pair &, const std::__nonesuch &>  
# 570
__p) 
# 571
{ 
# 572
(first) = (__p.first); 
# 573
(second) = (__p.second); 
# 574
return *this; 
# 575
} 
# 578
pair &operator=(std::__conditional_t< __and_< is_move_assignable< _T1> , is_move_assignable< _T2> > ::value, pair &&, std::__nonesuch &&>  
# 580
__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 583
{ 
# 584
(first) = std::forward< first_type> ((__p.first)); 
# 585
(second) = std::forward< second_type> ((__p.second)); 
# 586
return *this; 
# 587
} 
# 589
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, const _U1 &> , is_assignable< _T2 &, const _U2 &> > ::value, pair &> ::type 
# 593
operator=(const std::pair< _U1, _U2>  &__p) 
# 594
{ 
# 595
(first) = (__p.first); 
# 596
(second) = (__p.second); 
# 597
return *this; 
# 598
} 
# 600
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, _U1 &&> , is_assignable< _T2 &, _U2 &&> > ::value, pair &> ::type 
# 604
operator=(std::pair< _U1, _U2>  &&__p) 
# 605
{ 
# 606
(first) = std::forward< _U1> ((__p.first)); 
# 607
(second) = std::forward< _U2> ((__p.second)); 
# 608
return *this; 
# 609
} 
# 629 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
}; 
# 634
template< class _T1, class _T2> pair(_T1, _T2)->pair< _T1, _T2> ; 
# 638
template< class _T1, class _T2> constexpr bool 
# 640
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 641
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 661 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr bool 
# 663
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 664
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 665
} 
# 668
template< class _T1, class _T2> constexpr bool 
# 670
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 671
{ return !(__x == __y); } 
# 674
template< class _T1, class _T2> constexpr bool 
# 676
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 677
{ return __y < __x; } 
# 680
template< class _T1, class _T2> constexpr bool 
# 682
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 683
{ return !(__y < __x); } 
# 686
template< class _T1, class _T2> constexpr bool 
# 688
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 689
{ return !(__x < __y); } 
# 698 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
template< class _T1, class _T2> inline typename enable_if< __and_< __is_swappable< _T1> , __is_swappable< _T2> > ::value> ::type 
# 707
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 709
{ __x.swap(__y); } 
# 712
template < typename _T1, typename _T2 >
    typename enable_if < ! __and_ < __is_swappable < _T1 >,
          __is_swappable < _T2 > > :: value > :: type
    swap ( pair < _T1, _T2 > &, pair < _T1, _T2 > & ) = delete;
# 738 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 741
make_pair(_T1 &&__x, _T2 &&__y) 
# 742
{ 
# 743
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 744
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 745
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 746
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 747
} 
# 760 "/usr/include/c++/12.2.1/bits/stl_pair.h" 3
template< class _T1, class _T2> 
# 761
struct __is_tuple_like_impl< pair< _T1, _T2> >  : public true_type { 
# 762
}; 
# 765
template< class _Tp1, class _Tp2> 
# 766
struct tuple_size< pair< _Tp1, _Tp2> >  : public integral_constant< unsigned long, 2UL>  { 
# 767
}; 
# 770
template< class _Tp1, class _Tp2> 
# 771
struct tuple_element< 0, pair< _Tp1, _Tp2> >  { 
# 772
typedef _Tp1 type; }; 
# 775
template< class _Tp1, class _Tp2> 
# 776
struct tuple_element< 1, pair< _Tp1, _Tp2> >  { 
# 777
typedef _Tp2 type; }; 
# 780
template< class _Tp1, class _Tp2> constexpr size_t 
# 781
tuple_size_v< pair< _Tp1, _Tp2> >  = (2); 
# 783
template< class _Tp1, class _Tp2> constexpr size_t 
# 784
tuple_size_v< const pair< _Tp1, _Tp2> >  = (2); 
# 786
template< class _Tp> constexpr bool 
# 787
__is_pair = false; 
# 789
template< class _Tp, class _Up> constexpr bool 
# 790
__is_pair< pair< _Tp, _Up> >  = true; 
# 792
template< class _Tp, class _Up> constexpr bool 
# 793
__is_pair< const pair< _Tp, _Up> >  = true; 
# 797
template< size_t _Int> struct __pair_get; 
# 801
template<> struct __pair_get< 0UL>  { 
# 803
template< class _Tp1, class _Tp2> static constexpr _Tp1 &
# 805
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 806
{ return __pair.first; } 
# 808
template< class _Tp1, class _Tp2> static constexpr _Tp1 &&
# 810
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 811
{ return std::forward< _Tp1> ((__pair.first)); } 
# 813
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &
# 815
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 816
{ return __pair.first; } 
# 818
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &&
# 820
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 821
{ return std::forward< const _Tp1> ((__pair.first)); } 
# 822
}; 
# 825
template<> struct __pair_get< 1UL>  { 
# 827
template< class _Tp1, class _Tp2> static constexpr _Tp2 &
# 829
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 830
{ return __pair.second; } 
# 832
template< class _Tp1, class _Tp2> static constexpr _Tp2 &&
# 834
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 835
{ return std::forward< _Tp2> ((__pair.second)); } 
# 837
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &
# 839
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 840
{ return __pair.second; } 
# 842
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &&
# 844
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 845
{ return std::forward< const _Tp2> ((__pair.second)); } 
# 846
}; 
# 853
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 855
get(pair< _Tp1, _Tp2>  &__in) noexcept 
# 856
{ return __pair_get< _Int> ::__get(__in); } 
# 858
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 860
get(pair< _Tp1, _Tp2>  &&__in) noexcept 
# 861
{ return __pair_get< _Int> ::__move_get(std::move(__in)); } 
# 863
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 865
get(const pair< _Tp1, _Tp2>  &__in) noexcept 
# 866
{ return __pair_get< _Int> ::__const_get(__in); } 
# 868
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 870
get(const pair< _Tp1, _Tp2>  &&__in) noexcept 
# 871
{ return __pair_get< _Int> ::__const_move_get(std::move(__in)); } 
# 877
template< class _Tp, class _Up> constexpr _Tp &
# 879
get(pair< _Tp, _Up>  &__p) noexcept 
# 880
{ return __p.first; } 
# 882
template< class _Tp, class _Up> constexpr const _Tp &
# 884
get(const pair< _Tp, _Up>  &__p) noexcept 
# 885
{ return __p.first; } 
# 887
template< class _Tp, class _Up> constexpr _Tp &&
# 889
get(pair< _Tp, _Up>  &&__p) noexcept 
# 890
{ return std::move((__p.first)); } 
# 892
template< class _Tp, class _Up> constexpr const _Tp &&
# 894
get(const pair< _Tp, _Up>  &&__p) noexcept 
# 895
{ return std::move((__p.first)); } 
# 897
template< class _Tp, class _Up> constexpr _Tp &
# 899
get(pair< _Up, _Tp>  &__p) noexcept 
# 900
{ return __p.second; } 
# 902
template< class _Tp, class _Up> constexpr const _Tp &
# 904
get(const pair< _Up, _Tp>  &__p) noexcept 
# 905
{ return __p.second; } 
# 907
template< class _Tp, class _Up> constexpr _Tp &&
# 909
get(pair< _Up, _Tp>  &&__p) noexcept 
# 910
{ return std::move((__p.second)); } 
# 912
template< class _Tp, class _Up> constexpr const _Tp &&
# 914
get(const pair< _Up, _Tp>  &&__p) noexcept 
# 915
{ return std::move((__p.second)); } 
# 922
}
# 74 "/usr/include/c++/12.2.1/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 93 "/usr/include/c++/12.2.1/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 96
struct output_iterator_tag { }; 
# 99
struct forward_iterator_tag : public input_iterator_tag { }; 
# 103
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 107
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 125 "/usr/include/c++/12.2.1/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 126
_Pointer = _Tp *, class _Reference = _Tp &> 
# 127
struct [[__deprecated__]] iterator { 
# 130
typedef _Category iterator_category; 
# 132
typedef _Tp value_type; 
# 134
typedef _Distance difference_type; 
# 136
typedef _Pointer pointer; 
# 138
typedef _Reference reference; 
# 139
}; 
# 149 "/usr/include/c++/12.2.1/bits/stl_iterator_base_types.h" 3
template< class _Iterator> struct iterator_traits; 
# 155
template< class _Iterator, class  = __void_t< > > 
# 156
struct __iterator_traits { }; 
# 160
template< class _Iterator> 
# 161
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 168
typedef typename _Iterator::iterator_category iterator_category; 
# 169
typedef typename _Iterator::value_type value_type; 
# 170
typedef typename _Iterator::difference_type difference_type; 
# 171
typedef typename _Iterator::pointer pointer; 
# 172
typedef typename _Iterator::reference reference; 
# 173
}; 
# 176
template< class _Iterator> 
# 177
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 178
}; 
# 209 "/usr/include/c++/12.2.1/bits/stl_iterator_base_types.h" 3
template< class _Tp> 
# 210
struct iterator_traits< _Tp *>  { 
# 212
typedef random_access_iterator_tag iterator_category; 
# 213
typedef _Tp value_type; 
# 214
typedef ptrdiff_t difference_type; 
# 215
typedef _Tp *pointer; 
# 216
typedef _Tp &reference; 
# 217
}; 
# 220
template< class _Tp> 
# 221
struct iterator_traits< const _Tp *>  { 
# 223
typedef random_access_iterator_tag iterator_category; 
# 224
typedef _Tp value_type; 
# 225
typedef ptrdiff_t difference_type; 
# 226
typedef const _Tp *pointer; 
# 227
typedef const _Tp &reference; 
# 228
}; 
# 235
template< class _Iter> constexpr typename iterator_traits< _Iter> ::iterator_category 
# 238
__iterator_category(const _Iter &) 
# 239
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 244
template< class _Iter> using __iterator_category_t = typename iterator_traits< _Iter> ::iterator_category; 
# 248
template< class _InIter> using _RequireInputIter = __enable_if_t< is_convertible< __iterator_category_t< _InIter> , input_iterator_tag> ::value> ; 
# 253
template< class _It, class 
# 254
_Cat = __iterator_category_t< _It> > 
# 255
struct __is_random_access_iter : public is_base_of< random_access_iterator_tag, _Cat>  { 
# 258
typedef is_base_of< std::random_access_iterator_tag, _Cat>  _Base; 
# 259
enum { __value = is_base_of< std::random_access_iterator_tag, _Cat> ::value}; 
# 260
}; 
# 269
}
# 68 "/usr/include/c++/12.2.1/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 74
template< class > struct _List_iterator; 
# 75
template< class > struct _List_const_iterator; 
# 78
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 81
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 83
{ 
# 87
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 88
while (__first != __last) 
# 89
{ 
# 90
++__first; 
# 91
++__n; 
# 92
}  
# 93
return __n; 
# 94
} 
# 96
template< class _RandomAccessIterator> constexpr typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 99
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 101
{ 
# 105
return __last - __first; 
# 106
} 
# 110
template< class _Tp> ptrdiff_t __distance(_List_iterator< _Tp> , _List_iterator< _Tp> , input_iterator_tag); 
# 116
template< class _Tp> ptrdiff_t __distance(_List_const_iterator< _Tp> , _List_const_iterator< _Tp> , input_iterator_tag); 
# 125
template < typename _OutputIterator >
    void
    __distance ( _OutputIterator, _OutputIterator, output_iterator_tag ) = delete;
# 143 "/usr/include/c++/12.2.1/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> 
# 144
[[__nodiscard__]] constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 147
distance(_InputIterator __first, _InputIterator __last) 
# 148
{ 
# 150
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 152
} 
# 154
template< class _InputIterator, class _Distance> constexpr void 
# 156
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 157
{ 
# 160
do { if (std::__is_constant_evaluated() && (!((bool)(__n >= 0)))) { __builtin_unreachable(); }  } while (false); 
# 161
while (__n--) { 
# 162
++__i; }  
# 163
} 
# 165
template< class _BidirectionalIterator, class _Distance> constexpr void 
# 167
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 169
{ 
# 173
if (__n > 0) { 
# 174
while (__n--) { 
# 175
++__i; }  } else { 
# 177
while (__n++) { 
# 178
--__i; }  }  
# 179
} 
# 181
template< class _RandomAccessIterator, class _Distance> constexpr void 
# 183
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 185
{ 
# 189
if (__builtin_constant_p(__n) && (__n == 1)) { 
# 190
++__i; } else { 
# 191
if (__builtin_constant_p(__n) && (__n == (-1))) { 
# 192
--__i; } else { 
# 194
__i += __n; }  }  
# 195
} 
# 199
template < typename _OutputIterator, typename _Distance >
    void
    __advance ( _OutputIterator &, _Distance, output_iterator_tag ) = delete;
# 216 "/usr/include/c++/12.2.1/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> constexpr void 
# 218
advance(_InputIterator &__i, _Distance __n) 
# 219
{ 
# 221
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 222
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 223
} 
# 227
template< class _InputIterator> 
# 228
[[__nodiscard__]] constexpr _InputIterator 
# 230
next(_InputIterator __x, typename iterator_traits< _InputIterator> ::difference_type 
# 231
__n = 1) 
# 232
{ 
# 235
std::advance(__x, __n); 
# 236
return __x; 
# 237
} 
# 239
template< class _BidirectionalIterator> 
# 240
[[__nodiscard__]] constexpr _BidirectionalIterator 
# 242
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 243
__n = 1) 
# 244
{ 
# 248
std::advance(__x, -__n); 
# 249
return __x; 
# 250
} 
# 255
}
# 46 "/usr/include/c++/12.2.1/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 50
class __undefined; 
# 54
template< class _Tp> 
# 55
struct __get_first_arg { 
# 56
using type = __undefined; }; 
# 58
template< template< class , class ...>  class _SomeTemplate, class _Tp, class ...
# 59
_Types> 
# 60
struct __get_first_arg< _SomeTemplate< _Tp, _Types...> >  { 
# 61
using type = _Tp; }; 
# 65
template< class _Tp, class _Up> 
# 66
struct __replace_first_arg { 
# 67
}; 
# 69
template< template< class , class ...>  class _SomeTemplate, class _Up, class 
# 70
_Tp, class ..._Types> 
# 71
struct __replace_first_arg< _SomeTemplate< _Tp, _Types...> , _Up>  { 
# 72
using type = _SomeTemplate< _Up, _Types...> ; }; 
# 81 "/usr/include/c++/12.2.1/bits/ptr_traits.h" 3
template< class _Ptr, class  = void> 
# 82
struct __ptr_traits_elem : public __get_first_arg< _Ptr>  { 
# 83
}; 
# 86
template< class _Ptr> 
# 87
struct __ptr_traits_elem< _Ptr, __void_t< typename _Ptr::element_type> >  { 
# 88
using type = typename _Ptr::element_type; }; 
# 90
template< class _Ptr> using __ptr_traits_elem_t = typename __ptr_traits_elem< _Ptr> ::type; 
# 95
template< class _Ptr, class _Elt, bool  = is_void< _Elt> ::value> 
# 96
struct __ptr_traits_ptr_to { 
# 98
using pointer = _Ptr; 
# 99
using element_type = _Elt; 
# 108
static pointer pointer_to(element_type &__e) 
# 114
{ return pointer::pointer_to(__e); } 
# 115
}; 
# 118
template< class _Ptr, class _Elt> 
# 119
struct __ptr_traits_ptr_to< _Ptr, _Elt, true>  { 
# 120
}; 
# 123
template< class _Tp> 
# 124
struct __ptr_traits_ptr_to< _Tp *, _Tp, false>  { 
# 126
using pointer = _Tp *; 
# 127
using element_type = _Tp; 
# 135
static pointer pointer_to(element_type &__r) noexcept 
# 136
{ return std::addressof(__r); } 
# 137
}; 
# 139
template< class _Ptr, class _Elt> 
# 140
struct __ptr_traits_impl : public __ptr_traits_ptr_to< _Ptr, _Elt>  { 
# 144
private: 
# 143
template< class _Tp, class  = void> 
# 144
struct __difference { using type = std::ptrdiff_t; }; 
# 146
template< class _Tp> 
# 151
struct __difference< _Tp, std::__void_t< typename _Tp::difference_type> >  { 
# 153
using type = typename _Tp::difference_type; }; 
# 155
template< class _Tp, class _Up, class  = void> 
# 156
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 158
template< class _Tp, class _Up> 
# 163
struct __rebind< _Tp, _Up, std::__void_t< typename _Tp::template rebind< _Up> > >  { 
# 165
using type = typename _Tp::template rebind< _Up> ; }; 
# 169
public: using pointer = _Ptr; 
# 172
using element_type = _Elt; 
# 175
using difference_type = typename __difference< _Ptr> ::type; 
# 178
template< class _Up> using rebind = typename __rebind< _Ptr, _Up> ::type; 
# 180
}; 
# 184
template< class _Ptr> 
# 185
struct __ptr_traits_impl< _Ptr, __undefined>  { 
# 186
}; 
# 193
template< class _Ptr> 
# 194
struct pointer_traits : public __ptr_traits_impl< _Ptr, __ptr_traits_elem_t< _Ptr> >  { 
# 195
}; 
# 209 "/usr/include/c++/12.2.1/bits/ptr_traits.h" 3
template< class _Tp> 
# 210
struct pointer_traits< _Tp *>  : public __ptr_traits_ptr_to< _Tp *, _Tp>  { 
# 213
typedef _Tp *pointer; 
# 215
typedef _Tp element_type; 
# 217
typedef std::ptrdiff_t difference_type; 
# 219
template< class _Up> using rebind = _Up *; 
# 220
}; 
# 223
template< class _Ptr, class _Tp> using __ptr_rebind = typename pointer_traits< _Ptr> ::template rebind< _Tp> ; 
# 226
template< class _Tp> constexpr _Tp *
# 228
__to_address(_Tp *__ptr) noexcept 
# 229
{ 
# 230
static_assert((!std::template is_function< _Tp> ::value), "not a function pointer");
# 231
return __ptr; 
# 232
} 
# 235
template< class _Ptr> constexpr typename pointer_traits< _Ptr> ::element_type *
# 237
__to_address(const _Ptr &__ptr) 
# 238
{ return std::__to_address(__ptr.operator->()); } 
# 283 "/usr/include/c++/12.2.1/bits/ptr_traits.h" 3
}
# 88 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 109 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 131 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Iterator> 
# 132
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 139
template< class _Iter> friend class reverse_iterator; 
# 151 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
protected: _Iterator current; 
# 153
typedef iterator_traits< _Iterator>  __traits_type; 
# 156
public: typedef _Iterator iterator_type; 
# 157
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 159
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 160
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 182 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
constexpr reverse_iterator() noexcept(noexcept((_Iterator()))) : current() 
# 185
{ } 
# 191
constexpr explicit reverse_iterator(iterator_type __x) noexcept(noexcept(((_Iterator)__x))) : current(__x) 
# 194
{ } 
# 200
constexpr reverse_iterator(const reverse_iterator &__x) noexcept(noexcept(((_Iterator)(__x.current)))) : current(__x.current) 
# 203
{ } 
# 206
reverse_iterator &operator=(const reverse_iterator &) = default;
# 213
template< class _Iter> constexpr 
# 218
reverse_iterator(const reverse_iterator< _Iter>  &__x) noexcept(noexcept(((_Iterator)(__x.current)))) : current((__x.current)) 
# 221
{ } 
# 224
template< class _Iter> constexpr reverse_iterator &
# 231
operator=(const reverse_iterator< _Iter>  &__x) noexcept(noexcept(((current) = (__x.current)))) 
# 233
{ 
# 234
(current) = (__x.current); 
# 235
return *this; 
# 236
} 
# 242
[[__nodiscard__]] constexpr iterator_type 
# 244
base() const noexcept(noexcept(((_Iterator)(current)))) 
# 246
{ return current; } 
# 258 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
[[__nodiscard__]] constexpr reference 
# 260
operator*() const 
# 261
{ 
# 262
_Iterator __tmp = current; 
# 263
return *(--__tmp); 
# 264
} 
# 271
[[__nodiscard__]] constexpr pointer 
# 273
operator->() const 
# 278
{ 
# 281
_Iterator __tmp = current; 
# 282
--__tmp; 
# 283
return _S_to_pointer(__tmp); 
# 284
} 
# 292
constexpr reverse_iterator &operator++() 
# 293
{ 
# 294
--(current); 
# 295
return *this; 
# 296
} 
# 304
constexpr reverse_iterator operator++(int) 
# 305
{ 
# 306
reverse_iterator __tmp = *this; 
# 307
--(current); 
# 308
return __tmp; 
# 309
} 
# 317
constexpr reverse_iterator &operator--() 
# 318
{ 
# 319
++(current); 
# 320
return *this; 
# 321
} 
# 329
constexpr reverse_iterator operator--(int) 
# 330
{ 
# 331
reverse_iterator __tmp = *this; 
# 332
++(current); 
# 333
return __tmp; 
# 334
} 
# 341
[[__nodiscard__]] constexpr reverse_iterator 
# 343
operator+(difference_type __n) const 
# 344
{ return ((reverse_iterator)((current) - __n)); } 
# 353
constexpr reverse_iterator &operator+=(difference_type __n) 
# 354
{ 
# 355
(current) -= __n; 
# 356
return *this; 
# 357
} 
# 364
[[__nodiscard__]] constexpr reverse_iterator 
# 366
operator-(difference_type __n) const 
# 367
{ return ((reverse_iterator)((current) + __n)); } 
# 376
constexpr reverse_iterator &operator-=(difference_type __n) 
# 377
{ 
# 378
(current) += __n; 
# 379
return *this; 
# 380
} 
# 387
[[__nodiscard__]] constexpr reference 
# 389
operator[](difference_type __n) const 
# 390
{ return *((*this) + __n); } 
# 421 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
private: 
# 419
template< class _Tp> static constexpr _Tp *
# 421
_S_to_pointer(_Tp *__p) 
# 422
{ return __p; } 
# 424
template< class _Tp> static constexpr pointer 
# 426
_S_to_pointer(_Tp __t) 
# 427
{ return __t.operator->(); } 
# 428
}; 
# 441 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Iterator> 
# 442
[[__nodiscard__]] constexpr bool 
# 444
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 445
__y) 
# 446
{ return __x.base() == __y.base(); } 
# 448
template< class _Iterator> 
# 449
[[__nodiscard__]] constexpr bool 
# 451
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 452
__y) 
# 453
{ return __y.base() < __x.base(); } 
# 455
template< class _Iterator> 
# 456
[[__nodiscard__]] constexpr bool 
# 458
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 459
__y) 
# 460
{ return !(__x == __y); } 
# 462
template< class _Iterator> 
# 463
[[__nodiscard__]] constexpr bool 
# 465
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 466
__y) 
# 467
{ return __y < __x; } 
# 469
template< class _Iterator> 
# 470
[[__nodiscard__]] constexpr bool 
# 472
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 473
__y) 
# 474
{ return !(__y < __x); } 
# 476
template< class _Iterator> 
# 477
[[__nodiscard__]] constexpr bool 
# 479
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 480
__y) 
# 481
{ return !(__x < __y); } 
# 486
template< class _IteratorL, class _IteratorR> 
# 487
[[__nodiscard__]] constexpr bool 
# 489
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 490
__y) 
# 491
{ return __x.base() == __y.base(); } 
# 493
template< class _IteratorL, class _IteratorR> 
# 494
[[__nodiscard__]] constexpr bool 
# 496
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 497
__y) 
# 498
{ return __x.base() > __y.base(); } 
# 500
template< class _IteratorL, class _IteratorR> 
# 501
[[__nodiscard__]] constexpr bool 
# 503
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 504
__y) 
# 505
{ return __x.base() != __y.base(); } 
# 507
template< class _IteratorL, class _IteratorR> 
# 508
[[__nodiscard__]] constexpr bool 
# 510
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 511
__y) 
# 512
{ return __x.base() < __y.base(); } 
# 514
template< class _IteratorL, class _IteratorR> constexpr bool 
# 516
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 517
__y) 
# 518
{ return __x.base() >= __y.base(); } 
# 520
template< class _IteratorL, class _IteratorR> 
# 521
[[__nodiscard__]] constexpr bool 
# 523
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 524
__y) 
# 525
{ return __x.base() <= __y.base(); } 
# 618 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> 
# 619
[[__nodiscard__]] constexpr auto 
# 621
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 622
__y)->__decltype((__y.base() - __x.base())) 
# 624
{ return __y.base() - __x.base(); } 
# 627
template< class _Iterator> 
# 628
[[__nodiscard__]] constexpr reverse_iterator< _Iterator>  
# 630
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 631
__x) 
# 632
{ return ((reverse_iterator< _Iterator> )(__x.base() - __n)); } 
# 636
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 638
__make_reverse_iterator(_Iterator __i) 
# 639
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 647
template< class _Iterator> 
# 648
[[__nodiscard__]] constexpr reverse_iterator< _Iterator>  
# 650
make_reverse_iterator(_Iterator __i) 
# 651
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 662 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Iterator> auto 
# 665
__niter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__niter_base(__it.base())))) 
# 667
{ return __make_reverse_iterator(__niter_base(__it.base())); } 
# 669
template< class _Iterator> 
# 670
struct __is_move_iterator< reverse_iterator< _Iterator> >  : public std::__is_move_iterator< _Iterator>  { 
# 672
}; 
# 674
template< class _Iterator> auto 
# 677
__miter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__miter_base(__it.base())))) 
# 679
{ return __make_reverse_iterator(__miter_base(__it.base())); } 
# 693 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Container> 
# 694
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 698
protected: _Container *container; 
# 702
public: typedef _Container container_type; 
# 709
explicit back_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 710
{ } 
# 733 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 734
{ 
# 735
(container)->push_back(__value); 
# 736
return *this; 
# 737
} 
# 741
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 742
{ 
# 743
(container)->push_back(std::move(__value)); 
# 744
return *this; 
# 745
} 
# 749
[[__nodiscard__]] back_insert_iterator &
# 751
operator*() 
# 752
{ return *this; } 
# 757
back_insert_iterator &operator++() 
# 758
{ return *this; } 
# 763
back_insert_iterator operator++(int) 
# 764
{ return *this; } 
# 765
}; 
# 778 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Container> 
# 779
[[__nodiscard__]] inline back_insert_iterator< _Container>  
# 781
back_inserter(_Container &__x) 
# 782
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 794 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Container> 
# 795
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 799
protected: _Container *container; 
# 803
public: typedef _Container container_type; 
# 810
explicit front_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 811
{ } 
# 834 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 835
{ 
# 836
(container)->push_front(__value); 
# 837
return *this; 
# 838
} 
# 842
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 843
{ 
# 844
(container)->push_front(std::move(__value)); 
# 845
return *this; 
# 846
} 
# 850
[[__nodiscard__]] front_insert_iterator &
# 852
operator*() 
# 853
{ return *this; } 
# 858
front_insert_iterator &operator++() 
# 859
{ return *this; } 
# 864
front_insert_iterator operator++(int) 
# 865
{ return *this; } 
# 866
}; 
# 879 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Container> 
# 880
[[__nodiscard__]] inline front_insert_iterator< _Container>  
# 882
front_inserter(_Container &__x) 
# 883
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 899 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Container> 
# 900
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 906
typedef typename _Container::iterator _Iter; 
# 909
protected: _Container *container; 
# 910
_Iter iter; 
# 914
public: typedef _Container container_type; 
# 925 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
insert_iterator(_Container &__x, _Iter __i) : container(std::__addressof(__x)), iter(__i) 
# 926
{ } 
# 962 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 963
{ 
# 964
(iter) = (container)->insert(iter, __value); 
# 965
++(iter); 
# 966
return *this; 
# 967
} 
# 971
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 972
{ 
# 973
(iter) = (container)->insert(iter, std::move(__value)); 
# 974
++(iter); 
# 975
return *this; 
# 976
} 
# 980
[[__nodiscard__]] insert_iterator &
# 982
operator*() 
# 983
{ return *this; } 
# 988
insert_iterator &operator++() 
# 989
{ return *this; } 
# 994
insert_iterator &operator++(int) 
# 995
{ return *this; } 
# 996
}; 
# 998
#pragma GCC diagnostic pop
# 1019 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Container> 
# 1020
[[__nodiscard__]] inline insert_iterator< _Container>  
# 1022
inserter(_Container &__x, typename _Container::iterator __i) 
# 1023
{ return insert_iterator< _Container> (__x, __i); } 
# 1029
}
# 1031
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 1042 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> 
# 1043
class __normal_iterator { 
# 1046
protected: _Iterator _M_current; 
# 1048
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 1051
template< class _Iter> using __convertible_from = std::__enable_if_t< std::is_convertible< _Iter, _Iterator> ::value> ; 
# 1057
public: typedef _Iterator iterator_type; 
# 1058
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1059
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 1060
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 1061
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 1062
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 1068
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 1069
{ } 
# 1072
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 1073
{ } 
# 1077
template< class _Iter, class  = __convertible_from< _Iter> > 
# 1079
__normal_iterator(const __normal_iterator< _Iter, _Container>  &__i) noexcept : _M_current(__i.base()) 
# 1090 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
{ } 
# 1095
reference operator*() const noexcept 
# 1096
{ return *(_M_current); } 
# 1100
pointer operator->() const noexcept 
# 1101
{ return _M_current; } 
# 1105
__normal_iterator &operator++() noexcept 
# 1106
{ 
# 1107
++(_M_current); 
# 1108
return *this; 
# 1109
} 
# 1113
__normal_iterator operator++(int) noexcept 
# 1114
{ return ((__normal_iterator)((_M_current)++)); } 
# 1119
__normal_iterator &operator--() noexcept 
# 1120
{ 
# 1121
--(_M_current); 
# 1122
return *this; 
# 1123
} 
# 1127
__normal_iterator operator--(int) noexcept 
# 1128
{ return ((__normal_iterator)((_M_current)--)); } 
# 1133
reference operator[](difference_type __n) const noexcept 
# 1134
{ return (_M_current)[__n]; } 
# 1138
__normal_iterator &operator+=(difference_type __n) noexcept 
# 1139
{ (_M_current) += __n; return *this; } 
# 1143
__normal_iterator operator+(difference_type __n) const noexcept 
# 1144
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 1148
__normal_iterator &operator-=(difference_type __n) noexcept 
# 1149
{ (_M_current) -= __n; return *this; } 
# 1153
__normal_iterator operator-(difference_type __n) const noexcept 
# 1154
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 1158
const _Iterator &base() const noexcept 
# 1159
{ return _M_current; } 
# 1160
}; 
# 1210 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> 
# 1211
[[__nodiscard__]] inline bool 
# 1213
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1214
__rhs) noexcept 
# 1216
{ return __lhs.base() == __rhs.base(); } 
# 1218
template< class _Iterator, class _Container> 
# 1219
[[__nodiscard__]] inline bool 
# 1221
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1222
__rhs) noexcept 
# 1224
{ return __lhs.base() == __rhs.base(); } 
# 1226
template< class _IteratorL, class _IteratorR, class _Container> 
# 1227
[[__nodiscard__]] inline bool 
# 1229
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1230
__rhs) noexcept 
# 1232
{ return __lhs.base() != __rhs.base(); } 
# 1234
template< class _Iterator, class _Container> 
# 1235
[[__nodiscard__]] inline bool 
# 1237
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1238
__rhs) noexcept 
# 1240
{ return __lhs.base() != __rhs.base(); } 
# 1243
template< class _IteratorL, class _IteratorR, class _Container> 
# 1244
[[__nodiscard__]] inline bool 
# 1246
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1247
__rhs) noexcept 
# 1249
{ return __lhs.base() < __rhs.base(); } 
# 1251
template< class _Iterator, class _Container> 
# 1252
[[__nodiscard__]] inline bool 
# 1254
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1255
__rhs) noexcept 
# 1257
{ return __lhs.base() < __rhs.base(); } 
# 1259
template< class _IteratorL, class _IteratorR, class _Container> 
# 1260
[[__nodiscard__]] inline bool 
# 1262
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1263
__rhs) noexcept 
# 1265
{ return __lhs.base() > __rhs.base(); } 
# 1267
template< class _Iterator, class _Container> 
# 1268
[[__nodiscard__]] inline bool 
# 1270
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1271
__rhs) noexcept 
# 1273
{ return __lhs.base() > __rhs.base(); } 
# 1275
template< class _IteratorL, class _IteratorR, class _Container> 
# 1276
[[__nodiscard__]] inline bool 
# 1278
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1279
__rhs) noexcept 
# 1281
{ return __lhs.base() <= __rhs.base(); } 
# 1283
template< class _Iterator, class _Container> 
# 1284
[[__nodiscard__]] inline bool 
# 1286
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1287
__rhs) noexcept 
# 1289
{ return __lhs.base() <= __rhs.base(); } 
# 1291
template< class _IteratorL, class _IteratorR, class _Container> 
# 1292
[[__nodiscard__]] inline bool 
# 1294
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1295
__rhs) noexcept 
# 1297
{ return __lhs.base() >= __rhs.base(); } 
# 1299
template< class _Iterator, class _Container> 
# 1300
[[__nodiscard__]] inline bool 
# 1302
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1303
__rhs) noexcept 
# 1305
{ return __lhs.base() >= __rhs.base(); } 
# 1312
template< class _IteratorL, class _IteratorR, class _Container> 
# 1315
[[__nodiscard__]] inline auto 
# 1317
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1318
__rhs) noexcept->__decltype((__lhs.base() - __rhs.base())) 
# 1325
{ return __lhs.base() - __rhs.base(); } 
# 1327
template< class _Iterator, class _Container> 
# 1328
[[__nodiscard__]] inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 1330
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1331
__rhs) noexcept 
# 1333
{ return __lhs.base() - __rhs.base(); } 
# 1335
template< class _Iterator, class _Container> 
# 1336
[[__nodiscard__]] inline __normal_iterator< _Iterator, _Container>  
# 1338
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 1339
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 1341
{ return ((__normal_iterator< _Iterator, _Container> )(__i.base() + __n)); } 
# 1344
}
# 1346
namespace std __attribute((__visibility__("default"))) { 
# 1350
template< class _Iterator, class _Container> _Iterator 
# 1353
__niter_base(__gnu_cxx::__normal_iterator< _Iterator, _Container>  __it) noexcept(std::template is_nothrow_copy_constructible< _Iterator> ::value) 
# 1355
{ return __it.base(); } 
# 1362
template< class _Iterator, class _Container> constexpr auto 
# 1364
__to_address(const __gnu_cxx::__normal_iterator< _Iterator, _Container>  &
# 1365
__it) noexcept->__decltype((std::__to_address(__it.base()))) 
# 1367
{ return std::__to_address(__it.base()); } 
# 1417 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
namespace __detail { 
# 1433 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
}
# 1444 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1445
class move_iterator { 
# 1450
_Iterator _M_current; 
# 1452
using __traits_type = iterator_traits< _Iterator> ; 
# 1454
using __base_ref = typename iterator_traits< _Iterator> ::reference; 
# 1457
template< class _Iter2> friend class move_iterator; 
# 1469 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
public: using iterator_type = _Iterator; 
# 1479 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1480
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 1481
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 1483
typedef _Iterator pointer; 
# 1486
using reference = __conditional_t< is_reference< __base_ref> ::value, typename remove_reference< __base_ref> ::type &&, __base_ref> ; 
# 1493
constexpr move_iterator() : _M_current() 
# 1494
{ } 
# 1497
constexpr explicit move_iterator(iterator_type __i) : _M_current(std::move(__i)) 
# 1498
{ } 
# 1500
template< class _Iter> constexpr 
# 1505
move_iterator(const move_iterator< _Iter>  &__i) : _M_current((__i._M_current)) 
# 1506
{ } 
# 1508
template< class _Iter> constexpr move_iterator &
# 1514
operator=(const move_iterator< _Iter>  &__i) 
# 1515
{ 
# 1516
(_M_current) = (__i._M_current); 
# 1517
return *this; 
# 1518
} 
# 1521
[[__nodiscard__]] constexpr iterator_type 
# 1523
base() const 
# 1524
{ return _M_current; } 
# 1537 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
[[__nodiscard__]] constexpr reference 
# 1539
operator*() const 
# 1543
{ return static_cast< reference>(*(_M_current)); } 
# 1546
[[__nodiscard__]] constexpr pointer 
# 1548
operator->() const 
# 1549
{ return _M_current; } 
# 1552
constexpr move_iterator &operator++() 
# 1553
{ 
# 1554
++(_M_current); 
# 1555
return *this; 
# 1556
} 
# 1559
constexpr move_iterator operator++(int) 
# 1560
{ 
# 1561
move_iterator __tmp = *this; 
# 1562
++(_M_current); 
# 1563
return __tmp; 
# 1564
} 
# 1573
constexpr move_iterator &operator--() 
# 1574
{ 
# 1575
--(_M_current); 
# 1576
return *this; 
# 1577
} 
# 1580
constexpr move_iterator operator--(int) 
# 1581
{ 
# 1582
move_iterator __tmp = *this; 
# 1583
--(_M_current); 
# 1584
return __tmp; 
# 1585
} 
# 1587
[[__nodiscard__]] constexpr move_iterator 
# 1589
operator+(difference_type __n) const 
# 1590
{ return ((move_iterator)((_M_current) + __n)); } 
# 1593
constexpr move_iterator &operator+=(difference_type __n) 
# 1594
{ 
# 1595
(_M_current) += __n; 
# 1596
return *this; 
# 1597
} 
# 1599
[[__nodiscard__]] constexpr move_iterator 
# 1601
operator-(difference_type __n) const 
# 1602
{ return ((move_iterator)((_M_current) - __n)); } 
# 1605
constexpr move_iterator &operator-=(difference_type __n) 
# 1606
{ 
# 1607
(_M_current) -= __n; 
# 1608
return *this; 
# 1609
} 
# 1611
[[__nodiscard__]] constexpr reference 
# 1613
operator[](difference_type __n) const 
# 1617
{ return std::move((_M_current)[__n]); } 
# 1651 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
}; 
# 1653
template< class _IteratorL, class _IteratorR> 
# 1654
[[__nodiscard__]] constexpr bool 
# 1656
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1657
__y) 
# 1661
{ return __x.base() == __y.base(); } 
# 1672 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> 
# 1673
[[__nodiscard__]] constexpr bool 
# 1675
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1676
__y) 
# 1677
{ return !(__x == __y); } 
# 1680
template< class _IteratorL, class _IteratorR> 
# 1681
[[__nodiscard__]] constexpr bool 
# 1683
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1684
__y) 
# 1688
{ return __x.base() < __y.base(); } 
# 1690
template< class _IteratorL, class _IteratorR> 
# 1691
[[__nodiscard__]] constexpr bool 
# 1693
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1694
__y) 
# 1698
{ return !(__y < __x); } 
# 1700
template< class _IteratorL, class _IteratorR> 
# 1701
[[__nodiscard__]] constexpr bool 
# 1703
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1704
__y) 
# 1708
{ return __y < __x; } 
# 1710
template< class _IteratorL, class _IteratorR> 
# 1711
[[__nodiscard__]] constexpr bool 
# 1713
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1714
__y) 
# 1718
{ return !(__x < __y); } 
# 1723
template< class _Iterator> 
# 1724
[[__nodiscard__]] constexpr bool 
# 1726
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1727
__y) 
# 1728
{ return __x.base() == __y.base(); } 
# 1738 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1739
[[__nodiscard__]] constexpr bool 
# 1741
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1742
__y) 
# 1743
{ return !(__x == __y); } 
# 1745
template< class _Iterator> 
# 1746
[[__nodiscard__]] constexpr bool 
# 1748
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1749
__y) 
# 1750
{ return __x.base() < __y.base(); } 
# 1752
template< class _Iterator> 
# 1753
[[__nodiscard__]] constexpr bool 
# 1755
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1756
__y) 
# 1757
{ return !(__y < __x); } 
# 1759
template< class _Iterator> 
# 1760
[[__nodiscard__]] constexpr bool 
# 1762
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1763
__y) 
# 1764
{ return __y < __x; } 
# 1766
template< class _Iterator> 
# 1767
[[__nodiscard__]] constexpr bool 
# 1769
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1770
__y) 
# 1771
{ return !(__x < __y); } 
# 1775
template< class _IteratorL, class _IteratorR> 
# 1776
[[__nodiscard__]] constexpr auto 
# 1778
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1779
__y)->__decltype((__x.base() - __y.base())) 
# 1781
{ return __x.base() - __y.base(); } 
# 1783
template< class _Iterator> 
# 1784
[[__nodiscard__]] constexpr move_iterator< _Iterator>  
# 1786
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1787
__x) 
# 1788
{ return __x + __n; } 
# 1790
template< class _Iterator> 
# 1791
[[__nodiscard__]] constexpr move_iterator< _Iterator>  
# 1793
make_move_iterator(_Iterator __i) 
# 1794
{ return ((move_iterator< _Iterator> )(std::move(__i))); } 
# 1796
template< class _Iterator, class _ReturnType = __conditional_t< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > > constexpr _ReturnType 
# 1801
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1802
{ return (_ReturnType)__i; } 
# 1806
template< class _Tp, class _ReturnType = __conditional_t< __move_if_noexcept_cond< _Tp> ::value, const _Tp *, move_iterator< _Tp *> > > constexpr _ReturnType 
# 1810
__make_move_if_noexcept_iterator(_Tp *__i) 
# 1811
{ return (_ReturnType)__i; } 
# 2552 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _Iterator> auto 
# 2555
__niter_base(move_iterator< _Iterator>  __it)->__decltype((make_move_iterator(__niter_base(__it.base())))) 
# 2557
{ return make_move_iterator(__niter_base(__it.base())); } 
# 2559
template< class _Iterator> 
# 2560
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 2562
enum { __value = 1}; 
# 2563
typedef __true_type __type; 
# 2564
}; 
# 2566
template< class _Iterator> auto 
# 2569
__miter_base(move_iterator< _Iterator>  __it)->__decltype((__miter_base(__it.base()))) 
# 2571
{ return __miter_base(__it.base()); } 
# 2584 "/usr/include/c++/12.2.1/bits/stl_iterator.h" 3
template< class _InputIterator> using __iter_key_t = remove_const_t< typename iterator_traits< _InputIterator> ::value_type::first_type> ; 
# 2588
template< class _InputIterator> using __iter_val_t = typename iterator_traits< _InputIterator> ::value_type::second_type; 
# 2592
template< class _T1, class _T2> struct pair; 
# 2595
template< class _InputIterator> using __iter_to_alloc_t = pair< add_const_t< __iter_key_t< _InputIterator> > , __iter_val_t< _InputIterator> > ; 
# 2602
}
# 48 "/usr/include/c++/12.2.1/debug/debug.h" 3
namespace std { 
# 50
namespace __debug { }
# 51
}
# 56
namespace __gnu_debug { 
# 58
using namespace std::__debug;
# 60
template< class _Ite, class _Seq, class _Cat> struct _Safe_iterator; 
# 62
}
# 35 "/usr/include/c++/12.2.1/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 37
namespace __ops { 
# 39
struct _Iter_less_iter { 
# 41
template< class _Iterator1, class _Iterator2> constexpr bool 
# 44
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 45
{ return (*__it1) < (*__it2); } 
# 46
}; 
# 50
constexpr _Iter_less_iter __iter_less_iter() 
# 51
{ return _Iter_less_iter(); } 
# 53
struct _Iter_less_val { 
# 56
constexpr _Iter_less_val() = default;
# 63
explicit _Iter_less_val(_Iter_less_iter) { } 
# 65
template< class _Iterator, class _Value> bool 
# 68
operator()(_Iterator __it, _Value &__val) const 
# 69
{ return (*__it) < __val; } 
# 70
}; 
# 74
inline _Iter_less_val __iter_less_val() 
# 75
{ return _Iter_less_val(); } 
# 79
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 80
{ return _Iter_less_val(); } 
# 82
struct _Val_less_iter { 
# 85
constexpr _Val_less_iter() = default;
# 92
explicit _Val_less_iter(_Iter_less_iter) { } 
# 94
template< class _Value, class _Iterator> bool 
# 97
operator()(_Value &__val, _Iterator __it) const 
# 98
{ return __val < (*__it); } 
# 99
}; 
# 103
inline _Val_less_iter __val_less_iter() 
# 104
{ return _Val_less_iter(); } 
# 108
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 109
{ return _Val_less_iter(); } 
# 111
struct _Iter_equal_to_iter { 
# 113
template< class _Iterator1, class _Iterator2> bool 
# 116
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 117
{ return (*__it1) == (*__it2); } 
# 118
}; 
# 122
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 123
{ return _Iter_equal_to_iter(); } 
# 125
struct _Iter_equal_to_val { 
# 127
template< class _Iterator, class _Value> bool 
# 130
operator()(_Iterator __it, _Value &__val) const 
# 131
{ return (*__it) == __val; } 
# 132
}; 
# 136
inline _Iter_equal_to_val __iter_equal_to_val() 
# 137
{ return _Iter_equal_to_val(); } 
# 141
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 142
{ return _Iter_equal_to_val(); } 
# 144
template< class _Compare> 
# 145
struct _Iter_comp_iter { 
# 147
_Compare _M_comp; 
# 150
constexpr explicit _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 152
{ } 
# 154
template< class _Iterator1, class _Iterator2> constexpr bool 
# 157
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 158
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 159
}; 
# 161
template< class _Compare> constexpr _Iter_comp_iter< _Compare>  
# 164
__iter_comp_iter(_Compare __comp) 
# 165
{ return ((_Iter_comp_iter< _Compare> )(std::move(__comp))); } 
# 167
template< class _Compare> 
# 168
struct _Iter_comp_val { 
# 170
_Compare _M_comp; 
# 174
explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) 
# 176
{ } 
# 180
explicit _Iter_comp_val(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 182
{ } 
# 187
explicit _Iter_comp_val(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 189
{ } 
# 192
template< class _Iterator, class _Value> bool 
# 195
operator()(_Iterator __it, _Value &__val) 
# 196
{ return (bool)(_M_comp)(*__it, __val); } 
# 197
}; 
# 199
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 202
__iter_comp_val(_Compare __comp) 
# 203
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 205
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 208
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 209
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 211
template< class _Compare> 
# 212
struct _Val_comp_iter { 
# 214
_Compare _M_comp; 
# 218
explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 220
{ } 
# 224
explicit _Val_comp_iter(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 226
{ } 
# 231
explicit _Val_comp_iter(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 233
{ } 
# 236
template< class _Value, class _Iterator> bool 
# 239
operator()(_Value &__val, _Iterator __it) 
# 240
{ return (bool)(_M_comp)(__val, *__it); } 
# 241
}; 
# 243
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 246
__val_comp_iter(_Compare __comp) 
# 247
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 249
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 252
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 253
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 255
template< class _Value> 
# 256
struct _Iter_equals_val { 
# 258
_Value &_M_value; 
# 262
explicit _Iter_equals_val(_Value &__value) : _M_value(__value) 
# 264
{ } 
# 266
template< class _Iterator> bool 
# 269
operator()(_Iterator __it) 
# 270
{ return (*__it) == (_M_value); } 
# 271
}; 
# 273
template< class _Value> inline _Iter_equals_val< _Value>  
# 276
__iter_equals_val(_Value &__val) 
# 277
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 279
template< class _Iterator1> 
# 280
struct _Iter_equals_iter { 
# 282
_Iterator1 _M_it1; 
# 286
explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) 
# 288
{ } 
# 290
template< class _Iterator2> bool 
# 293
operator()(_Iterator2 __it2) 
# 294
{ return (*__it2) == (*(_M_it1)); } 
# 295
}; 
# 297
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 300
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 301
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 303
template< class _Predicate> 
# 304
struct _Iter_pred { 
# 306
_Predicate _M_pred; 
# 310
explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 312
{ } 
# 314
template< class _Iterator> bool 
# 317
operator()(_Iterator __it) 
# 318
{ return (bool)(_M_pred)(*__it); } 
# 319
}; 
# 321
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 324
__pred_iter(_Predicate __pred) 
# 325
{ return ((_Iter_pred< _Predicate> )(std::move(__pred))); } 
# 327
template< class _Compare, class _Value> 
# 328
struct _Iter_comp_to_val { 
# 330
_Compare _M_comp; 
# 331
_Value &_M_value; 
# 334
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(std::move(__comp)), _M_value(__value) 
# 336
{ } 
# 338
template< class _Iterator> bool 
# 341
operator()(_Iterator __it) 
# 342
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 343
}; 
# 345
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 348
__iter_comp_val(_Compare __comp, _Value &__val) 
# 349
{ 
# 350
return _Iter_comp_to_val< _Compare, _Value> (std::move(__comp), __val); 
# 351
} 
# 353
template< class _Compare, class _Iterator1> 
# 354
struct _Iter_comp_to_iter { 
# 356
_Compare _M_comp; 
# 357
_Iterator1 _M_it1; 
# 360
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) 
# 362
{ } 
# 364
template< class _Iterator2> bool 
# 367
operator()(_Iterator2 __it2) 
# 368
{ return (bool)(_M_comp)(*__it2, *(_M_it1)); } 
# 369
}; 
# 371
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 374
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 375
{ 
# 376
return _Iter_comp_to_iter< _Compare, _Iterator> (std::move((__comp._M_comp)), __it); 
# 378
} 
# 380
template< class _Predicate> 
# 381
struct _Iter_negate { 
# 383
_Predicate _M_pred; 
# 387
explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 389
{ } 
# 391
template< class _Iterator> bool 
# 394
operator()(_Iterator __it) 
# 395
{ return !((bool)(_M_pred)(*__it)); } 
# 396
}; 
# 398
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 401
__negate(_Iter_pred< _Predicate>  __pred) 
# 402
{ return ((_Iter_negate< _Predicate> )(std::move((__pred._M_pred)))); } 
# 404
}
# 405
}
# 79 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 87
template< class _Tp, class _Up> constexpr int 
# 90
__memcmp(const _Tp *__first1, const _Up *__first2, size_t __num) 
# 91
{ 
# 93
static_assert((sizeof(_Tp) == sizeof(_Up)), "can be compared with memcmp");
# 105 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num); 
# 106
} 
# 149 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 152
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 153
{ 
# 182 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
swap(*__a, *__b); 
# 184
} 
# 198 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 201
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 202
__first2) 
# 203
{ 
# 209
; 
# 211
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 212
std::iter_swap(__first1, __first2); }  
# 213
return __first2; 
# 214
} 
# 227 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 230
min(const _Tp &__a, const _Tp &__b) 
# 231
{ 
# 235
if (__b < __a) { 
# 236
return __b; }  
# 237
return __a; 
# 238
} 
# 251 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 254
max(const _Tp &__a, const _Tp &__b) 
# 255
{ 
# 259
if (__a < __b) { 
# 260
return __b; }  
# 261
return __a; 
# 262
} 
# 275 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 278
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 279
{ 
# 281
if (__comp(__b, __a)) { 
# 282
return __b; }  
# 283
return __a; 
# 284
} 
# 297 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 300
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 301
{ 
# 303
if (__comp(__a, __b)) { 
# 304
return __b; }  
# 305
return __a; 
# 306
} 
# 310
template< class _Iterator> inline _Iterator 
# 313
__niter_base(_Iterator __it) noexcept(std::template is_nothrow_copy_constructible< _Iterator> ::value) 
# 315
{ return __it; } 
# 317
template< class _Ite, class _Seq> _Ite __niter_base(const __gnu_debug::_Safe_iterator< _Ite, _Seq, random_access_iterator_tag>  &); 
# 325
template< class _From, class _To> inline _From 
# 328
__niter_wrap(_From __from, _To __res) 
# 329
{ return __from + (__res - std::__niter_base(__from)); } 
# 332
template< class _Iterator> inline _Iterator 
# 335
__niter_wrap(const _Iterator &, _Iterator __res) 
# 336
{ return __res; } 
# 344
template< bool _IsMove, bool _IsSimple, class _Category> 
# 345
struct __copy_move { 
# 347
template< class _II, class _OI> static _OI 
# 350
__copy_m(_II __first, _II __last, _OI __result) 
# 351
{ 
# 352
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 353
(*__result) = (*__first); }  
# 354
return __result; 
# 355
} 
# 356
}; 
# 359
template< class _Category> 
# 360
struct __copy_move< true, false, _Category>  { 
# 362
template< class _II, class _OI> static _OI 
# 365
__copy_m(_II __first, _II __last, _OI __result) 
# 366
{ 
# 367
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 368
(*__result) = std::move(*__first); }  
# 369
return __result; 
# 370
} 
# 371
}; 
# 375
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 377
template< class _II, class _OI> static _OI 
# 380
__copy_m(_II __first, _II __last, _OI __result) 
# 381
{ 
# 382
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 383
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 384
{ 
# 385
(*__result) = (*__first); 
# 386
++__first; 
# 387
++__result; 
# 388
}  
# 389
return __result; 
# 390
} 
# 391
}; 
# 395
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 397
template< class _II, class _OI> static _OI 
# 400
__copy_m(_II __first, _II __last, _OI __result) 
# 401
{ 
# 402
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 403
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 404
{ 
# 405
(*__result) = std::move(*__first); 
# 406
++__first; 
# 407
++__result; 
# 408
}  
# 409
return __result; 
# 410
} 
# 411
}; 
# 414
template< bool _IsMove> 
# 415
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 417
template< class _Tp> static _Tp *
# 420
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 421
{ 
# 423
using __assignable = __conditional_t< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 427
static_assert((__assignable::value), "type must be assignable");
# 429
const ptrdiff_t _Num = __last - __first; 
# 430
if (_Num) { 
# 431
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 432
return __result + _Num; 
# 433
} 
# 434
}; 
# 438
template< class _Tp, class _Ref, class _Ptr> struct _Deque_iterator; 
# 441
struct _Bit_iterator; 
# 447
template< class _CharT> struct char_traits; 
# 450
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 453
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 456
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 462
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 468
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 474
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _Deque_iterator< _CharT, _CharT &, _CharT *> > ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _Deque_iterator< _CharT, _CharT &, _CharT *> ); 
# 483
template< bool _IsMove, class _II, class _OI> inline _OI 
# 486
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 487
{ 
# 488
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 494
return std::template __copy_move< _IsMove, __memcpyable< _OI, _II> ::__value, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 496
} 
# 498
template< bool _IsMove, class 
# 499
_Tp, class _Ref, class _Ptr, class _OI> _OI 
# 498
__copy_move_a1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _OI); 
# 505
template< bool _IsMove, class 
# 506
_ITp, class _IRef, class _IPtr, class _OTp> _Deque_iterator< _OTp, _OTp &, _OTp *>  
# 505
__copy_move_a1(_Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _OTp, _OTp &, _OTp *> ); 
# 512
template< bool _IsMove, class _II, class _Tp> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, _Deque_iterator< _Tp, _Tp &, _Tp *> > ::__type __copy_move_a1(_II, _II, _Deque_iterator< _Tp, _Tp &, _Tp *> ); 
# 518
template< bool _IsMove, class _II, class _OI> inline _OI 
# 521
__copy_move_a1(_II __first, _II __last, _OI __result) 
# 522
{ return std::__copy_move_a2< _IsMove> (__first, __last, __result); } 
# 524
template< bool _IsMove, class _II, class _OI> inline _OI 
# 527
__copy_move_a(_II __first, _II __last, _OI __result) 
# 528
{ 
# 529
return std::__niter_wrap(__result, std::__copy_move_a1< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 533
} 
# 535
template< bool _IsMove, class 
# 536
_Ite, class _Seq, class _Cat, class _OI> _OI 
# 535
__copy_move_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, _OI); 
# 542
template< bool _IsMove, class 
# 543
_II, class _Ite, class _Seq, class _Cat> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 542
__copy_move_a(_II, _II, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &); 
# 548
template< bool _IsMove, class 
# 549
_IIte, class _ISeq, class _ICat, class 
# 550
_OIte, class _OSeq, class _OCat> __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  
# 548
__copy_move_a(const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  &); 
# 556
template< class _InputIterator, class _Size, class _OutputIterator> _OutputIterator 
# 559
__copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result, bool) 
# 561
{ 
# 562
if (__n > 0) 
# 563
{ 
# 564
while (true) 
# 565
{ 
# 566
(*__result) = (*__first); 
# 567
++__result; 
# 568
if ((--__n) > 0) { 
# 569
++__first; } else { 
# 571
break; }  
# 572
}  
# 573
}  
# 574
return __result; 
# 575
} 
# 577
template< class _CharT, class _Size> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_n_a(istreambuf_iterator< _CharT, char_traits< _CharT> > , _Size, _CharT *, bool); 
# 583
template< class _CharT, class _Size> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _Deque_iterator< _CharT, _CharT &, _CharT *> > ::__type __copy_n_a(istreambuf_iterator< _CharT, char_traits< _CharT> > , _Size, _Deque_iterator< _CharT, _CharT &, _CharT *> , bool); 
# 608 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 611
copy(_II __first, _II __last, _OI __result) 
# 612
{ 
# 617
; 
# 619
return std::__copy_move_a< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 621
} 
# 641 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 644
move(_II __first, _II __last, _OI __result) 
# 645
{ 
# 650
; 
# 652
return std::__copy_move_a< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 654
} 
# 661
template< bool _IsMove, bool _IsSimple, class _Category> 
# 662
struct __copy_move_backward { 
# 664
template< class _BI1, class _BI2> static _BI2 
# 667
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 668
{ 
# 669
while (__first != __last) { 
# 670
(*(--__result)) = (*(--__last)); }  
# 671
return __result; 
# 672
} 
# 673
}; 
# 676
template< class _Category> 
# 677
struct __copy_move_backward< true, false, _Category>  { 
# 679
template< class _BI1, class _BI2> static _BI2 
# 682
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 683
{ 
# 684
while (__first != __last) { 
# 685
(*(--__result)) = std::move(*(--__last)); }  
# 686
return __result; 
# 687
} 
# 688
}; 
# 692
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 694
template< class _BI1, class _BI2> static _BI2 
# 697
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 698
{ 
# 700
typename iterator_traits< _BI1> ::difference_type __n = __last - __first; 
# 701
for (; __n > 0; --__n) { 
# 702
(*(--__result)) = (*(--__last)); }  
# 703
return __result; 
# 704
} 
# 705
}; 
# 709
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 711
template< class _BI1, class _BI2> static _BI2 
# 714
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 715
{ 
# 717
typename iterator_traits< _BI1> ::difference_type __n = __last - __first; 
# 718
for (; __n > 0; --__n) { 
# 719
(*(--__result)) = std::move(*(--__last)); }  
# 720
return __result; 
# 721
} 
# 722
}; 
# 725
template< bool _IsMove> 
# 726
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 728
template< class _Tp> static _Tp *
# 731
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 732
{ 
# 734
using __assignable = __conditional_t< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 738
static_assert((__assignable::value), "type must be assignable");
# 740
const ptrdiff_t _Num = __last - __first; 
# 741
if (_Num) { 
# 742
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 743
return __result - _Num; 
# 744
} 
# 745
}; 
# 747
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 750
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 751
{ 
# 752
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 758
return std::template __copy_move_backward< _IsMove, __memcpyable< _BI2, _BI1> ::__value, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 763
} 
# 765
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 768
__copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result) 
# 769
{ return std::__copy_move_backward_a2< _IsMove> (__first, __last, __result); } 
# 771
template< bool _IsMove, class 
# 772
_Tp, class _Ref, class _Ptr, class _OI> _OI 
# 771
__copy_move_backward_a1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _OI); 
# 778
template< bool _IsMove, class 
# 779
_ITp, class _IRef, class _IPtr, class _OTp> _Deque_iterator< _OTp, _OTp &, _OTp *>  
# 778
__copy_move_backward_a1(_Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _OTp, _OTp &, _OTp *> ); 
# 786
template< bool _IsMove, class _II, class _Tp> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, _Deque_iterator< _Tp, _Tp &, _Tp *> > ::__type __copy_move_backward_a1(_II, _II, _Deque_iterator< _Tp, _Tp &, _Tp *> ); 
# 793
template< bool _IsMove, class _II, class _OI> inline _OI 
# 796
__copy_move_backward_a(_II __first, _II __last, _OI __result) 
# 797
{ 
# 798
return std::__niter_wrap(__result, std::__copy_move_backward_a1< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 802
} 
# 804
template< bool _IsMove, class 
# 805
_Ite, class _Seq, class _Cat, class _OI> _OI 
# 804
__copy_move_backward_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, _OI); 
# 812
template< bool _IsMove, class 
# 813
_II, class _Ite, class _Seq, class _Cat> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 812
__copy_move_backward_a(_II, _II, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &); 
# 818
template< bool _IsMove, class 
# 819
_IIte, class _ISeq, class _ICat, class 
# 820
_OIte, class _OSeq, class _OCat> __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  
# 818
__copy_move_backward_a(const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  &); 
# 845 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 848
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 849
{ 
# 855
; 
# 857
return std::__copy_move_backward_a< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 859
} 
# 880 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 883
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 884
{ 
# 890
; 
# 892
return std::__copy_move_backward_a< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 895
} 
# 902
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 906
__fill_a1(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 907
__value) 
# 908
{ 
# 909
for (; __first != __last; ++__first) { 
# 910
(*__first) = __value; }  
# 911
} 
# 913
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 917
__fill_a1(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 918
__value) 
# 919
{ 
# 920
const _Tp __tmp = __value; 
# 921
for (; __first != __last; ++__first) { 
# 922
(*__first) = __tmp; }  
# 923
} 
# 926
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 930
__fill_a1(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 931
{ 
# 932
const _Tp __tmp = __c; 
# 941 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
if (const size_t __len = __last - __first) { 
# 942
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 943
} 
# 945
template< class _Ite, class _Cont, class _Tp> inline void 
# 948
__fill_a1(__gnu_cxx::__normal_iterator< _Ite, _Cont>  __first, __gnu_cxx::__normal_iterator< _Ite, _Cont>  
# 949
__last, const _Tp &
# 950
__value) 
# 951
{ std::__fill_a1(__first.base(), __last.base(), __value); } 
# 953
template< class _Tp, class _VTp> void __fill_a1(const _Deque_iterator< _Tp, _Tp &, _Tp *>  &, const _Deque_iterator< _Tp, _Tp &, _Tp *>  &, const _VTp &); 
# 961
void __fill_a1(_Bit_iterator, _Bit_iterator, const bool &); 
# 964
template< class _FIte, class _Tp> inline void 
# 967
__fill_a(_FIte __first, _FIte __last, const _Tp &__value) 
# 968
{ std::__fill_a1(__first, __last, __value); } 
# 970
template< class _Ite, class _Seq, class _Cat, class _Tp> void __fill_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const _Tp &); 
# 988 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 991
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 992
{ 
# 996
; 
# 998
std::__fill_a(__first, __last, __value); 
# 999
} 
# 1003
constexpr int __size_to_integer(int __n) { return __n; } 
# 1005
constexpr unsigned __size_to_integer(unsigned __n) { return __n; } 
# 1007
constexpr long __size_to_integer(long __n) { return __n; } 
# 1009
constexpr unsigned long __size_to_integer(unsigned long __n) { return __n; } 
# 1011
constexpr long long __size_to_integer(long long __n) { return __n; } 
# 1013
constexpr unsigned long long __size_to_integer(unsigned long long __n) { return __n; } 
# 1041 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
constexpr long long __size_to_integer(float __n) { return (long long)__n; } 
# 1043
constexpr long long __size_to_integer(double __n) { return (long long)__n; } 
# 1045
constexpr long long __size_to_integer(long double __n) { return (long long)__n; } 
# 1051
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 1055
__fill_n_a1(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 1056
{ 
# 1057
for (; __n > 0; (--__n), ((void)(++__first))) { 
# 1058
(*__first) = __value; }  
# 1059
return __first; 
# 1060
} 
# 1062
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 1066
__fill_n_a1(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 1067
{ 
# 1068
const _Tp __tmp = __value; 
# 1069
for (; __n > 0; (--__n), ((void)(++__first))) { 
# 1070
(*__first) = __tmp; }  
# 1071
return __first; 
# 1072
} 
# 1074
template< class _Ite, class _Seq, class _Cat, class _Size, class 
# 1075
_Tp> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 1074
__fill_n_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  & __first, _Size __n, const _Tp & __value, input_iterator_tag); 
# 1081
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1084
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, output_iterator_tag) 
# 1086
{ 
# 1088
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1090
return __fill_n_a1(__first, __n, __value); 
# 1091
} 
# 1093
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1096
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, input_iterator_tag) 
# 1098
{ 
# 1100
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1102
return __fill_n_a1(__first, __n, __value); 
# 1103
} 
# 1105
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1108
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, random_access_iterator_tag) 
# 1110
{ 
# 1112
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1114
if (__n <= 0) { 
# 1115
return __first; }  
# 1117
; 
# 1119
std::__fill_a(__first, __first + __n, __value); 
# 1120
return __first + __n; 
# 1121
} 
# 1140 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 1143
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 1144
{ 
# 1148
return std::__fill_n_a(__first, std::__size_to_integer(__n), __value, std::__iterator_category(__first)); 
# 1150
} 
# 1152
template< bool _BoolType> 
# 1153
struct __equal { 
# 1155
template< class _II1, class _II2> static bool 
# 1158
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1159
{ 
# 1160
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1161
if (!((*__first1) == (*__first2))) { 
# 1162
return false; }  }  
# 1163
return true; 
# 1164
} 
# 1165
}; 
# 1168
template<> struct __equal< true>  { 
# 1170
template< class _Tp> static bool 
# 1173
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 1174
{ 
# 1175
if (const size_t __len = __last1 - __first1) { 
# 1176
return !std::__memcmp(__first1, __first2, __len); }  
# 1177
return true; 
# 1178
} 
# 1179
}; 
# 1181
template< class _Tp, class _Ref, class _Ptr, class _II> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, bool> ::__type __equal_aux1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _II); 
# 1188
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1189
_Tp2, class _Ref2, class _Ptr2> bool 
# 1188
__equal_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1195
template< class _II, class _Tp, class _Ref, class _Ptr> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, bool> ::__type __equal_aux1(_II, _II, _Deque_iterator< _Tp, _Ref, _Ptr> ); 
# 1201
template< class _II1, class _II2> inline bool 
# 1204
__equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1205
{ 
# 1206
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 1207
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __memcmpable< _II1, _II2> ::__value); 
# 1210
return std::template __equal< __simple> ::equal(__first1, __last1, __first2); 
# 1211
} 
# 1213
template< class _II1, class _II2> inline bool 
# 1216
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1217
{ 
# 1218
return std::__equal_aux1(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1221
} 
# 1223
template< class _II1, class _Seq1, class _Cat1, class _II2> bool __equal_aux(const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, _II2); 
# 1229
template< class _II1, class _II2, class _Seq2, class _Cat2> bool __equal_aux(_II1, _II1, const __gnu_debug::_Safe_iterator< _II2, _Seq2, _Cat2>  &); 
# 1234
template< class _II1, class _Seq1, class _Cat1, class 
# 1235
_II2, class _Seq2, class _Cat2> bool 
# 1234
__equal_aux(const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II2, _Seq2, _Cat2>  &); 
# 1241
template< class , class > 
# 1242
struct __lc_rai { 
# 1244
template< class _II1, class _II2> static _II1 
# 1247
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 1248
{ return __last1; } 
# 1250
template< class _II> static bool 
# 1253
__cnd2(_II __first, _II __last) 
# 1254
{ return __first != __last; } 
# 1255
}; 
# 1258
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 1260
template< class _RAI1, class _RAI2> static _RAI1 
# 1263
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 1264
__first2, _RAI2 __last2) 
# 1265
{ 
# 1267
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 1269
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 1270
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 1271
} 
# 1273
template< class _RAI> static bool 
# 1275
__cnd2(_RAI, _RAI) 
# 1276
{ return true; } 
# 1277
}; 
# 1279
template< class _II1, class _II2, class _Compare> bool 
# 1282
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 1283
__first2, _II2 __last2, _Compare 
# 1284
__comp) 
# 1285
{ 
# 1286
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 1287
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 1288
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 1290
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 1291
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), ((void)(++__first2))) 
# 1293
{ 
# 1294
if (__comp(__first1, __first2)) { 
# 1295
return true; }  
# 1296
if (__comp(__first2, __first1)) { 
# 1297
return false; }  
# 1298
}  
# 1299
return (__first1 == __last1) && (__first2 != __last2); 
# 1300
} 
# 1302
template< bool _BoolType> 
# 1303
struct __lexicographical_compare { 
# 1305
template< class _II1, class _II2> static bool 
# 1308
__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1309
{ 
# 1310
using __gnu_cxx::__ops::__iter_less_iter;
# 1311
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __iter_less_iter()); 
# 1314
} 
# 1316
template< class _II1, class _II2> static int 
# 1319
__3way(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1320
{ 
# 1321
while (__first1 != __last1) 
# 1322
{ 
# 1323
if (__first2 == __last2) { 
# 1324
return +1; }  
# 1325
if ((*__first1) < (*__first2)) { 
# 1326
return -1; }  
# 1327
if ((*__first2) < (*__first1)) { 
# 1328
return +1; }  
# 1329
++__first1; 
# 1330
++__first2; 
# 1331
}  
# 1332
return ((int)(__first2 == __last2)) - 1; 
# 1333
} 
# 1334
}; 
# 1337
template<> struct __lexicographical_compare< true>  { 
# 1339
template< class _Tp, class _Up> static bool 
# 1342
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 1343
__first2, const _Up *__last2) 
# 1344
{ return __3way(__first1, __last1, __first2, __last2) < 0; } 
# 1346
template< class _Tp, class _Up> static ptrdiff_t 
# 1349
__3way(const _Tp *__first1, const _Tp *__last1, const _Up *
# 1350
__first2, const _Up *__last2) 
# 1351
{ 
# 1352
const size_t __len1 = __last1 - __first1; 
# 1353
const size_t __len2 = __last2 - __first2; 
# 1354
if (const size_t __len = std::min(__len1, __len2)) { 
# 1355
if (int __result = std::__memcmp(__first1, __first2, __len)) { 
# 1356
return __result; }  }  
# 1357
return (ptrdiff_t)(__len1 - __len2); 
# 1358
} 
# 1359
}; 
# 1361
template< class _II1, class _II2> inline bool 
# 1364
__lexicographical_compare_aux1(_II1 __first1, _II1 __last1, _II2 
# 1365
__first2, _II2 __last2) 
# 1366
{ 
# 1367
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 1368
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 1369
const bool __simple = (__is_memcmp_ordered_with< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 1382
return std::template __lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 1384
} 
# 1386
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1387
_Tp2> bool 
# 1386
__lexicographical_compare_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Tp2 *, _Tp2 *); 
# 1394
template< class _Tp1, class 
# 1395
_Tp2, class _Ref2, class _Ptr2> bool 
# 1394
__lexicographical_compare_aux1(_Tp1 *, _Tp1 *, _Deque_iterator< _Tp2, _Ref2, _Ptr2> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1401
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1402
_Tp2, class _Ref2, class _Ptr2> bool 
# 1401
__lexicographical_compare_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1410
template< class _II1, class _II2> inline bool 
# 1413
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 1414
__first2, _II2 __last2) 
# 1415
{ 
# 1416
return std::__lexicographical_compare_aux1(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1420
} 
# 1422
template< class _Iter1, class _Seq1, class _Cat1, class 
# 1423
_II2> bool 
# 1422
__lexicographical_compare_aux(const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, _II2, _II2); 
# 1430
template< class _II1, class 
# 1431
_Iter2, class _Seq2, class _Cat2> bool 
# 1430
__lexicographical_compare_aux(_II1, _II1, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &); 
# 1438
template< class _Iter1, class _Seq1, class _Cat1, class 
# 1439
_Iter2, class _Seq2, class _Cat2> bool 
# 1438
__lexicographical_compare_aux(const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &); 
# 1447
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 1450
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1451
__val, _Compare __comp) 
# 1452
{ 
# 1454
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 1456
_DistanceType __len = std::distance(__first, __last); 
# 1458
while (__len > 0) 
# 1459
{ 
# 1460
_DistanceType __half = __len >> 1; 
# 1461
_ForwardIterator __middle = __first; 
# 1462
std::advance(__middle, __half); 
# 1463
if (__comp(__middle, __val)) 
# 1464
{ 
# 1465
__first = __middle; 
# 1466
++__first; 
# 1467
__len = ((__len - __half) - 1); 
# 1468
} else { 
# 1470
__len = __half; }  
# 1471
}  
# 1472
return __first; 
# 1473
} 
# 1486 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 1489
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1490
__val) 
# 1491
{ 
# 1496
; 
# 1498
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 1500
} 
# 1505
constexpr int __lg(int __n) 
# 1506
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1509
constexpr unsigned __lg(unsigned __n) 
# 1510
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1513
constexpr long __lg(long __n) 
# 1514
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1517
constexpr unsigned long __lg(unsigned long __n) 
# 1518
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1521
constexpr long long __lg(long long __n) 
# 1522
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1525
constexpr unsigned long long __lg(unsigned long long __n) 
# 1526
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1542 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1545
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1546
{ 
# 1553
; 
# 1555
return std::__equal_aux(__first1, __last1, __first2); 
# 1556
} 
# 1573 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1576
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1577
__first2, _BinaryPredicate __binary_pred) 
# 1578
{ 
# 1582
; 
# 1584
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1585
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1586
return false; }  }  
# 1587
return true; 
# 1588
} 
# 1592
template< class _II1, class _II2> inline bool 
# 1595
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1596
{ 
# 1597
using _RATag = random_access_iterator_tag; 
# 1598
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1599
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1600
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1601
if (_RAIters()) 
# 1602
{ 
# 1603
auto __d1 = std::distance(__first1, __last1); 
# 1604
auto __d2 = std::distance(__first2, __last2); 
# 1605
if (__d1 != __d2) { 
# 1606
return false; }  
# 1607
return std::equal(__first1, __last1, __first2); 
# 1608
}  
# 1610
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1612
if (!((*__first1) == (*__first2))) { 
# 1613
return false; }  }  
# 1614
return (__first1 == __last1) && (__first2 == __last2); 
# 1615
} 
# 1618
template< class _II1, class _II2, class _BinaryPredicate> inline bool 
# 1621
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _BinaryPredicate 
# 1622
__binary_pred) 
# 1623
{ 
# 1624
using _RATag = random_access_iterator_tag; 
# 1625
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1626
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1627
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1628
if (_RAIters()) 
# 1629
{ 
# 1630
auto __d1 = std::distance(__first1, __last1); 
# 1631
auto __d2 = std::distance(__first2, __last2); 
# 1632
if (__d1 != __d2) { 
# 1633
return false; }  
# 1634
return std::equal(__first1, __last1, __first2, __binary_pred); 
# 1636
}  
# 1638
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1640
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1641
return false; }  }  
# 1642
return (__first1 == __last1) && (__first2 == __last2); 
# 1643
} 
# 1663 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1666
equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1667
{ 
# 1674
; 
# 1675
; 
# 1677
return std::__equal4(__first1, __last1, __first2, __last2); 
# 1678
} 
# 1696 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1699
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1700
__first2, _IIter2 __last2, _BinaryPredicate __binary_pred) 
# 1701
{ 
# 1705
; 
# 1706
; 
# 1708
return std::__equal4(__first1, __last1, __first2, __last2, __binary_pred); 
# 1710
} 
# 1728 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1731
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1732
__first2, _II2 __last2) 
# 1733
{ 
# 1743
; 
# 1744
; 
# 1746
return std::__lexicographical_compare_aux(__first1, __last1, __first2, __last2); 
# 1748
} 
# 1763 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool 
# 1766
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1767
__first2, _II2 __last2, _Compare __comp) 
# 1768
{ 
# 1772
; 
# 1773
; 
# 1775
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1778
} 
# 1875 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1876
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1879
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1880
__first2, _BinaryPredicate __binary_pred) 
# 1881
{ 
# 1882
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1883
{ 
# 1884
++__first1; 
# 1885
++__first2; 
# 1886
}  
# 1887
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1888
} 
# 1903 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1906
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1907
__first2) 
# 1908
{ 
# 1915
; 
# 1917
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1919
} 
# 1937 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1938
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1941
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1942
__first2, _BinaryPredicate __binary_pred) 
# 1943
{ 
# 1947
; 
# 1949
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1951
} 
# 1955
template< class _InputIterator1, class _InputIterator2, class 
# 1956
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1959
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1960
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1961
__binary_pred) 
# 1962
{ 
# 1963
while ((__first1 != __last1) && (__first2 != __last2) && __binary_pred(__first1, __first2)) 
# 1965
{ 
# 1966
++__first1; 
# 1967
++__first2; 
# 1968
}  
# 1969
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1970
} 
# 1986 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1989
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1990
__first2, _InputIterator2 __last2) 
# 1991
{ 
# 1998
; 
# 1999
; 
# 2001
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 2003
} 
# 2022 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2023
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 2026
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2027
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 2028
__binary_pred) 
# 2029
{ 
# 2033
; 
# 2034
; 
# 2036
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 2038
} 
# 2044
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 2047
__find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 2048
__pred, input_iterator_tag) 
# 2049
{ 
# 2050
while ((__first != __last) && (!__pred(__first))) { 
# 2051
++__first; }  
# 2052
return __first; 
# 2053
} 
# 2056
template< class _RandomAccessIterator, class _Predicate> _RandomAccessIterator 
# 2059
__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate 
# 2060
__pred, random_access_iterator_tag) 
# 2061
{ 
# 2063
typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = (__last - __first) >> 2; 
# 2065
for (; __trip_count > 0; --__trip_count) 
# 2066
{ 
# 2067
if (__pred(__first)) { 
# 2068
return __first; }  
# 2069
++__first; 
# 2071
if (__pred(__first)) { 
# 2072
return __first; }  
# 2073
++__first; 
# 2075
if (__pred(__first)) { 
# 2076
return __first; }  
# 2077
++__first; 
# 2079
if (__pred(__first)) { 
# 2080
return __first; }  
# 2081
++__first; 
# 2082
}  
# 2084
switch (__last - __first) 
# 2085
{ 
# 2086
case 3:  
# 2087
if (__pred(__first)) { 
# 2088
return __first; }  
# 2089
++__first; 
# 2091
case 2:  
# 2092
if (__pred(__first)) { 
# 2093
return __first; }  
# 2094
++__first; 
# 2096
case 1:  
# 2097
if (__pred(__first)) { 
# 2098
return __first; }  
# 2099
++__first; 
# 2101
case 0:  
# 2102
default:  
# 2103
return __last; 
# 2104
}  
# 2105
} 
# 2107
template< class _Iterator, class _Predicate> inline _Iterator 
# 2110
__find_if(_Iterator __first, _Iterator __last, _Predicate __pred) 
# 2111
{ 
# 2112
return __find_if(__first, __last, __pred, std::__iterator_category(__first)); 
# 2114
} 
# 2116
template< class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type 
# 2119
__count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 2120
{ 
# 2121
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 2122
for (; __first != __last; ++__first) { 
# 2123
if (__pred(__first)) { 
# 2124
++__n; }  }  
# 2125
return __n; 
# 2126
} 
# 2128
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 2131
__remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 2132
__pred) 
# 2133
{ 
# 2134
__first = std::__find_if(__first, __last, __pred); 
# 2135
if (__first == __last) { 
# 2136
return __first; }  
# 2137
_ForwardIterator __result = __first; 
# 2138
++__first; 
# 2139
for (; __first != __last; ++__first) { 
# 2140
if (!__pred(__first)) 
# 2141
{ 
# 2142
(*__result) = std::move(*__first); 
# 2143
++__result; 
# 2144
}  }  
# 2145
return __result; 
# 2146
} 
# 2149
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 2150
_BinaryPredicate> bool 
# 2153
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 2154
__first2, _BinaryPredicate __pred) 
# 2155
{ 
# 2158
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 2159
if (!__pred(__first1, __first2)) { 
# 2160
break; }  }  
# 2162
if (__first1 == __last1) { 
# 2163
return true; }  
# 2167
_ForwardIterator2 __last2 = __first2; 
# 2168
std::advance(__last2, std::distance(__first1, __last1)); 
# 2169
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) 
# 2170
{ 
# 2171
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 2173
continue; }  
# 2175
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 2178
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 2182
return false; }  
# 2183
}   
# 2184
return true; 
# 2185
} 
# 2199 "/usr/include/c++/12.2.1/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 2202
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 2203
__first2) 
# 2204
{ 
# 2211
; 
# 2213
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 2215
} 
# 2219
}
# 158 "/usr/include/c++/12.2.1/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 167
enum float_round_style { 
# 169
round_indeterminate = (-1), 
# 170
round_toward_zero = 0, 
# 171
round_to_nearest, 
# 172
round_toward_infinity, 
# 173
round_toward_neg_infinity
# 174
}; 
# 182
enum float_denorm_style { 
# 185
denorm_indeterminate = (-1), 
# 187
denorm_absent = 0, 
# 189
denorm_present
# 190
}; 
# 202 "/usr/include/c++/12.2.1/limits" 3
struct __numeric_limits_base { 
# 206
static constexpr inline bool is_specialized = false; 
# 211
static constexpr inline int digits = 0; 
# 214
static constexpr inline int digits10 = 0; 
# 219
static constexpr inline int max_digits10 = 0; 
# 223
static constexpr inline bool is_signed = false; 
# 226
static constexpr inline bool is_integer = false; 
# 231
static constexpr inline bool is_exact = false; 
# 235
static constexpr inline int radix = 0; 
# 239
static constexpr inline int min_exponent = 0; 
# 243
static constexpr inline int min_exponent10 = 0; 
# 248
static constexpr inline int max_exponent = 0; 
# 252
static constexpr inline int max_exponent10 = 0; 
# 255
static constexpr inline bool has_infinity = false; 
# 259
static constexpr inline bool has_quiet_NaN = false; 
# 263
static constexpr inline bool has_signaling_NaN = false; 
# 266
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 270
static constexpr inline bool has_denorm_loss = false; 
# 274
static constexpr inline bool is_iec559 = false; 
# 279
static constexpr inline bool is_bounded = false; 
# 288 "/usr/include/c++/12.2.1/limits" 3
static constexpr inline bool is_modulo = false; 
# 291
static constexpr inline bool traps = false; 
# 294
static constexpr inline bool tinyness_before = false; 
# 299
static constexpr inline float_round_style round_style = round_toward_zero; 
# 301
}; 
# 311 "/usr/include/c++/12.2.1/limits" 3
template< class _Tp> 
# 312
struct numeric_limits : public __numeric_limits_base { 
# 317
static constexpr _Tp min() noexcept { return _Tp(); } 
# 321
static constexpr _Tp max() noexcept { return _Tp(); } 
# 327
static constexpr _Tp lowest() noexcept { return _Tp(); } 
# 333
static constexpr _Tp epsilon() noexcept { return _Tp(); } 
# 337
static constexpr _Tp round_error() noexcept { return _Tp(); } 
# 341
static constexpr _Tp infinity() noexcept { return _Tp(); } 
# 346
static constexpr _Tp quiet_NaN() noexcept { return _Tp(); } 
# 351
static constexpr _Tp signaling_NaN() noexcept { return _Tp(); } 
# 357
static constexpr _Tp denorm_min() noexcept { return _Tp(); } 
# 358
}; 
# 363
template< class _Tp> 
# 364
struct numeric_limits< const _Tp>  : public std::numeric_limits< _Tp>  { 
# 365
}; 
# 367
template< class _Tp> 
# 368
struct numeric_limits< volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 369
}; 
# 371
template< class _Tp> 
# 372
struct numeric_limits< const volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 373
}; 
# 384 "/usr/include/c++/12.2.1/limits" 3
template<> struct numeric_limits< bool>  { 
# 386
static constexpr inline bool is_specialized = true; 
# 389
static constexpr bool min() noexcept { return false; } 
# 392
static constexpr bool max() noexcept { return true; } 
# 396
static constexpr bool lowest() noexcept { return min(); } 
# 398
static constexpr inline int digits = 1; 
# 399
static constexpr inline int digits10 = 0; 
# 401
static constexpr inline int max_digits10 = 0; 
# 403
static constexpr inline bool is_signed = false; 
# 404
static constexpr inline bool is_integer = true; 
# 405
static constexpr inline bool is_exact = true; 
# 406
static constexpr inline int radix = 2; 
# 409
static constexpr bool epsilon() noexcept { return false; } 
# 412
static constexpr bool round_error() noexcept { return false; } 
# 414
static constexpr inline int min_exponent = 0; 
# 415
static constexpr inline int min_exponent10 = 0; 
# 416
static constexpr inline int max_exponent = 0; 
# 417
static constexpr inline int max_exponent10 = 0; 
# 419
static constexpr inline bool has_infinity = false; 
# 420
static constexpr inline bool has_quiet_NaN = false; 
# 421
static constexpr inline bool has_signaling_NaN = false; 
# 422
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 424
static constexpr inline bool has_denorm_loss = false; 
# 427
static constexpr bool infinity() noexcept { return false; } 
# 430
static constexpr bool quiet_NaN() noexcept { return false; } 
# 433
static constexpr bool signaling_NaN() noexcept { return false; } 
# 436
static constexpr bool denorm_min() noexcept { return false; } 
# 438
static constexpr inline bool is_iec559 = false; 
# 439
static constexpr inline bool is_bounded = true; 
# 440
static constexpr inline bool is_modulo = false; 
# 445
static constexpr inline bool traps = true; 
# 446
static constexpr inline bool tinyness_before = false; 
# 447
static constexpr inline float_round_style round_style = round_toward_zero; 
# 449
}; 
# 453
template<> struct numeric_limits< char>  { 
# 455
static constexpr inline bool is_specialized = true; 
# 458
static constexpr char min() noexcept { return ((((char)(-1)) < 0) ? (-((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)))) - 1 : ((char)0)); } 
# 461
static constexpr char max() noexcept { return ((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0))); } 
# 465
static constexpr char lowest() noexcept { return min(); } 
# 468
static constexpr inline int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 469
static constexpr inline int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643L)) / (2136)); 
# 471
static constexpr inline int max_digits10 = 0; 
# 473
static constexpr inline bool is_signed = (((char)(-1)) < 0); 
# 474
static constexpr inline bool is_integer = true; 
# 475
static constexpr inline bool is_exact = true; 
# 476
static constexpr inline int radix = 2; 
# 479
static constexpr char epsilon() noexcept { return 0; } 
# 482
static constexpr char round_error() noexcept { return 0; } 
# 484
static constexpr inline int min_exponent = 0; 
# 485
static constexpr inline int min_exponent10 = 0; 
# 486
static constexpr inline int max_exponent = 0; 
# 487
static constexpr inline int max_exponent10 = 0; 
# 489
static constexpr inline bool has_infinity = false; 
# 490
static constexpr inline bool has_quiet_NaN = false; 
# 491
static constexpr inline bool has_signaling_NaN = false; 
# 492
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 494
static constexpr inline bool has_denorm_loss = false; 
# 497
static constexpr char infinity() noexcept { return ((char)0); } 
# 500
static constexpr char quiet_NaN() noexcept { return ((char)0); } 
# 503
static constexpr char signaling_NaN() noexcept { return ((char)0); } 
# 506
static constexpr char denorm_min() noexcept { return static_cast< char>(0); } 
# 508
static constexpr inline bool is_iec559 = false; 
# 509
static constexpr inline bool is_bounded = true; 
# 510
static constexpr inline bool is_modulo = (!is_signed); 
# 512
static constexpr inline bool traps = true; 
# 513
static constexpr inline bool tinyness_before = false; 
# 514
static constexpr inline float_round_style round_style = round_toward_zero; 
# 516
}; 
# 520
template<> struct numeric_limits< signed char>  { 
# 522
static constexpr inline bool is_specialized = true; 
# 525
static constexpr signed char min() noexcept { return (-127) - 1; } 
# 528
static constexpr signed char max() noexcept { return 127; } 
# 532
static constexpr signed char lowest() noexcept { return min(); } 
# 535
static constexpr inline int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 536
static constexpr inline int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643L)) / (2136)); 
# 539
static constexpr inline int max_digits10 = 0; 
# 541
static constexpr inline bool is_signed = true; 
# 542
static constexpr inline bool is_integer = true; 
# 543
static constexpr inline bool is_exact = true; 
# 544
static constexpr inline int radix = 2; 
# 547
static constexpr signed char epsilon() noexcept { return 0; } 
# 550
static constexpr signed char round_error() noexcept { return 0; } 
# 552
static constexpr inline int min_exponent = 0; 
# 553
static constexpr inline int min_exponent10 = 0; 
# 554
static constexpr inline int max_exponent = 0; 
# 555
static constexpr inline int max_exponent10 = 0; 
# 557
static constexpr inline bool has_infinity = false; 
# 558
static constexpr inline bool has_quiet_NaN = false; 
# 559
static constexpr inline bool has_signaling_NaN = false; 
# 560
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 562
static constexpr inline bool has_denorm_loss = false; 
# 565
static constexpr signed char infinity() noexcept { return static_cast< signed char>(0); } 
# 568
static constexpr signed char quiet_NaN() noexcept { return static_cast< signed char>(0); } 
# 571
static constexpr signed char signaling_NaN() noexcept 
# 572
{ return static_cast< signed char>(0); } 
# 575
static constexpr signed char denorm_min() noexcept 
# 576
{ return static_cast< signed char>(0); } 
# 578
static constexpr inline bool is_iec559 = false; 
# 579
static constexpr inline bool is_bounded = true; 
# 580
static constexpr inline bool is_modulo = false; 
# 582
static constexpr inline bool traps = true; 
# 583
static constexpr inline bool tinyness_before = false; 
# 584
static constexpr inline float_round_style round_style = round_toward_zero; 
# 586
}; 
# 590
template<> struct numeric_limits< unsigned char>  { 
# 592
static constexpr inline bool is_specialized = true; 
# 595
static constexpr unsigned char min() noexcept { return 0; } 
# 598
static constexpr unsigned char max() noexcept { return ((127) * 2U) + (1); } 
# 602
static constexpr unsigned char lowest() noexcept { return min(); } 
# 605
static constexpr inline int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 607
static constexpr inline int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643L)) / (2136)); 
# 610
static constexpr inline int max_digits10 = 0; 
# 612
static constexpr inline bool is_signed = false; 
# 613
static constexpr inline bool is_integer = true; 
# 614
static constexpr inline bool is_exact = true; 
# 615
static constexpr inline int radix = 2; 
# 618
static constexpr unsigned char epsilon() noexcept { return 0; } 
# 621
static constexpr unsigned char round_error() noexcept { return 0; } 
# 623
static constexpr inline int min_exponent = 0; 
# 624
static constexpr inline int min_exponent10 = 0; 
# 625
static constexpr inline int max_exponent = 0; 
# 626
static constexpr inline int max_exponent10 = 0; 
# 628
static constexpr inline bool has_infinity = false; 
# 629
static constexpr inline bool has_quiet_NaN = false; 
# 630
static constexpr inline bool has_signaling_NaN = false; 
# 631
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 633
static constexpr inline bool has_denorm_loss = false; 
# 636
static constexpr unsigned char infinity() noexcept 
# 637
{ return static_cast< unsigned char>(0); } 
# 640
static constexpr unsigned char quiet_NaN() noexcept 
# 641
{ return static_cast< unsigned char>(0); } 
# 644
static constexpr unsigned char signaling_NaN() noexcept 
# 645
{ return static_cast< unsigned char>(0); } 
# 648
static constexpr unsigned char denorm_min() noexcept 
# 649
{ return static_cast< unsigned char>(0); } 
# 651
static constexpr inline bool is_iec559 = false; 
# 652
static constexpr inline bool is_bounded = true; 
# 653
static constexpr inline bool is_modulo = true; 
# 655
static constexpr inline bool traps = true; 
# 656
static constexpr inline bool tinyness_before = false; 
# 657
static constexpr inline float_round_style round_style = round_toward_zero; 
# 659
}; 
# 663
template<> struct numeric_limits< wchar_t>  { 
# 665
static constexpr inline bool is_specialized = true; 
# 668
static constexpr wchar_t min() noexcept { return ((((wchar_t)(-1)) < 0) ? (-((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)))) - 1 : ((wchar_t)0)); } 
# 671
static constexpr wchar_t max() noexcept { return ((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0))); } 
# 675
static constexpr wchar_t lowest() noexcept { return min(); } 
# 678
static constexpr inline int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 679
static constexpr inline int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643L)) / (2136)); 
# 682
static constexpr inline int max_digits10 = 0; 
# 684
static constexpr inline bool is_signed = (((wchar_t)(-1)) < 0); 
# 685
static constexpr inline bool is_integer = true; 
# 686
static constexpr inline bool is_exact = true; 
# 687
static constexpr inline int radix = 2; 
# 690
static constexpr wchar_t epsilon() noexcept { return 0; } 
# 693
static constexpr wchar_t round_error() noexcept { return 0; } 
# 695
static constexpr inline int min_exponent = 0; 
# 696
static constexpr inline int min_exponent10 = 0; 
# 697
static constexpr inline int max_exponent = 0; 
# 698
static constexpr inline int max_exponent10 = 0; 
# 700
static constexpr inline bool has_infinity = false; 
# 701
static constexpr inline bool has_quiet_NaN = false; 
# 702
static constexpr inline bool has_signaling_NaN = false; 
# 703
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 705
static constexpr inline bool has_denorm_loss = false; 
# 708
static constexpr wchar_t infinity() noexcept { return ((wchar_t)0); } 
# 711
static constexpr wchar_t quiet_NaN() noexcept { return ((wchar_t)0); } 
# 714
static constexpr wchar_t signaling_NaN() noexcept { return ((wchar_t)0); } 
# 717
static constexpr wchar_t denorm_min() noexcept { return ((wchar_t)0); } 
# 719
static constexpr inline bool is_iec559 = false; 
# 720
static constexpr inline bool is_bounded = true; 
# 721
static constexpr inline bool is_modulo = (!is_signed); 
# 723
static constexpr inline bool traps = true; 
# 724
static constexpr inline bool tinyness_before = false; 
# 725
static constexpr inline float_round_style round_style = round_toward_zero; 
# 727
}; 
# 797 "/usr/include/c++/12.2.1/limits" 3
template<> struct numeric_limits< char16_t>  { 
# 799
static constexpr inline bool is_specialized = true; 
# 802
static constexpr char16_t min() noexcept { return ((((char16_t)(-1)) < 0) ? (-((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)))) - 1 : ((char16_t)0)); } 
# 805
static constexpr char16_t max() noexcept { return ((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0))); } 
# 808
static constexpr char16_t lowest() noexcept { return min(); } 
# 810
static constexpr inline int digits = ((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)); 
# 811
static constexpr inline int digits10 = ((((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) * (643L)) / (2136)); 
# 812
static constexpr inline int max_digits10 = 0; 
# 813
static constexpr inline bool is_signed = (((char16_t)(-1)) < 0); 
# 814
static constexpr inline bool is_integer = true; 
# 815
static constexpr inline bool is_exact = true; 
# 816
static constexpr inline int radix = 2; 
# 819
static constexpr char16_t epsilon() noexcept { return 0; } 
# 822
static constexpr char16_t round_error() noexcept { return 0; } 
# 824
static constexpr inline int min_exponent = 0; 
# 825
static constexpr inline int min_exponent10 = 0; 
# 826
static constexpr inline int max_exponent = 0; 
# 827
static constexpr inline int max_exponent10 = 0; 
# 829
static constexpr inline bool has_infinity = false; 
# 830
static constexpr inline bool has_quiet_NaN = false; 
# 831
static constexpr inline bool has_signaling_NaN = false; 
# 832
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 833
static constexpr inline bool has_denorm_loss = false; 
# 836
static constexpr char16_t infinity() noexcept { return ((char16_t)0); } 
# 839
static constexpr char16_t quiet_NaN() noexcept { return ((char16_t)0); } 
# 842
static constexpr char16_t signaling_NaN() noexcept { return ((char16_t)0); } 
# 845
static constexpr char16_t denorm_min() noexcept { return ((char16_t)0); } 
# 847
static constexpr inline bool is_iec559 = false; 
# 848
static constexpr inline bool is_bounded = true; 
# 849
static constexpr inline bool is_modulo = (!is_signed); 
# 851
static constexpr inline bool traps = true; 
# 852
static constexpr inline bool tinyness_before = false; 
# 853
static constexpr inline float_round_style round_style = round_toward_zero; 
# 854
}; 
# 858
template<> struct numeric_limits< char32_t>  { 
# 860
static constexpr inline bool is_specialized = true; 
# 863
static constexpr char32_t min() noexcept { return ((((char32_t)(-1)) < (0)) ? (-((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)))) - (1) : ((char32_t)0)); } 
# 866
static constexpr char32_t max() noexcept { return ((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0))); } 
# 869
static constexpr char32_t lowest() noexcept { return min(); } 
# 871
static constexpr inline int digits = ((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))); 
# 872
static constexpr inline int digits10 = ((((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) * (643L)) / (2136)); 
# 873
static constexpr inline int max_digits10 = 0; 
# 874
static constexpr inline bool is_signed = (((char32_t)(-1)) < (0)); 
# 875
static constexpr inline bool is_integer = true; 
# 876
static constexpr inline bool is_exact = true; 
# 877
static constexpr inline int radix = 2; 
# 880
static constexpr char32_t epsilon() noexcept { return 0; } 
# 883
static constexpr char32_t round_error() noexcept { return 0; } 
# 885
static constexpr inline int min_exponent = 0; 
# 886
static constexpr inline int min_exponent10 = 0; 
# 887
static constexpr inline int max_exponent = 0; 
# 888
static constexpr inline int max_exponent10 = 0; 
# 890
static constexpr inline bool has_infinity = false; 
# 891
static constexpr inline bool has_quiet_NaN = false; 
# 892
static constexpr inline bool has_signaling_NaN = false; 
# 893
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 894
static constexpr inline bool has_denorm_loss = false; 
# 897
static constexpr char32_t infinity() noexcept { return ((char32_t)0); } 
# 900
static constexpr char32_t quiet_NaN() noexcept { return ((char32_t)0); } 
# 903
static constexpr char32_t signaling_NaN() noexcept { return ((char32_t)0); } 
# 906
static constexpr char32_t denorm_min() noexcept { return ((char32_t)0); } 
# 908
static constexpr inline bool is_iec559 = false; 
# 909
static constexpr inline bool is_bounded = true; 
# 910
static constexpr inline bool is_modulo = (!is_signed); 
# 912
static constexpr inline bool traps = true; 
# 913
static constexpr inline bool tinyness_before = false; 
# 914
static constexpr inline float_round_style round_style = round_toward_zero; 
# 915
}; 
# 920
template<> struct numeric_limits< short>  { 
# 922
static constexpr inline bool is_specialized = true; 
# 925
static constexpr short min() noexcept { return (-32767) - 1; } 
# 928
static constexpr short max() noexcept { return 32767; } 
# 932
static constexpr short lowest() noexcept { return min(); } 
# 935
static constexpr inline int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 936
static constexpr inline int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643L)) / (2136)); 
# 938
static constexpr inline int max_digits10 = 0; 
# 940
static constexpr inline bool is_signed = true; 
# 941
static constexpr inline bool is_integer = true; 
# 942
static constexpr inline bool is_exact = true; 
# 943
static constexpr inline int radix = 2; 
# 946
static constexpr short epsilon() noexcept { return 0; } 
# 949
static constexpr short round_error() noexcept { return 0; } 
# 951
static constexpr inline int min_exponent = 0; 
# 952
static constexpr inline int min_exponent10 = 0; 
# 953
static constexpr inline int max_exponent = 0; 
# 954
static constexpr inline int max_exponent10 = 0; 
# 956
static constexpr inline bool has_infinity = false; 
# 957
static constexpr inline bool has_quiet_NaN = false; 
# 958
static constexpr inline bool has_signaling_NaN = false; 
# 959
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 961
static constexpr inline bool has_denorm_loss = false; 
# 964
static constexpr short infinity() noexcept { return ((short)0); } 
# 967
static constexpr short quiet_NaN() noexcept { return ((short)0); } 
# 970
static constexpr short signaling_NaN() noexcept { return ((short)0); } 
# 973
static constexpr short denorm_min() noexcept { return ((short)0); } 
# 975
static constexpr inline bool is_iec559 = false; 
# 976
static constexpr inline bool is_bounded = true; 
# 977
static constexpr inline bool is_modulo = false; 
# 979
static constexpr inline bool traps = true; 
# 980
static constexpr inline bool tinyness_before = false; 
# 981
static constexpr inline float_round_style round_style = round_toward_zero; 
# 983
}; 
# 987
template<> struct numeric_limits< unsigned short>  { 
# 989
static constexpr inline bool is_specialized = true; 
# 992
static constexpr unsigned short min() noexcept { return 0; } 
# 995
static constexpr unsigned short max() noexcept { return ((32767) * 2U) + (1); } 
# 999
static constexpr unsigned short lowest() noexcept { return min(); } 
# 1002
static constexpr inline int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 1004
static constexpr inline int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643L)) / (2136)); 
# 1007
static constexpr inline int max_digits10 = 0; 
# 1009
static constexpr inline bool is_signed = false; 
# 1010
static constexpr inline bool is_integer = true; 
# 1011
static constexpr inline bool is_exact = true; 
# 1012
static constexpr inline int radix = 2; 
# 1015
static constexpr unsigned short epsilon() noexcept { return 0; } 
# 1018
static constexpr unsigned short round_error() noexcept { return 0; } 
# 1020
static constexpr inline int min_exponent = 0; 
# 1021
static constexpr inline int min_exponent10 = 0; 
# 1022
static constexpr inline int max_exponent = 0; 
# 1023
static constexpr inline int max_exponent10 = 0; 
# 1025
static constexpr inline bool has_infinity = false; 
# 1026
static constexpr inline bool has_quiet_NaN = false; 
# 1027
static constexpr inline bool has_signaling_NaN = false; 
# 1028
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1030
static constexpr inline bool has_denorm_loss = false; 
# 1033
static constexpr unsigned short infinity() noexcept 
# 1034
{ return static_cast< unsigned short>(0); } 
# 1037
static constexpr unsigned short quiet_NaN() noexcept 
# 1038
{ return static_cast< unsigned short>(0); } 
# 1041
static constexpr unsigned short signaling_NaN() noexcept 
# 1042
{ return static_cast< unsigned short>(0); } 
# 1045
static constexpr unsigned short denorm_min() noexcept 
# 1046
{ return static_cast< unsigned short>(0); } 
# 1048
static constexpr inline bool is_iec559 = false; 
# 1049
static constexpr inline bool is_bounded = true; 
# 1050
static constexpr inline bool is_modulo = true; 
# 1052
static constexpr inline bool traps = true; 
# 1053
static constexpr inline bool tinyness_before = false; 
# 1054
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1056
}; 
# 1060
template<> struct numeric_limits< int>  { 
# 1062
static constexpr inline bool is_specialized = true; 
# 1065
static constexpr int min() noexcept { return (-2147483647) - 1; } 
# 1068
static constexpr int max() noexcept { return 2147483647; } 
# 1072
static constexpr int lowest() noexcept { return min(); } 
# 1075
static constexpr inline int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 1076
static constexpr inline int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643L)) / (2136)); 
# 1078
static constexpr inline int max_digits10 = 0; 
# 1080
static constexpr inline bool is_signed = true; 
# 1081
static constexpr inline bool is_integer = true; 
# 1082
static constexpr inline bool is_exact = true; 
# 1083
static constexpr inline int radix = 2; 
# 1086
static constexpr int epsilon() noexcept { return 0; } 
# 1089
static constexpr int round_error() noexcept { return 0; } 
# 1091
static constexpr inline int min_exponent = 0; 
# 1092
static constexpr inline int min_exponent10 = 0; 
# 1093
static constexpr inline int max_exponent = 0; 
# 1094
static constexpr inline int max_exponent10 = 0; 
# 1096
static constexpr inline bool has_infinity = false; 
# 1097
static constexpr inline bool has_quiet_NaN = false; 
# 1098
static constexpr inline bool has_signaling_NaN = false; 
# 1099
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1101
static constexpr inline bool has_denorm_loss = false; 
# 1104
static constexpr int infinity() noexcept { return static_cast< int>(0); } 
# 1107
static constexpr int quiet_NaN() noexcept { return static_cast< int>(0); } 
# 1110
static constexpr int signaling_NaN() noexcept { return static_cast< int>(0); } 
# 1113
static constexpr int denorm_min() noexcept { return static_cast< int>(0); } 
# 1115
static constexpr inline bool is_iec559 = false; 
# 1116
static constexpr inline bool is_bounded = true; 
# 1117
static constexpr inline bool is_modulo = false; 
# 1119
static constexpr inline bool traps = true; 
# 1120
static constexpr inline bool tinyness_before = false; 
# 1121
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1123
}; 
# 1127
template<> struct numeric_limits< unsigned>  { 
# 1129
static constexpr inline bool is_specialized = true; 
# 1132
static constexpr unsigned min() noexcept { return 0; } 
# 1135
static constexpr unsigned max() noexcept { return ((2147483647) * 2U) + (1); } 
# 1139
static constexpr unsigned lowest() noexcept { return min(); } 
# 1142
static constexpr inline int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 1144
static constexpr inline int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643L)) / (2136)); 
# 1147
static constexpr inline int max_digits10 = 0; 
# 1149
static constexpr inline bool is_signed = false; 
# 1150
static constexpr inline bool is_integer = true; 
# 1151
static constexpr inline bool is_exact = true; 
# 1152
static constexpr inline int radix = 2; 
# 1155
static constexpr unsigned epsilon() noexcept { return 0; } 
# 1158
static constexpr unsigned round_error() noexcept { return 0; } 
# 1160
static constexpr inline int min_exponent = 0; 
# 1161
static constexpr inline int min_exponent10 = 0; 
# 1162
static constexpr inline int max_exponent = 0; 
# 1163
static constexpr inline int max_exponent10 = 0; 
# 1165
static constexpr inline bool has_infinity = false; 
# 1166
static constexpr inline bool has_quiet_NaN = false; 
# 1167
static constexpr inline bool has_signaling_NaN = false; 
# 1168
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1170
static constexpr inline bool has_denorm_loss = false; 
# 1173
static constexpr unsigned infinity() noexcept { return static_cast< unsigned>(0); } 
# 1176
static constexpr unsigned quiet_NaN() noexcept 
# 1177
{ return static_cast< unsigned>(0); } 
# 1180
static constexpr unsigned signaling_NaN() noexcept 
# 1181
{ return static_cast< unsigned>(0); } 
# 1184
static constexpr unsigned denorm_min() noexcept 
# 1185
{ return static_cast< unsigned>(0); } 
# 1187
static constexpr inline bool is_iec559 = false; 
# 1188
static constexpr inline bool is_bounded = true; 
# 1189
static constexpr inline bool is_modulo = true; 
# 1191
static constexpr inline bool traps = true; 
# 1192
static constexpr inline bool tinyness_before = false; 
# 1193
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1195
}; 
# 1199
template<> struct numeric_limits< long>  { 
# 1201
static constexpr inline bool is_specialized = true; 
# 1204
static constexpr long min() noexcept { return (-9223372036854775807L) - (1); } 
# 1207
static constexpr long max() noexcept { return 9223372036854775807L; } 
# 1211
static constexpr long lowest() noexcept { return min(); } 
# 1214
static constexpr inline int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 1215
static constexpr inline int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643L)) / (2136)); 
# 1217
static constexpr inline int max_digits10 = 0; 
# 1219
static constexpr inline bool is_signed = true; 
# 1220
static constexpr inline bool is_integer = true; 
# 1221
static constexpr inline bool is_exact = true; 
# 1222
static constexpr inline int radix = 2; 
# 1225
static constexpr long epsilon() noexcept { return 0; } 
# 1228
static constexpr long round_error() noexcept { return 0; } 
# 1230
static constexpr inline int min_exponent = 0; 
# 1231
static constexpr inline int min_exponent10 = 0; 
# 1232
static constexpr inline int max_exponent = 0; 
# 1233
static constexpr inline int max_exponent10 = 0; 
# 1235
static constexpr inline bool has_infinity = false; 
# 1236
static constexpr inline bool has_quiet_NaN = false; 
# 1237
static constexpr inline bool has_signaling_NaN = false; 
# 1238
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1240
static constexpr inline bool has_denorm_loss = false; 
# 1243
static constexpr long infinity() noexcept { return static_cast< long>(0); } 
# 1246
static constexpr long quiet_NaN() noexcept { return static_cast< long>(0); } 
# 1249
static constexpr long signaling_NaN() noexcept { return static_cast< long>(0); } 
# 1252
static constexpr long denorm_min() noexcept { return static_cast< long>(0); } 
# 1254
static constexpr inline bool is_iec559 = false; 
# 1255
static constexpr inline bool is_bounded = true; 
# 1256
static constexpr inline bool is_modulo = false; 
# 1258
static constexpr inline bool traps = true; 
# 1259
static constexpr inline bool tinyness_before = false; 
# 1260
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1262
}; 
# 1266
template<> struct numeric_limits< unsigned long>  { 
# 1268
static constexpr inline bool is_specialized = true; 
# 1271
static constexpr unsigned long min() noexcept { return 0; } 
# 1274
static constexpr unsigned long max() noexcept { return ((9223372036854775807L) * 2UL) + (1); } 
# 1278
static constexpr unsigned long lowest() noexcept { return min(); } 
# 1281
static constexpr inline int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 1283
static constexpr inline int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643L)) / (2136)); 
# 1286
static constexpr inline int max_digits10 = 0; 
# 1288
static constexpr inline bool is_signed = false; 
# 1289
static constexpr inline bool is_integer = true; 
# 1290
static constexpr inline bool is_exact = true; 
# 1291
static constexpr inline int radix = 2; 
# 1294
static constexpr unsigned long epsilon() noexcept { return 0; } 
# 1297
static constexpr unsigned long round_error() noexcept { return 0; } 
# 1299
static constexpr inline int min_exponent = 0; 
# 1300
static constexpr inline int min_exponent10 = 0; 
# 1301
static constexpr inline int max_exponent = 0; 
# 1302
static constexpr inline int max_exponent10 = 0; 
# 1304
static constexpr inline bool has_infinity = false; 
# 1305
static constexpr inline bool has_quiet_NaN = false; 
# 1306
static constexpr inline bool has_signaling_NaN = false; 
# 1307
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1309
static constexpr inline bool has_denorm_loss = false; 
# 1312
static constexpr unsigned long infinity() noexcept 
# 1313
{ return static_cast< unsigned long>(0); } 
# 1316
static constexpr unsigned long quiet_NaN() noexcept 
# 1317
{ return static_cast< unsigned long>(0); } 
# 1320
static constexpr unsigned long signaling_NaN() noexcept 
# 1321
{ return static_cast< unsigned long>(0); } 
# 1324
static constexpr unsigned long denorm_min() noexcept 
# 1325
{ return static_cast< unsigned long>(0); } 
# 1327
static constexpr inline bool is_iec559 = false; 
# 1328
static constexpr inline bool is_bounded = true; 
# 1329
static constexpr inline bool is_modulo = true; 
# 1331
static constexpr inline bool traps = true; 
# 1332
static constexpr inline bool tinyness_before = false; 
# 1333
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1335
}; 
# 1339
template<> struct numeric_limits< long long>  { 
# 1341
static constexpr inline bool is_specialized = true; 
# 1344
static constexpr long long min() noexcept { return (-9223372036854775807LL) - (1); } 
# 1347
static constexpr long long max() noexcept { return 9223372036854775807LL; } 
# 1351
static constexpr long long lowest() noexcept { return min(); } 
# 1354
static constexpr inline int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 1356
static constexpr inline int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1359
static constexpr inline int max_digits10 = 0; 
# 1361
static constexpr inline bool is_signed = true; 
# 1362
static constexpr inline bool is_integer = true; 
# 1363
static constexpr inline bool is_exact = true; 
# 1364
static constexpr inline int radix = 2; 
# 1367
static constexpr long long epsilon() noexcept { return 0; } 
# 1370
static constexpr long long round_error() noexcept { return 0; } 
# 1372
static constexpr inline int min_exponent = 0; 
# 1373
static constexpr inline int min_exponent10 = 0; 
# 1374
static constexpr inline int max_exponent = 0; 
# 1375
static constexpr inline int max_exponent10 = 0; 
# 1377
static constexpr inline bool has_infinity = false; 
# 1378
static constexpr inline bool has_quiet_NaN = false; 
# 1379
static constexpr inline bool has_signaling_NaN = false; 
# 1380
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1382
static constexpr inline bool has_denorm_loss = false; 
# 1385
static constexpr long long infinity() noexcept { return static_cast< long long>(0); } 
# 1388
static constexpr long long quiet_NaN() noexcept { return static_cast< long long>(0); } 
# 1391
static constexpr long long signaling_NaN() noexcept 
# 1392
{ return static_cast< long long>(0); } 
# 1395
static constexpr long long denorm_min() noexcept { return static_cast< long long>(0); } 
# 1397
static constexpr inline bool is_iec559 = false; 
# 1398
static constexpr inline bool is_bounded = true; 
# 1399
static constexpr inline bool is_modulo = false; 
# 1401
static constexpr inline bool traps = true; 
# 1402
static constexpr inline bool tinyness_before = false; 
# 1403
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1405
}; 
# 1409
template<> struct numeric_limits< unsigned long long>  { 
# 1411
static constexpr inline bool is_specialized = true; 
# 1414
static constexpr unsigned long long min() noexcept { return 0; } 
# 1417
static constexpr unsigned long long max() noexcept { return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1421
static constexpr unsigned long long lowest() noexcept { return min(); } 
# 1424
static constexpr inline int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1426
static constexpr inline int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1429
static constexpr inline int max_digits10 = 0; 
# 1431
static constexpr inline bool is_signed = false; 
# 1432
static constexpr inline bool is_integer = true; 
# 1433
static constexpr inline bool is_exact = true; 
# 1434
static constexpr inline int radix = 2; 
# 1437
static constexpr unsigned long long epsilon() noexcept { return 0; } 
# 1440
static constexpr unsigned long long round_error() noexcept { return 0; } 
# 1442
static constexpr inline int min_exponent = 0; 
# 1443
static constexpr inline int min_exponent10 = 0; 
# 1444
static constexpr inline int max_exponent = 0; 
# 1445
static constexpr inline int max_exponent10 = 0; 
# 1447
static constexpr inline bool has_infinity = false; 
# 1448
static constexpr inline bool has_quiet_NaN = false; 
# 1449
static constexpr inline bool has_signaling_NaN = false; 
# 1450
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1452
static constexpr inline bool has_denorm_loss = false; 
# 1455
static constexpr unsigned long long infinity() noexcept 
# 1456
{ return static_cast< unsigned long long>(0); } 
# 1459
static constexpr unsigned long long quiet_NaN() noexcept 
# 1460
{ return static_cast< unsigned long long>(0); } 
# 1463
static constexpr unsigned long long signaling_NaN() noexcept 
# 1464
{ return static_cast< unsigned long long>(0); } 
# 1467
static constexpr unsigned long long denorm_min() noexcept 
# 1468
{ return static_cast< unsigned long long>(0); } 
# 1470
static constexpr inline bool is_iec559 = false; 
# 1471
static constexpr inline bool is_bounded = true; 
# 1472
static constexpr inline bool is_modulo = true; 
# 1474
static constexpr inline bool traps = true; 
# 1475
static constexpr inline bool tinyness_before = false; 
# 1476
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1478
}; 
# 1658 "/usr/include/c++/12.2.1/limits" 3
template<> struct numeric_limits< __int128>  { static constexpr inline bool is_specialized = true; static constexpr __int128 min() noexcept { return ((((__int128)(-1)) < (0)) ? (-((((__int128)(-1)) < (0)) ? (((((__int128)1) << ((128 - (((__int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128)0)))) - (1) : ((__int128)0)); } static constexpr __int128 max() noexcept { return ((((__int128)(-1)) < (0)) ? (((((__int128)1) << ((128 - (((__int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128)0))); } static constexpr inline int digits = (128 - 1); static constexpr inline int digits10 = (((128 - 1) * 643L) / (2136)); static constexpr inline bool is_signed = true; static constexpr inline bool is_integer = true; static constexpr inline bool is_exact = true; static constexpr inline int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr inline int max_digits10 = 0; static constexpr inline int min_exponent = 0; static constexpr inline int min_exponent10 = 0; static constexpr inline int max_exponent = 0; static constexpr inline int max_exponent10 = 0; static constexpr inline bool has_infinity = false; static constexpr inline bool has_quiet_NaN = false; static constexpr inline bool has_signaling_NaN = false; static constexpr inline float_denorm_style has_denorm = denorm_absent; static constexpr inline bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast< __int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast< __int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast< __int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast< __int128>(0); } static constexpr inline bool is_iec559 = false; static constexpr inline bool is_bounded = true; static constexpr inline bool is_modulo = false; static constexpr inline bool traps = true; static constexpr inline bool tinyness_before = false; static constexpr inline float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits< unsigned __int128>  { static constexpr inline bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return ((((unsigned __int128)(-1)) < (0)) ? (((((unsigned __int128)1) << ((128 - (((unsigned __int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((unsigned __int128)0))); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr inline int max_digits10 = 0; static constexpr inline int digits = 128; static constexpr inline int digits10 = (((128) * 643L) / (2136)); static constexpr inline bool is_signed = false; static constexpr inline bool is_integer = true; static constexpr inline bool is_exact = true; static constexpr inline int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr inline int min_exponent = 0; static constexpr inline int min_exponent10 = 0; static constexpr inline int max_exponent = 0; static constexpr inline int max_exponent10 = 0; static constexpr inline bool has_infinity = false; static constexpr inline bool has_quiet_NaN = false; static constexpr inline bool has_signaling_NaN = false; static constexpr inline float_denorm_style has_denorm = denorm_absent; static constexpr inline bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast< unsigned __int128>(0); } static constexpr inline bool is_iec559 = false; static constexpr inline bool is_bounded = true; static constexpr inline bool is_modulo = true; static constexpr inline bool traps = true; static constexpr inline bool tinyness_before = false; static constexpr inline float_round_style round_style = round_toward_zero; }; 
# 1670 "/usr/include/c++/12.2.1/limits" 3
template<> struct numeric_limits< float>  { 
# 1672
static constexpr inline bool is_specialized = true; 
# 1675
static constexpr float min() noexcept { return (1.1754944E-38F); } 
# 1678
static constexpr float max() noexcept { return (3.4028235E38F); } 
# 1682
static constexpr float lowest() noexcept { return -(3.4028235E38F); } 
# 1685
static constexpr inline int digits = 24; 
# 1686
static constexpr inline int digits10 = 6; 
# 1688
static constexpr inline int max_digits10 = ((2) + (((24) * 643L) / (2136))); 
# 1691
static constexpr inline bool is_signed = true; 
# 1692
static constexpr inline bool is_integer = false; 
# 1693
static constexpr inline bool is_exact = false; 
# 1694
static constexpr inline int radix = 2; 
# 1697
static constexpr float epsilon() noexcept { return (1.1920929E-7F); } 
# 1700
static constexpr float round_error() noexcept { return (0.5F); } 
# 1702
static constexpr inline int min_exponent = (-125); 
# 1703
static constexpr inline int min_exponent10 = (-37); 
# 1704
static constexpr inline int max_exponent = 128; 
# 1705
static constexpr inline int max_exponent10 = 38; 
# 1707
static constexpr inline bool has_infinity = (1); 
# 1708
static constexpr inline bool has_quiet_NaN = (1); 
# 1709
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1710
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1712
static constexpr inline bool has_denorm_loss = false; 
# 1716
static constexpr float infinity() noexcept { return __builtin_huge_valf(); } 
# 1719
static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 1722
static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 1725
static constexpr float denorm_min() noexcept { return (1.4E-45F); } 
# 1727
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1729
static constexpr inline bool is_bounded = true; 
# 1730
static constexpr inline bool is_modulo = false; 
# 1732
static constexpr inline bool traps = false; 
# 1733
static constexpr inline bool tinyness_before = false; 
# 1735
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1737
}; 
# 1745
template<> struct numeric_limits< double>  { 
# 1747
static constexpr inline bool is_specialized = true; 
# 1750
static constexpr double min() noexcept { return (double)(2.2250738585072013831E-308L); } 
# 1753
static constexpr double max() noexcept { return (double)(1.7976931348623157081E308L); } 
# 1757
static constexpr double lowest() noexcept { return -((double)(1.7976931348623157081E308L)); } 
# 1760
static constexpr inline int digits = 53; 
# 1761
static constexpr inline int digits10 = 15; 
# 1763
static constexpr inline int max_digits10 = ((2) + (((53) * 643L) / (2136))); 
# 1766
static constexpr inline bool is_signed = true; 
# 1767
static constexpr inline bool is_integer = false; 
# 1768
static constexpr inline bool is_exact = false; 
# 1769
static constexpr inline int radix = 2; 
# 1772
static constexpr double epsilon() noexcept { return (double)(2.2204460492503130808E-16L); } 
# 1775
static constexpr double round_error() noexcept { return (0.5); } 
# 1777
static constexpr inline int min_exponent = (-1021); 
# 1778
static constexpr inline int min_exponent10 = (-307); 
# 1779
static constexpr inline int max_exponent = 1024; 
# 1780
static constexpr inline int max_exponent10 = 308; 
# 1782
static constexpr inline bool has_infinity = (1); 
# 1783
static constexpr inline bool has_quiet_NaN = (1); 
# 1784
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1785
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1787
static constexpr inline bool has_denorm_loss = false; 
# 1791
static constexpr double infinity() noexcept { return __builtin_huge_val(); } 
# 1794
static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); } 
# 1797
static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); } 
# 1800
static constexpr double denorm_min() noexcept { return (double)(4.940656458412465442E-324L); } 
# 1802
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1804
static constexpr inline bool is_bounded = true; 
# 1805
static constexpr inline bool is_modulo = false; 
# 1807
static constexpr inline bool traps = false; 
# 1808
static constexpr inline bool tinyness_before = false; 
# 1810
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1812
}; 
# 1820
template<> struct numeric_limits< long double>  { 
# 1822
static constexpr inline bool is_specialized = true; 
# 1825
static constexpr long double min() noexcept { return (3.3621031431120935063E-4932L); } 
# 1828
static constexpr long double max() noexcept { return (1.189731495357231765E4932L); } 
# 1832
static constexpr long double lowest() noexcept { return -(1.189731495357231765E4932L); } 
# 1835
static constexpr inline int digits = 64; 
# 1836
static constexpr inline int digits10 = 18; 
# 1838
static constexpr inline int max_digits10 = ((2) + (((64) * 643L) / (2136))); 
# 1841
static constexpr inline bool is_signed = true; 
# 1842
static constexpr inline bool is_integer = false; 
# 1843
static constexpr inline bool is_exact = false; 
# 1844
static constexpr inline int radix = 2; 
# 1847
static constexpr long double epsilon() noexcept { return (1.084202172485504434E-19L); } 
# 1850
static constexpr long double round_error() noexcept { return (0.5L); } 
# 1852
static constexpr inline int min_exponent = (-16381); 
# 1853
static constexpr inline int min_exponent10 = (-4931); 
# 1854
static constexpr inline int max_exponent = 16384; 
# 1855
static constexpr inline int max_exponent10 = 4932; 
# 1857
static constexpr inline bool has_infinity = (1); 
# 1858
static constexpr inline bool has_quiet_NaN = (1); 
# 1859
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1860
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1862
static constexpr inline bool has_denorm_loss = false; 
# 1866
static constexpr long double infinity() noexcept { return __builtin_huge_vall(); } 
# 1869
static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); } 
# 1872
static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); } 
# 1875
static constexpr long double denorm_min() noexcept { return (3.6E-4951L); } 
# 1877
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1879
static constexpr inline bool is_bounded = true; 
# 1880
static constexpr inline bool is_modulo = false; 
# 1882
static constexpr inline bool traps = false; 
# 1883
static constexpr inline bool tinyness_before = false; 
# 1885
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1887
}; 
# 1894
}
# 39 "/usr/include/c++/12.2.1/tr1/special_function_util.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/12.2.1/tr1/special_function_util.h" 3
namespace __detail { 
# 55
template< class _Tp> 
# 56
struct __floating_point_constant { 
# 58
static const _Tp __value; 
# 59
}; 
# 63
template< class _Tp> 
# 64
struct __numeric_constants { 
# 67
static _Tp __pi() throw() 
# 68
{ return static_cast< _Tp>((3.1415926535897932385L)); } 
# 70
static _Tp __pi_2() throw() 
# 71
{ return static_cast< _Tp>((1.5707963267948966193L)); } 
# 73
static _Tp __pi_3() throw() 
# 74
{ return static_cast< _Tp>((1.0471975511965977461L)); } 
# 76
static _Tp __pi_4() throw() 
# 77
{ return static_cast< _Tp>((0.78539816339744830963L)); } 
# 79
static _Tp __1_pi() throw() 
# 80
{ return static_cast< _Tp>((0.31830988618379067154L)); } 
# 82
static _Tp __2_sqrtpi() throw() 
# 83
{ return static_cast< _Tp>((1.1283791670955125738L)); } 
# 85
static _Tp __sqrt2() throw() 
# 86
{ return static_cast< _Tp>((1.4142135623730950488L)); } 
# 88
static _Tp __sqrt3() throw() 
# 89
{ return static_cast< _Tp>((1.7320508075688772936L)); } 
# 91
static _Tp __sqrtpio2() throw() 
# 92
{ return static_cast< _Tp>((1.2533141373155002512L)); } 
# 94
static _Tp __sqrt1_2() throw() 
# 95
{ return static_cast< _Tp>((0.7071067811865475244L)); } 
# 97
static _Tp __lnpi() throw() 
# 98
{ return static_cast< _Tp>((1.1447298858494001742L)); } 
# 100
static _Tp __gamma_e() throw() 
# 101
{ return static_cast< _Tp>((0.5772156649015328606L)); } 
# 103
static _Tp __euler() throw() 
# 104
{ return static_cast< _Tp>((2.7182818284590452354L)); } 
# 105
}; 
# 114 "/usr/include/c++/12.2.1/tr1/special_function_util.h" 3
template< class _Tp> inline bool 
# 115
__isnan(_Tp __x) 
# 116
{ return std::isnan(__x); } 
# 133 "/usr/include/c++/12.2.1/tr1/special_function_util.h" 3
}
# 139
}
# 51 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
namespace __detail { 
# 76 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 78
__bernoulli_series(unsigned __n) 
# 79
{ 
# 81
static const _Tp __num[28] = {((_Tp)1UL), ((-((_Tp)1UL)) / ((_Tp)2UL)), (((_Tp)1UL) / ((_Tp)6UL)), ((_Tp)0UL), ((-((_Tp)1UL)) / ((_Tp)30UL)), ((_Tp)0UL), (((_Tp)1UL) / ((_Tp)42UL)), ((_Tp)0UL), ((-((_Tp)1UL)) / ((_Tp)30UL)), ((_Tp)0UL), (((_Tp)5UL) / ((_Tp)66UL)), ((_Tp)0UL), ((-((_Tp)691UL)) / ((_Tp)2730UL)), ((_Tp)0UL), (((_Tp)7UL) / ((_Tp)6UL)), ((_Tp)0UL), ((-((_Tp)3617UL)) / ((_Tp)510UL)), ((_Tp)0UL), (((_Tp)43867UL) / ((_Tp)798UL)), ((_Tp)0UL), ((-((_Tp)174611)) / ((_Tp)330UL)), ((_Tp)0UL), (((_Tp)854513UL) / ((_Tp)138UL)), ((_Tp)0UL), ((-((_Tp)236364091UL)) / ((_Tp)2730UL)), ((_Tp)0UL), (((_Tp)8553103UL) / ((_Tp)6UL)), ((_Tp)0UL)}; 
# 98
if (__n == (0)) { 
# 99
return (_Tp)1; }  
# 101
if (__n == (1)) { 
# 102
return (-((_Tp)1)) / ((_Tp)2); }  
# 105
if ((__n % (2)) == (1)) { 
# 106
return (_Tp)0; }  
# 109
if (__n < (28)) { 
# 110
return __num[__n]; }  
# 113
_Tp __fact = ((_Tp)1); 
# 114
if (((__n / (2)) % (2)) == (0)) { 
# 115
__fact *= ((_Tp)(-1)); }  
# 116
for (unsigned __k = (1); __k <= __n; ++__k) { 
# 117
__fact *= (__k / (((_Tp)2) * __numeric_constants< _Tp> ::__pi())); }  
# 118
__fact *= ((_Tp)2); 
# 120
_Tp __sum = ((_Tp)0); 
# 121
for (unsigned __i = (1); __i < (1000); ++__i) 
# 122
{ 
# 123
_Tp __term = std::pow((_Tp)__i, -((_Tp)__n)); 
# 124
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 125
break; }  
# 126
__sum += __term; 
# 127
}  
# 129
return __fact * __sum; 
# 130
} 
# 139 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> inline _Tp 
# 141
__bernoulli(int __n) 
# 142
{ return __bernoulli_series< _Tp> (__n); } 
# 153 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 155
__log_gamma_bernoulli(_Tp __x) 
# 156
{ 
# 157
_Tp __lg = (((__x - ((_Tp)(0.5L))) * std::log(__x)) - __x) + (((_Tp)(0.5L)) * std::log(((_Tp)2) * __numeric_constants< _Tp> ::__pi())); 
# 161
const _Tp __xx = __x * __x; 
# 162
_Tp __help = ((_Tp)1) / __x; 
# 163
for (unsigned __i = (1); __i < (20); ++__i) 
# 164
{ 
# 165
const _Tp __2i = (_Tp)((2) * __i); 
# 166
__help /= ((__2i * (__2i - ((_Tp)1))) * __xx); 
# 167
__lg += (__bernoulli< _Tp> ((2) * __i) * __help); 
# 168
}  
# 170
return __lg; 
# 171
} 
# 181 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 183
__log_gamma_lanczos(_Tp __x) 
# 184
{ 
# 185
const _Tp __xm1 = __x - ((_Tp)1); 
# 187
static const _Tp __lanczos_cheb_7[9] = {((_Tp)(0.99999999999980993226L)), ((_Tp)(676.52036812188509857L)), ((_Tp)(-(1259.1392167224028704L))), ((_Tp)(771.32342877765307887L)), ((_Tp)(-(176.61502916214059906L))), ((_Tp)(12.507343278686904814L)), ((_Tp)(-(0.1385710952657201169L))), ((_Tp)(9.9843695780195708595E-6L)), ((_Tp)(1.5056327351493115584E-7L))}; 
# 199
static const _Tp __LOGROOT2PI = ((_Tp)(0.9189385332046727418L)); 
# 202
_Tp __sum = (__lanczos_cheb_7[0]); 
# 203
for (unsigned __k = (1); __k < (9); ++__k) { 
# 204
__sum += ((__lanczos_cheb_7[__k]) / (__xm1 + __k)); }  
# 206
const _Tp __term1 = (__xm1 + ((_Tp)(0.5L))) * std::log((__xm1 + ((_Tp)(7.5L))) / __numeric_constants< _Tp> ::__euler()); 
# 209
const _Tp __term2 = __LOGROOT2PI + std::log(__sum); 
# 210
const _Tp __result = __term1 + (__term2 - ((_Tp)7)); 
# 212
return __result; 
# 213
} 
# 225 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 227
__log_gamma(_Tp __x) 
# 228
{ 
# 229
if (__x > ((_Tp)(0.5L))) { 
# 230
return __log_gamma_lanczos(__x); } else 
# 232
{ 
# 233
const _Tp __sin_fact = std::abs(std::sin(__numeric_constants< _Tp> ::__pi() * __x)); 
# 235
if (__sin_fact == ((_Tp)0)) { 
# 236
std::__throw_domain_error("Argument is nonpositive integer in __log_gamma"); }  
# 238
return (__numeric_constants< _Tp> ::__lnpi() - std::log(__sin_fact)) - __log_gamma_lanczos(((_Tp)1) - __x); 
# 241
}  
# 242
} 
# 252 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 254
__log_gamma_sign(_Tp __x) 
# 255
{ 
# 256
if (__x > ((_Tp)0)) { 
# 257
return (_Tp)1; } else 
# 259
{ 
# 260
const _Tp __sin_fact = std::sin(__numeric_constants< _Tp> ::__pi() * __x); 
# 262
if (__sin_fact > ((_Tp)0)) { 
# 263
return 1; } else { 
# 264
if (__sin_fact < ((_Tp)0)) { 
# 265
return -((_Tp)1); } else { 
# 267
return (_Tp)0; }  }  
# 268
}  
# 269
} 
# 283 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 285
__log_bincoef(unsigned __n, unsigned __k) 
# 286
{ 
# 288
static const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 292
_Tp __coeff = (std::lgamma((_Tp)((1) + __n)) - std::lgamma((_Tp)((1) + __k))) - std::lgamma((_Tp)(((1) + __n) - __k)); 
# 300
} 
# 314 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 316
__bincoef(unsigned __n, unsigned __k) 
# 317
{ 
# 319
static const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 323
const _Tp __log_coeff = __log_bincoef< _Tp> (__n, __k); 
# 324
if (__log_coeff > __max_bincoeff) { 
# 325
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 327
return std::exp(__log_coeff); }  
# 328
} 
# 337 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> inline _Tp 
# 339
__gamma(_Tp __x) 
# 340
{ return std::exp(__log_gamma(__x)); } 
# 356 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 358
__psi_series(_Tp __x) 
# 359
{ 
# 360
_Tp __sum = (-__numeric_constants< _Tp> ::__gamma_e()) - (((_Tp)1) / __x); 
# 361
const unsigned __max_iter = (100000); 
# 362
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 363
{ 
# 364
const _Tp __term = __x / (__k * (__k + __x)); 
# 365
__sum += __term; 
# 366
if (std::abs(__term / __sum) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 367
break; }  
# 368
}  
# 369
return __sum; 
# 370
} 
# 386 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 388
__psi_asymp(_Tp __x) 
# 389
{ 
# 390
_Tp __sum = std::log(__x) - (((_Tp)(0.5L)) / __x); 
# 391
const _Tp __xx = __x * __x; 
# 392
_Tp __xp = __xx; 
# 393
const unsigned __max_iter = (100); 
# 394
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 395
{ 
# 396
const _Tp __term = __bernoulli< _Tp> ((2) * __k) / (((2) * __k) * __xp); 
# 397
__sum -= __term; 
# 398
if (std::abs(__term / __sum) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 399
break; }  
# 400
__xp *= __xx; 
# 401
}  
# 402
return __sum; 
# 403
} 
# 417 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 419
__psi(_Tp __x) 
# 420
{ 
# 421
const int __n = static_cast< int>(__x + (0.5L)); 
# 422
const _Tp __eps = ((_Tp)4) * std::template numeric_limits< _Tp> ::epsilon(); 
# 423
if ((__n <= 0) && (std::abs(__x - ((_Tp)__n)) < __eps)) { 
# 424
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 425
if (__x < ((_Tp)0)) 
# 426
{ 
# 427
const _Tp __pi = __numeric_constants< _Tp> ::__pi(); 
# 428
return __psi(((_Tp)1) - __x) - ((__pi * std::cos(__pi * __x)) / std::sin(__pi * __x)); 
# 430
} else { 
# 431
if (__x > ((_Tp)100)) { 
# 432
return __psi_asymp(__x); } else { 
# 434
return __psi_series(__x); }  }  }  
# 435
} 
# 446 "/usr/include/c++/12.2.1/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 448
__psi(unsigned __n, _Tp __x) 
# 449
{ 
# 450
if (__x <= ((_Tp)0)) { 
# 451
std::__throw_domain_error("Argument out of range in __psi"); } else { 
# 453
if (__n == (0)) { 
# 454
return __psi(__x); } else 
# 456
{ 
# 457
const _Tp __hzeta = __hurwitz_zeta((_Tp)(__n + (1)), __x); 
# 459
const _Tp __ln_nfact = std::lgamma((_Tp)(__n + (1))); 
# 463
_Tp __result = std::exp(__ln_nfact) * __hzeta; 
# 464
if ((__n % (2)) == (1)) { 
# 465
__result = (-__result); }  
# 466
return __result; 
# 467
}  }  
# 468
} 
# 469
}
# 476
}
# 55 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 71 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
namespace __detail { 
# 98 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 100
__gamma_temme(_Tp __mu, _Tp &
# 101
__gam1, _Tp &__gam2, _Tp &__gampl, _Tp &__gammi) 
# 102
{ 
# 104
__gampl = (((_Tp)1) / std::tgamma(((_Tp)1) + __mu)); 
# 105
__gammi = (((_Tp)1) / std::tgamma(((_Tp)1) - __mu)); 
# 111
if (std::abs(__mu) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 112
__gam1 = (-((_Tp)__numeric_constants< _Tp> ::__gamma_e())); } else { 
# 114
__gam1 = ((__gammi - __gampl) / (((_Tp)2) * __mu)); }  
# 116
__gam2 = ((__gammi + __gampl) / ((_Tp)2)); 
# 119
} 
# 136 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 138
__bessel_jn(_Tp __nu, _Tp __x, _Tp &
# 139
__Jnu, _Tp &__Nnu, _Tp &__Jpnu, _Tp &__Npnu) 
# 140
{ 
# 141
if (__x == ((_Tp)0)) 
# 142
{ 
# 143
if (__nu == ((_Tp)0)) 
# 144
{ 
# 145
__Jnu = ((_Tp)1); 
# 146
__Jpnu = ((_Tp)0); 
# 147
} else { 
# 148
if (__nu == ((_Tp)1)) 
# 149
{ 
# 150
__Jnu = ((_Tp)0); 
# 151
__Jpnu = ((_Tp)(0.5L)); 
# 152
} else 
# 154
{ 
# 155
__Jnu = ((_Tp)0); 
# 156
__Jpnu = ((_Tp)0); 
# 157
}  }  
# 158
__Nnu = (-std::template numeric_limits< _Tp> ::infinity()); 
# 159
__Npnu = std::template numeric_limits< _Tp> ::infinity(); 
# 160
return; 
# 161
}  
# 163
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 168
const _Tp __fp_min = std::sqrt(std::template numeric_limits< _Tp> ::min()); 
# 169
const int __max_iter = 15000; 
# 170
const _Tp __x_min = ((_Tp)2); 
# 172
const int __nl = (__x < __x_min) ? static_cast< int>(__nu + ((_Tp)(0.5L))) : std::max(0, static_cast< int>((__nu - __x) + ((_Tp)(1.5L)))); 
# 176
const _Tp __mu = __nu - __nl; 
# 177
const _Tp __mu2 = __mu * __mu; 
# 178
const _Tp __xi = ((_Tp)1) / __x; 
# 179
const _Tp __xi2 = ((_Tp)2) * __xi; 
# 180
_Tp __w = __xi2 / __numeric_constants< _Tp> ::__pi(); 
# 181
int __isign = 1; 
# 182
_Tp __h = __nu * __xi; 
# 183
if (__h < __fp_min) { 
# 184
__h = __fp_min; }  
# 185
_Tp __b = __xi2 * __nu; 
# 186
_Tp __d = ((_Tp)0); 
# 187
_Tp __c = __h; 
# 188
int __i; 
# 189
for (__i = 1; __i <= __max_iter; ++__i) 
# 190
{ 
# 191
__b += __xi2; 
# 192
__d = (__b - __d); 
# 193
if (std::abs(__d) < __fp_min) { 
# 194
__d = __fp_min; }  
# 195
__c = (__b - (((_Tp)1) / __c)); 
# 196
if (std::abs(__c) < __fp_min) { 
# 197
__c = __fp_min; }  
# 198
__d = (((_Tp)1) / __d); 
# 199
const _Tp __del = __c * __d; 
# 200
__h *= __del; 
# 201
if (__d < ((_Tp)0)) { 
# 202
__isign = (-__isign); }  
# 203
if (std::abs(__del - ((_Tp)1)) < __eps) { 
# 204
break; }  
# 205
}  
# 206
if (__i > __max_iter) { 
# 207
std::__throw_runtime_error("Argument x too large in __bessel_jn; try asymptotic expansion."); }  
# 209
_Tp __Jnul = __isign * __fp_min; 
# 210
_Tp __Jpnul = __h * __Jnul; 
# 211
_Tp __Jnul1 = __Jnul; 
# 212
_Tp __Jpnu1 = __Jpnul; 
# 213
_Tp __fact = __nu * __xi; 
# 214
for (int __l = __nl; __l >= 1; --__l) 
# 215
{ 
# 216
const _Tp __Jnutemp = (__fact * __Jnul) + __Jpnul; 
# 217
__fact -= __xi; 
# 218
__Jpnul = ((__fact * __Jnutemp) - __Jnul); 
# 219
__Jnul = __Jnutemp; 
# 220
}  
# 221
if (__Jnul == ((_Tp)0)) { 
# 222
__Jnul = __eps; }  
# 223
_Tp __f = __Jpnul / __Jnul; 
# 224
_Tp __Nmu, __Nnu1, __Npmu, __Jmu; 
# 225
if (__x < __x_min) 
# 226
{ 
# 227
const _Tp __x2 = __x / ((_Tp)2); 
# 228
const _Tp __pimu = __numeric_constants< _Tp> ::__pi() * __mu; 
# 229
_Tp __fact = (std::abs(__pimu) < __eps) ? (_Tp)1 : (__pimu / std::sin(__pimu)); 
# 231
_Tp __d = (-std::log(__x2)); 
# 232
_Tp __e = __mu * __d; 
# 233
_Tp __fact2 = (std::abs(__e) < __eps) ? (_Tp)1 : (std::sinh(__e) / __e); 
# 235
_Tp __gam1, __gam2, __gampl, __gammi; 
# 236
__gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi); 
# 237
_Tp __ff = ((((_Tp)2) / __numeric_constants< _Tp> ::__pi()) * __fact) * ((__gam1 * std::cosh(__e)) + ((__gam2 * __fact2) * __d)); 
# 239
__e = std::exp(__e); 
# 240
_Tp __p = __e / (__numeric_constants< _Tp> ::__pi() * __gampl); 
# 241
_Tp __q = ((_Tp)1) / ((__e * __numeric_constants< _Tp> ::__pi()) * __gammi); 
# 242
const _Tp __pimu2 = __pimu / ((_Tp)2); 
# 243
_Tp __fact3 = (std::abs(__pimu2) < __eps) ? (_Tp)1 : (std::sin(__pimu2) / __pimu2); 
# 245
_Tp __r = ((__numeric_constants< _Tp> ::__pi() * __pimu2) * __fact3) * __fact3; 
# 246
_Tp __c = ((_Tp)1); 
# 247
__d = ((-__x2) * __x2); 
# 248
_Tp __sum = __ff + (__r * __q); 
# 249
_Tp __sum1 = __p; 
# 250
for (__i = 1; __i <= __max_iter; ++__i) 
# 251
{ 
# 252
__ff = ((((__i * __ff) + __p) + __q) / ((__i * __i) - __mu2)); 
# 253
__c *= (__d / ((_Tp)__i)); 
# 254
__p /= (((_Tp)__i) - __mu); 
# 255
__q /= (((_Tp)__i) + __mu); 
# 256
const _Tp __del = __c * (__ff + (__r * __q)); 
# 257
__sum += __del; 
# 258
const _Tp __del1 = (__c * __p) - (__i * __del); 
# 259
__sum1 += __del1; 
# 260
if (std::abs(__del) < (__eps * (((_Tp)1) + std::abs(__sum)))) { 
# 261
break; }  
# 262
}  
# 263
if (__i > __max_iter) { 
# 264
std::__throw_runtime_error("Bessel y series failed to converge in __bessel_jn."); }  
# 266
__Nmu = (-__sum); 
# 267
__Nnu1 = ((-__sum1) * __xi2); 
# 268
__Npmu = (((__mu * __xi) * __Nmu) - __Nnu1); 
# 269
__Jmu = (__w / (__Npmu - (__f * __Nmu))); 
# 270
} else 
# 272
{ 
# 273
_Tp __a = ((_Tp)(0.25L)) - __mu2; 
# 274
_Tp __q = ((_Tp)1); 
# 275
_Tp __p = ((-__xi) / ((_Tp)2)); 
# 276
_Tp __br = ((_Tp)2) * __x; 
# 277
_Tp __bi = ((_Tp)2); 
# 278
_Tp __fact = (__a * __xi) / ((__p * __p) + (__q * __q)); 
# 279
_Tp __cr = __br + (__q * __fact); 
# 280
_Tp __ci = __bi + (__p * __fact); 
# 281
_Tp __den = (__br * __br) + (__bi * __bi); 
# 282
_Tp __dr = __br / __den; 
# 283
_Tp __di = (-__bi) / __den; 
# 284
_Tp __dlr = (__cr * __dr) - (__ci * __di); 
# 285
_Tp __dli = (__cr * __di) + (__ci * __dr); 
# 286
_Tp __temp = (__p * __dlr) - (__q * __dli); 
# 287
__q = ((__p * __dli) + (__q * __dlr)); 
# 288
__p = __temp; 
# 289
int __i; 
# 290
for (__i = 2; __i <= __max_iter; ++__i) 
# 291
{ 
# 292
__a += ((_Tp)(2 * (__i - 1))); 
# 293
__bi += ((_Tp)2); 
# 294
__dr = ((__a * __dr) + __br); 
# 295
__di = ((__a * __di) + __bi); 
# 296
if ((std::abs(__dr) + std::abs(__di)) < __fp_min) { 
# 297
__dr = __fp_min; }  
# 298
__fact = (__a / ((__cr * __cr) + (__ci * __ci))); 
# 299
__cr = (__br + (__cr * __fact)); 
# 300
__ci = (__bi - (__ci * __fact)); 
# 301
if ((std::abs(__cr) + std::abs(__ci)) < __fp_min) { 
# 302
__cr = __fp_min; }  
# 303
__den = ((__dr * __dr) + (__di * __di)); 
# 304
__dr /= __den; 
# 305
__di /= (-__den); 
# 306
__dlr = ((__cr * __dr) - (__ci * __di)); 
# 307
__dli = ((__cr * __di) + (__ci * __dr)); 
# 308
__temp = ((__p * __dlr) - (__q * __dli)); 
# 309
__q = ((__p * __dli) + (__q * __dlr)); 
# 310
__p = __temp; 
# 311
if ((std::abs(__dlr - ((_Tp)1)) + std::abs(__dli)) < __eps) { 
# 312
break; }  
# 313
}  
# 314
if (__i > __max_iter) { 
# 315
std::__throw_runtime_error("Lentz\'s method failed in __bessel_jn."); }  
# 317
const _Tp __gam = (__p - __f) / __q; 
# 318
__Jmu = std::sqrt(__w / (((__p - __f) * __gam) + __q)); 
# 320
__Jmu = std::copysign(__Jmu, __Jnul); 
# 325
__Nmu = (__gam * __Jmu); 
# 326
__Npmu = ((__p + (__q / __gam)) * __Nmu); 
# 327
__Nnu1 = (((__mu * __xi) * __Nmu) - __Npmu); 
# 328
}  
# 329
__fact = (__Jmu / __Jnul); 
# 330
__Jnu = (__fact * __Jnul1); 
# 331
__Jpnu = (__fact * __Jpnu1); 
# 332
for (__i = 1; __i <= __nl; ++__i) 
# 333
{ 
# 334
const _Tp __Nnutemp = (((__mu + __i) * __xi2) * __Nnu1) - __Nmu; 
# 335
__Nmu = __Nnu1; 
# 336
__Nnu1 = __Nnutemp; 
# 337
}  
# 338
__Nnu = __Nmu; 
# 339
__Npnu = (((__nu * __xi) * __Nmu) - __Nnu1); 
# 342
} 
# 361 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 363
__cyl_bessel_jn_asymp(_Tp __nu, _Tp __x, _Tp &__Jnu, _Tp &__Nnu) 
# 364
{ 
# 365
const _Tp __mu = (((_Tp)4) * __nu) * __nu; 
# 366
const _Tp __8x = ((_Tp)8) * __x; 
# 368
_Tp __P = ((_Tp)0); 
# 369
_Tp __Q = ((_Tp)0); 
# 371
_Tp __k = ((_Tp)0); 
# 372
_Tp __term = ((_Tp)1); 
# 374
int __epsP = 0; 
# 375
int __epsQ = 0; 
# 377
_Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 379
do 
# 380
{ 
# 381
__term *= ((__k == 0) ? (_Tp)1 : ((-(__mu - (((2 * __k) - 1) * ((2 * __k) - 1)))) / (__k * __8x))); 
# 385
__epsP = (std::abs(__term) < (__eps * std::abs(__P))); 
# 386
__P += __term; 
# 388
__k++; 
# 390
__term *= ((__mu - (((2 * __k) - 1) * ((2 * __k) - 1))) / (__k * __8x)); 
# 391
__epsQ = (std::abs(__term) < (__eps * std::abs(__Q))); 
# 392
__Q += __term; 
# 394
if (__epsP && __epsQ && (__k > (__nu / (2.0)))) { 
# 395
break; }  
# 397
__k++; 
# 398
} 
# 399
while (__k < 1000); 
# 401
const _Tp __chi = __x - ((__nu + ((_Tp)(0.5L))) * __numeric_constants< _Tp> ::__pi_2()); 
# 404
const _Tp __c = std::cos(__chi); 
# 405
const _Tp __s = std::sin(__chi); 
# 407
const _Tp __coef = std::sqrt(((_Tp)2) / (__numeric_constants< _Tp> ::__pi() * __x)); 
# 410
__Jnu = (__coef * ((__c * __P) - (__s * __Q))); 
# 411
__Nnu = (__coef * ((__s * __P) + (__c * __Q))); 
# 414
} 
# 444 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 446
__cyl_bessel_ij_series(_Tp __nu, _Tp __x, _Tp __sgn, unsigned 
# 447
__max_iter) 
# 448
{ 
# 449
if (__x == ((_Tp)0)) { 
# 450
return (__nu == ((_Tp)0)) ? (_Tp)1 : ((_Tp)0); }  
# 452
const _Tp __x2 = __x / ((_Tp)2); 
# 453
_Tp __fact = __nu * std::log(__x2); 
# 455
__fact -= std::lgamma(__nu + ((_Tp)1)); 
# 459
__fact = std::exp(__fact); 
# 460
const _Tp __xx4 = (__sgn * __x2) * __x2; 
# 461
_Tp __Jn = ((_Tp)1); 
# 462
_Tp __term = ((_Tp)1); 
# 464
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 465
{ 
# 466
__term *= (__xx4 / (((_Tp)__i) * (__nu + ((_Tp)__i)))); 
# 467
__Jn += __term; 
# 468
if (std::abs(__term / __Jn) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 469
break; }  
# 470
}  
# 472
return __fact * __Jn; 
# 473
} 
# 490 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 492
__cyl_bessel_j(_Tp __nu, _Tp __x) 
# 493
{ 
# 494
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 495
std::__throw_domain_error("Bad argument in __cyl_bessel_j."); } else { 
# 497
if (__isnan(__nu) || __isnan(__x)) { 
# 498
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 499
if ((__x * __x) < (((_Tp)10) * (__nu + ((_Tp)1)))) { 
# 500
return __cyl_bessel_ij_series(__nu, __x, -((_Tp)1), 200); } else { 
# 501
if (__x > ((_Tp)1000)) 
# 502
{ 
# 503
_Tp __J_nu, __N_nu; 
# 504
__cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu); 
# 505
return __J_nu; 
# 506
} else 
# 508
{ 
# 509
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 510
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 511
return __J_nu; 
# 512
}  }  }  }  
# 513
} 
# 532 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 534
__cyl_neumann_n(_Tp __nu, _Tp __x) 
# 535
{ 
# 536
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 537
std::__throw_domain_error("Bad argument in __cyl_neumann_n."); } else { 
# 539
if (__isnan(__nu) || __isnan(__x)) { 
# 540
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 541
if (__x > ((_Tp)1000)) 
# 542
{ 
# 543
_Tp __J_nu, __N_nu; 
# 544
__cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu); 
# 545
return __N_nu; 
# 546
} else 
# 548
{ 
# 549
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 550
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 551
return __N_nu; 
# 552
}  }  }  
# 553
} 
# 569 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 571
__sph_bessel_jn(unsigned __n, _Tp __x, _Tp &
# 572
__j_n, _Tp &__n_n, _Tp &__jp_n, _Tp &__np_n) 
# 573
{ 
# 574
const _Tp __nu = ((_Tp)__n) + ((_Tp)(0.5L)); 
# 576
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 577
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 579
const _Tp __factor = __numeric_constants< _Tp> ::__sqrtpio2() / std::sqrt(__x); 
# 582
__j_n = (__factor * __J_nu); 
# 583
__n_n = (__factor * __N_nu); 
# 584
__jp_n = ((__factor * __Jp_nu) - (__j_n / (((_Tp)2) * __x))); 
# 585
__np_n = ((__factor * __Np_nu) - (__n_n / (((_Tp)2) * __x))); 
# 588
} 
# 604 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 606
__sph_bessel(unsigned __n, _Tp __x) 
# 607
{ 
# 608
if (__x < ((_Tp)0)) { 
# 609
std::__throw_domain_error("Bad argument in __sph_bessel."); } else { 
# 611
if (__isnan(__x)) { 
# 612
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 613
if (__x == ((_Tp)0)) 
# 614
{ 
# 615
if (__n == (0)) { 
# 616
return (_Tp)1; } else { 
# 618
return (_Tp)0; }  
# 619
} else 
# 621
{ 
# 622
_Tp __j_n, __n_n, __jp_n, __np_n; 
# 623
__sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n); 
# 624
return __j_n; 
# 625
}  }  }  
# 626
} 
# 642 "/usr/include/c++/12.2.1/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 644
__sph_neumann(unsigned __n, _Tp __x) 
# 645
{ 
# 646
if (__x < ((_Tp)0)) { 
# 647
std::__throw_domain_error("Bad argument in __sph_neumann."); } else { 
# 649
if (__isnan(__x)) { 
# 650
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 651
if (__x == ((_Tp)0)) { 
# 652
return -std::template numeric_limits< _Tp> ::infinity(); } else 
# 654
{ 
# 655
_Tp __j_n, __n_n, __jp_n, __np_n; 
# 656
__sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n); 
# 657
return __n_n; 
# 658
}  }  }  
# 659
} 
# 660
}
# 667
}
# 49 "/usr/include/c++/12.2.1/tr1/beta_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/12.2.1/tr1/beta_function.tcc" 3
namespace __detail { 
# 79 "/usr/include/c++/12.2.1/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 81
__beta_gamma(_Tp __x, _Tp __y) 
# 82
{ 
# 84
_Tp __bet; 
# 86
if (__x > __y) 
# 87
{ 
# 88
__bet = (std::tgamma(__x) / std::tgamma(__x + __y)); 
# 90
__bet *= std::tgamma(__y); 
# 91
} else 
# 93
{ 
# 94
__bet = (std::tgamma(__y) / std::tgamma(__x + __y)); 
# 96
__bet *= std::tgamma(__x); 
# 97
}  
# 111 "/usr/include/c++/12.2.1/tr1/beta_function.tcc" 3
return __bet; 
# 112
} 
# 127 "/usr/include/c++/12.2.1/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 129
__beta_lgamma(_Tp __x, _Tp __y) 
# 130
{ 
# 132
_Tp __bet = (std::lgamma(__x) + std::lgamma(__y)) - std::lgamma(__x + __y); 
# 140
__bet = std::exp(__bet); 
# 141
return __bet; 
# 142
} 
# 158 "/usr/include/c++/12.2.1/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 160
__beta_product(_Tp __x, _Tp __y) 
# 161
{ 
# 163
_Tp __bet = (__x + __y) / (__x * __y); 
# 165
unsigned __max_iter = (1000000); 
# 166
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 167
{ 
# 168
_Tp __term = (((_Tp)1) + ((__x + __y) / __k)) / ((((_Tp)1) + (__x / __k)) * (((_Tp)1) + (__y / __k))); 
# 170
__bet *= __term; 
# 171
}  
# 173
return __bet; 
# 174
} 
# 189 "/usr/include/c++/12.2.1/tr1/beta_function.tcc" 3
template< class _Tp> inline _Tp 
# 191
__beta(_Tp __x, _Tp __y) 
# 192
{ 
# 193
if (__isnan(__x) || __isnan(__y)) { 
# 194
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 196
return __beta_lgamma(__x, __y); }  
# 197
} 
# 198
}
# 205
}
# 45 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 59 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
namespace __detail { 
# 76 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 78
__ellint_rf(_Tp __x, _Tp __y, _Tp __z) 
# 79
{ 
# 80
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 81
const _Tp __lolim = ((_Tp)5) * __min; 
# 83
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || (__z < ((_Tp)0))) { 
# 84
std::__throw_domain_error("Argument less than zero in __ellint_rf."); } else { 
# 86
if ((((__x + __y) < __lolim) || ((__x + __z) < __lolim)) || ((__y + __z) < __lolim)) { 
# 88
std::__throw_domain_error("Argument too small in __ellint_rf"); } else 
# 90
{ 
# 91
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 92
const _Tp __c1 = (((_Tp)1) / ((_Tp)24)); 
# 93
const _Tp __c2 = (((_Tp)1) / ((_Tp)10)); 
# 94
const _Tp __c3 = (((_Tp)3) / ((_Tp)44)); 
# 95
const _Tp __c4 = (((_Tp)1) / ((_Tp)14)); 
# 97
_Tp __xn = __x; 
# 98
_Tp __yn = __y; 
# 99
_Tp __zn = __z; 
# 101
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 102
const _Tp __errtol = std::pow(__eps, ((_Tp)1) / ((_Tp)6)); 
# 103
_Tp __mu; 
# 104
_Tp __xndev, __yndev, __zndev; 
# 106
const unsigned __max_iter = (100); 
# 107
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 108
{ 
# 109
__mu = (((__xn + __yn) + __zn) / ((_Tp)3)); 
# 110
__xndev = (2 - ((__mu + __xn) / __mu)); 
# 111
__yndev = (2 - ((__mu + __yn) / __mu)); 
# 112
__zndev = (2 - ((__mu + __zn) / __mu)); 
# 113
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 114
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 115
if (__epsilon < __errtol) { 
# 116
break; }  
# 117
const _Tp __xnroot = std::sqrt(__xn); 
# 118
const _Tp __ynroot = std::sqrt(__yn); 
# 119
const _Tp __znroot = std::sqrt(__zn); 
# 120
const _Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 122
__xn = (__c0 * (__xn + __lambda)); 
# 123
__yn = (__c0 * (__yn + __lambda)); 
# 124
__zn = (__c0 * (__zn + __lambda)); 
# 125
}  
# 127
const _Tp __e2 = (__xndev * __yndev) - (__zndev * __zndev); 
# 128
const _Tp __e3 = (__xndev * __yndev) * __zndev; 
# 129
const _Tp __s = (((_Tp)1) + ((((__c1 * __e2) - __c2) - (__c3 * __e3)) * __e2)) + (__c4 * __e3); 
# 132
return __s / std::sqrt(__mu); 
# 133
}  }  
# 134
} 
# 153 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 155
__comp_ellint_1_series(_Tp __k) 
# 156
{ 
# 158
const _Tp __kk = __k * __k; 
# 160
_Tp __term = __kk / ((_Tp)4); 
# 161
_Tp __sum = ((_Tp)1) + __term; 
# 163
const unsigned __max_iter = (1000); 
# 164
for (unsigned __i = (2); __i < __max_iter; ++__i) 
# 165
{ 
# 166
__term *= (((((2) * __i) - (1)) * __kk) / ((2) * __i)); 
# 167
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 168
break; }  
# 169
__sum += __term; 
# 170
}  
# 172
return __numeric_constants< _Tp> ::__pi_2() * __sum; 
# 173
} 
# 191 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 193
__comp_ellint_1(_Tp __k) 
# 194
{ 
# 196
if (__isnan(__k)) { 
# 197
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 198
if (std::abs(__k) >= ((_Tp)1)) { 
# 199
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 201
return __ellint_rf((_Tp)0, ((_Tp)1) - (__k * __k), (_Tp)1); }  }  
# 202
} 
# 219 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 221
__ellint_1(_Tp __k, _Tp __phi) 
# 222
{ 
# 224
if (__isnan(__k) || __isnan(__phi)) { 
# 225
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 226
if (std::abs(__k) > ((_Tp)1)) { 
# 227
std::__throw_domain_error("Bad argument in __ellint_1."); } else 
# 229
{ 
# 231
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 233
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 236
const _Tp __s = std::sin(__phi_red); 
# 237
const _Tp __c = std::cos(__phi_red); 
# 239
const _Tp __F = __s * __ellint_rf(__c * __c, ((_Tp)1) - (((__k * __k) * __s) * __s), (_Tp)1); 
# 243
if (__n == 0) { 
# 244
return __F; } else { 
# 246
return __F + ((((_Tp)2) * __n) * __comp_ellint_1(__k)); }  
# 247
}  }  
# 248
} 
# 266 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 268
__comp_ellint_2_series(_Tp __k) 
# 269
{ 
# 271
const _Tp __kk = __k * __k; 
# 273
_Tp __term = __kk; 
# 274
_Tp __sum = __term; 
# 276
const unsigned __max_iter = (1000); 
# 277
for (unsigned __i = (2); __i < __max_iter; ++__i) 
# 278
{ 
# 279
const _Tp __i2m = ((2) * __i) - (1); 
# 280
const _Tp __i2 = (2) * __i; 
# 281
__term *= (((__i2m * __i2m) * __kk) / (__i2 * __i2)); 
# 282
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 283
break; }  
# 284
__sum += (__term / __i2m); 
# 285
}  
# 287
return __numeric_constants< _Tp> ::__pi_2() * (((_Tp)1) - __sum); 
# 288
} 
# 314 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 316
__ellint_rd(_Tp __x, _Tp __y, _Tp __z) 
# 317
{ 
# 318
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 319
const _Tp __errtol = std::pow(__eps / ((_Tp)8), ((_Tp)1) / ((_Tp)6)); 
# 320
const _Tp __max = std::template numeric_limits< _Tp> ::max(); 
# 321
const _Tp __lolim = (((_Tp)2) / std::pow(__max, ((_Tp)2) / ((_Tp)3))); 
# 323
if ((__x < ((_Tp)0)) || (__y < ((_Tp)0))) { 
# 324
std::__throw_domain_error("Argument less than zero in __ellint_rd."); } else { 
# 326
if (((__x + __y) < __lolim) || (__z < __lolim)) { 
# 327
std::__throw_domain_error("Argument too small in __ellint_rd."); } else 
# 330
{ 
# 331
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 332
const _Tp __c1 = (((_Tp)3) / ((_Tp)14)); 
# 333
const _Tp __c2 = (((_Tp)1) / ((_Tp)6)); 
# 334
const _Tp __c3 = (((_Tp)9) / ((_Tp)22)); 
# 335
const _Tp __c4 = (((_Tp)3) / ((_Tp)26)); 
# 337
_Tp __xn = __x; 
# 338
_Tp __yn = __y; 
# 339
_Tp __zn = __z; 
# 340
_Tp __sigma = ((_Tp)0); 
# 341
_Tp __power4 = ((_Tp)1); 
# 343
_Tp __mu; 
# 344
_Tp __xndev, __yndev, __zndev; 
# 346
const unsigned __max_iter = (100); 
# 347
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 348
{ 
# 349
__mu = (((__xn + __yn) + (((_Tp)3) * __zn)) / ((_Tp)5)); 
# 350
__xndev = ((__mu - __xn) / __mu); 
# 351
__yndev = ((__mu - __yn) / __mu); 
# 352
__zndev = ((__mu - __zn) / __mu); 
# 353
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 354
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 355
if (__epsilon < __errtol) { 
# 356
break; }  
# 357
_Tp __xnroot = std::sqrt(__xn); 
# 358
_Tp __ynroot = std::sqrt(__yn); 
# 359
_Tp __znroot = std::sqrt(__zn); 
# 360
_Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 362
__sigma += (__power4 / (__znroot * (__zn + __lambda))); 
# 363
__power4 *= __c0; 
# 364
__xn = (__c0 * (__xn + __lambda)); 
# 365
__yn = (__c0 * (__yn + __lambda)); 
# 366
__zn = (__c0 * (__zn + __lambda)); 
# 367
}  
# 369
_Tp __ea = __xndev * __yndev; 
# 370
_Tp __eb = __zndev * __zndev; 
# 371
_Tp __ec = __ea - __eb; 
# 372
_Tp __ed = __ea - (((_Tp)6) * __eb); 
# 373
_Tp __ef = (__ed + __ec) + __ec; 
# 374
_Tp __s1 = __ed * (((-__c1) + ((__c3 * __ed) / ((_Tp)3))) - ((((((_Tp)3) * __c4) * __zndev) * __ef) / ((_Tp)2))); 
# 377
_Tp __s2 = __zndev * ((__c2 * __ef) + (__zndev * ((((-__c3) * __ec) - (__zndev * __c4)) - __ea))); 
# 381
return (((_Tp)3) * __sigma) + ((__power4 * ((((_Tp)1) + __s1) + __s2)) / (__mu * std::sqrt(__mu))); 
# 383
}  }  
# 384
} 
# 399 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 401
__comp_ellint_2(_Tp __k) 
# 402
{ 
# 404
if (__isnan(__k)) { 
# 405
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 406
if (std::abs(__k) == 1) { 
# 407
return (_Tp)1; } else { 
# 408
if (std::abs(__k) > ((_Tp)1)) { 
# 409
std::__throw_domain_error("Bad argument in __comp_ellint_2."); } else 
# 411
{ 
# 412
const _Tp __kk = __k * __k; 
# 414
return __ellint_rf((_Tp)0, ((_Tp)1) - __kk, (_Tp)1) - ((__kk * __ellint_rd((_Tp)0, ((_Tp)1) - __kk, (_Tp)1)) / ((_Tp)3)); 
# 416
}  }  }  
# 417
} 
# 433 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 435
__ellint_2(_Tp __k, _Tp __phi) 
# 436
{ 
# 438
if (__isnan(__k) || __isnan(__phi)) { 
# 439
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 440
if (std::abs(__k) > ((_Tp)1)) { 
# 441
std::__throw_domain_error("Bad argument in __ellint_2."); } else 
# 443
{ 
# 445
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 447
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 450
const _Tp __kk = __k * __k; 
# 451
const _Tp __s = std::sin(__phi_red); 
# 452
const _Tp __ss = __s * __s; 
# 453
const _Tp __sss = __ss * __s; 
# 454
const _Tp __c = std::cos(__phi_red); 
# 455
const _Tp __cc = __c * __c; 
# 457
const _Tp __E = (__s * __ellint_rf(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) - (((__kk * __sss) * __ellint_rd(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) / ((_Tp)3)); 
# 463
if (__n == 0) { 
# 464
return __E; } else { 
# 466
return __E + ((((_Tp)2) * __n) * __comp_ellint_2(__k)); }  
# 467
}  }  
# 468
} 
# 492 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 494
__ellint_rc(_Tp __x, _Tp __y) 
# 495
{ 
# 496
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 497
const _Tp __lolim = ((_Tp)5) * __min; 
# 499
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || ((__x + __y) < __lolim)) { 
# 500
std::__throw_domain_error("Argument less than zero in __ellint_rc."); } else 
# 503
{ 
# 504
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 505
const _Tp __c1 = (((_Tp)1) / ((_Tp)7)); 
# 506
const _Tp __c2 = (((_Tp)9) / ((_Tp)22)); 
# 507
const _Tp __c3 = (((_Tp)3) / ((_Tp)10)); 
# 508
const _Tp __c4 = (((_Tp)3) / ((_Tp)8)); 
# 510
_Tp __xn = __x; 
# 511
_Tp __yn = __y; 
# 513
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 514
const _Tp __errtol = std::pow(__eps / ((_Tp)30), ((_Tp)1) / ((_Tp)6)); 
# 515
_Tp __mu; 
# 516
_Tp __sn; 
# 518
const unsigned __max_iter = (100); 
# 519
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 520
{ 
# 521
__mu = ((__xn + (((_Tp)2) * __yn)) / ((_Tp)3)); 
# 522
__sn = (((__yn + __mu) / __mu) - ((_Tp)2)); 
# 523
if (std::abs(__sn) < __errtol) { 
# 524
break; }  
# 525
const _Tp __lambda = ((((_Tp)2) * std::sqrt(__xn)) * std::sqrt(__yn)) + __yn; 
# 527
__xn = (__c0 * (__xn + __lambda)); 
# 528
__yn = (__c0 * (__yn + __lambda)); 
# 529
}  
# 531
_Tp __s = (__sn * __sn) * (__c3 + (__sn * (__c1 + (__sn * (__c4 + (__sn * __c2)))))); 
# 534
return (((_Tp)1) + __s) / std::sqrt(__mu); 
# 535
}  
# 536
} 
# 561 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 563
__ellint_rj(_Tp __x, _Tp __y, _Tp __z, _Tp __p) 
# 564
{ 
# 565
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 566
const _Tp __lolim = std::pow(((_Tp)5) * __min, ((_Tp)1) / ((_Tp)3)); 
# 568
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || (__z < ((_Tp)0))) { 
# 569
std::__throw_domain_error("Argument less than zero in __ellint_rj."); } else { 
# 571
if (((((__x + __y) < __lolim) || ((__x + __z) < __lolim)) || ((__y + __z) < __lolim)) || (__p < __lolim)) { 
# 573
std::__throw_domain_error("Argument too small in __ellint_rj"); } else 
# 576
{ 
# 577
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 578
const _Tp __c1 = (((_Tp)3) / ((_Tp)14)); 
# 579
const _Tp __c2 = (((_Tp)1) / ((_Tp)3)); 
# 580
const _Tp __c3 = (((_Tp)3) / ((_Tp)22)); 
# 581
const _Tp __c4 = (((_Tp)3) / ((_Tp)26)); 
# 583
_Tp __xn = __x; 
# 584
_Tp __yn = __y; 
# 585
_Tp __zn = __z; 
# 586
_Tp __pn = __p; 
# 587
_Tp __sigma = ((_Tp)0); 
# 588
_Tp __power4 = ((_Tp)1); 
# 590
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 591
const _Tp __errtol = std::pow(__eps / ((_Tp)8), ((_Tp)1) / ((_Tp)6)); 
# 593
_Tp __mu; 
# 594
_Tp __xndev, __yndev, __zndev, __pndev; 
# 596
const unsigned __max_iter = (100); 
# 597
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 598
{ 
# 599
__mu = ((((__xn + __yn) + __zn) + (((_Tp)2) * __pn)) / ((_Tp)5)); 
# 600
__xndev = ((__mu - __xn) / __mu); 
# 601
__yndev = ((__mu - __yn) / __mu); 
# 602
__zndev = ((__mu - __zn) / __mu); 
# 603
__pndev = ((__mu - __pn) / __mu); 
# 604
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 605
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 606
__epsilon = std::max(__epsilon, std::abs(__pndev)); 
# 607
if (__epsilon < __errtol) { 
# 608
break; }  
# 609
const _Tp __xnroot = std::sqrt(__xn); 
# 610
const _Tp __ynroot = std::sqrt(__yn); 
# 611
const _Tp __znroot = std::sqrt(__zn); 
# 612
const _Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 614
const _Tp __alpha1 = (__pn * ((__xnroot + __ynroot) + __znroot)) + ((__xnroot * __ynroot) * __znroot); 
# 616
const _Tp __alpha2 = __alpha1 * __alpha1; 
# 617
const _Tp __beta = (__pn * (__pn + __lambda)) * (__pn + __lambda); 
# 619
__sigma += (__power4 * __ellint_rc(__alpha2, __beta)); 
# 620
__power4 *= __c0; 
# 621
__xn = (__c0 * (__xn + __lambda)); 
# 622
__yn = (__c0 * (__yn + __lambda)); 
# 623
__zn = (__c0 * (__zn + __lambda)); 
# 624
__pn = (__c0 * (__pn + __lambda)); 
# 625
}  
# 627
_Tp __ea = (__xndev * (__yndev + __zndev)) + (__yndev * __zndev); 
# 628
_Tp __eb = (__xndev * __yndev) * __zndev; 
# 629
_Tp __ec = __pndev * __pndev; 
# 630
_Tp __e2 = __ea - (((_Tp)3) * __ec); 
# 631
_Tp __e3 = __eb + ((((_Tp)2) * __pndev) * (__ea - __ec)); 
# 632
_Tp __s1 = ((_Tp)1) + (__e2 * (((-__c1) + (((((_Tp)3) * __c3) * __e2) / ((_Tp)4))) - (((((_Tp)3) * __c4) * __e3) / ((_Tp)2)))); 
# 634
_Tp __s2 = __eb * ((__c2 / ((_Tp)2)) + (__pndev * (((-__c3) - __c3) + (__pndev * __c4)))); 
# 636
_Tp __s3 = ((__pndev * __ea) * (__c2 - (__pndev * __c3))) - ((__c2 * __pndev) * __ec); 
# 639
return (((_Tp)3) * __sigma) + ((__power4 * ((__s1 + __s2) + __s3)) / (__mu * std::sqrt(__mu))); 
# 641
}  }  
# 642
} 
# 661 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 663
__comp_ellint_3(_Tp __k, _Tp __nu) 
# 664
{ 
# 666
if (__isnan(__k) || __isnan(__nu)) { 
# 667
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 668
if (__nu == ((_Tp)1)) { 
# 669
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 670
if (std::abs(__k) > ((_Tp)1)) { 
# 671
std::__throw_domain_error("Bad argument in __comp_ellint_3."); } else 
# 673
{ 
# 674
const _Tp __kk = __k * __k; 
# 676
return __ellint_rf((_Tp)0, ((_Tp)1) - __kk, (_Tp)1) + ((__nu * __ellint_rj((_Tp)0, ((_Tp)1) - __kk, (_Tp)1, ((_Tp)1) - __nu)) / ((_Tp)3)); 
# 680
}  }  }  
# 681
} 
# 701 "/usr/include/c++/12.2.1/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 703
__ellint_3(_Tp __k, _Tp __nu, _Tp __phi) 
# 704
{ 
# 706
if ((__isnan(__k) || __isnan(__nu)) || __isnan(__phi)) { 
# 707
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 708
if (std::abs(__k) > ((_Tp)1)) { 
# 709
std::__throw_domain_error("Bad argument in __ellint_3."); } else 
# 711
{ 
# 713
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 715
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 718
const _Tp __kk = __k * __k; 
# 719
const _Tp __s = std::sin(__phi_red); 
# 720
const _Tp __ss = __s * __s; 
# 721
const _Tp __sss = __ss * __s; 
# 722
const _Tp __c = std::cos(__phi_red); 
# 723
const _Tp __cc = __c * __c; 
# 725
const _Tp __Pi = (__s * __ellint_rf(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) + (((__nu * __sss) * __ellint_rj(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1, ((_Tp)1) - (__nu * __ss))) / ((_Tp)3)); 
# 731
if (__n == 0) { 
# 732
return __Pi; } else { 
# 734
return __Pi + ((((_Tp)2) * __n) * __comp_ellint_3(__k, __nu)); }  
# 735
}  }  
# 736
} 
# 737
}
# 743
}
# 50 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 64 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
namespace __detail { 
# 66
template< class _Tp> _Tp __expint_E1(_Tp); 
# 81 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 83
__expint_E1_series(_Tp __x) 
# 84
{ 
# 85
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 86
_Tp __term = ((_Tp)1); 
# 87
_Tp __esum = ((_Tp)0); 
# 88
_Tp __osum = ((_Tp)0); 
# 89
const unsigned __max_iter = (1000); 
# 90
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 91
{ 
# 92
__term *= ((-__x) / __i); 
# 93
if (std::abs(__term) < __eps) { 
# 94
break; }  
# 95
if (__term >= ((_Tp)0)) { 
# 96
__esum += (__term / __i); } else { 
# 98
__osum += (__term / __i); }  
# 99
}  
# 101
return (((-__esum) - __osum) - __numeric_constants< _Tp> ::__gamma_e()) - std::log(__x); 
# 103
} 
# 118 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 120
__expint_E1_asymp(_Tp __x) 
# 121
{ 
# 122
_Tp __term = ((_Tp)1); 
# 123
_Tp __esum = ((_Tp)1); 
# 124
_Tp __osum = ((_Tp)0); 
# 125
const unsigned __max_iter = (1000); 
# 126
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 127
{ 
# 128
_Tp __prev = __term; 
# 129
__term *= ((-__i) / __x); 
# 130
if (std::abs(__term) > std::abs(__prev)) { 
# 131
break; }  
# 132
if (__term >= ((_Tp)0)) { 
# 133
__esum += __term; } else { 
# 135
__osum += __term; }  
# 136
}  
# 138
return (std::exp(-__x) * (__esum + __osum)) / __x; 
# 139
} 
# 155 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 157
__expint_En_series(unsigned __n, _Tp __x) 
# 158
{ 
# 159
const unsigned __max_iter = (1000); 
# 160
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 161
const int __nm1 = __n - (1); 
# 162
_Tp __ans = (__nm1 != 0) ? ((_Tp)1) / __nm1 : ((-std::log(__x)) - __numeric_constants< _Tp> ::__gamma_e()); 
# 165
_Tp __fact = ((_Tp)1); 
# 166
for (int __i = 1; __i <= __max_iter; ++__i) 
# 167
{ 
# 168
__fact *= ((-__x) / ((_Tp)__i)); 
# 169
_Tp __del; 
# 170
if (__i != __nm1) { 
# 171
__del = ((-__fact) / ((_Tp)(__i - __nm1))); } else 
# 173
{ 
# 174
_Tp __psi = (-__numeric_constants< _Tp> ::gamma_e()); 
# 175
for (int __ii = 1; __ii <= __nm1; ++__ii) { 
# 176
__psi += (((_Tp)1) / ((_Tp)__ii)); }  
# 177
__del = (__fact * (__psi - std::log(__x))); 
# 178
}  
# 179
__ans += __del; 
# 180
if (std::abs(__del) < (__eps * std::abs(__ans))) { 
# 181
return __ans; }  
# 182
}  
# 183
std::__throw_runtime_error("Series summation failed in __expint_En_series."); 
# 185
} 
# 201 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 203
__expint_En_cont_frac(unsigned __n, _Tp __x) 
# 204
{ 
# 205
const unsigned __max_iter = (1000); 
# 206
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 207
const _Tp __fp_min = std::template numeric_limits< _Tp> ::min(); 
# 208
const int __nm1 = __n - (1); 
# 209
_Tp __b = __x + ((_Tp)__n); 
# 210
_Tp __c = ((_Tp)1) / __fp_min; 
# 211
_Tp __d = ((_Tp)1) / __b; 
# 212
_Tp __h = __d; 
# 213
for (unsigned __i = (1); __i <= __max_iter; ++__i) 
# 214
{ 
# 215
_Tp __a = (-((_Tp)(__i * (__nm1 + __i)))); 
# 216
__b += ((_Tp)2); 
# 217
__d = (((_Tp)1) / ((__a * __d) + __b)); 
# 218
__c = (__b + (__a / __c)); 
# 219
const _Tp __del = __c * __d; 
# 220
__h *= __del; 
# 221
if (std::abs(__del - ((_Tp)1)) < __eps) 
# 222
{ 
# 223
const _Tp __ans = __h * std::exp(-__x); 
# 224
return __ans; 
# 225
}  
# 226
}  
# 227
std::__throw_runtime_error("Continued fraction failed in __expint_En_cont_frac."); 
# 229
} 
# 246 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 248
__expint_En_recursion(unsigned __n, _Tp __x) 
# 249
{ 
# 250
_Tp __En; 
# 251
_Tp __E1 = __expint_E1(__x); 
# 252
if (__x < ((_Tp)__n)) 
# 253
{ 
# 255
__En = __E1; 
# 256
for (unsigned __j = (2); __j < __n; ++__j) { 
# 257
__En = ((std::exp(-__x) - (__x * __En)) / ((_Tp)(__j - (1)))); }  
# 258
} else 
# 260
{ 
# 262
__En = ((_Tp)1); 
# 263
const int __N = __n + (20); 
# 264
_Tp __save = ((_Tp)0); 
# 265
for (int __j = __N; __j > 0; --__j) 
# 266
{ 
# 267
__En = ((std::exp(-__x) - (__j * __En)) / __x); 
# 268
if (__j == __n) { 
# 269
__save = __En; }  
# 270
}  
# 271
_Tp __norm = __En / __E1; 
# 272
__En /= __norm; 
# 273
}  
# 275
return __En; 
# 276
} 
# 290 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 292
__expint_Ei_series(_Tp __x) 
# 293
{ 
# 294
_Tp __term = ((_Tp)1); 
# 295
_Tp __sum = ((_Tp)0); 
# 296
const unsigned __max_iter = (1000); 
# 297
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 298
{ 
# 299
__term *= (__x / __i); 
# 300
__sum += (__term / __i); 
# 301
if (__term < (std::template numeric_limits< _Tp> ::epsilon() * __sum)) { 
# 302
break; }  
# 303
}  
# 305
return (__numeric_constants< _Tp> ::__gamma_e() + __sum) + std::log(__x); 
# 306
} 
# 321 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 323
__expint_Ei_asymp(_Tp __x) 
# 324
{ 
# 325
_Tp __term = ((_Tp)1); 
# 326
_Tp __sum = ((_Tp)1); 
# 327
const unsigned __max_iter = (1000); 
# 328
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 329
{ 
# 330
_Tp __prev = __term; 
# 331
__term *= (__i / __x); 
# 332
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 333
break; }  
# 334
if (__term >= __prev) { 
# 335
break; }  
# 336
__sum += __term; 
# 337
}  
# 339
return (std::exp(__x) * __sum) / __x; 
# 340
} 
# 354 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 356
__expint_Ei(_Tp __x) 
# 357
{ 
# 358
if (__x < ((_Tp)0)) { 
# 359
return -__expint_E1(-__x); } else { 
# 360
if (__x < (-std::log(std::template numeric_limits< _Tp> ::epsilon()))) { 
# 361
return __expint_Ei_series(__x); } else { 
# 363
return __expint_Ei_asymp(__x); }  }  
# 364
} 
# 378 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 380
__expint_E1(_Tp __x) 
# 381
{ 
# 382
if (__x < ((_Tp)0)) { 
# 383
return -__expint_Ei(-__x); } else { 
# 384
if (__x < ((_Tp)1)) { 
# 385
return __expint_E1_series(__x); } else { 
# 386
if (__x < ((_Tp)100)) { 
# 387
return __expint_En_cont_frac(1, __x); } else { 
# 389
return __expint_E1_asymp(__x); }  }  }  
# 390
} 
# 408 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 410
__expint_asymp(unsigned __n, _Tp __x) 
# 411
{ 
# 412
_Tp __term = ((_Tp)1); 
# 413
_Tp __sum = ((_Tp)1); 
# 414
for (unsigned __i = (1); __i <= __n; ++__i) 
# 415
{ 
# 416
_Tp __prev = __term; 
# 417
__term *= ((-((__n - __i) + (1))) / __x); 
# 418
if (std::abs(__term) > std::abs(__prev)) { 
# 419
break; }  
# 420
__sum += __term; 
# 421
}  
# 423
return (std::exp(-__x) * __sum) / __x; 
# 424
} 
# 442 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 444
__expint_large_n(unsigned __n, _Tp __x) 
# 445
{ 
# 446
const _Tp __xpn = __x + __n; 
# 447
const _Tp __xpn2 = __xpn * __xpn; 
# 448
_Tp __term = ((_Tp)1); 
# 449
_Tp __sum = ((_Tp)1); 
# 450
for (unsigned __i = (1); __i <= __n; ++__i) 
# 451
{ 
# 452
_Tp __prev = __term; 
# 453
__term *= ((__n - (((2) * (__i - (1))) * __x)) / __xpn2); 
# 454
if (std::abs(__term) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 455
break; }  
# 456
__sum += __term; 
# 457
}  
# 459
return (std::exp(-__x) * __sum) / __xpn; 
# 460
} 
# 476 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 478
__expint(unsigned __n, _Tp __x) 
# 479
{ 
# 481
if (__isnan(__x)) { 
# 482
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 483
if ((__n <= (1)) && (__x == ((_Tp)0))) { 
# 484
return std::template numeric_limits< _Tp> ::infinity(); } else 
# 486
{ 
# 487
_Tp __E0 = std::exp(__x) / __x; 
# 488
if (__n == (0)) { 
# 489
return __E0; }  
# 491
_Tp __E1 = __expint_E1(__x); 
# 492
if (__n == (1)) { 
# 493
return __E1; }  
# 495
if (__x == ((_Tp)0)) { 
# 496
return ((_Tp)1) / (static_cast< _Tp>(__n - (1))); }  
# 498
_Tp __En = __expint_En_recursion(__n, __x); 
# 500
return __En; 
# 501
}  }  
# 502
} 
# 516 "/usr/include/c++/12.2.1/tr1/exp_integral.tcc" 3
template< class _Tp> inline _Tp 
# 518
__expint(_Tp __x) 
# 519
{ 
# 520
if (__isnan(__x)) { 
# 521
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 523
return __expint_Ei(__x); }  
# 524
} 
# 525
}
# 531
}
# 44 "/usr/include/c++/12.2.1/tr1/hypergeometric.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/12.2.1/tr1/hypergeometric.tcc" 3
namespace __detail { 
# 83 "/usr/include/c++/12.2.1/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 85
__conf_hyperg_series(_Tp __a, _Tp __c, _Tp __x) 
# 86
{ 
# 87
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 89
_Tp __term = ((_Tp)1); 
# 90
_Tp __Fac = ((_Tp)1); 
# 91
const unsigned __max_iter = (100000); 
# 92
unsigned __i; 
# 93
for (__i = (0); __i < __max_iter; ++__i) 
# 94
{ 
# 95
__term *= (((__a + ((_Tp)__i)) * __x) / ((__c + ((_Tp)__i)) * ((_Tp)((1) + __i)))); 
# 97
if (std::abs(__term) < __eps) 
# 98
{ 
# 99
break; 
# 100
}  
# 101
__Fac += __term; 
# 102
}  
# 103
if (__i == __max_iter) { 
# 104
std::__throw_runtime_error("Series failed to converge in __conf_hyperg_series."); }  
# 107
return __Fac; 
# 108
} 
# 120 "/usr/include/c++/12.2.1/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 122
__conf_hyperg_luke(_Tp __a, _Tp __c, _Tp __xin) 
# 123
{ 
# 124
const _Tp __big = std::pow(std::template numeric_limits< _Tp> ::max(), (_Tp)(0.16L)); 
# 125
const int __nmax = 20000; 
# 126
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 127
const _Tp __x = (-__xin); 
# 128
const _Tp __x3 = (__x * __x) * __x; 
# 129
const _Tp __t0 = __a / __c; 
# 130
const _Tp __t1 = (__a + ((_Tp)1)) / (((_Tp)2) * __c); 
# 131
const _Tp __t2 = (__a + ((_Tp)2)) / (((_Tp)2) * (__c + ((_Tp)1))); 
# 132
_Tp __F = ((_Tp)1); 
# 133
_Tp __prec; 
# 135
_Tp __Bnm3 = ((_Tp)1); 
# 136
_Tp __Bnm2 = ((_Tp)1) + (__t1 * __x); 
# 137
_Tp __Bnm1 = ((_Tp)1) + ((__t2 * __x) * (((_Tp)1) + ((__t1 / ((_Tp)3)) * __x))); 
# 139
_Tp __Anm3 = ((_Tp)1); 
# 140
_Tp __Anm2 = __Bnm2 - (__t0 * __x); 
# 141
_Tp __Anm1 = (__Bnm1 - ((__t0 * (((_Tp)1) + (__t2 * __x))) * __x)) + ((((__t0 * __t1) * (__c / (__c + ((_Tp)1)))) * __x) * __x); 
# 144
int __n = 3; 
# 145
while (1) 
# 146
{ 
# 147
_Tp __npam1 = ((_Tp)(__n - 1)) + __a; 
# 148
_Tp __npcm1 = ((_Tp)(__n - 1)) + __c; 
# 149
_Tp __npam2 = ((_Tp)(__n - 2)) + __a; 
# 150
_Tp __npcm2 = ((_Tp)(__n - 2)) + __c; 
# 151
_Tp __tnm1 = (_Tp)((2 * __n) - 1); 
# 152
_Tp __tnm3 = (_Tp)((2 * __n) - 3); 
# 153
_Tp __tnm5 = (_Tp)((2 * __n) - 5); 
# 154
_Tp __F1 = (((_Tp)(__n - 2)) - __a) / ((((_Tp)2) * __tnm3) * __npcm1); 
# 155
_Tp __F2 = ((((_Tp)__n) + __a) * __npam1) / ((((((_Tp)4) * __tnm1) * __tnm3) * __npcm2) * __npcm1); 
# 157
_Tp __F3 = (((-__npam2) * __npam1) * (((_Tp)(__n - 2)) - __a)) / ((((((((_Tp)8) * __tnm3) * __tnm3) * __tnm5) * (((_Tp)(__n - 3)) + __c)) * __npcm2) * __npcm1); 
# 160
_Tp __E = ((-__npam1) * (((_Tp)(__n - 1)) - __c)) / (((((_Tp)2) * __tnm3) * __npcm2) * __npcm1); 
# 163
_Tp __An = (((((_Tp)1) + (__F1 * __x)) * __Anm1) + (((__E + (__F2 * __x)) * __x) * __Anm2)) + ((__F3 * __x3) * __Anm3); 
# 165
_Tp __Bn = (((((_Tp)1) + (__F1 * __x)) * __Bnm1) + (((__E + (__F2 * __x)) * __x) * __Bnm2)) + ((__F3 * __x3) * __Bnm3); 
# 167
_Tp __r = __An / __Bn; 
# 169
__prec = std::abs((__F - __r) / __F); 
# 170
__F = __r; 
# 172
if ((__prec < __eps) || (__n > __nmax)) { 
# 173
break; }  
# 175
if ((std::abs(__An) > __big) || (std::abs(__Bn) > __big)) 
# 176
{ 
# 177
__An /= __big; 
# 178
__Bn /= __big; 
# 179
__Anm1 /= __big; 
# 180
__Bnm1 /= __big; 
# 181
__Anm2 /= __big; 
# 182
__Bnm2 /= __big; 
# 183
__Anm3 /= __big; 
# 184
__Bnm3 /= __big; 
# 185
} else { 
# 186
if ((std::abs(__An) < (((_Tp)1) / __big)) || (std::abs(__Bn) < (((_Tp)1) / __big))) 
# 188
{ 
# 189
__An *= __big; 
# 190
__Bn *= __big; 
# 191
__Anm1 *= __big; 
# 192
__Bnm1 *= __big; 
# 193
__Anm2 *= __big; 
# 194
__Bnm2 *= __big; 
# 195
__Anm3 *= __big; 
# 196
__Bnm3 *= __big; 
# 197
}  }  
# 199
++__n; 
# 200
__Bnm3 = __Bnm2; 
# 201
__Bnm2 = __Bnm1; 
# 202
__Bnm1 = __Bn; 
# 203
__Anm3 = __Anm2; 
# 204
__Anm2 = __Anm1; 
# 205
__Anm1 = __An; 
# 206
}  
# 208
if (__n >= __nmax) { 
# 209
std::__throw_runtime_error("Iteration failed to converge in __conf_hyperg_luke."); }  
# 212
return __F; 
# 213
} 
# 227 "/usr/include/c++/12.2.1/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 229
__conf_hyperg(_Tp __a, _Tp __c, _Tp __x) 
# 230
{ 
# 232
const _Tp __c_nint = std::nearbyint(__c); 
# 236
if ((__isnan(__a) || __isnan(__c)) || __isnan(__x)) { 
# 237
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 238
if ((__c_nint == __c) && (__c_nint <= 0)) { 
# 239
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 240
if (__a == ((_Tp)0)) { 
# 241
return (_Tp)1; } else { 
# 242
if (__c == __a) { 
# 243
return std::exp(__x); } else { 
# 244
if (__x < ((_Tp)0)) { 
# 245
return __conf_hyperg_luke(__a, __c, __x); } else { 
# 247
return __conf_hyperg_series(__a, __c, __x); }  }  }  }  }  
# 248
} 
# 271 "/usr/include/c++/12.2.1/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 273
__hyperg_series(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 274
{ 
# 275
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 277
_Tp __term = ((_Tp)1); 
# 278
_Tp __Fabc = ((_Tp)1); 
# 279
const unsigned __max_iter = (100000); 
# 280
unsigned __i; 
# 281
for (__i = (0); __i < __max_iter; ++__i) 
# 282
{ 
# 283
__term *= ((((__a + ((_Tp)__i)) * (__b + ((_Tp)__i))) * __x) / ((__c + ((_Tp)__i)) * ((_Tp)((1) + __i)))); 
# 285
if (std::abs(__term) < __eps) 
# 286
{ 
# 287
break; 
# 288
}  
# 289
__Fabc += __term; 
# 290
}  
# 291
if (__i == __max_iter) { 
# 292
std::__throw_runtime_error("Series failed to converge in __hyperg_series."); }  
# 295
return __Fabc; 
# 296
} 
# 304
template< class _Tp> _Tp 
# 306
__hyperg_luke(_Tp __a, _Tp __b, _Tp __c, _Tp __xin) 
# 307
{ 
# 308
const _Tp __big = std::pow(std::template numeric_limits< _Tp> ::max(), (_Tp)(0.16L)); 
# 309
const int __nmax = 20000; 
# 310
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 311
const _Tp __x = (-__xin); 
# 312
const _Tp __x3 = (__x * __x) * __x; 
# 313
const _Tp __t0 = (__a * __b) / __c; 
# 314
const _Tp __t1 = ((__a + ((_Tp)1)) * (__b + ((_Tp)1))) / (((_Tp)2) * __c); 
# 315
const _Tp __t2 = ((__a + ((_Tp)2)) * (__b + ((_Tp)2))) / (((_Tp)2) * (__c + ((_Tp)1))); 
# 318
_Tp __F = ((_Tp)1); 
# 320
_Tp __Bnm3 = ((_Tp)1); 
# 321
_Tp __Bnm2 = ((_Tp)1) + (__t1 * __x); 
# 322
_Tp __Bnm1 = ((_Tp)1) + ((__t2 * __x) * (((_Tp)1) + ((__t1 / ((_Tp)3)) * __x))); 
# 324
_Tp __Anm3 = ((_Tp)1); 
# 325
_Tp __Anm2 = __Bnm2 - (__t0 * __x); 
# 326
_Tp __Anm1 = (__Bnm1 - ((__t0 * (((_Tp)1) + (__t2 * __x))) * __x)) + ((((__t0 * __t1) * (__c / (__c + ((_Tp)1)))) * __x) * __x); 
# 329
int __n = 3; 
# 330
while (1) 
# 331
{ 
# 332
const _Tp __npam1 = ((_Tp)(__n - 1)) + __a; 
# 333
const _Tp __npbm1 = ((_Tp)(__n - 1)) + __b; 
# 334
const _Tp __npcm1 = ((_Tp)(__n - 1)) + __c; 
# 335
const _Tp __npam2 = ((_Tp)(__n - 2)) + __a; 
# 336
const _Tp __npbm2 = ((_Tp)(__n - 2)) + __b; 
# 337
const _Tp __npcm2 = ((_Tp)(__n - 2)) + __c; 
# 338
const _Tp __tnm1 = (_Tp)((2 * __n) - 1); 
# 339
const _Tp __tnm3 = (_Tp)((2 * __n) - 3); 
# 340
const _Tp __tnm5 = (_Tp)((2 * __n) - 5); 
# 341
const _Tp __n2 = __n * __n; 
# 342
const _Tp __F1 = (((((((_Tp)3) * __n2) + (((__a + __b) - ((_Tp)6)) * __n)) + ((_Tp)2)) - (__a * __b)) - (((_Tp)2) * (__a + __b))) / ((((_Tp)2) * __tnm3) * __npcm1); 
# 345
const _Tp __F2 = (((-((((((_Tp)3) * __n2) - (((__a + __b) + ((_Tp)6)) * __n)) + ((_Tp)2)) - (__a * __b))) * __npam1) * __npbm1) / ((((((_Tp)4) * __tnm1) * __tnm3) * __npcm2) * __npcm1); 
# 348
const _Tp __F3 = (((((__npam2 * __npam1) * __npbm2) * __npbm1) * (((_Tp)(__n - 2)) - __a)) * (((_Tp)(__n - 2)) - __b)) / ((((((((_Tp)8) * __tnm3) * __tnm3) * __tnm5) * (((_Tp)(__n - 3)) + __c)) * __npcm2) * __npcm1); 
# 352
const _Tp __E = (((-__npam1) * __npbm1) * (((_Tp)(__n - 1)) - __c)) / (((((_Tp)2) * __tnm3) * __npcm2) * __npcm1); 
# 355
_Tp __An = (((((_Tp)1) + (__F1 * __x)) * __Anm1) + (((__E + (__F2 * __x)) * __x) * __Anm2)) + ((__F3 * __x3) * __Anm3); 
# 357
_Tp __Bn = (((((_Tp)1) + (__F1 * __x)) * __Bnm1) + (((__E + (__F2 * __x)) * __x) * __Bnm2)) + ((__F3 * __x3) * __Bnm3); 
# 359
const _Tp __r = __An / __Bn; 
# 361
const _Tp __prec = std::abs((__F - __r) / __F); 
# 362
__F = __r; 
# 364
if ((__prec < __eps) || (__n > __nmax)) { 
# 365
break; }  
# 367
if ((std::abs(__An) > __big) || (std::abs(__Bn) > __big)) 
# 368
{ 
# 369
__An /= __big; 
# 370
__Bn /= __big; 
# 371
__Anm1 /= __big; 
# 372
__Bnm1 /= __big; 
# 373
__Anm2 /= __big; 
# 374
__Bnm2 /= __big; 
# 375
__Anm3 /= __big; 
# 376
__Bnm3 /= __big; 
# 377
} else { 
# 378
if ((std::abs(__An) < (((_Tp)1) / __big)) || (std::abs(__Bn) < (((_Tp)1) / __big))) 
# 380
{ 
# 381
__An *= __big; 
# 382
__Bn *= __big; 
# 383
__Anm1 *= __big; 
# 384
__Bnm1 *= __big; 
# 385
__Anm2 *= __big; 
# 386
__Bnm2 *= __big; 
# 387
__Anm3 *= __big; 
# 388
__Bnm3 *= __big; 
# 389
}  }  
# 391
++__n; 
# 392
__Bnm3 = __Bnm2; 
# 393
__Bnm2 = __Bnm1; 
# 394
__Bnm1 = __Bn; 
# 395
__Anm3 = __Anm2; 
# 396
__Anm2 = __Anm1; 
# 397
__Anm1 = __An; 
# 398
}  
# 400
if (__n >= __nmax) { 
# 401
std::__throw_runtime_error("Iteration failed to converge in __hyperg_luke."); }  
# 404
return __F; 
# 405
} 
# 438 "/usr/include/c++/12.2.1/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 440
__hyperg_reflect(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 441
{ 
# 442
const _Tp __d = (__c - __a) - __b; 
# 443
const int __intd = std::floor(__d + ((_Tp)(0.5L))); 
# 444
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 445
const _Tp __toler = ((_Tp)1000) * __eps; 
# 446
const _Tp __log_max = std::log(std::template numeric_limits< _Tp> ::max()); 
# 447
const bool __d_integer = std::abs(__d - __intd) < __toler; 
# 449
if (__d_integer) 
# 450
{ 
# 451
const _Tp __ln_omx = std::log(((_Tp)1) - __x); 
# 452
const _Tp __ad = std::abs(__d); 
# 453
_Tp __F1, __F2; 
# 455
_Tp __d1, __d2; 
# 456
if (__d >= ((_Tp)0)) 
# 457
{ 
# 458
__d1 = __d; 
# 459
__d2 = ((_Tp)0); 
# 460
} else 
# 462
{ 
# 463
__d1 = ((_Tp)0); 
# 464
__d2 = __d; 
# 465
}  
# 467
const _Tp __lng_c = __log_gamma(__c); 
# 470
if (__ad < __eps) 
# 471
{ 
# 473
__F1 = ((_Tp)0); 
# 474
} else 
# 476
{ 
# 478
bool __ok_d1 = true; 
# 479
_Tp __lng_ad, __lng_ad1, __lng_bd1; 
# 480
try 
# 481
{ 
# 482
__lng_ad = __log_gamma(__ad); 
# 483
__lng_ad1 = __log_gamma(__a + __d1); 
# 484
__lng_bd1 = __log_gamma(__b + __d1); 
# 485
} 
# 486
catch (...) 
# 487
{ 
# 488
__ok_d1 = false; 
# 489
}  
# 491
if (__ok_d1) 
# 492
{ 
# 496
_Tp __sum1 = ((_Tp)1); 
# 497
_Tp __term = ((_Tp)1); 
# 498
_Tp __ln_pre1 = (((__lng_ad + __lng_c) + (__d2 * __ln_omx)) - __lng_ad1) - __lng_bd1; 
# 503
for (int __i = 1; __i < __ad; ++__i) 
# 504
{ 
# 505
const int __j = __i - 1; 
# 506
__term *= ((((((__a + __d2) + __j) * ((__b + __d2) + __j)) / ((((_Tp)1) + __d2) + __j)) / __i) * (((_Tp)1) - __x)); 
# 508
__sum1 += __term; 
# 509
}  
# 511
if (__ln_pre1 > __log_max) { 
# 512
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_luke."); } else { 
# 515
__F1 = (std::exp(__ln_pre1) * __sum1); }  
# 516
} else 
# 518
{ 
# 521
__F1 = ((_Tp)0); 
# 522
}  
# 523
}  
# 526
bool __ok_d2 = true; 
# 527
_Tp __lng_ad2, __lng_bd2; 
# 528
try 
# 529
{ 
# 530
__lng_ad2 = __log_gamma(__a + __d2); 
# 531
__lng_bd2 = __log_gamma(__b + __d2); 
# 532
} 
# 533
catch (...) 
# 534
{ 
# 535
__ok_d2 = false; 
# 536
}  
# 538
if (__ok_d2) 
# 539
{ 
# 542
const int __maxiter = 2000; 
# 543
const _Tp __psi_1 = (-__numeric_constants< _Tp> ::__gamma_e()); 
# 544
const _Tp __psi_1pd = __psi(((_Tp)1) + __ad); 
# 545
const _Tp __psi_apd1 = __psi(__a + __d1); 
# 546
const _Tp __psi_bpd1 = __psi(__b + __d1); 
# 548
_Tp __psi_term = (((__psi_1 + __psi_1pd) - __psi_apd1) - __psi_bpd1) - __ln_omx; 
# 550
_Tp __fact = ((_Tp)1); 
# 551
_Tp __sum2 = __psi_term; 
# 552
_Tp __ln_pre2 = ((__lng_c + (__d1 * __ln_omx)) - __lng_ad2) - __lng_bd2; 
# 556
int __j; 
# 557
for (__j = 1; __j < __maxiter; ++__j) 
# 558
{ 
# 561
const _Tp __term1 = (((_Tp)1) / ((_Tp)__j)) + (((_Tp)1) / (__ad + __j)); 
# 563
const _Tp __term2 = (((_Tp)1) / ((__a + __d1) + ((_Tp)(__j - 1)))) + (((_Tp)1) / ((__b + __d1) + ((_Tp)(__j - 1)))); 
# 565
__psi_term += (__term1 - __term2); 
# 566
__fact *= (((((__a + __d1) + ((_Tp)(__j - 1))) * ((__b + __d1) + ((_Tp)(__j - 1)))) / ((__ad + __j) * __j)) * (((_Tp)1) - __x)); 
# 569
const _Tp __delta = __fact * __psi_term; 
# 570
__sum2 += __delta; 
# 571
if (std::abs(__delta) < (__eps * std::abs(__sum2))) { 
# 572
break; }  
# 573
}  
# 574
if (__j == __maxiter) { 
# 575
std::__throw_runtime_error("Sum F2 failed to converge in __hyperg_reflect"); }  
# 578
if (__sum2 == ((_Tp)0)) { 
# 579
__F2 = ((_Tp)0); } else { 
# 581
__F2 = (std::exp(__ln_pre2) * __sum2); }  
# 582
} else 
# 584
{ 
# 587
__F2 = ((_Tp)0); 
# 588
}  
# 590
const _Tp __sgn_2 = (((__intd % 2) == 1) ? -((_Tp)1) : ((_Tp)1)); 
# 591
const _Tp __F = __F1 + (__sgn_2 * __F2); 
# 593
return __F; 
# 594
} else 
# 596
{ 
# 601
bool __ok1 = true; 
# 602
_Tp __sgn_g1ca = ((_Tp)0), __ln_g1ca = ((_Tp)0); 
# 603
_Tp __sgn_g1cb = ((_Tp)0), __ln_g1cb = ((_Tp)0); 
# 604
try 
# 605
{ 
# 606
__sgn_g1ca = __log_gamma_sign(__c - __a); 
# 607
__ln_g1ca = __log_gamma(__c - __a); 
# 608
__sgn_g1cb = __log_gamma_sign(__c - __b); 
# 609
__ln_g1cb = __log_gamma(__c - __b); 
# 610
} 
# 611
catch (...) 
# 612
{ 
# 613
__ok1 = false; 
# 614
}  
# 616
bool __ok2 = true; 
# 617
_Tp __sgn_g2a = ((_Tp)0), __ln_g2a = ((_Tp)0); 
# 618
_Tp __sgn_g2b = ((_Tp)0), __ln_g2b = ((_Tp)0); 
# 619
try 
# 620
{ 
# 621
__sgn_g2a = __log_gamma_sign(__a); 
# 622
__ln_g2a = __log_gamma(__a); 
# 623
__sgn_g2b = __log_gamma_sign(__b); 
# 624
__ln_g2b = __log_gamma(__b); 
# 625
} 
# 626
catch (...) 
# 627
{ 
# 628
__ok2 = false; 
# 629
}  
# 631
const _Tp __sgn_gc = __log_gamma_sign(__c); 
# 632
const _Tp __ln_gc = __log_gamma(__c); 
# 633
const _Tp __sgn_gd = __log_gamma_sign(__d); 
# 634
const _Tp __ln_gd = __log_gamma(__d); 
# 635
const _Tp __sgn_gmd = __log_gamma_sign(-__d); 
# 636
const _Tp __ln_gmd = __log_gamma(-__d); 
# 638
const _Tp __sgn1 = ((__sgn_gc * __sgn_gd) * __sgn_g1ca) * __sgn_g1cb; 
# 639
const _Tp __sgn2 = ((__sgn_gc * __sgn_gmd) * __sgn_g2a) * __sgn_g2b; 
# 641
_Tp __pre1, __pre2; 
# 642
if (__ok1 && __ok2) 
# 643
{ 
# 644
_Tp __ln_pre1 = ((__ln_gc + __ln_gd) - __ln_g1ca) - __ln_g1cb; 
# 645
_Tp __ln_pre2 = (((__ln_gc + __ln_gmd) - __ln_g2a) - __ln_g2b) + (__d * std::log(((_Tp)1) - __x)); 
# 647
if ((__ln_pre1 < __log_max) && (__ln_pre2 < __log_max)) 
# 648
{ 
# 649
__pre1 = std::exp(__ln_pre1); 
# 650
__pre2 = std::exp(__ln_pre2); 
# 651
__pre1 *= __sgn1; 
# 652
__pre2 *= __sgn2; 
# 653
} else 
# 655
{ 
# 656
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 658
}  
# 659
} else { 
# 660
if (__ok1 && (!__ok2)) 
# 661
{ 
# 662
_Tp __ln_pre1 = ((__ln_gc + __ln_gd) - __ln_g1ca) - __ln_g1cb; 
# 663
if (__ln_pre1 < __log_max) 
# 664
{ 
# 665
__pre1 = std::exp(__ln_pre1); 
# 666
__pre1 *= __sgn1; 
# 667
__pre2 = ((_Tp)0); 
# 668
} else 
# 670
{ 
# 671
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 673
}  
# 674
} else { 
# 675
if ((!__ok1) && __ok2) 
# 676
{ 
# 677
_Tp __ln_pre2 = (((__ln_gc + __ln_gmd) - __ln_g2a) - __ln_g2b) + (__d * std::log(((_Tp)1) - __x)); 
# 679
if (__ln_pre2 < __log_max) 
# 680
{ 
# 681
__pre1 = ((_Tp)0); 
# 682
__pre2 = std::exp(__ln_pre2); 
# 683
__pre2 *= __sgn2; 
# 684
} else 
# 686
{ 
# 687
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 689
}  
# 690
} else 
# 692
{ 
# 693
__pre1 = ((_Tp)0); 
# 694
__pre2 = ((_Tp)0); 
# 695
std::__throw_runtime_error("Underflow of gamma functions in __hyperg_reflect"); 
# 697
}  }  }  
# 699
const _Tp __F1 = __hyperg_series(__a, __b, ((_Tp)1) - __d, ((_Tp)1) - __x); 
# 701
const _Tp __F2 = __hyperg_series(__c - __a, __c - __b, ((_Tp)1) + __d, ((_Tp)1) - __x); 
# 704
const _Tp __F = (__pre1 * __F1) + (__pre2 * __F2); 
# 706
return __F; 
# 707
}  
# 708
} 
# 728 "/usr/include/c++/12.2.1/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 730
__hyperg(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 731
{ 
# 733
const _Tp __a_nint = std::nearbyint(__a); 
# 734
const _Tp __b_nint = std::nearbyint(__b); 
# 735
const _Tp __c_nint = std::nearbyint(__c); 
# 741
const _Tp __toler = ((_Tp)1000) * std::template numeric_limits< _Tp> ::epsilon(); 
# 742
if (std::abs(__x) >= ((_Tp)1)) { 
# 743
std::__throw_domain_error("Argument outside unit circle in __hyperg."); } else { 
# 745
if (((__isnan(__a) || __isnan(__b)) || __isnan(__c)) || __isnan(__x)) { 
# 747
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 748
if ((__c_nint == __c) && (__c_nint <= ((_Tp)0))) { 
# 749
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 750
if ((std::abs(__c - __b) < __toler) || (std::abs(__c - __a) < __toler)) { 
# 751
return std::pow(((_Tp)1) - __x, (__c - __a) - __b); } else { 
# 752
if ((__a >= ((_Tp)0)) && (__b >= ((_Tp)0)) && (__c >= ((_Tp)0)) && (__x >= ((_Tp)0)) && (__x < ((_Tp)(0.995L)))) { 
# 754
return __hyperg_series(__a, __b, __c, __x); } else { 
# 755
if ((std::abs(__a) < ((_Tp)10)) && (std::abs(__b) < ((_Tp)10))) 
# 756
{ 
# 759
if ((__a < ((_Tp)0)) && (std::abs(__a - __a_nint) < __toler)) { 
# 760
return __hyperg_series(__a_nint, __b, __c, __x); } else { 
# 761
if ((__b < ((_Tp)0)) && (std::abs(__b - __b_nint) < __toler)) { 
# 762
return __hyperg_series(__a, __b_nint, __c, __x); } else { 
# 763
if (__x < (-((_Tp)(0.25L)))) { 
# 764
return __hyperg_luke(__a, __b, __c, __x); } else { 
# 765
if (__x < ((_Tp)(0.5L))) { 
# 766
return __hyperg_series(__a, __b, __c, __x); } else { 
# 768
if (std::abs(__c) > ((_Tp)10)) { 
# 769
return __hyperg_series(__a, __b, __c, __x); } else { 
# 771
return __hyperg_reflect(__a, __b, __c, __x); }  }  }  }  }  
# 772
} else { 
# 774
return __hyperg_luke(__a, __b, __c, __x); }  }  }  }  }  }  
# 775
} 
# 776
}
# 783
}
# 49 "/usr/include/c++/12.2.1/tr1/legendre_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/12.2.1/tr1/legendre_function.tcc" 3
namespace __detail { 
# 80 "/usr/include/c++/12.2.1/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 82
__poly_legendre_p(unsigned __l, _Tp __x) 
# 83
{ 
# 85
if (__isnan(__x)) { 
# 86
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 87
if (__x == (+((_Tp)1))) { 
# 88
return +((_Tp)1); } else { 
# 89
if (__x == (-((_Tp)1))) { 
# 90
return (((__l % (2)) == (1)) ? -((_Tp)1) : (+((_Tp)1))); } else 
# 92
{ 
# 93
_Tp __p_lm2 = ((_Tp)1); 
# 94
if (__l == (0)) { 
# 95
return __p_lm2; }  
# 97
_Tp __p_lm1 = __x; 
# 98
if (__l == (1)) { 
# 99
return __p_lm1; }  
# 101
_Tp __p_l = (0); 
# 102
for (unsigned __ll = (2); __ll <= __l; ++__ll) 
# 103
{ 
# 106
__p_l = ((((((_Tp)2) * __x) * __p_lm1) - __p_lm2) - (((__x * __p_lm1) - __p_lm2) / ((_Tp)__ll))); 
# 108
__p_lm2 = __p_lm1; 
# 109
__p_lm1 = __p_l; 
# 110
}  
# 112
return __p_l; 
# 113
}  }  }  
# 114
} 
# 136 "/usr/include/c++/12.2.1/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 138
__assoc_legendre_p(unsigned __l, unsigned __m, _Tp __x, _Tp 
# 139
__phase = (_Tp)(+1)) 
# 140
{ 
# 142
if (__m > __l) { 
# 143
return (_Tp)0; } else { 
# 144
if (__isnan(__x)) { 
# 145
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 146
if (__m == (0)) { 
# 147
return __poly_legendre_p(__l, __x); } else 
# 149
{ 
# 150
_Tp __p_mm = ((_Tp)1); 
# 151
if (__m > (0)) 
# 152
{ 
# 155
_Tp __root = std::sqrt(((_Tp)1) - __x) * std::sqrt(((_Tp)1) + __x); 
# 156
_Tp __fact = ((_Tp)1); 
# 157
for (unsigned __i = (1); __i <= __m; ++__i) 
# 158
{ 
# 159
__p_mm *= ((__phase * __fact) * __root); 
# 160
__fact += ((_Tp)2); 
# 161
}  
# 162
}  
# 163
if (__l == __m) { 
# 164
return __p_mm; }  
# 166
_Tp __p_mp1m = (((_Tp)(((2) * __m) + (1))) * __x) * __p_mm; 
# 167
if (__l == (__m + (1))) { 
# 168
return __p_mp1m; }  
# 170
_Tp __p_lm2m = __p_mm; 
# 171
_Tp __P_lm1m = __p_mp1m; 
# 172
_Tp __p_lm = ((_Tp)0); 
# 173
for (unsigned __j = __m + (2); __j <= __l; ++__j) 
# 174
{ 
# 175
__p_lm = ((((((_Tp)(((2) * __j) - (1))) * __x) * __P_lm1m) - (((_Tp)((__j + __m) - (1))) * __p_lm2m)) / ((_Tp)(__j - __m))); 
# 177
__p_lm2m = __P_lm1m; 
# 178
__P_lm1m = __p_lm; 
# 179
}  
# 181
return __p_lm; 
# 182
}  }  }  
# 183
} 
# 214 "/usr/include/c++/12.2.1/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 216
__sph_legendre(unsigned __l, unsigned __m, _Tp __theta) 
# 217
{ 
# 218
if (__isnan(__theta)) { 
# 219
return std::template numeric_limits< _Tp> ::quiet_NaN(); }  
# 221
const _Tp __x = std::cos(__theta); 
# 223
if (__m > __l) { 
# 224
return (_Tp)0; } else { 
# 225
if (__m == (0)) 
# 226
{ 
# 227
_Tp __P = __poly_legendre_p(__l, __x); 
# 228
_Tp __fact = std::sqrt(((_Tp)(((2) * __l) + (1))) / (((_Tp)4) * __numeric_constants< _Tp> ::__pi())); 
# 230
__P *= __fact; 
# 231
return __P; 
# 232
} else { 
# 233
if ((__x == ((_Tp)1)) || (__x == (-((_Tp)1)))) 
# 234
{ 
# 236
return (_Tp)0; 
# 237
} else 
# 239
{ 
# 245
const _Tp __sgn = ((__m % (2)) == (1)) ? -((_Tp)1) : ((_Tp)1); 
# 246
const _Tp __y_mp1m_factor = __x * std::sqrt((_Tp)(((2) * __m) + (3))); 
# 248
const _Tp __lncirc = std::log1p((-__x) * __x); 
# 254
const _Tp __lnpoch = std::lgamma((_Tp)(__m + ((_Tp)(0.5L)))) - std::lgamma((_Tp)__m); 
# 260
const _Tp __lnpre_val = ((-((_Tp)(0.25L))) * __numeric_constants< _Tp> ::__lnpi()) + (((_Tp)(0.5L)) * (__lnpoch + (__m * __lncirc))); 
# 263
const _Tp __sr = std::sqrt((((_Tp)2) + (((_Tp)1) / __m)) / (((_Tp)4) * __numeric_constants< _Tp> ::__pi())); 
# 265
_Tp __y_mm = (__sgn * __sr) * std::exp(__lnpre_val); 
# 266
_Tp __y_mp1m = __y_mp1m_factor * __y_mm; 
# 268
if (__l == __m) { 
# 269
return __y_mm; } else { 
# 270
if (__l == (__m + (1))) { 
# 271
return __y_mp1m; } else 
# 273
{ 
# 274
_Tp __y_lm = ((_Tp)0); 
# 277
for (unsigned __ll = __m + (2); __ll <= __l; ++__ll) 
# 278
{ 
# 279
const _Tp __rat1 = ((_Tp)(__ll - __m)) / ((_Tp)(__ll + __m)); 
# 280
const _Tp __rat2 = ((_Tp)((__ll - __m) - (1))) / ((_Tp)((__ll + __m) - (1))); 
# 281
const _Tp __fact1 = std::sqrt((__rat1 * ((_Tp)(((2) * __ll) + (1)))) * ((_Tp)(((2) * __ll) - (1)))); 
# 283
const _Tp __fact2 = std::sqrt(((__rat1 * __rat2) * ((_Tp)(((2) * __ll) + (1)))) / ((_Tp)(((2) * __ll) - (3)))); 
# 285
__y_lm = ((((__x * __y_mp1m) * __fact1) - ((((__ll + __m) - (1)) * __y_mm) * __fact2)) / ((_Tp)(__ll - __m))); 
# 287
__y_mm = __y_mp1m; 
# 288
__y_mp1m = __y_lm; 
# 289
}  
# 291
return __y_lm; 
# 292
}  }  
# 293
}  }  }  
# 294
} 
# 295
}
# 302
}
# 51 "/usr/include/c++/12.2.1/tr1/modified_bessel_func.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/12.2.1/tr1/modified_bessel_func.tcc" 3
namespace __detail { 
# 83 "/usr/include/c++/12.2.1/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 85
__bessel_ik(_Tp __nu, _Tp __x, _Tp &
# 86
__Inu, _Tp &__Knu, _Tp &__Ipnu, _Tp &__Kpnu) 
# 87
{ 
# 88
if (__x == ((_Tp)0)) 
# 89
{ 
# 90
if (__nu == ((_Tp)0)) 
# 91
{ 
# 92
__Inu = ((_Tp)1); 
# 93
__Ipnu = ((_Tp)0); 
# 94
} else { 
# 95
if (__nu == ((_Tp)1)) 
# 96
{ 
# 97
__Inu = ((_Tp)0); 
# 98
__Ipnu = ((_Tp)(0.5L)); 
# 99
} else 
# 101
{ 
# 102
__Inu = ((_Tp)0); 
# 103
__Ipnu = ((_Tp)0); 
# 104
}  }  
# 105
__Knu = std::template numeric_limits< _Tp> ::infinity(); 
# 106
__Kpnu = (-std::template numeric_limits< _Tp> ::infinity()); 
# 107
return; 
# 108
}  
# 110
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 111
const _Tp __fp_min = ((_Tp)10) * std::template numeric_limits< _Tp> ::epsilon(); 
# 112
const int __max_iter = 15000; 
# 113
const _Tp __x_min = ((_Tp)2); 
# 115
const int __nl = static_cast< int>(__nu + ((_Tp)(0.5L))); 
# 117
const _Tp __mu = __nu - __nl; 
# 118
const _Tp __mu2 = __mu * __mu; 
# 119
const _Tp __xi = ((_Tp)1) / __x; 
# 120
const _Tp __xi2 = ((_Tp)2) * __xi; 
# 121
_Tp __h = __nu * __xi; 
# 122
if (__h < __fp_min) { 
# 123
__h = __fp_min; }  
# 124
_Tp __b = __xi2 * __nu; 
# 125
_Tp __d = ((_Tp)0); 
# 126
_Tp __c = __h; 
# 127
int __i; 
# 128
for (__i = 1; __i <= __max_iter; ++__i) 
# 129
{ 
# 130
__b += __xi2; 
# 131
__d = (((_Tp)1) / (__b + __d)); 
# 132
__c = (__b + (((_Tp)1) / __c)); 
# 133
const _Tp __del = __c * __d; 
# 134
__h *= __del; 
# 135
if (std::abs(__del - ((_Tp)1)) < __eps) { 
# 136
break; }  
# 137
}  
# 138
if (__i > __max_iter) { 
# 139
std::__throw_runtime_error("Argument x too large in __bessel_ik; try asymptotic expansion."); }  
# 142
_Tp __Inul = __fp_min; 
# 143
_Tp __Ipnul = __h * __Inul; 
# 144
_Tp __Inul1 = __Inul; 
# 145
_Tp __Ipnu1 = __Ipnul; 
# 146
_Tp __fact = __nu * __xi; 
# 147
for (int __l = __nl; __l >= 1; --__l) 
# 148
{ 
# 149
const _Tp __Inutemp = (__fact * __Inul) + __Ipnul; 
# 150
__fact -= __xi; 
# 151
__Ipnul = ((__fact * __Inutemp) + __Inul); 
# 152
__Inul = __Inutemp; 
# 153
}  
# 154
_Tp __f = __Ipnul / __Inul; 
# 155
_Tp __Kmu, __Knu1; 
# 156
if (__x < __x_min) 
# 157
{ 
# 158
const _Tp __x2 = __x / ((_Tp)2); 
# 159
const _Tp __pimu = __numeric_constants< _Tp> ::__pi() * __mu; 
# 160
const _Tp __fact = (std::abs(__pimu) < __eps) ? (_Tp)1 : (__pimu / std::sin(__pimu)); 
# 162
_Tp __d = (-std::log(__x2)); 
# 163
_Tp __e = __mu * __d; 
# 164
const _Tp __fact2 = (std::abs(__e) < __eps) ? (_Tp)1 : (std::sinh(__e) / __e); 
# 166
_Tp __gam1, __gam2, __gampl, __gammi; 
# 167
__gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi); 
# 168
_Tp __ff = __fact * ((__gam1 * std::cosh(__e)) + ((__gam2 * __fact2) * __d)); 
# 170
_Tp __sum = __ff; 
# 171
__e = std::exp(__e); 
# 172
_Tp __p = __e / (((_Tp)2) * __gampl); 
# 173
_Tp __q = ((_Tp)1) / ((((_Tp)2) * __e) * __gammi); 
# 174
_Tp __c = ((_Tp)1); 
# 175
__d = (__x2 * __x2); 
# 176
_Tp __sum1 = __p; 
# 177
int __i; 
# 178
for (__i = 1; __i <= __max_iter; ++__i) 
# 179
{ 
# 180
__ff = ((((__i * __ff) + __p) + __q) / ((__i * __i) - __mu2)); 
# 181
__c *= (__d / __i); 
# 182
__p /= (__i - __mu); 
# 183
__q /= (__i + __mu); 
# 184
const _Tp __del = __c * __ff; 
# 185
__sum += __del; 
# 186
const _Tp __del1 = __c * (__p - (__i * __ff)); 
# 187
__sum1 += __del1; 
# 188
if (std::abs(__del) < (__eps * std::abs(__sum))) { 
# 189
break; }  
# 190
}  
# 191
if (__i > __max_iter) { 
# 192
std::__throw_runtime_error("Bessel k series failed to converge in __bessel_ik."); }  
# 194
__Kmu = __sum; 
# 195
__Knu1 = (__sum1 * __xi2); 
# 196
} else 
# 198
{ 
# 199
_Tp __b = ((_Tp)2) * (((_Tp)1) + __x); 
# 200
_Tp __d = ((_Tp)1) / __b; 
# 201
_Tp __delh = __d; 
# 202
_Tp __h = __delh; 
# 203
_Tp __q1 = ((_Tp)0); 
# 204
_Tp __q2 = ((_Tp)1); 
# 205
_Tp __a1 = ((_Tp)(0.25L)) - __mu2; 
# 206
_Tp __q = __c = __a1; 
# 207
_Tp __a = (-__a1); 
# 208
_Tp __s = ((_Tp)1) + (__q * __delh); 
# 209
int __i; 
# 210
for (__i = 2; __i <= __max_iter; ++__i) 
# 211
{ 
# 212
__a -= (2 * (__i - 1)); 
# 213
__c = (((-__a) * __c) / __i); 
# 214
const _Tp __qnew = (__q1 - (__b * __q2)) / __a; 
# 215
__q1 = __q2; 
# 216
__q2 = __qnew; 
# 217
__q += (__c * __qnew); 
# 218
__b += ((_Tp)2); 
# 219
__d = (((_Tp)1) / (__b + (__a * __d))); 
# 220
__delh = (((__b * __d) - ((_Tp)1)) * __delh); 
# 221
__h += __delh; 
# 222
const _Tp __dels = __q * __delh; 
# 223
__s += __dels; 
# 224
if (std::abs(__dels / __s) < __eps) { 
# 225
break; }  
# 226
}  
# 227
if (__i > __max_iter) { 
# 228
std::__throw_runtime_error("Steed\'s method failed in __bessel_ik."); }  
# 230
__h = (__a1 * __h); 
# 231
__Kmu = ((std::sqrt(__numeric_constants< _Tp> ::__pi() / (((_Tp)2) * __x)) * std::exp(-__x)) / __s); 
# 233
__Knu1 = ((__Kmu * (((__mu + __x) + ((_Tp)(0.5L))) - __h)) * __xi); 
# 234
}  
# 236
_Tp __Kpmu = ((__mu * __xi) * __Kmu) - __Knu1; 
# 237
_Tp __Inumu = __xi / ((__f * __Kmu) - __Kpmu); 
# 238
__Inu = ((__Inumu * __Inul1) / __Inul); 
# 239
__Ipnu = ((__Inumu * __Ipnu1) / __Inul); 
# 240
for (__i = 1; __i <= __nl; ++__i) 
# 241
{ 
# 242
const _Tp __Knutemp = (((__mu + __i) * __xi2) * __Knu1) + __Kmu; 
# 243
__Kmu = __Knu1; 
# 244
__Knu1 = __Knutemp; 
# 245
}  
# 246
__Knu = __Kmu; 
# 247
__Kpnu = (((__nu * __xi) * __Kmu) - __Knu1); 
# 250
} 
# 267 "/usr/include/c++/12.2.1/tr1/modified_bessel_func.tcc" 3
template< class _Tp> _Tp 
# 269
__cyl_bessel_i(_Tp __nu, _Tp __x) 
# 270
{ 
# 271
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 272
std::__throw_domain_error("Bad argument in __cyl_bessel_i."); } else { 
# 274
if (__isnan(__nu) || __isnan(__x)) { 
# 275
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 276
if ((__x * __x) < (((_Tp)10) * (__nu + ((_Tp)1)))) { 
# 277
return __cyl_bessel_ij_series(__nu, __x, +((_Tp)1), 200); } else 
# 279
{ 
# 280
_Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu; 
# 281
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 282
return __I_nu; 
# 283
}  }  }  
# 284
} 
# 303 "/usr/include/c++/12.2.1/tr1/modified_bessel_func.tcc" 3
template< class _Tp> _Tp 
# 305
__cyl_bessel_k(_Tp __nu, _Tp __x) 
# 306
{ 
# 307
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 308
std::__throw_domain_error("Bad argument in __cyl_bessel_k."); } else { 
# 310
if (__isnan(__nu) || __isnan(__x)) { 
# 311
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else 
# 313
{ 
# 314
_Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu; 
# 315
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 316
return __K_nu; 
# 317
}  }  
# 318
} 
# 337 "/usr/include/c++/12.2.1/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 339
__sph_bessel_ik(unsigned __n, _Tp __x, _Tp &
# 340
__i_n, _Tp &__k_n, _Tp &__ip_n, _Tp &__kp_n) 
# 341
{ 
# 342
const _Tp __nu = ((_Tp)__n) + ((_Tp)(0.5L)); 
# 344
_Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu; 
# 345
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 347
const _Tp __factor = __numeric_constants< _Tp> ::__sqrtpio2() / std::sqrt(__x); 
# 350
__i_n = (__factor * __I_nu); 
# 351
__k_n = (__factor * __K_nu); 
# 352
__ip_n = ((__factor * __Ip_nu) - (__i_n / (((_Tp)2) * __x))); 
# 353
__kp_n = ((__factor * __Kp_nu) - (__k_n / (((_Tp)2) * __x))); 
# 356
} 
# 373 "/usr/include/c++/12.2.1/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 375
__airy(_Tp __x, _Tp &__Ai, _Tp &__Bi, _Tp &__Aip, _Tp &__Bip) 
# 376
{ 
# 377
const _Tp __absx = std::abs(__x); 
# 378
const _Tp __rootx = std::sqrt(__absx); 
# 379
const _Tp __z = ((((_Tp)2) * __absx) * __rootx) / ((_Tp)3); 
# 380
const _Tp _S_inf = std::template numeric_limits< _Tp> ::infinity(); 
# 382
if (__isnan(__x)) { 
# 383
__Bip = (__Aip = (__Bi = (__Ai = std::template numeric_limits< _Tp> ::quiet_NaN()))); } else { 
# 384
if (__z == _S_inf) 
# 385
{ 
# 386
__Aip = (__Ai = ((_Tp)0)); 
# 387
__Bip = (__Bi = _S_inf); 
# 388
} else { 
# 389
if (__z == (-_S_inf)) { 
# 390
__Bip = (__Aip = (__Bi = (__Ai = ((_Tp)0)))); } else { 
# 391
if (__x > ((_Tp)0)) 
# 392
{ 
# 393
_Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu; 
# 395
__bessel_ik(((_Tp)1) / ((_Tp)3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 396
__Ai = ((__rootx * __K_nu) / (__numeric_constants< _Tp> ::__sqrt3() * __numeric_constants< _Tp> ::__pi())); 
# 399
__Bi = (__rootx * ((__K_nu / __numeric_constants< _Tp> ::__pi()) + ((((_Tp)2) * __I_nu) / __numeric_constants< _Tp> ::__sqrt3()))); 
# 402
__bessel_ik(((_Tp)2) / ((_Tp)3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 403
__Aip = (((-__x) * __K_nu) / (__numeric_constants< _Tp> ::__sqrt3() * __numeric_constants< _Tp> ::__pi())); 
# 406
__Bip = (__x * ((__K_nu / __numeric_constants< _Tp> ::__pi()) + ((((_Tp)2) * __I_nu) / __numeric_constants< _Tp> ::__sqrt3()))); 
# 409
} else { 
# 410
if (__x < ((_Tp)0)) 
# 411
{ 
# 412
_Tp __J_nu, __Jp_nu, __N_nu, __Np_nu; 
# 414
__bessel_jn(((_Tp)1) / ((_Tp)3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 415
__Ai = ((__rootx * (__J_nu - (__N_nu / __numeric_constants< _Tp> ::__sqrt3()))) / ((_Tp)2)); 
# 417
__Bi = (((-__rootx) * (__N_nu + (__J_nu / __numeric_constants< _Tp> ::__sqrt3()))) / ((_Tp)2)); 
# 420
__bessel_jn(((_Tp)2) / ((_Tp)3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 421
__Aip = ((__absx * ((__N_nu / __numeric_constants< _Tp> ::__sqrt3()) + __J_nu)) / ((_Tp)2)); 
# 423
__Bip = ((__absx * ((__J_nu / __numeric_constants< _Tp> ::__sqrt3()) - __N_nu)) / ((_Tp)2)); 
# 425
} else 
# 427
{ 
# 431
__Ai = ((_Tp)(0.35502805388781723926L)); 
# 432
__Bi = (__Ai * __numeric_constants< _Tp> ::__sqrt3()); 
# 437
__Aip = (-((_Tp)(0.2588194037928067984L))); 
# 438
__Bip = ((-__Aip) * __numeric_constants< _Tp> ::__sqrt3()); 
# 439
}  }  }  }  }  
# 442
} 
# 443
}
# 449
}
# 42 "/usr/include/c++/12.2.1/tr1/poly_hermite.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 56 "/usr/include/c++/12.2.1/tr1/poly_hermite.tcc" 3
namespace __detail { 
# 72 "/usr/include/c++/12.2.1/tr1/poly_hermite.tcc" 3
template< class _Tp> _Tp 
# 74
__poly_hermite_recursion(unsigned __n, _Tp __x) 
# 75
{ 
# 77
_Tp __H_0 = (1); 
# 78
if (__n == (0)) { 
# 79
return __H_0; }  
# 82
_Tp __H_1 = 2 * __x; 
# 83
if (__n == (1)) { 
# 84
return __H_1; }  
# 87
_Tp __H_n, __H_nm1, __H_nm2; 
# 88
unsigned __i; 
# 89
for (((__H_nm2 = __H_0), (__H_nm1 = __H_1)), (__i = (2)); __i <= __n; ++__i) 
# 90
{ 
# 91
__H_n = (2 * ((__x * __H_nm1) - ((__i - (1)) * __H_nm2))); 
# 92
__H_nm2 = __H_nm1; 
# 93
__H_nm1 = __H_n; 
# 94
}  
# 96
return __H_n; 
# 97
} 
# 114 "/usr/include/c++/12.2.1/tr1/poly_hermite.tcc" 3
template< class _Tp> inline _Tp 
# 116
__poly_hermite(unsigned __n, _Tp __x) 
# 117
{ 
# 118
if (__isnan(__x)) { 
# 119
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 121
return __poly_hermite_recursion(__n, __x); }  
# 122
} 
# 123
}
# 129
}
# 44 "/usr/include/c++/12.2.1/tr1/poly_laguerre.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/12.2.1/tr1/poly_laguerre.tcc" 3
namespace __detail { 
# 75 "/usr/include/c++/12.2.1/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 77
__poly_laguerre_large_n(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 78
{ 
# 79
const _Tp __a = (-((_Tp)__n)); 
# 80
const _Tp __b = ((_Tp)__alpha1) + ((_Tp)1); 
# 81
const _Tp __eta = (((_Tp)2) * __b) - (((_Tp)4) * __a); 
# 82
const _Tp __cos2th = __x / __eta; 
# 83
const _Tp __sin2th = ((_Tp)1) - __cos2th; 
# 84
const _Tp __th = std::acos(std::sqrt(__cos2th)); 
# 85
const _Tp __pre_h = ((((__numeric_constants< _Tp> ::__pi_2() * __numeric_constants< _Tp> ::__pi_2()) * __eta) * __eta) * __cos2th) * __sin2th; 
# 90
const _Tp __lg_b = std::lgamma(((_Tp)__n) + __b); 
# 91
const _Tp __lnfact = std::lgamma((_Tp)(__n + (1))); 
# 97
_Tp __pre_term1 = (((_Tp)(0.5L)) * (((_Tp)1) - __b)) * std::log((((_Tp)(0.25L)) * __x) * __eta); 
# 99
_Tp __pre_term2 = ((_Tp)(0.25L)) * std::log(__pre_h); 
# 100
_Tp __lnpre = (((__lg_b - __lnfact) + (((_Tp)(0.5L)) * __x)) + __pre_term1) - __pre_term2; 
# 102
_Tp __ser_term1 = std::sin(__a * __numeric_constants< _Tp> ::__pi()); 
# 103
_Tp __ser_term2 = std::sin(((((_Tp)(0.25L)) * __eta) * ((((_Tp)2) * __th) - std::sin(((_Tp)2) * __th))) + __numeric_constants< _Tp> ::__pi_4()); 
# 107
_Tp __ser = __ser_term1 + __ser_term2; 
# 109
return std::exp(__lnpre) * __ser; 
# 110
} 
# 129 "/usr/include/c++/12.2.1/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 131
__poly_laguerre_hyperg(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 132
{ 
# 133
const _Tp __b = ((_Tp)__alpha1) + ((_Tp)1); 
# 134
const _Tp __mx = (-__x); 
# 135
const _Tp __tc_sgn = (__x < ((_Tp)0)) ? (_Tp)1 : (((__n % (2)) == (1)) ? -((_Tp)1) : ((_Tp)1)); 
# 138
_Tp __tc = ((_Tp)1); 
# 139
const _Tp __ax = std::abs(__x); 
# 140
for (unsigned __k = (1); __k <= __n; ++__k) { 
# 141
__tc *= (__ax / __k); }  
# 143
_Tp __term = __tc * __tc_sgn; 
# 144
_Tp __sum = __term; 
# 145
for (int __k = ((int)__n) - 1; __k >= 0; --__k) 
# 146
{ 
# 147
__term *= ((((__b + ((_Tp)__k)) / ((_Tp)(((int)__n) - __k))) * ((_Tp)(__k + 1))) / __mx); 
# 149
__sum += __term; 
# 150
}  
# 152
return __sum; 
# 153
} 
# 185 "/usr/include/c++/12.2.1/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 187
__poly_laguerre_recursion(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 188
{ 
# 190
_Tp __l_0 = ((_Tp)1); 
# 191
if (__n == (0)) { 
# 192
return __l_0; }  
# 195
_Tp __l_1 = (((-__x) + ((_Tp)1)) + ((_Tp)__alpha1)); 
# 196
if (__n == (1)) { 
# 197
return __l_1; }  
# 200
_Tp __l_n2 = __l_0; 
# 201
_Tp __l_n1 = __l_1; 
# 202
_Tp __l_n = ((_Tp)0); 
# 203
for (unsigned __nn = (2); __nn <= __n; ++__nn) 
# 204
{ 
# 205
__l_n = (((((((_Tp)(((2) * __nn) - (1))) + ((_Tp)__alpha1)) - __x) * __l_n1) / ((_Tp)__nn)) - (((((_Tp)(__nn - (1))) + ((_Tp)__alpha1)) * __l_n2) / ((_Tp)__nn))); 
# 208
__l_n2 = __l_n1; 
# 209
__l_n1 = __l_n; 
# 210
}  
# 212
return __l_n; 
# 213
} 
# 244 "/usr/include/c++/12.2.1/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 246
__poly_laguerre(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 247
{ 
# 248
if (__x < ((_Tp)0)) { 
# 249
std::__throw_domain_error("Negative argument in __poly_laguerre."); } else { 
# 252
if (__isnan(__x)) { 
# 253
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 254
if (__n == (0)) { 
# 255
return (_Tp)1; } else { 
# 256
if (__n == (1)) { 
# 257
return (((_Tp)1) + ((_Tp)__alpha1)) - __x; } else { 
# 258
if (__x == ((_Tp)0)) 
# 259
{ 
# 260
_Tp __prod = ((_Tp)__alpha1) + ((_Tp)1); 
# 261
for (unsigned __k = (2); __k <= __n; ++__k) { 
# 262
__prod *= ((((_Tp)__alpha1) + ((_Tp)__k)) / ((_Tp)__k)); }  
# 263
return __prod; 
# 264
} else { 
# 265
if ((__n > (10000000)) && (((_Tp)__alpha1) > (-((_Tp)1))) && (__x < ((((_Tp)2) * (((_Tp)__alpha1) + ((_Tp)1))) + ((_Tp)((4) * __n))))) { 
# 267
return __poly_laguerre_large_n(__n, __alpha1, __x); } else { 
# 268
if ((((_Tp)__alpha1) >= ((_Tp)0)) || ((__x > ((_Tp)0)) && (((_Tp)__alpha1) < (-((_Tp)(__n + (1))))))) { 
# 270
return __poly_laguerre_recursion(__n, __alpha1, __x); } else { 
# 272
return __poly_laguerre_hyperg(__n, __alpha1, __x); }  }  }  }  }  }  }  
# 273
} 
# 296 "/usr/include/c++/12.2.1/tr1/poly_laguerre.tcc" 3
template< class _Tp> inline _Tp 
# 298
__assoc_laguerre(unsigned __n, unsigned __m, _Tp __x) 
# 299
{ return __poly_laguerre< unsigned, _Tp> (__n, __m, __x); } 
# 316 "/usr/include/c++/12.2.1/tr1/poly_laguerre.tcc" 3
template< class _Tp> inline _Tp 
# 318
__laguerre(unsigned __n, _Tp __x) 
# 319
{ return __poly_laguerre< unsigned, _Tp> (__n, 0, __x); } 
# 320
}
# 327
}
# 47 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
namespace __detail { 
# 78 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 80
__riemann_zeta_sum(_Tp __s) 
# 81
{ 
# 83
if (__s < ((_Tp)1)) { 
# 84
std::__throw_domain_error("Bad argument in zeta sum."); }  
# 86
const unsigned max_iter = (10000); 
# 87
_Tp __zeta = ((_Tp)0); 
# 88
for (unsigned __k = (1); __k < max_iter; ++__k) 
# 89
{ 
# 90
_Tp __term = std::pow(static_cast< _Tp>(__k), -__s); 
# 91
if (__term < std::template numeric_limits< _Tp> ::epsilon()) 
# 92
{ 
# 93
break; 
# 94
}  
# 95
__zeta += __term; 
# 96
}  
# 98
return __zeta; 
# 99
} 
# 115 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 117
__riemann_zeta_alt(_Tp __s) 
# 118
{ 
# 119
_Tp __sgn = ((_Tp)1); 
# 120
_Tp __zeta = ((_Tp)0); 
# 121
for (unsigned __i = (1); __i < (10000000); ++__i) 
# 122
{ 
# 123
_Tp __term = __sgn / std::pow(__i, __s); 
# 124
if (std::abs(__term) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 125
break; }  
# 126
__zeta += __term; 
# 127
__sgn *= ((_Tp)(-1)); 
# 128
}  
# 129
__zeta /= (((_Tp)1) - std::pow((_Tp)2, ((_Tp)1) - __s)); 
# 131
return __zeta; 
# 132
} 
# 157 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 159
__riemann_zeta_glob(_Tp __s) 
# 160
{ 
# 161
_Tp __zeta = ((_Tp)0); 
# 163
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 165
const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 170
if (__s < ((_Tp)0)) 
# 171
{ 
# 173
if (std::fmod(__s, (_Tp)2) == ((_Tp)0)) { 
# 174
return (_Tp)0; } else 
# 177
{ 
# 178
_Tp __zeta = __riemann_zeta_glob(((_Tp)1) - __s); 
# 179
__zeta *= (((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::exp(std::lgamma(((_Tp)1) - __s))) / __numeric_constants< _Tp> ::__pi()); 
# 188
return __zeta; 
# 189
}  
# 190
}  
# 192
_Tp __num = ((_Tp)(0.5L)); 
# 193
const unsigned __maxit = (10000); 
# 194
for (unsigned __i = (0); __i < __maxit; ++__i) 
# 195
{ 
# 196
bool __punt = false; 
# 197
_Tp __sgn = ((_Tp)1); 
# 198
_Tp __term = ((_Tp)0); 
# 199
for (unsigned __j = (0); __j <= __i; ++__j) 
# 200
{ 
# 202
_Tp __bincoeff = (std::lgamma((_Tp)((1) + __i)) - std::lgamma((_Tp)((1) + __j))) - std::lgamma((_Tp)(((1) + __i) - __j)); 
# 210
if (__bincoeff > __max_bincoeff) 
# 211
{ 
# 213
__punt = true; 
# 214
break; 
# 215
}  
# 216
__bincoeff = std::exp(__bincoeff); 
# 217
__term += ((__sgn * __bincoeff) * std::pow((_Tp)((1) + __j), -__s)); 
# 218
__sgn *= ((_Tp)(-1)); 
# 219
}  
# 220
if (__punt) { 
# 221
break; }  
# 222
__term *= __num; 
# 223
__zeta += __term; 
# 224
if (std::abs(__term / __zeta) < __eps) { 
# 225
break; }  
# 226
__num *= ((_Tp)(0.5L)); 
# 227
}  
# 229
__zeta /= (((_Tp)1) - std::pow((_Tp)2, ((_Tp)1) - __s)); 
# 231
return __zeta; 
# 232
} 
# 252 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 254
__riemann_zeta_product(_Tp __s) 
# 255
{ 
# 256
static const _Tp __prime[] = {((_Tp)2), ((_Tp)3), ((_Tp)5), ((_Tp)7), ((_Tp)11), ((_Tp)13), ((_Tp)17), ((_Tp)19), ((_Tp)23), ((_Tp)29), ((_Tp)31), ((_Tp)37), ((_Tp)41), ((_Tp)43), ((_Tp)47), ((_Tp)53), ((_Tp)59), ((_Tp)61), ((_Tp)67), ((_Tp)71), ((_Tp)73), ((_Tp)79), ((_Tp)83), ((_Tp)89), ((_Tp)97), ((_Tp)101), ((_Tp)103), ((_Tp)107), ((_Tp)109)}; 
# 262
static const unsigned __num_primes = (sizeof(__prime) / sizeof(_Tp)); 
# 264
_Tp __zeta = ((_Tp)1); 
# 265
for (unsigned __i = (0); __i < __num_primes; ++__i) 
# 266
{ 
# 267
const _Tp __fact = ((_Tp)1) - std::pow(__prime[__i], -__s); 
# 268
__zeta *= __fact; 
# 269
if ((((_Tp)1) - __fact) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 270
break; }  
# 271
}  
# 273
__zeta = (((_Tp)1) / __zeta); 
# 275
return __zeta; 
# 276
} 
# 293 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 295
__riemann_zeta(_Tp __s) 
# 296
{ 
# 297
if (__isnan(__s)) { 
# 298
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 299
if (__s == ((_Tp)1)) { 
# 300
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 301
if (__s < (-((_Tp)19))) 
# 302
{ 
# 303
_Tp __zeta = __riemann_zeta_product(((_Tp)1) - __s); 
# 304
__zeta *= (((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::exp(std::lgamma(((_Tp)1) - __s))) / __numeric_constants< _Tp> ::__pi()); 
# 312
return __zeta; 
# 313
} else { 
# 314
if (__s < ((_Tp)20)) 
# 315
{ 
# 317
bool __glob = true; 
# 318
if (__glob) { 
# 319
return __riemann_zeta_glob(__s); } else 
# 321
{ 
# 322
if (__s > ((_Tp)1)) { 
# 323
return __riemann_zeta_sum(__s); } else 
# 325
{ 
# 326
_Tp __zeta = ((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::tgamma(((_Tp)1) - __s)) * __riemann_zeta_sum(((_Tp)1) - __s); 
# 335
return __zeta; 
# 336
}  
# 337
}  
# 338
} else { 
# 340
return __riemann_zeta_product(__s); }  }  }  }  
# 341
} 
# 365 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 367
__hurwitz_zeta_glob(_Tp __a, _Tp __s) 
# 368
{ 
# 369
_Tp __zeta = ((_Tp)0); 
# 371
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 373
const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 376
const unsigned __maxit = (10000); 
# 377
for (unsigned __i = (0); __i < __maxit; ++__i) 
# 378
{ 
# 379
bool __punt = false; 
# 380
_Tp __sgn = ((_Tp)1); 
# 381
_Tp __term = ((_Tp)0); 
# 382
for (unsigned __j = (0); __j <= __i; ++__j) 
# 383
{ 
# 385
_Tp __bincoeff = (std::lgamma((_Tp)((1) + __i)) - std::lgamma((_Tp)((1) + __j))) - std::lgamma((_Tp)(((1) + __i) - __j)); 
# 393
if (__bincoeff > __max_bincoeff) 
# 394
{ 
# 396
__punt = true; 
# 397
break; 
# 398
}  
# 399
__bincoeff = std::exp(__bincoeff); 
# 400
__term += ((__sgn * __bincoeff) * std::pow((_Tp)(__a + __j), -__s)); 
# 401
__sgn *= ((_Tp)(-1)); 
# 402
}  
# 403
if (__punt) { 
# 404
break; }  
# 405
__term /= ((_Tp)(__i + (1))); 
# 406
if (std::abs(__term / __zeta) < __eps) { 
# 407
break; }  
# 408
__zeta += __term; 
# 409
}  
# 411
__zeta /= (__s - ((_Tp)1)); 
# 413
return __zeta; 
# 414
} 
# 430 "/usr/include/c++/12.2.1/tr1/riemann_zeta.tcc" 3
template< class _Tp> inline _Tp 
# 432
__hurwitz_zeta(_Tp __a, _Tp __s) 
# 433
{ return __hurwitz_zeta_glob(__a, __s); } 
# 434
}
# 441
}
# 61 "/usr/include/c++/12.2.1/bits/specfun.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 206 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float assoc_laguerref(unsigned __n, unsigned __m, float __x) 
# 207
{ return __detail::__assoc_laguerre< float> (__n, __m, __x); } 
# 216
inline long double assoc_laguerrel(unsigned __n, unsigned __m, long double __x) 
# 217
{ return __detail::__assoc_laguerre< long double> (__n, __m, __x); } 
# 250 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 252
assoc_laguerre(unsigned __n, unsigned __m, _Tp __x) 
# 253
{ 
# 254
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 255
return __detail::__assoc_laguerre< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __m, __x); 
# 256
} 
# 267 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float assoc_legendref(unsigned __l, unsigned __m, float __x) 
# 268
{ return __detail::__assoc_legendre_p< float> (__l, __m, __x); } 
# 276
inline long double assoc_legendrel(unsigned __l, unsigned __m, long double __x) 
# 277
{ return __detail::__assoc_legendre_p< long double> (__l, __m, __x); } 
# 296 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 298
assoc_legendre(unsigned __l, unsigned __m, _Tp __x) 
# 299
{ 
# 300
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 301
return __detail::__assoc_legendre_p< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __m, __x); 
# 302
} 
# 312 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float betaf(float __a, float __b) 
# 313
{ return __detail::__beta< float> (__a, __b); } 
# 322
inline long double betal(long double __a, long double __b) 
# 323
{ return __detail::__beta< long double> (__a, __b); } 
# 341 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tpa, class _Tpb> inline typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type 
# 343
beta(_Tpa __a, _Tpb __b) 
# 344
{ 
# 345
typedef typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type __type; 
# 346
return __detail::__beta< typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type> (__a, __b); 
# 347
} 
# 358 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float comp_ellint_1f(float __k) 
# 359
{ return __detail::__comp_ellint_1< float> (__k); } 
# 368
inline long double comp_ellint_1l(long double __k) 
# 369
{ return __detail::__comp_ellint_1< long double> (__k); } 
# 389 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 391
comp_ellint_1(_Tp __k) 
# 392
{ 
# 393
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 394
return __detail::__comp_ellint_1< typename __gnu_cxx::__promote< _Tp> ::__type> (__k); 
# 395
} 
# 406 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float comp_ellint_2f(float __k) 
# 407
{ return __detail::__comp_ellint_2< float> (__k); } 
# 416
inline long double comp_ellint_2l(long double __k) 
# 417
{ return __detail::__comp_ellint_2< long double> (__k); } 
# 436 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 438
comp_ellint_2(_Tp __k) 
# 439
{ 
# 440
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 441
return __detail::__comp_ellint_2< typename __gnu_cxx::__promote< _Tp> ::__type> (__k); 
# 442
} 
# 453 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float comp_ellint_3f(float __k, float __nu) 
# 454
{ return __detail::__comp_ellint_3< float> (__k, __nu); } 
# 463
inline long double comp_ellint_3l(long double __k, long double __nu) 
# 464
{ return __detail::__comp_ellint_3< long double> (__k, __nu); } 
# 487 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp, class _Tpn> inline typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type 
# 489
comp_ellint_3(_Tp __k, _Tpn __nu) 
# 490
{ 
# 491
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type __type; 
# 492
return __detail::__comp_ellint_3< typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type> (__k, __nu); 
# 493
} 
# 504 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float cyl_bessel_if(float __nu, float __x) 
# 505
{ return __detail::__cyl_bessel_i< float> (__nu, __x); } 
# 514
inline long double cyl_bessel_il(long double __nu, long double __x) 
# 515
{ return __detail::__cyl_bessel_i< long double> (__nu, __x); } 
# 533 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 535
cyl_bessel_i(_Tpnu __nu, _Tp __x) 
# 536
{ 
# 537
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 538
return __detail::__cyl_bessel_i< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 539
} 
# 550 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float cyl_bessel_jf(float __nu, float __x) 
# 551
{ return __detail::__cyl_bessel_j< float> (__nu, __x); } 
# 560
inline long double cyl_bessel_jl(long double __nu, long double __x) 
# 561
{ return __detail::__cyl_bessel_j< long double> (__nu, __x); } 
# 579 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 581
cyl_bessel_j(_Tpnu __nu, _Tp __x) 
# 582
{ 
# 583
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 584
return __detail::__cyl_bessel_j< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 585
} 
# 596 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float cyl_bessel_kf(float __nu, float __x) 
# 597
{ return __detail::__cyl_bessel_k< float> (__nu, __x); } 
# 606
inline long double cyl_bessel_kl(long double __nu, long double __x) 
# 607
{ return __detail::__cyl_bessel_k< long double> (__nu, __x); } 
# 631 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 633
cyl_bessel_k(_Tpnu __nu, _Tp __x) 
# 634
{ 
# 635
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 636
return __detail::__cyl_bessel_k< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 637
} 
# 648 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float cyl_neumannf(float __nu, float __x) 
# 649
{ return __detail::__cyl_neumann_n< float> (__nu, __x); } 
# 658
inline long double cyl_neumannl(long double __nu, long double __x) 
# 659
{ return __detail::__cyl_neumann_n< long double> (__nu, __x); } 
# 679 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 681
cyl_neumann(_Tpnu __nu, _Tp __x) 
# 682
{ 
# 683
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 684
return __detail::__cyl_neumann_n< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 685
} 
# 696 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float ellint_1f(float __k, float __phi) 
# 697
{ return __detail::__ellint_1< float> (__k, __phi); } 
# 706
inline long double ellint_1l(long double __k, long double __phi) 
# 707
{ return __detail::__ellint_1< long double> (__k, __phi); } 
# 727 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp, class _Tpp> inline typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type 
# 729
ellint_1(_Tp __k, _Tpp __phi) 
# 730
{ 
# 731
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type __type; 
# 732
return __detail::__ellint_1< typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type> (__k, __phi); 
# 733
} 
# 744 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float ellint_2f(float __k, float __phi) 
# 745
{ return __detail::__ellint_2< float> (__k, __phi); } 
# 754
inline long double ellint_2l(long double __k, long double __phi) 
# 755
{ return __detail::__ellint_2< long double> (__k, __phi); } 
# 775 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp, class _Tpp> inline typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type 
# 777
ellint_2(_Tp __k, _Tpp __phi) 
# 778
{ 
# 779
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type __type; 
# 780
return __detail::__ellint_2< typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type> (__k, __phi); 
# 781
} 
# 792 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float ellint_3f(float __k, float __nu, float __phi) 
# 793
{ return __detail::__ellint_3< float> (__k, __nu, __phi); } 
# 802
inline long double ellint_3l(long double __k, long double __nu, long double __phi) 
# 803
{ return __detail::__ellint_3< long double> (__k, __nu, __phi); } 
# 828 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp, class _Tpn, class _Tpp> inline typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type 
# 830
ellint_3(_Tp __k, _Tpn __nu, _Tpp __phi) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type __type; 
# 833
return __detail::__ellint_3< typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type> (__k, __nu, __phi); 
# 834
} 
# 844 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float expintf(float __x) 
# 845
{ return __detail::__expint< float> (__x); } 
# 854
inline long double expintl(long double __x) 
# 855
{ return __detail::__expint< long double> (__x); } 
# 868 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 870
expint(_Tp __x) 
# 871
{ 
# 872
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 873
return __detail::__expint< typename __gnu_cxx::__promote< _Tp> ::__type> (__x); 
# 874
} 
# 885 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float hermitef(unsigned __n, float __x) 
# 886
{ return __detail::__poly_hermite< float> (__n, __x); } 
# 895
inline long double hermitel(unsigned __n, long double __x) 
# 896
{ return __detail::__poly_hermite< long double> (__n, __x); } 
# 916 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 918
hermite(unsigned __n, _Tp __x) 
# 919
{ 
# 920
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 921
return __detail::__poly_hermite< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 922
} 
# 933 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float laguerref(unsigned __n, float __x) 
# 934
{ return __detail::__laguerre< float> (__n, __x); } 
# 943
inline long double laguerrel(unsigned __n, long double __x) 
# 944
{ return __detail::__laguerre< long double> (__n, __x); } 
# 960 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 962
laguerre(unsigned __n, _Tp __x) 
# 963
{ 
# 964
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 965
return __detail::__laguerre< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 966
} 
# 977 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float legendref(unsigned __l, float __x) 
# 978
{ return __detail::__poly_legendre_p< float> (__l, __x); } 
# 987
inline long double legendrel(unsigned __l, long double __x) 
# 988
{ return __detail::__poly_legendre_p< long double> (__l, __x); } 
# 1005 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1007
legendre(unsigned __l, _Tp __x) 
# 1008
{ 
# 1009
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1010
return __detail::__poly_legendre_p< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __x); 
# 1011
} 
# 1022 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float riemann_zetaf(float __s) 
# 1023
{ return __detail::__riemann_zeta< float> (__s); } 
# 1032
inline long double riemann_zetal(long double __s) 
# 1033
{ return __detail::__riemann_zeta< long double> (__s); } 
# 1056 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1058
riemann_zeta(_Tp __s) 
# 1059
{ 
# 1060
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1061
return __detail::__riemann_zeta< typename __gnu_cxx::__promote< _Tp> ::__type> (__s); 
# 1062
} 
# 1073 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float sph_besself(unsigned __n, float __x) 
# 1074
{ return __detail::__sph_bessel< float> (__n, __x); } 
# 1083
inline long double sph_bessell(unsigned __n, long double __x) 
# 1084
{ return __detail::__sph_bessel< long double> (__n, __x); } 
# 1100 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1102
sph_bessel(unsigned __n, _Tp __x) 
# 1103
{ 
# 1104
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1105
return __detail::__sph_bessel< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 1106
} 
# 1117 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float sph_legendref(unsigned __l, unsigned __m, float __theta) 
# 1118
{ return __detail::__sph_legendre< float> (__l, __m, __theta); } 
# 1128 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline long double sph_legendrel(unsigned __l, unsigned __m, long double __theta) 
# 1129
{ return __detail::__sph_legendre< long double> (__l, __m, __theta); } 
# 1147 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1149
sph_legendre(unsigned __l, unsigned __m, _Tp __theta) 
# 1150
{ 
# 1151
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1152
return __detail::__sph_legendre< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __m, __theta); 
# 1153
} 
# 1164 "/usr/include/c++/12.2.1/bits/specfun.h" 3
inline float sph_neumannf(unsigned __n, float __x) 
# 1165
{ return __detail::__sph_neumann< float> (__n, __x); } 
# 1174
inline long double sph_neumannl(unsigned __n, long double __x) 
# 1175
{ return __detail::__sph_neumann< long double> (__n, __x); } 
# 1191 "/usr/include/c++/12.2.1/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1193
sph_neumann(unsigned __n, _Tp __x) 
# 1194
{ 
# 1195
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1196
return __detail::__sph_neumann< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 1197
} 
# 1202
}
# 1388 "/usr/include/c++/12.2.1/bits/specfun.h" 3
#pragma GCC visibility pop
# 1938 "/usr/include/c++/12.2.1/cmath" 3
}
# 38 "/usr/include/c++/12.2.1/math.h" 3
using std::abs;
# 39
using std::acos;
# 40
using std::asin;
# 41
using std::atan;
# 42
using std::atan2;
# 43
using std::cos;
# 44
using std::sin;
# 45
using std::tan;
# 46
using std::cosh;
# 47
using std::sinh;
# 48
using std::tanh;
# 49
using std::exp;
# 50
using std::frexp;
# 51
using std::ldexp;
# 52
using std::log;
# 53
using std::log10;
# 54
using std::modf;
# 55
using std::pow;
# 56
using std::sqrt;
# 57
using std::ceil;
# 58
using std::fabs;
# 59
using std::floor;
# 60
using std::fmod;
# 63
using std::fpclassify;
# 64
using std::isfinite;
# 65
using std::isinf;
# 66
using std::isnan;
# 67
using std::isnormal;
# 68
using std::signbit;
# 69
using std::isgreater;
# 70
using std::isgreaterequal;
# 71
using std::isless;
# 72
using std::islessequal;
# 73
using std::islessgreater;
# 74
using std::isunordered;
# 78
using std::acosh;
# 79
using std::asinh;
# 80
using std::atanh;
# 81
using std::cbrt;
# 82
using std::copysign;
# 83
using std::erf;
# 84
using std::erfc;
# 85
using std::exp2;
# 86
using std::expm1;
# 87
using std::fdim;
# 88
using std::fma;
# 89
using std::fmax;
# 90
using std::fmin;
# 91
using std::hypot;
# 92
using std::ilogb;
# 93
using std::lgamma;
# 94
using std::llrint;
# 95
using std::llround;
# 96
using std::log1p;
# 97
using std::log2;
# 98
using std::logb;
# 99
using std::lrint;
# 100
using std::lround;
# 101
using std::nearbyint;
# 102
using std::nextafter;
# 103
using std::nexttoward;
# 104
using std::remainder;
# 105
using std::remquo;
# 106
using std::rint;
# 107
using std::round;
# 108
using std::scalbln;
# 109
using std::scalbn;
# 110
using std::tgamma;
# 111
using std::trunc;
# 10623 "/opt/cuda/include/crt/math_functions.h"
namespace std { 
# 10624
constexpr bool signbit(float x); 
# 10625
constexpr bool signbit(double x); 
# 10626
constexpr bool signbit(long double x); 
# 10627
constexpr bool isfinite(float x); 
# 10628
constexpr bool isfinite(double x); 
# 10629
constexpr bool isfinite(long double x); 
# 10630
constexpr bool isnan(float x); 
# 10635
constexpr bool isnan(double x); 
# 10637
constexpr bool isnan(long double x); 
# 10638
constexpr bool isinf(float x); 
# 10643
constexpr bool isinf(double x); 
# 10645
constexpr bool isinf(long double x); 
# 10646
}
# 10802 "/opt/cuda/include/crt/math_functions.h"
namespace std { 
# 10804
template< class T> extern T __pow_helper(T, int); 
# 10805
template< class T> extern T __cmath_power(T, unsigned); 
# 10806
}
# 10808
using std::abs;
# 10809
using std::fabs;
# 10810
using std::ceil;
# 10811
using std::floor;
# 10812
using std::sqrt;
# 10814
using std::pow;
# 10816
using std::log;
# 10817
using std::log10;
# 10818
using std::fmod;
# 10819
using std::modf;
# 10820
using std::exp;
# 10821
using std::frexp;
# 10822
using std::ldexp;
# 10823
using std::asin;
# 10824
using std::sin;
# 10825
using std::sinh;
# 10826
using std::acos;
# 10827
using std::cos;
# 10828
using std::cosh;
# 10829
using std::atan;
# 10830
using std::atan2;
# 10831
using std::tan;
# 10832
using std::tanh;
# 11203 "/opt/cuda/include/crt/math_functions.h"
namespace std { 
# 11212 "/opt/cuda/include/crt/math_functions.h"
extern inline long long abs(long long); 
# 11222 "/opt/cuda/include/crt/math_functions.h"
extern inline long abs(long); 
# 11223
extern constexpr float abs(float); 
# 11224
extern constexpr double abs(double); 
# 11225
extern constexpr float fabs(float); 
# 11226
extern constexpr float ceil(float); 
# 11227
extern constexpr float floor(float); 
# 11228
extern constexpr float sqrt(float); 
# 11229
extern constexpr float pow(float, float); 
# 11234
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 11244
extern constexpr float log(float); 
# 11245
extern constexpr float log10(float); 
# 11246
extern constexpr float fmod(float, float); 
# 11247
extern inline float modf(float, float *); 
# 11248
extern constexpr float exp(float); 
# 11249
extern inline float frexp(float, int *); 
# 11250
extern constexpr float ldexp(float, int); 
# 11251
extern constexpr float asin(float); 
# 11252
extern constexpr float sin(float); 
# 11253
extern constexpr float sinh(float); 
# 11254
extern constexpr float acos(float); 
# 11255
extern constexpr float cos(float); 
# 11256
extern constexpr float cosh(float); 
# 11257
extern constexpr float atan(float); 
# 11258
extern constexpr float atan2(float, float); 
# 11259
extern constexpr float tan(float); 
# 11260
extern constexpr float tanh(float); 
# 11343 "/opt/cuda/include/crt/math_functions.h"
}
# 11449 "/opt/cuda/include/crt/math_functions.h"
namespace std { 
# 11450
constexpr float logb(float a); 
# 11451
constexpr int ilogb(float a); 
# 11452
constexpr float scalbn(float a, int b); 
# 11453
constexpr float scalbln(float a, long b); 
# 11454
constexpr float exp2(float a); 
# 11455
constexpr float expm1(float a); 
# 11456
constexpr float log2(float a); 
# 11457
constexpr float log1p(float a); 
# 11458
constexpr float acosh(float a); 
# 11459
constexpr float asinh(float a); 
# 11460
constexpr float atanh(float a); 
# 11461
constexpr float hypot(float a, float b); 
# 11462
constexpr float cbrt(float a); 
# 11463
constexpr float erf(float a); 
# 11464
constexpr float erfc(float a); 
# 11465
constexpr float lgamma(float a); 
# 11466
constexpr float tgamma(float a); 
# 11467
constexpr float copysign(float a, float b); 
# 11468
constexpr float nextafter(float a, float b); 
# 11469
constexpr float remainder(float a, float b); 
# 11470
inline float remquo(float a, float b, int * quo); 
# 11471
constexpr float round(float a); 
# 11472
constexpr long lround(float a); 
# 11473
constexpr long long llround(float a); 
# 11474
constexpr float trunc(float a); 
# 11475
constexpr float rint(float a); 
# 11476
constexpr long lrint(float a); 
# 11477
constexpr long long llrint(float a); 
# 11478
constexpr float nearbyint(float a); 
# 11479
constexpr float fdim(float a, float b); 
# 11480
constexpr float fma(float a, float b, float c); 
# 11481
constexpr float fmax(float a, float b); 
# 11482
constexpr float fmin(float a, float b); 
# 11483
}
# 11588 "/opt/cuda/include/crt/math_functions.h"
static inline float exp10(const float a); 
# 11590
static inline float rsqrt(const float a); 
# 11592
static inline float rcbrt(const float a); 
# 11594
static inline float sinpi(const float a); 
# 11596
static inline float cospi(const float a); 
# 11598
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
# 11600
static inline void sincos(const float a, float *const sptr, float *const cptr); 
# 11602
static inline float j0(const float a); 
# 11604
static inline float j1(const float a); 
# 11606
static inline float jn(const int n, const float a); 
# 11608
static inline float y0(const float a); 
# 11610
static inline float y1(const float a); 
# 11612
static inline float yn(const int n, const float a); 
# 11614
__attribute__((unused)) static inline float cyl_bessel_i0(const float a); 
# 11616
__attribute__((unused)) static inline float cyl_bessel_i1(const float a); 
# 11618
static inline float erfinv(const float a); 
# 11620
static inline float erfcinv(const float a); 
# 11622
static inline float normcdfinv(const float a); 
# 11624
static inline float normcdf(const float a); 
# 11626
static inline float erfcx(const float a); 
# 11628
static inline double copysign(const double a, const float b); 
# 11630
static inline double copysign(const float a, const double b); 
# 11638
static inline unsigned min(const unsigned a, const unsigned b); 
# 11646
static inline unsigned min(const int a, const unsigned b); 
# 11654
static inline unsigned min(const unsigned a, const int b); 
# 11662
static inline long min(const long a, const long b); 
# 11670
static inline unsigned long min(const unsigned long a, const unsigned long b); 
# 11678
static inline unsigned long min(const long a, const unsigned long b); 
# 11686
static inline unsigned long min(const unsigned long a, const long b); 
# 11694
static inline long long min(const long long a, const long long b); 
# 11702
static inline unsigned long long min(const unsigned long long a, const unsigned long long b); 
# 11710
static inline unsigned long long min(const long long a, const unsigned long long b); 
# 11718
static inline unsigned long long min(const unsigned long long a, const long long b); 
# 11729 "/opt/cuda/include/crt/math_functions.h"
static inline float min(const float a, const float b); 
# 11740 "/opt/cuda/include/crt/math_functions.h"
static inline double min(const double a, const double b); 
# 11750 "/opt/cuda/include/crt/math_functions.h"
static inline double min(const float a, const double b); 
# 11760 "/opt/cuda/include/crt/math_functions.h"
static inline double min(const double a, const float b); 
# 11768
static inline unsigned max(const unsigned a, const unsigned b); 
# 11776
static inline unsigned max(const int a, const unsigned b); 
# 11784
static inline unsigned max(const unsigned a, const int b); 
# 11792
static inline long max(const long a, const long b); 
# 11800
static inline unsigned long max(const unsigned long a, const unsigned long b); 
# 11808
static inline unsigned long max(const long a, const unsigned long b); 
# 11816
static inline unsigned long max(const unsigned long a, const long b); 
# 11824
static inline long long max(const long long a, const long long b); 
# 11832
static inline unsigned long long max(const unsigned long long a, const unsigned long long b); 
# 11840
static inline unsigned long long max(const long long a, const unsigned long long b); 
# 11848
static inline unsigned long long max(const unsigned long long a, const long long b); 
# 11859 "/opt/cuda/include/crt/math_functions.h"
static inline float max(const float a, const float b); 
# 11870 "/opt/cuda/include/crt/math_functions.h"
static inline double max(const double a, const double b); 
# 11880 "/opt/cuda/include/crt/math_functions.h"
static inline double max(const float a, const double b); 
# 11890 "/opt/cuda/include/crt/math_functions.h"
static inline double max(const double a, const float b); 
# 11901 "/opt/cuda/include/crt/math_functions.h"
extern "C" {
# 11902
__attribute__((unused)) inline void *__nv_aligned_device_malloc(::size_t size, ::size_t align) 
# 11903
{int volatile ___ = 1;(void)size;(void)align;
# 11906
::exit(___);}
#if 0
# 11903
{ 
# 11904
__attribute__((unused)) void *__nv_aligned_device_malloc_impl(::size_t, ::size_t); 
# 11905
return __nv_aligned_device_malloc_impl(size, align); 
# 11906
} 
#endif
# 11907 "/opt/cuda/include/crt/math_functions.h"
}
# 758 "/opt/cuda/include/crt/math_functions.hpp"
static inline float exp10(const float a) 
# 759
{ 
# 760
return exp10f(a); 
# 761
} 
# 763
static inline float rsqrt(const float a) 
# 764
{ 
# 765
return rsqrtf(a); 
# 766
} 
# 768
static inline float rcbrt(const float a) 
# 769
{ 
# 770
return rcbrtf(a); 
# 771
} 
# 773
static inline float sinpi(const float a) 
# 774
{ 
# 775
return sinpif(a); 
# 776
} 
# 778
static inline float cospi(const float a) 
# 779
{ 
# 780
return cospif(a); 
# 781
} 
# 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
# 784
{ 
# 785
sincospif(a, sptr, cptr); 
# 786
} 
# 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
# 789
{ 
# 790
sincosf(a, sptr, cptr); 
# 791
} 
# 793
static inline float j0(const float a) 
# 794
{ 
# 795
return j0f(a); 
# 796
} 
# 798
static inline float j1(const float a) 
# 799
{ 
# 800
return j1f(a); 
# 801
} 
# 803
static inline float jn(const int n, const float a) 
# 804
{ 
# 805
return jnf(n, a); 
# 806
} 
# 808
static inline float y0(const float a) 
# 809
{ 
# 810
return y0f(a); 
# 811
} 
# 813
static inline float y1(const float a) 
# 814
{ 
# 815
return y1f(a); 
# 816
} 
# 818
static inline float yn(const int n, const float a) 
# 819
{ 
# 820
return ynf(n, a); 
# 821
} 
# 823
__attribute__((unused)) static inline float cyl_bessel_i0(const float a) 
# 824
{int volatile ___ = 1;(void)a;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
return cyl_bessel_i0f(a); 
# 826
} 
#endif
# 828 "/opt/cuda/include/crt/math_functions.hpp"
__attribute__((unused)) static inline float cyl_bessel_i1(const float a) 
# 829
{int volatile ___ = 1;(void)a;
# 831
::exit(___);}
#if 0
# 829
{ 
# 830
return cyl_bessel_i1f(a); 
# 831
} 
#endif
# 833 "/opt/cuda/include/crt/math_functions.hpp"
static inline float erfinv(const float a) 
# 834
{ 
# 835
return erfinvf(a); 
# 836
} 
# 838
static inline float erfcinv(const float a) 
# 839
{ 
# 840
return erfcinvf(a); 
# 841
} 
# 843
static inline float normcdfinv(const float a) 
# 844
{ 
# 845
return normcdfinvf(a); 
# 846
} 
# 848
static inline float normcdf(const float a) 
# 849
{ 
# 850
return normcdff(a); 
# 851
} 
# 853
static inline float erfcx(const float a) 
# 854
{ 
# 855
return erfcxf(a); 
# 856
} 
# 858
static inline double copysign(const double a, const float b) 
# 859
{ 
# 860
return copysign(a, static_cast< double>(b)); 
# 861
} 
# 863
static inline double copysign(const float a, const double b) 
# 864
{ 
# 865
return copysign(static_cast< double>(a), b); 
# 866
} 
# 868
static inline unsigned min(const unsigned a, const unsigned b) 
# 869
{ 
# 870
return umin(a, b); 
# 871
} 
# 873
static inline unsigned min(const int a, const unsigned b) 
# 874
{ 
# 875
return umin(static_cast< unsigned>(a), b); 
# 876
} 
# 878
static inline unsigned min(const unsigned a, const int b) 
# 879
{ 
# 880
return umin(a, static_cast< unsigned>(b)); 
# 881
} 
# 883
static inline long min(const long a, const long b) 
# 884
{ 
# 885
long retval; 
# 891
if (sizeof(long) == sizeof(int)) { 
# 895
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
# 896
} else { 
# 897
retval = (static_cast< long>(llmin(static_cast< long long>(a), static_cast< long long>(b)))); 
# 898
}  
# 899
return retval; 
# 900
} 
# 902
static inline unsigned long min(const unsigned long a, const unsigned long b) 
# 903
{ 
# 904
unsigned long retval; 
# 908
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 912
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 913
} else { 
# 914
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 915
}  
# 916
return retval; 
# 917
} 
# 919
static inline unsigned long min(const long a, const unsigned long b) 
# 920
{ 
# 921
unsigned long retval; 
# 925
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 929
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 930
} else { 
# 931
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 932
}  
# 933
return retval; 
# 934
} 
# 936
static inline unsigned long min(const unsigned long a, const long b) 
# 937
{ 
# 938
unsigned long retval; 
# 942
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 946
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 947
} else { 
# 948
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 949
}  
# 950
return retval; 
# 951
} 
# 953
static inline long long min(const long long a, const long long b) 
# 954
{ 
# 955
return llmin(a, b); 
# 956
} 
# 958
static inline unsigned long long min(const unsigned long long a, const unsigned long long b) 
# 959
{ 
# 960
return ullmin(a, b); 
# 961
} 
# 963
static inline unsigned long long min(const long long a, const unsigned long long b) 
# 964
{ 
# 965
return ullmin(static_cast< unsigned long long>(a), b); 
# 966
} 
# 968
static inline unsigned long long min(const unsigned long long a, const long long b) 
# 969
{ 
# 970
return ullmin(a, static_cast< unsigned long long>(b)); 
# 971
} 
# 973
static inline float min(const float a, const float b) 
# 974
{ 
# 975
return fminf(a, b); 
# 976
} 
# 978
static inline double min(const double a, const double b) 
# 979
{ 
# 980
return fmin(a, b); 
# 981
} 
# 983
static inline double min(const float a, const double b) 
# 984
{ 
# 985
return fmin(static_cast< double>(a), b); 
# 986
} 
# 988
static inline double min(const double a, const float b) 
# 989
{ 
# 990
return fmin(a, static_cast< double>(b)); 
# 991
} 
# 993
static inline unsigned max(const unsigned a, const unsigned b) 
# 994
{ 
# 995
return umax(a, b); 
# 996
} 
# 998
static inline unsigned max(const int a, const unsigned b) 
# 999
{ 
# 1000
return umax(static_cast< unsigned>(a), b); 
# 1001
} 
# 1003
static inline unsigned max(const unsigned a, const int b) 
# 1004
{ 
# 1005
return umax(a, static_cast< unsigned>(b)); 
# 1006
} 
# 1008
static inline long max(const long a, const long b) 
# 1009
{ 
# 1010
long retval; 
# 1015
if (sizeof(long) == sizeof(int)) { 
# 1019
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
# 1020
} else { 
# 1021
retval = (static_cast< long>(llmax(static_cast< long long>(a), static_cast< long long>(b)))); 
# 1022
}  
# 1023
return retval; 
# 1024
} 
# 1026
static inline unsigned long max(const unsigned long a, const unsigned long b) 
# 1027
{ 
# 1028
unsigned long retval; 
# 1032
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1036
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1037
} else { 
# 1038
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1039
}  
# 1040
return retval; 
# 1041
} 
# 1043
static inline unsigned long max(const long a, const unsigned long b) 
# 1044
{ 
# 1045
unsigned long retval; 
# 1049
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1053
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1054
} else { 
# 1055
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1056
}  
# 1057
return retval; 
# 1058
} 
# 1060
static inline unsigned long max(const unsigned long a, const long b) 
# 1061
{ 
# 1062
unsigned long retval; 
# 1066
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1070
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1071
} else { 
# 1072
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1073
}  
# 1074
return retval; 
# 1075
} 
# 1077
static inline long long max(const long long a, const long long b) 
# 1078
{ 
# 1079
return llmax(a, b); 
# 1080
} 
# 1082
static inline unsigned long long max(const unsigned long long a, const unsigned long long b) 
# 1083
{ 
# 1084
return ullmax(a, b); 
# 1085
} 
# 1087
static inline unsigned long long max(const long long a, const unsigned long long b) 
# 1088
{ 
# 1089
return ullmax(static_cast< unsigned long long>(a), b); 
# 1090
} 
# 1092
static inline unsigned long long max(const unsigned long long a, const long long b) 
# 1093
{ 
# 1094
return ullmax(a, static_cast< unsigned long long>(b)); 
# 1095
} 
# 1097
static inline float max(const float a, const float b) 
# 1098
{ 
# 1099
return fmaxf(a, b); 
# 1100
} 
# 1102
static inline double max(const double a, const double b) 
# 1103
{ 
# 1104
return fmax(a, b); 
# 1105
} 
# 1107
static inline double max(const float a, const double b) 
# 1108
{ 
# 1109
return fmax(static_cast< double>(a), b); 
# 1110
} 
# 1112
static inline double max(const double a, const float b) 
# 1113
{ 
# 1114
return fmax(a, static_cast< double>(b)); 
# 1115
} 
# 1126 "/opt/cuda/include/crt/math_functions.hpp"
inline int min(const int a, const int b) 
# 1127
{ 
# 1128
return (a < b) ? a : b; 
# 1129
} 
# 1131
inline unsigned umin(const unsigned a, const unsigned b) 
# 1132
{ 
# 1133
return (a < b) ? a : b; 
# 1134
} 
# 1136
inline long long llmin(const long long a, const long long b) 
# 1137
{ 
# 1138
return (a < b) ? a : b; 
# 1139
} 
# 1141
inline unsigned long long ullmin(const unsigned long long a, const unsigned long long 
# 1142
b) 
# 1143
{ 
# 1144
return (a < b) ? a : b; 
# 1145
} 
# 1147
inline int max(const int a, const int b) 
# 1148
{ 
# 1149
return (a > b) ? a : b; 
# 1150
} 
# 1152
inline unsigned umax(const unsigned a, const unsigned b) 
# 1153
{ 
# 1154
return (a > b) ? a : b; 
# 1155
} 
# 1157
inline long long llmax(const long long a, const long long b) 
# 1158
{ 
# 1159
return (a > b) ? a : b; 
# 1160
} 
# 1162
inline unsigned long long ullmax(const unsigned long long a, const unsigned long long 
# 1163
b) 
# 1164
{ 
# 1165
return (a > b) ? a : b; 
# 1166
} 
# 91 "/opt/cuda/include/crt/device_functions.h"
extern "C" {
# 3211 "/opt/cuda/include/crt/device_functions.h"
static inline int __vimax_s32_relu(const int a, const int b); 
# 3223 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b); 
# 3232 "/opt/cuda/include/crt/device_functions.h"
static inline int __vimin_s32_relu(const int a, const int b); 
# 3244 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b); 
# 3253 "/opt/cuda/include/crt/device_functions.h"
static inline int __vimax3_s32(const int a, const int b, const int c); 
# 3265 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3274 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3286 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3295 "/opt/cuda/include/crt/device_functions.h"
static inline int __vimin3_s32(const int a, const int b, const int c); 
# 3307 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3316 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3328 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3337 "/opt/cuda/include/crt/device_functions.h"
static inline int __vimax3_s32_relu(const int a, const int b, const int c); 
# 3349 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3358 "/opt/cuda/include/crt/device_functions.h"
static inline int __vimin3_s32_relu(const int a, const int b, const int c); 
# 3370 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3379 "/opt/cuda/include/crt/device_functions.h"
static inline int __viaddmax_s32(const int a, const int b, const int c); 
# 3391 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3400 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3412 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3421 "/opt/cuda/include/crt/device_functions.h"
static inline int __viaddmin_s32(const int a, const int b, const int c); 
# 3433 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3442 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3454 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3464 "/opt/cuda/include/crt/device_functions.h"
static inline int __viaddmax_s32_relu(const int a, const int b, const int c); 
# 3476 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3486 "/opt/cuda/include/crt/device_functions.h"
static inline int __viaddmin_s32_relu(const int a, const int b, const int c); 
# 3498 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3507 "/opt/cuda/include/crt/device_functions.h"
static inline int __vibmax_s32(const int a, const int b, bool *const pred); 
# 3516 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred); 
# 3525 "/opt/cuda/include/crt/device_functions.h"
static inline int __vibmin_s32(const int a, const int b, bool *const pred); 
# 3534 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred); 
# 3548 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3562 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3576 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3590 "/opt/cuda/include/crt/device_functions.h"
static inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3597
}
# 102 "/opt/cuda/include/crt/device_functions.hpp"
static inline int __vimax_s32_relu(const int a, const int b) { 
# 109
int ans = max(a, b); 
# 111
return (ans > 0) ? ans : 0; 
# 113
} 
# 115
static inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b) { 
# 123
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 124
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 126
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 127
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 130
short aS_lo = *((short *)(&aU_lo)); 
# 131
short aS_hi = *((short *)(&aU_hi)); 
# 133
short bS_lo = *((short *)(&bU_lo)); 
# 134
short bS_hi = *((short *)(&bU_hi)); 
# 137
short ansS_lo = (short)max(aS_lo, bS_lo); 
# 138
short ansS_hi = (short)max(aS_hi, bS_hi); 
# 141
if (ansS_lo < 0) { ansS_lo = (0); }  
# 142
if (ansS_hi < 0) { ansS_hi = (0); }  
# 145
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 146
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 149
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 151
return ans; 
# 153
} 
# 155
static inline int __vimin_s32_relu(const int a, const int b) { 
# 162
int ans = min(a, b); 
# 164
return (ans > 0) ? ans : 0; 
# 166
} 
# 168
static inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b) { 
# 176
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 177
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 179
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 180
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 183
short aS_lo = *((short *)(&aU_lo)); 
# 184
short aS_hi = *((short *)(&aU_hi)); 
# 186
short bS_lo = *((short *)(&bU_lo)); 
# 187
short bS_hi = *((short *)(&bU_hi)); 
# 190
short ansS_lo = (short)min(aS_lo, bS_lo); 
# 191
short ansS_hi = (short)min(aS_hi, bS_hi); 
# 194
if (ansS_lo < 0) { ansS_lo = (0); }  
# 195
if (ansS_hi < 0) { ansS_hi = (0); }  
# 198
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 199
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 202
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 204
return ans; 
# 206
} 
# 208
static inline int __vimax3_s32(const int a, const int b, const int c) { 
# 218 "/opt/cuda/include/crt/device_functions.hpp"
return max(max(a, b), c); 
# 220
} 
# 222
static inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 234 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 235
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 237
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 238
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 240
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 241
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 244
short aS_lo = *((short *)(&aU_lo)); 
# 245
short aS_hi = *((short *)(&aU_hi)); 
# 247
short bS_lo = *((short *)(&bU_lo)); 
# 248
short bS_hi = *((short *)(&bU_hi)); 
# 250
short cS_lo = *((short *)(&cU_lo)); 
# 251
short cS_hi = *((short *)(&cU_hi)); 
# 254
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
# 255
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
# 258
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 259
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 262
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 264
return ans; 
# 266
} 
# 268
static inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 278 "/opt/cuda/include/crt/device_functions.hpp"
return max(max(a, b), c); 
# 280
} 
# 282
static inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 293 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 294
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 296
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 297
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 299
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 300
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 303
unsigned short ansU_lo = (unsigned short)max(max(aU_lo, bU_lo), cU_lo); 
# 304
unsigned short ansU_hi = (unsigned short)max(max(aU_hi, bU_hi), cU_hi); 
# 307
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 309
return ans; 
# 311
} 
# 313
static inline int __vimin3_s32(const int a, const int b, const int c) { 
# 323 "/opt/cuda/include/crt/device_functions.hpp"
return min(min(a, b), c); 
# 325
} 
# 327
static inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 338 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 339
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 341
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 342
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 344
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 345
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 348
short aS_lo = *((short *)(&aU_lo)); 
# 349
short aS_hi = *((short *)(&aU_hi)); 
# 351
short bS_lo = *((short *)(&bU_lo)); 
# 352
short bS_hi = *((short *)(&bU_hi)); 
# 354
short cS_lo = *((short *)(&cU_lo)); 
# 355
short cS_hi = *((short *)(&cU_hi)); 
# 358
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
# 359
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
# 362
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 363
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 366
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 368
return ans; 
# 370
} 
# 372
static inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 382 "/opt/cuda/include/crt/device_functions.hpp"
return min(min(a, b), c); 
# 384
} 
# 386
static inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 397 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 398
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 400
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 401
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 403
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 404
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 407
unsigned short ansU_lo = (unsigned short)min(min(aU_lo, bU_lo), cU_lo); 
# 408
unsigned short ansU_hi = (unsigned short)min(min(aU_hi, bU_hi), cU_hi); 
# 411
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 413
return ans; 
# 415
} 
# 417
static inline int __vimax3_s32_relu(const int a, const int b, const int c) { 
# 427 "/opt/cuda/include/crt/device_functions.hpp"
int ans = max(max(a, b), c); 
# 429
return (ans > 0) ? ans : 0; 
# 431
} 
# 433
static inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 444 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 445
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 447
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 448
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 450
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 451
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 454
short aS_lo = *((short *)(&aU_lo)); 
# 455
short aS_hi = *((short *)(&aU_hi)); 
# 457
short bS_lo = *((short *)(&bU_lo)); 
# 458
short bS_hi = *((short *)(&bU_hi)); 
# 460
short cS_lo = *((short *)(&cU_lo)); 
# 461
short cS_hi = *((short *)(&cU_hi)); 
# 464
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
# 465
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
# 468
if (ansS_lo < 0) { ansS_lo = (0); }  
# 469
if (ansS_hi < 0) { ansS_hi = (0); }  
# 472
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 473
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 476
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 478
return ans; 
# 480
} 
# 482
static inline int __vimin3_s32_relu(const int a, const int b, const int c) { 
# 492 "/opt/cuda/include/crt/device_functions.hpp"
int ans = min(min(a, b), c); 
# 494
return (ans > 0) ? ans : 0; 
# 496
} 
# 498
static inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 509 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 510
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 512
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 513
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 515
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 516
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 519
short aS_lo = *((short *)(&aU_lo)); 
# 520
short aS_hi = *((short *)(&aU_hi)); 
# 522
short bS_lo = *((short *)(&bU_lo)); 
# 523
short bS_hi = *((short *)(&bU_hi)); 
# 525
short cS_lo = *((short *)(&cU_lo)); 
# 526
short cS_hi = *((short *)(&cU_hi)); 
# 529
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
# 530
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
# 533
if (ansS_lo < 0) { ansS_lo = (0); }  
# 534
if (ansS_hi < 0) { ansS_hi = (0); }  
# 537
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 538
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 541
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 543
return ans; 
# 545
} 
# 547
static inline int __viaddmax_s32(const int a, const int b, const int c) { 
# 557 "/opt/cuda/include/crt/device_functions.hpp"
return max(a + b, c); 
# 559
} 
# 561
static inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 572 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 573
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 575
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 576
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 578
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 579
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 582
short aS_lo = *((short *)(&aU_lo)); 
# 583
short aS_hi = *((short *)(&aU_hi)); 
# 585
short bS_lo = *((short *)(&bU_lo)); 
# 586
short bS_hi = *((short *)(&bU_hi)); 
# 588
short cS_lo = *((short *)(&cU_lo)); 
# 589
short cS_hi = *((short *)(&cU_hi)); 
# 592
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
# 593
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
# 596
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 597
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 600
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 602
return ans; 
# 604
} 
# 606
static inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 616 "/opt/cuda/include/crt/device_functions.hpp"
return max(a + b, c); 
# 618
} 
# 620
static inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 631 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 632
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 634
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 635
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 637
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 638
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 641
unsigned short ansU_lo = (unsigned short)max((unsigned short)(aU_lo + bU_lo), cU_lo); 
# 642
unsigned short ansU_hi = (unsigned short)max((unsigned short)(aU_hi + bU_hi), cU_hi); 
# 645
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 647
return ans; 
# 649
} 
# 651
static inline int __viaddmin_s32(const int a, const int b, const int c) { 
# 661 "/opt/cuda/include/crt/device_functions.hpp"
return min(a + b, c); 
# 663
} 
# 665
static inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 676 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 677
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 679
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 680
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 682
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 683
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 686
short aS_lo = *((short *)(&aU_lo)); 
# 687
short aS_hi = *((short *)(&aU_hi)); 
# 689
short bS_lo = *((short *)(&bU_lo)); 
# 690
short bS_hi = *((short *)(&bU_hi)); 
# 692
short cS_lo = *((short *)(&cU_lo)); 
# 693
short cS_hi = *((short *)(&cU_hi)); 
# 696
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
# 697
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
# 700
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 701
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 704
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 706
return ans; 
# 708
} 
# 710
static inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 720 "/opt/cuda/include/crt/device_functions.hpp"
return min(a + b, c); 
# 722
} 
# 724
static inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 735 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 736
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 738
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 739
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 741
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 742
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 745
unsigned short ansU_lo = (unsigned short)min((unsigned short)(aU_lo + bU_lo), cU_lo); 
# 746
unsigned short ansU_hi = (unsigned short)min((unsigned short)(aU_hi + bU_hi), cU_hi); 
# 749
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 751
return ans; 
# 753
} 
# 755
static inline int __viaddmax_s32_relu(const int a, const int b, const int c) { 
# 765 "/opt/cuda/include/crt/device_functions.hpp"
int ans = max(a + b, c); 
# 767
return (ans > 0) ? ans : 0; 
# 769
} 
# 771
static inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 782 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 783
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 785
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 786
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 788
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 789
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 792
short aS_lo = *((short *)(&aU_lo)); 
# 793
short aS_hi = *((short *)(&aU_hi)); 
# 795
short bS_lo = *((short *)(&bU_lo)); 
# 796
short bS_hi = *((short *)(&bU_hi)); 
# 798
short cS_lo = *((short *)(&cU_lo)); 
# 799
short cS_hi = *((short *)(&cU_hi)); 
# 802
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
# 803
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
# 805
if (ansS_lo < 0) { ansS_lo = (0); }  
# 806
if (ansS_hi < 0) { ansS_hi = (0); }  
# 809
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 810
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 813
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 815
return ans; 
# 817
} 
# 819
static inline int __viaddmin_s32_relu(const int a, const int b, const int c) { 
# 829 "/opt/cuda/include/crt/device_functions.hpp"
int ans = min(a + b, c); 
# 831
return (ans > 0) ? ans : 0; 
# 833
} 
# 835
static inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 846 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 847
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 849
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 850
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 852
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 853
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 856
short aS_lo = *((short *)(&aU_lo)); 
# 857
short aS_hi = *((short *)(&aU_hi)); 
# 859
short bS_lo = *((short *)(&bU_lo)); 
# 860
short bS_hi = *((short *)(&bU_hi)); 
# 862
short cS_lo = *((short *)(&cU_lo)); 
# 863
short cS_hi = *((short *)(&cU_hi)); 
# 866
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
# 867
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
# 869
if (ansS_lo < 0) { ansS_lo = (0); }  
# 870
if (ansS_hi < 0) { ansS_hi = (0); }  
# 873
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 874
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 877
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 879
return ans; 
# 881
} 
# 885
static inline int __vibmax_s32(const int a, const int b, bool *const pred) { 
# 899 "/opt/cuda/include/crt/device_functions.hpp"
int ans = max(a, b); 
# 901
(*pred) = (a >= b); 
# 902
return ans; 
# 904
} 
# 906
static inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred) { 
# 920 "/opt/cuda/include/crt/device_functions.hpp"
unsigned ans = max(a, b); 
# 922
(*pred) = (a >= b); 
# 923
return ans; 
# 925
} 
# 928
static inline int __vibmin_s32(const int a, const int b, bool *const pred) { 
# 942 "/opt/cuda/include/crt/device_functions.hpp"
int ans = min(a, b); 
# 944
(*pred) = (a <= b); 
# 945
return ans; 
# 947
} 
# 950
static inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred) { 
# 964 "/opt/cuda/include/crt/device_functions.hpp"
unsigned ans = min(a, b); 
# 966
(*pred) = (a <= b); 
# 967
return ans; 
# 969
} 
# 971
static inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 993 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 994
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 996
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 997
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1000
short aS_lo = *((short *)(&aU_lo)); 
# 1001
short aS_hi = *((short *)(&aU_hi)); 
# 1003
short bS_lo = *((short *)(&bU_lo)); 
# 1004
short bS_hi = *((short *)(&bU_hi)); 
# 1007
short ansS_lo = (short)max(aS_lo, bS_lo); 
# 1008
short ansS_hi = (short)max(aS_hi, bS_hi); 
# 1010
(*pred_hi) = (aS_hi >= bS_hi); 
# 1011
(*pred_lo) = (aS_lo >= bS_lo); 
# 1014
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 1015
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 1018
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1020
return ans; 
# 1022
} 
# 1024
static inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1046 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1047
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1049
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1050
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1053
unsigned short ansU_lo = (unsigned short)max(aU_lo, bU_lo); 
# 1054
unsigned short ansU_hi = (unsigned short)max(aU_hi, bU_hi); 
# 1056
(*pred_hi) = (aU_hi >= bU_hi); 
# 1057
(*pred_lo) = (aU_lo >= bU_lo); 
# 1060
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1062
return ans; 
# 1064
} 
# 1066
static inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1088 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1089
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1091
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1092
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1095
short aS_lo = *((short *)(&aU_lo)); 
# 1096
short aS_hi = *((short *)(&aU_hi)); 
# 1098
short bS_lo = *((short *)(&bU_lo)); 
# 1099
short bS_hi = *((short *)(&bU_hi)); 
# 1102
short ansS_lo = (short)min(aS_lo, bS_lo); 
# 1103
short ansS_hi = (short)min(aS_hi, bS_hi); 
# 1105
(*pred_hi) = (aS_hi <= bS_hi); 
# 1106
(*pred_lo) = (aS_lo <= bS_lo); 
# 1109
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 1110
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 1113
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1115
return ans; 
# 1117
} 
# 1119
static inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1141 "/opt/cuda/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1142
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1144
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1145
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1148
unsigned short ansU_lo = (unsigned short)min(aU_lo, bU_lo); 
# 1149
unsigned short ansU_hi = (unsigned short)min(aU_hi, bU_hi); 
# 1151
(*pred_hi) = (aU_hi <= bU_hi); 
# 1152
(*pred_lo) = (aU_lo <= bU_lo); 
# 1155
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1157
return ans; 
# 1159
} 
# 110 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 146 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 146
{ } 
#endif
# 148 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 148
{ } 
#endif
# 150 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 150
{ } 
#endif
# 177 "/opt/cuda/include/device_atomic_functions.h"
extern "C" {
# 186
}
# 195 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 195
{ } 
#endif
# 197 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 197
{ } 
#endif
# 199 "/opt/cuda/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 199
{ } 
#endif
# 201 "/opt/cuda/include/device_atomic_functions.h"
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 201
{ } 
#endif
# 203 "/opt/cuda/include/device_atomic_functions.h"
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 203
{ } 
#endif
# 87 "/opt/cuda/include/crt/device_double_functions.h"
extern "C" {
# 1139 "/opt/cuda/include/crt/device_double_functions.h"
}
# 1147
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1149
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1153
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1155
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1161
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1163
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1169
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1171
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/opt/cuda/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 103 "/opt/cuda/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 103
{ } 
#endif
# 110 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/opt/cuda/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 307 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 307
{ } 
#endif
# 310 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 310
{ } 
#endif
# 313 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 313
{ } 
#endif
# 316 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 316
{ } 
#endif
# 319 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 319
{ } 
#endif
# 322 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 322
{ } 
#endif
# 325 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 325
{ } 
#endif
# 328 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 328
{ } 
#endif
# 331 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 331
{ } 
#endif
# 334 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 334
{ } 
#endif
# 337 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 337
{ } 
#endif
# 340 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 340
{ } 
#endif
# 343 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 343
{ } 
#endif
# 346 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 346
{ } 
#endif
# 349 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 349
{ } 
#endif
# 352 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 352
{ } 
#endif
# 355 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 355
{ } 
#endif
# 358 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 358
{ } 
#endif
# 361 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 361
{ } 
#endif
# 364 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 364
{ } 
#endif
# 367 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 367
{ } 
#endif
# 370 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 370
{ } 
#endif
# 373 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 373
{ } 
#endif
# 376 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 376
{ } 
#endif
# 379 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 379
{ } 
#endif
# 382 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 382
{ } 
#endif
# 385 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 385
{ } 
#endif
# 388 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 388
{ } 
#endif
# 391 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 391
{ } 
#endif
# 394 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 394
{ } 
#endif
# 397 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 397
{ } 
#endif
# 400 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 400
{ } 
#endif
# 403 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 403
{ } 
#endif
# 406 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 406
{ } 
#endif
# 409 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 409
{ } 
#endif
# 412 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 412
{ } 
#endif
# 415 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 415
{ } 
#endif
# 418 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 418
{ } 
#endif
# 421 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 421
{ } 
#endif
# 424 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 424
{ } 
#endif
# 427 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 427
{ } 
#endif
# 430 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 430
{ } 
#endif
# 433 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 433
{ } 
#endif
# 436 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 436
{ } 
#endif
# 439 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 439
{ } 
#endif
# 442 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 443
{ } 
#endif
# 446 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 447
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 447
{ } 
#endif
# 450 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 451
compare, unsigned long long 
# 452
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 452
{ } 
#endif
# 455 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 456
compare, unsigned long long 
# 457
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 457
{ } 
#endif
# 460 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 460
{ } 
#endif
# 463 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 463
{ } 
#endif
# 466 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 466
{ } 
#endif
# 469 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 469
{ } 
#endif
# 472 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 472
{ } 
#endif
# 475 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 475
{ } 
#endif
# 478 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 478
{ } 
#endif
# 481 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 481
{ } 
#endif
# 484 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 484
{ } 
#endif
# 487 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 487
{ } 
#endif
# 490 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 490
{ } 
#endif
# 493 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 493
{ } 
#endif
# 496 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 496
{ } 
#endif
# 499 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 499
{ } 
#endif
# 502 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 502
{ } 
#endif
# 505 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 505
{ } 
#endif
# 508 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 508
{ } 
#endif
# 511 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 511
{ } 
#endif
# 514 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 514
{ } 
#endif
# 517 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 517
{ } 
#endif
# 520 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 520
{ } 
#endif
# 523 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 523
{ } 
#endif
# 526 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 526
{ } 
#endif
# 529 "/opt/cuda/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 529
{ } 
#endif
# 97 "/opt/cuda/include/sm_20_intrinsics.h"
extern "C" {
# 1510 "/opt/cuda/include/sm_20_intrinsics.h"
}
# 1522 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1522
{ } 
#endif
# 1524 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1524
{ } 
#endif
# 1526 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1526
{ } 
#endif
# 1528 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1528
{ } 
#endif
# 1533 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1533
{ } 
#endif
# 1534 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1534
{ } 
#endif
# 1535 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1535
{ } 
#endif
# 1536 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1536
{ } 
#endif
# 1538 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGridConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1538
{ } 
#endif
# 1540 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_global(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1540
{ } 
#endif
# 1541 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_shared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1541
{ } 
#endif
# 1542 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1542
{ } 
#endif
# 1543 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_local(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1543
{ } 
#endif
# 1545 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline ::size_t __cvta_generic_to_grid_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1545
{ } 
#endif
# 1548 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_global_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1548
{ } 
#endif
# 1549 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_shared_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1549
{ } 
#endif
# 1550 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_constant_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1550
{ } 
#endif
# 1551 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_local_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1551
{ } 
#endif
# 1553 "/opt/cuda/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_grid_constant_to_generic(::size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1553
{ } 
#endif
# 108 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 114
{ } 
#endif
# 115 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 116
{ } 
#endif
# 125 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 139 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 154 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 160
{ } 
#endif
# 161 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 161
{ } 
#endif
# 162 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 168 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 174 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 174
{ } 
#endif
# 175 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 183 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 185
{ } 
#endif
# 186 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 186
{ } 
#endif
# 187 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 193 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 195 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 196
{ } 
#endif
# 197 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 197
{ } 
#endif
# 198 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/opt/cuda/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 200
{ } 
#endif
# 87 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 87
{ } 
#endif
# 88 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 88
{ } 
#endif
# 90 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 123 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 159 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 195 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 198 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 211 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 223 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 231 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldlu(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 231
{ } 
#endif
# 232 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldlu(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 232
{ } 
#endif
# 234 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldlu(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 234
{ } 
#endif
# 235 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldlu(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 235
{ } 
#endif
# 236 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldlu(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 236
{ } 
#endif
# 237 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldlu(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 237
{ } 
#endif
# 238 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldlu(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 238
{ } 
#endif
# 239 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldlu(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 239
{ } 
#endif
# 240 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldlu(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 240
{ } 
#endif
# 241 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldlu(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 241
{ } 
#endif
# 242 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldlu(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 242
{ } 
#endif
# 243 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldlu(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 243
{ } 
#endif
# 244 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldlu(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 244
{ } 
#endif
# 245 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldlu(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 245
{ } 
#endif
# 247 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldlu(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 247
{ } 
#endif
# 248 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldlu(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 248
{ } 
#endif
# 249 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldlu(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 249
{ } 
#endif
# 250 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldlu(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 250
{ } 
#endif
# 251 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldlu(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 251
{ } 
#endif
# 252 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldlu(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 252
{ } 
#endif
# 253 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldlu(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 253
{ } 
#endif
# 254 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldlu(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 254
{ } 
#endif
# 255 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldlu(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 255
{ } 
#endif
# 256 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldlu(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 256
{ } 
#endif
# 257 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldlu(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 257
{ } 
#endif
# 259 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldlu(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 259
{ } 
#endif
# 260 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldlu(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 260
{ } 
#endif
# 261 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldlu(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 261
{ } 
#endif
# 262 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldlu(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 262
{ } 
#endif
# 263 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldlu(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 263
{ } 
#endif
# 267 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcv(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 267
{ } 
#endif
# 268 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcv(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 268
{ } 
#endif
# 270 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcv(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 270
{ } 
#endif
# 271 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcv(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 271
{ } 
#endif
# 272 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcv(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 272
{ } 
#endif
# 273 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcv(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 273
{ } 
#endif
# 274 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcv(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 274
{ } 
#endif
# 275 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcv(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 275
{ } 
#endif
# 276 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcv(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 276
{ } 
#endif
# 277 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcv(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 277
{ } 
#endif
# 278 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcv(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 278
{ } 
#endif
# 279 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcv(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 279
{ } 
#endif
# 280 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcv(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 280
{ } 
#endif
# 281 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcv(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 281
{ } 
#endif
# 283 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcv(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 283
{ } 
#endif
# 284 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcv(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 284
{ } 
#endif
# 285 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcv(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 285
{ } 
#endif
# 286 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcv(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 286
{ } 
#endif
# 287 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcv(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 287
{ } 
#endif
# 288 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcv(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 288
{ } 
#endif
# 289 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcv(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 289
{ } 
#endif
# 290 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcv(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 290
{ } 
#endif
# 291 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcv(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 291
{ } 
#endif
# 292 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcv(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 292
{ } 
#endif
# 293 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcv(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 293
{ } 
#endif
# 295 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcv(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 295
{ } 
#endif
# 296 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcv(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 296
{ } 
#endif
# 297 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcv(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 297
{ } 
#endif
# 298 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcv(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 298
{ } 
#endif
# 299 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcv(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 299
{ } 
#endif
# 303 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 303
{ } 
#endif
# 304 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 304
{ } 
#endif
# 306 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 306
{ } 
#endif
# 307 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 307
{ } 
#endif
# 308 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 308
{ } 
#endif
# 309 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 309
{ } 
#endif
# 310 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 310
{ } 
#endif
# 311 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 311
{ } 
#endif
# 312 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 312
{ } 
#endif
# 313 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 313
{ } 
#endif
# 314 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 314
{ } 
#endif
# 315 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 315
{ } 
#endif
# 316 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 316
{ } 
#endif
# 317 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 317
{ } 
#endif
# 319 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 319
{ } 
#endif
# 320 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 320
{ } 
#endif
# 321 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 321
{ } 
#endif
# 322 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 322
{ } 
#endif
# 323 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 323
{ } 
#endif
# 324 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 324
{ } 
#endif
# 325 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 325
{ } 
#endif
# 326 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 326
{ } 
#endif
# 327 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 327
{ } 
#endif
# 328 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 328
{ } 
#endif
# 329 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 329
{ } 
#endif
# 331 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 331
{ } 
#endif
# 332 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 332
{ } 
#endif
# 333 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 333
{ } 
#endif
# 334 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 334
{ } 
#endif
# 335 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 335
{ } 
#endif
# 339 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 339
{ } 
#endif
# 340 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 340
{ } 
#endif
# 342 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 342
{ } 
#endif
# 343 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 343
{ } 
#endif
# 344 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 344
{ } 
#endif
# 345 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 345
{ } 
#endif
# 346 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 346
{ } 
#endif
# 347 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 347
{ } 
#endif
# 348 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 348
{ } 
#endif
# 349 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 349
{ } 
#endif
# 350 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 350
{ } 
#endif
# 351 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 351
{ } 
#endif
# 352 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 352
{ } 
#endif
# 353 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 353
{ } 
#endif
# 355 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 355
{ } 
#endif
# 356 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 356
{ } 
#endif
# 357 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 357
{ } 
#endif
# 358 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 358
{ } 
#endif
# 359 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 359
{ } 
#endif
# 360 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 360
{ } 
#endif
# 361 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 361
{ } 
#endif
# 362 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 362
{ } 
#endif
# 363 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 363
{ } 
#endif
# 364 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 364
{ } 
#endif
# 365 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 365
{ } 
#endif
# 367 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 367
{ } 
#endif
# 368 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 368
{ } 
#endif
# 369 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 369
{ } 
#endif
# 370 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 370
{ } 
#endif
# 371 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 371
{ } 
#endif
# 375 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 375
{ } 
#endif
# 376 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 376
{ } 
#endif
# 378 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 378
{ } 
#endif
# 379 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 379
{ } 
#endif
# 380 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 380
{ } 
#endif
# 381 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 381
{ } 
#endif
# 382 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 382
{ } 
#endif
# 383 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 383
{ } 
#endif
# 384 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 384
{ } 
#endif
# 385 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 385
{ } 
#endif
# 386 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 386
{ } 
#endif
# 387 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 387
{ } 
#endif
# 388 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 388
{ } 
#endif
# 389 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 389
{ } 
#endif
# 391 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 391
{ } 
#endif
# 392 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 392
{ } 
#endif
# 393 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 393
{ } 
#endif
# 394 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 394
{ } 
#endif
# 395 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 395
{ } 
#endif
# 396 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 396
{ } 
#endif
# 397 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 397
{ } 
#endif
# 398 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 398
{ } 
#endif
# 399 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 399
{ } 
#endif
# 400 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 400
{ } 
#endif
# 401 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 401
{ } 
#endif
# 403 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 403
{ } 
#endif
# 404 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 404
{ } 
#endif
# 405 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 405
{ } 
#endif
# 406 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 407
{ } 
#endif
# 411 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 411
{ } 
#endif
# 412 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 412
{ } 
#endif
# 414 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 422
{ } 
#endif
# 423 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 423
{ } 
#endif
# 424 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 424
{ } 
#endif
# 425 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 425
{ } 
#endif
# 427 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 429
{ } 
#endif
# 430 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 430
{ } 
#endif
# 431 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 431
{ } 
#endif
# 432 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 432
{ } 
#endif
# 433 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 433
{ } 
#endif
# 434 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 434
{ } 
#endif
# 435 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 437
{ } 
#endif
# 439 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 440
{ } 
#endif
# 441 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 441
{ } 
#endif
# 442 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 442
{ } 
#endif
# 443 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 443
{ } 
#endif
# 460 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 460
{ } 
#endif
# 472 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 472
{ } 
#endif
# 485 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 485
{ } 
#endif
# 497 "/opt/cuda/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 497
{ } 
#endif
# 89 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 96
{ } 
#endif
# 98 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 99
{ } 
#endif
# 106 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/opt/cuda/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 110
{ } 
#endif
# 93 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/opt/cuda/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 93 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_add_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_min_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_max_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 103
{ } 
#endif
# 106 "/opt/cuda/include/crt/sm_80_rt.h"
extern "C" {
# 107
__attribute__((unused)) inline void *__nv_associate_access_property(const void *ptr, unsigned long long 
# 108
property) {int volatile ___ = 1;(void)ptr;(void)property;
# 112
::exit(___);}
#if 0
# 108
{ 
# 109
__attribute__((unused)) extern void *__nv_associate_access_property_impl(const void *, unsigned long long); 
# 111
return __nv_associate_access_property_impl(ptr, property); 
# 112
} 
#endif
# 114 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
# 115
src, unsigned 
# 116
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 121
::exit(___);}
#if 0
# 116
{ 
# 117
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_4_impl(void *, const void *, unsigned); 
# 120
__nv_memcpy_async_shared_global_4_impl(dst, src, src_size); 
# 121
} 
#endif
# 123 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
# 124
src, unsigned 
# 125
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 130
::exit(___);}
#if 0
# 125
{ 
# 126
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_8_impl(void *, const void *, unsigned); 
# 129
__nv_memcpy_async_shared_global_8_impl(dst, src, src_size); 
# 130
} 
#endif
# 132 "/opt/cuda/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
# 133
src, unsigned 
# 134
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_16_impl(void *, const void *, unsigned); 
# 138
__nv_memcpy_async_shared_global_16_impl(dst, src, src_size); 
# 139
} 
#endif
# 141 "/opt/cuda/include/crt/sm_80_rt.h"
}
# 89 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __isCtaShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __isClusterShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void *__cluster_map_shared_rank(const void *ptr, unsigned target_block_rank) {int volatile ___ = 1;(void)ptr;(void)target_block_rank;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __cluster_query_shared_rank(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline uint2 __cluster_map_shared_multicast(const void *ptr, unsigned cluster_cta_mask) {int volatile ___ = 1;(void)ptr;(void)cluster_cta_mask;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterDimIsSpecified() {int volatile ___ = 1;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterDim() {int volatile ___ = 1;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterRelativeBlockIdx() {int volatile ___ = 1;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterGridDimInClusters() {int volatile ___ = 1;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterIdx() {int volatile ___ = 1;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterRelativeBlockRank() {int volatile ___ = 1;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterSizeInBlocks() {int volatile ___ = 1;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_arrive() {int volatile ___ = 1;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_arrive_relaxed() {int volatile ___ = 1;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_wait() {int volatile ___ = 1;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __threadfence_cluster() {int volatile ___ = 1;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd_block(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd_system(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd_block(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/opt/cuda/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd_system(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 111
{ } 
#endif
# 65 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
# 66
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 86
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 87
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 88
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 89
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 90
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 101 "/opt/cuda/include/texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 102
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 103
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 104
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 108
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 109
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 110
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 112
::exit(___);}
#if 0
# 110
{ 
# 111
__nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x); 
# 112
} 
#endif
# 114 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 115
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 116
{int volatile ___ = 1;(void)texObject;(void)x;
# 120
::exit(___);}
#if 0
# 116
{ 
# 117
T ret; 
# 118
tex1Dfetch(&ret, texObject, x); 
# 119
return ret; 
# 120
} 
#endif
# 122 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 123
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 124
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 126
::exit(___);}
#if 0
# 124
{ 
# 125
__nv_tex_surf_handler("__itex1D", ptr, obj, x); 
# 126
} 
#endif
# 129 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 130
tex1D(cudaTextureObject_t texObject, float x) 
# 131
{int volatile ___ = 1;(void)texObject;(void)x;
# 135
::exit(___);}
#if 0
# 131
{ 
# 132
T ret; 
# 133
tex1D(&ret, texObject, x); 
# 134
return ret; 
# 135
} 
#endif
# 138 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 139
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 140
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
__nv_tex_surf_handler("__itex2D", ptr, obj, x, y); 
# 142
} 
#endif
# 144 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 145
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 146
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 150
::exit(___);}
#if 0
# 146
{ 
# 147
T ret; 
# 148
tex2D(&ret, texObject, x, y); 
# 149
return ret; 
# 150
} 
#endif
# 153 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 154
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, bool *
# 155
isResident) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;
# 160
::exit(___);}
#if 0
# 156
{ 
# 157
unsigned char res; 
# 158
__nv_tex_surf_handler("__itex2D_sparse", ptr, obj, x, y, &res); 
# 159
(*isResident) = (res != 0); 
# 160
} 
#endif
# 162 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 163
tex2D(cudaTextureObject_t texObject, float x, float y, bool *isResident) 
# 164
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;
# 168
::exit(___);}
#if 0
# 164
{ 
# 165
T ret; 
# 166
tex2D(&ret, texObject, x, y, isResident); 
# 167
return ret; 
# 168
} 
#endif
# 173 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 174
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 175
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 177
::exit(___);}
#if 0
# 175
{ 
# 176
__nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z); 
# 177
} 
#endif
# 179 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 180
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 181
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 185
::exit(___);}
#if 0
# 181
{ 
# 182
T ret; 
# 183
tex3D(&ret, texObject, x, y, z); 
# 184
return ret; 
# 185
} 
#endif
# 188 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 189
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, bool *
# 190
isResident) 
# 191
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
unsigned char res; 
# 193
__nv_tex_surf_handler("__itex3D_sparse", ptr, obj, x, y, z, &res); 
# 194
(*isResident) = (res != 0); 
# 195
} 
#endif
# 197 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 198
tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
# 199
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;
# 203
::exit(___);}
#if 0
# 199
{ 
# 200
T ret; 
# 201
tex3D(&ret, texObject, x, y, z, isResident); 
# 202
return ret; 
# 203
} 
#endif
# 207 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 208
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 209
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 211
::exit(___);}
#if 0
# 209
{ 
# 210
__nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer); 
# 211
} 
#endif
# 213 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 214
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 215
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 219
::exit(___);}
#if 0
# 215
{ 
# 216
T ret; 
# 217
tex1DLayered(&ret, texObject, x, layer); 
# 218
return ret; 
# 219
} 
#endif
# 221 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 222
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 223
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
__nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer); 
# 225
} 
#endif
# 227 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 228
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 229
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 233
::exit(___);}
#if 0
# 229
{ 
# 230
T ret; 
# 231
tex2DLayered(&ret, texObject, x, y, layer); 
# 232
return ret; 
# 233
} 
#endif
# 236 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 237
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
# 238
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;
# 242
::exit(___);}
#if 0
# 238
{ 
# 239
unsigned char res; 
# 240
__nv_tex_surf_handler("__itex2DLayered_sparse", ptr, obj, x, y, layer, &res); 
# 241
(*isResident) = (res != 0); 
# 242
} 
#endif
# 244 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 245
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
# 246
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;
# 250
::exit(___);}
#if 0
# 246
{ 
# 247
T ret; 
# 248
tex2DLayered(&ret, texObject, x, y, layer, isResident); 
# 249
return ret; 
# 250
} 
#endif
# 254 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 255
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 256
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 258
::exit(___);}
#if 0
# 256
{ 
# 257
__nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z); 
# 258
} 
#endif
# 261 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 262
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 263
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 267
::exit(___);}
#if 0
# 263
{ 
# 264
T ret; 
# 265
texCubemap(&ret, texObject, x, y, z); 
# 266
return ret; 
# 267
} 
#endif
# 270 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 271
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 272
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 274
::exit(___);}
#if 0
# 272
{ 
# 273
__nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer); 
# 274
} 
#endif
# 276 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 277
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 278
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 282
::exit(___);}
#if 0
# 278
{ 
# 279
T ret; 
# 280
texCubemapLayered(&ret, texObject, x, y, z, layer); 
# 281
return ret; 
# 282
} 
#endif
# 284 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 285
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 286
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 288
::exit(___);}
#if 0
# 286
{ 
# 287
__nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp); 
# 288
} 
#endif
# 290 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 291
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 292
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 296
::exit(___);}
#if 0
# 292
{ 
# 293
T ret; 
# 294
tex2Dgather(&ret, to, x, y, comp); 
# 295
return ret; 
# 296
} 
#endif
# 299 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 300
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
# 301
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;
# 305
::exit(___);}
#if 0
# 301
{ 
# 302
unsigned char res; 
# 303
__nv_tex_surf_handler("__itex2Dgather_sparse", ptr, obj, x, y, comp, &res); 
# 304
(*isResident) = (res != 0); 
# 305
} 
#endif
# 307 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 308
tex2Dgather(cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
# 309
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;
# 313
::exit(___);}
#if 0
# 309
{ 
# 310
T ret; 
# 311
tex2Dgather(&ret, to, x, y, isResident, comp); 
# 312
return ret; 
# 313
} 
#endif
# 317 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 318
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 319
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 321
::exit(___);}
#if 0
# 319
{ 
# 320
__nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level); 
# 321
} 
#endif
# 323 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 324
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 325
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 329
::exit(___);}
#if 0
# 325
{ 
# 326
T ret; 
# 327
tex1DLod(&ret, texObject, x, level); 
# 328
return ret; 
# 329
} 
#endif
# 332 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 333
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 334
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 336
::exit(___);}
#if 0
# 334
{ 
# 335
__nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level); 
# 336
} 
#endif
# 338 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 339
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 340
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 344
::exit(___);}
#if 0
# 340
{ 
# 341
T ret; 
# 342
tex2DLod(&ret, texObject, x, y, level); 
# 343
return ret; 
# 344
} 
#endif
# 348 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 349
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
# 350
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;
# 354
::exit(___);}
#if 0
# 350
{ 
# 351
unsigned char res; 
# 352
__nv_tex_surf_handler("__itex2DLod_sparse", ptr, obj, x, y, level, &res); 
# 353
(*isResident) = (res != 0); 
# 354
} 
#endif
# 356 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 357
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
# 358
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;
# 362
::exit(___);}
#if 0
# 358
{ 
# 359
T ret; 
# 360
tex2DLod(&ret, texObject, x, y, level, isResident); 
# 361
return ret; 
# 362
} 
#endif
# 367 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 368
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 369
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 371
::exit(___);}
#if 0
# 369
{ 
# 370
__nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level); 
# 371
} 
#endif
# 373 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 374
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 375
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 379
::exit(___);}
#if 0
# 375
{ 
# 376
T ret; 
# 377
tex3DLod(&ret, texObject, x, y, z, level); 
# 378
return ret; 
# 379
} 
#endif
# 382 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 383
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
# 384
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 388
::exit(___);}
#if 0
# 384
{ 
# 385
unsigned char res; 
# 386
__nv_tex_surf_handler("__itex3DLod_sparse", ptr, obj, x, y, z, level, &res); 
# 387
(*isResident) = (res != 0); 
# 388
} 
#endif
# 390 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 391
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
# 392
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 396
::exit(___);}
#if 0
# 392
{ 
# 393
T ret; 
# 394
tex3DLod(&ret, texObject, x, y, z, level, isResident); 
# 395
return ret; 
# 396
} 
#endif
# 401 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 402
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 403
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 405
::exit(___);}
#if 0
# 403
{ 
# 404
__nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level); 
# 405
} 
#endif
# 407 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 408
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 409
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 413
::exit(___);}
#if 0
# 409
{ 
# 410
T ret; 
# 411
tex1DLayeredLod(&ret, texObject, x, layer, level); 
# 412
return ret; 
# 413
} 
#endif
# 416 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 417
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 418
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 420
::exit(___);}
#if 0
# 418
{ 
# 419
__nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level); 
# 420
} 
#endif
# 422 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 423
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 424
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 428
::exit(___);}
#if 0
# 424
{ 
# 425
T ret; 
# 426
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
# 427
return ret; 
# 428
} 
#endif
# 431 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 432
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
# 433
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 437
::exit(___);}
#if 0
# 433
{ 
# 434
unsigned char res; 
# 435
__nv_tex_surf_handler("__itex2DLayeredLod_sparse", ptr, obj, x, y, layer, level, &res); 
# 436
(*isResident) = (res != 0); 
# 437
} 
#endif
# 439 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 440
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
# 441
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 445
::exit(___);}
#if 0
# 441
{ 
# 442
T ret; 
# 443
tex2DLayeredLod(&ret, texObject, x, y, layer, level, isResident); 
# 444
return ret; 
# 445
} 
#endif
# 448 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 449
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 450
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 452
::exit(___);}
#if 0
# 450
{ 
# 451
__nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level); 
# 452
} 
#endif
# 454 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 455
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 456
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 460
::exit(___);}
#if 0
# 456
{ 
# 457
T ret; 
# 458
texCubemapLod(&ret, texObject, x, y, z, level); 
# 459
return ret; 
# 460
} 
#endif
# 463 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 464
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 465
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 467
::exit(___);}
#if 0
# 465
{ 
# 466
__nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
# 467
} 
#endif
# 469 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 470
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 471
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 475
::exit(___);}
#if 0
# 471
{ 
# 472
T ret; 
# 473
texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 474
return ret; 
# 475
} 
#endif
# 477 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 478
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 479
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 481
::exit(___);}
#if 0
# 479
{ 
# 480
__nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level); 
# 481
} 
#endif
# 483 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 484
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 485
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 489
::exit(___);}
#if 0
# 485
{ 
# 486
T ret; 
# 487
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
# 488
return ret; 
# 489
} 
#endif
# 491 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 492
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 493
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 495
::exit(___);}
#if 0
# 493
{ 
# 494
__nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy); 
# 495
} 
#endif
# 497 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 498
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 499
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 503
::exit(___);}
#if 0
# 499
{ 
# 500
T ret; 
# 501
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
# 502
return ret; 
# 503
} 
#endif
# 506 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 507
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 508
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 510
::exit(___);}
#if 0
# 508
{ 
# 509
__nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy); 
# 510
} 
#endif
# 512 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 513
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 514
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 518
::exit(___);}
#if 0
# 514
{ 
# 515
T ret; 
# 516
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
# 517
return ret; 
# 518
} 
#endif
# 521 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 522
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 523
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 527
::exit(___);}
#if 0
# 523
{ 
# 524
unsigned char res; 
# 525
__nv_tex_surf_handler("__itex2DGrad_sparse", ptr, obj, x, y, &dPdx, &dPdy, &res); 
# 526
(*isResident) = (res != 0); 
# 527
} 
#endif
# 529 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 530
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 531
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 535
::exit(___);}
#if 0
# 531
{ 
# 532
T ret; 
# 533
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy, isResident); 
# 534
return ret; 
# 535
} 
#endif
# 539 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 540
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 541
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 543
::exit(___);}
#if 0
# 541
{ 
# 542
__nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
# 543
} 
#endif
# 545 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 546
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 547
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 551
::exit(___);}
#if 0
# 547
{ 
# 548
T ret; 
# 549
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 550
return ret; 
# 551
} 
#endif
# 554 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 555
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 556
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 560
::exit(___);}
#if 0
# 556
{ 
# 557
unsigned char res; 
# 558
__nv_tex_surf_handler("__itex3DGrad_sparse", ptr, obj, x, y, z, &dPdx, &dPdy, &res); 
# 559
(*isResident) = (res != 0); 
# 560
} 
#endif
# 562 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 563
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 564
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 568
::exit(___);}
#if 0
# 564
{ 
# 565
T ret; 
# 566
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy, isResident); 
# 567
return ret; 
# 568
} 
#endif
# 573 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 574
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 575
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 577
::exit(___);}
#if 0
# 575
{ 
# 576
__nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy); 
# 577
} 
#endif
# 579 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 580
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 581
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 585
::exit(___);}
#if 0
# 581
{ 
# 582
T ret; 
# 583
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
# 584
return ret; 
# 585
} 
#endif
# 588 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 589
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 590
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 590
{ 
# 591
__nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy); 
# 592
} 
#endif
# 594 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 595
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 596
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 600
::exit(___);}
#if 0
# 596
{ 
# 597
T ret; 
# 598
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
# 599
return ret; 
# 600
} 
#endif
# 603 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 604
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 605
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 609
::exit(___);}
#if 0
# 605
{ 
# 606
unsigned char res; 
# 607
__nv_tex_surf_handler("__itex2DLayeredGrad_sparse", ptr, obj, x, y, layer, &dPdx, &dPdy, &res); 
# 608
(*isResident) = (res != 0); 
# 609
} 
#endif
# 611 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 612
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 613
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 617
::exit(___);}
#if 0
# 613
{ 
# 614
T ret; 
# 615
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy, isResident); 
# 616
return ret; 
# 617
} 
#endif
# 621 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 622
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 623
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 625
::exit(___);}
#if 0
# 623
{ 
# 624
__nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy); 
# 625
} 
#endif
# 627 "/opt/cuda/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 628
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 629
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 633
::exit(___);}
#if 0
# 629
{ 
# 630
T ret; 
# 631
texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy); 
# 632
return ret; 
# 633
} 
#endif
# 58 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
# 59
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 60
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 79
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 89
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 98
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 99
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 100
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 102
::exit(___);}
#if 0
# 100
{ 
# 101
__nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode); 
# 102
} 
#endif
# 104 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 105
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 106
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 110
::exit(___);}
#if 0
# 106
{ 
# 107
T ret; 
# 108
surf1Dread(&ret, surfObject, x, boundaryMode); 
# 109
return ret; 
# 110
} 
#endif
# 112 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 113
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 114
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 116
::exit(___);}
#if 0
# 114
{ 
# 115
__nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode); 
# 116
} 
#endif
# 118 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 119
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 120
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 124
::exit(___);}
#if 0
# 120
{ 
# 121
T ret; 
# 122
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
# 123
return ret; 
# 124
} 
#endif
# 127 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 128
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 129
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 131
::exit(___);}
#if 0
# 129
{ 
# 130
__nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode); 
# 131
} 
#endif
# 133 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 134
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 135
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 139
::exit(___);}
#if 0
# 135
{ 
# 136
T ret; 
# 137
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
# 138
return ret; 
# 139
} 
#endif
# 141 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 142
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 143
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 145
::exit(___);}
#if 0
# 143
{ 
# 144
__nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode); 
# 145
} 
#endif
# 147 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 148
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 149
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 153
::exit(___);}
#if 0
# 149
{ 
# 150
T ret; 
# 151
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
# 152
return ret; 
# 153
} 
#endif
# 155 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 156
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 157
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 159
::exit(___);}
#if 0
# 157
{ 
# 158
__nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode); 
# 159
} 
#endif
# 161 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 162
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 163
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 167
::exit(___);}
#if 0
# 163
{ 
# 164
T ret; 
# 165
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
# 166
return ret; 
# 167
} 
#endif
# 169 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 170
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 171
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 173
::exit(___);}
#if 0
# 171
{ 
# 172
__nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode); 
# 173
} 
#endif
# 175 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 176
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 177
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 181
::exit(___);}
#if 0
# 177
{ 
# 178
T ret; 
# 179
surfCubemapread(&ret, surfObject, x, y, face, boundaryMode); 
# 180
return ret; 
# 181
} 
#endif
# 183 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 184
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 185
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 187
::exit(___);}
#if 0
# 185
{ 
# 186
__nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode); 
# 187
} 
#endif
# 189 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 190
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 191
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
T ret; 
# 193
surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode); 
# 194
return ret; 
# 195
} 
#endif
# 197 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 198
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 199
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 201
::exit(___);}
#if 0
# 199
{ 
# 200
__nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode); 
# 201
} 
#endif
# 203 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 204
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 205
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 207
::exit(___);}
#if 0
# 205
{ 
# 206
__nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode); 
# 207
} 
#endif
# 209 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 210
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 211
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 213
::exit(___);}
#if 0
# 211
{ 
# 212
__nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode); 
# 213
} 
#endif
# 215 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 216
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 217
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 219
::exit(___);}
#if 0
# 217
{ 
# 218
__nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode); 
# 219
} 
#endif
# 221 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 222
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 223
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
__nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode); 
# 225
} 
#endif
# 227 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 228
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 229
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 231
::exit(___);}
#if 0
# 229
{ 
# 230
__nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode); 
# 231
} 
#endif
# 233 "/opt/cuda/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 234
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 235
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 237
::exit(___);}
#if 0
# 235
{ 
# 236
__nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode); 
# 237
} 
#endif
# 3634 "/opt/cuda/include/crt/device_functions.h"
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, ::size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/opt/cuda/include/device_launch_parameters.h"
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 62 "/usr/include/c++/12.2.1/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 66
namespace rel_ops { 
# 86 "/usr/include/c++/12.2.1/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 88
operator!=(const _Tp &__x, const _Tp &__y) 
# 89
{ return !(__x == __y); } 
# 99 "/usr/include/c++/12.2.1/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 101
operator>(const _Tp &__x, const _Tp &__y) 
# 102
{ return __y < __x; } 
# 112 "/usr/include/c++/12.2.1/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 114
operator<=(const _Tp &__x, const _Tp &__y) 
# 115
{ return !(__y < __x); } 
# 125 "/usr/include/c++/12.2.1/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 127
operator>=(const _Tp &__x, const _Tp &__y) 
# 128
{ return !(__x < __y); } 
# 129
}
# 132
}
# 39 "/usr/include/c++/12.2.1/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 88
template< class _Tp> constexpr const _Tp *
# 90
begin(initializer_list< _Tp>  __ils) noexcept 
# 91
{ return __ils.begin(); } 
# 99
template< class _Tp> constexpr const _Tp *
# 101
end(initializer_list< _Tp>  __ils) noexcept 
# 102
{ return __ils.end(); } 
# 103
}
# 105
#pragma GCC visibility pop
# 82 "/usr/include/c++/12.2.1/utility" 3
namespace std __attribute((__visibility__("default"))) { 
# 90
template< class _Tp, class _Up = _Tp> inline _Tp 
# 93
exchange(_Tp &__obj, _Up &&__new_val) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_assignable< _Tp &, _Up> > ::value) 
# 96
{ return std::__exchange(__obj, std::forward< _Up> (__new_val)); } 
# 101
template< class _Tp> 
# 102
[[nodiscard]] constexpr add_const_t< _Tp>  &
# 104
as_const(_Tp &__t) noexcept 
# 105
{ return __t; } 
# 107
template < typename _Tp >
    void as_const ( const _Tp && ) = delete;
# 221 "/usr/include/c++/12.2.1/utility" 3
}
# 206 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 207
cudaLaunchKernel(const T *
# 208
func, dim3 
# 209
gridDim, dim3 
# 210
blockDim, void **
# 211
args, ::size_t 
# 212
sharedMem = 0, cudaStream_t 
# 213
stream = 0) 
# 215
{ 
# 216
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 217
} 
# 277 "/opt/cuda/include/cuda_runtime.h"
template< class ...ExpTypes, class ...ActTypes> static inline cudaError_t 
# 278
cudaLaunchKernelEx(const cudaLaunchConfig_t *
# 279
config, void (*
# 280
kernel)(ExpTypes ...), ActTypes &&...
# 281
args) 
# 283
{ 
# 284
return [&](ExpTypes ...coercedArgs) { 
# 285
void *pArgs[] = {(&coercedArgs)...}; 
# 286
return ::cudaLaunchKernelExC(config, (const void *)(kernel), pArgs); 
# 287
} (std::forward< ActTypes> (args)...); 
# 288
} 
# 340 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 341
cudaLaunchCooperativeKernel(const T *
# 342
func, dim3 
# 343
gridDim, dim3 
# 344
blockDim, void **
# 345
args, ::size_t 
# 346
sharedMem = 0, cudaStream_t 
# 347
stream = 0) 
# 349
{ 
# 350
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 351
} 
# 384 "/opt/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 385
event, unsigned 
# 386
flags) 
# 388
{ 
# 389
return ::cudaEventCreateWithFlags(event, flags); 
# 390
} 
# 428 "/opt/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaGraphInstantiate(cudaGraphExec_t *
# 429
pGraphExec, cudaGraph_t 
# 430
graph, cudaGraphNode_t *
# 431
pErrorNode, char *
# 432
pLogBuffer, ::size_t 
# 433
bufferSize) 
# 435
{ 
# 436
(void)pErrorNode; 
# 437
(void)pLogBuffer; 
# 438
(void)bufferSize; 
# 439
return ::cudaGraphInstantiate(pGraphExec, graph, 0); 
# 440
} 
# 499 "/opt/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 500
ptr, ::size_t 
# 501
size, unsigned 
# 502
flags) 
# 504
{ 
# 505
return ::cudaHostAlloc(ptr, size, flags); 
# 506
} 
# 508
template< class T> static inline cudaError_t 
# 509
cudaHostAlloc(T **
# 510
ptr, ::size_t 
# 511
size, unsigned 
# 512
flags) 
# 514
{ 
# 515
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 516
} 
# 518
template< class T> static inline cudaError_t 
# 519
cudaHostGetDevicePointer(T **
# 520
pDevice, void *
# 521
pHost, unsigned 
# 522
flags) 
# 524
{ 
# 525
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 526
} 
# 628 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 629
cudaMallocManaged(T **
# 630
devPtr, ::size_t 
# 631
size, unsigned 
# 632
flags = 1) 
# 634
{ 
# 635
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 636
} 
# 718 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 719
cudaStreamAttachMemAsync(cudaStream_t 
# 720
stream, T *
# 721
devPtr, ::size_t 
# 722
length = 0, unsigned 
# 723
flags = 4) 
# 725
{ 
# 726
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 727
} 
# 729
template< class T> inline cudaError_t 
# 730
cudaMalloc(T **
# 731
devPtr, ::size_t 
# 732
size) 
# 734
{ 
# 735
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 736
} 
# 738
template< class T> static inline cudaError_t 
# 739
cudaMallocHost(T **
# 740
ptr, ::size_t 
# 741
size, unsigned 
# 742
flags = 0) 
# 744
{ 
# 745
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 746
} 
# 748
template< class T> static inline cudaError_t 
# 749
cudaMallocPitch(T **
# 750
devPtr, ::size_t *
# 751
pitch, ::size_t 
# 752
width, ::size_t 
# 753
height) 
# 755
{ 
# 756
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 757
} 
# 768 "/opt/cuda/include/cuda_runtime.h"
static inline cudaError_t cudaMallocAsync(void **
# 769
ptr, ::size_t 
# 770
size, cudaMemPool_t 
# 771
memPool, cudaStream_t 
# 772
stream) 
# 774
{ 
# 775
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
# 776
} 
# 778
template< class T> static inline cudaError_t 
# 779
cudaMallocAsync(T **
# 780
ptr, ::size_t 
# 781
size, cudaMemPool_t 
# 782
memPool, cudaStream_t 
# 783
stream) 
# 785
{ 
# 786
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 787
} 
# 789
template< class T> static inline cudaError_t 
# 790
cudaMallocAsync(T **
# 791
ptr, ::size_t 
# 792
size, cudaStream_t 
# 793
stream) 
# 795
{ 
# 796
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
# 797
} 
# 799
template< class T> static inline cudaError_t 
# 800
cudaMallocFromPoolAsync(T **
# 801
ptr, ::size_t 
# 802
size, cudaMemPool_t 
# 803
memPool, cudaStream_t 
# 804
stream) 
# 806
{ 
# 807
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 808
} 
# 847 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 848
cudaMemcpyToSymbol(const T &
# 849
symbol, const void *
# 850
src, ::size_t 
# 851
count, ::size_t 
# 852
offset = 0, cudaMemcpyKind 
# 853
kind = cudaMemcpyHostToDevice) 
# 855
{ 
# 856
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 857
} 
# 901 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 902
cudaMemcpyToSymbolAsync(const T &
# 903
symbol, const void *
# 904
src, ::size_t 
# 905
count, ::size_t 
# 906
offset = 0, cudaMemcpyKind 
# 907
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 908
stream = 0) 
# 910
{ 
# 911
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 912
} 
# 949 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 950
cudaMemcpyFromSymbol(void *
# 951
dst, const T &
# 952
symbol, ::size_t 
# 953
count, ::size_t 
# 954
offset = 0, cudaMemcpyKind 
# 955
kind = cudaMemcpyDeviceToHost) 
# 957
{ 
# 958
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 959
} 
# 1003 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1004
cudaMemcpyFromSymbolAsync(void *
# 1005
dst, const T &
# 1006
symbol, ::size_t 
# 1007
count, ::size_t 
# 1008
offset = 0, cudaMemcpyKind 
# 1009
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 1010
stream = 0) 
# 1012
{ 
# 1013
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 1014
} 
# 1072 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1073
cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *
# 1074
pGraphNode, cudaGraph_t 
# 1075
graph, const cudaGraphNode_t *
# 1076
pDependencies, ::size_t 
# 1077
numDependencies, const T &
# 1078
symbol, const void *
# 1079
src, ::size_t 
# 1080
count, ::size_t 
# 1081
offset, cudaMemcpyKind 
# 1082
kind) 
# 1083
{ 
# 1084
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
# 1085
} 
# 1143 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1144
cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *
# 1145
pGraphNode, cudaGraph_t 
# 1146
graph, const cudaGraphNode_t *
# 1147
pDependencies, ::size_t 
# 1148
numDependencies, void *
# 1149
dst, const T &
# 1150
symbol, ::size_t 
# 1151
count, ::size_t 
# 1152
offset, cudaMemcpyKind 
# 1153
kind) 
# 1154
{ 
# 1155
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
# 1156
} 
# 1194 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1195
cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t 
# 1196
node, const T &
# 1197
symbol, const void *
# 1198
src, ::size_t 
# 1199
count, ::size_t 
# 1200
offset, cudaMemcpyKind 
# 1201
kind) 
# 1202
{ 
# 1203
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
# 1204
} 
# 1242 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1243
cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t 
# 1244
node, void *
# 1245
dst, const T &
# 1246
symbol, ::size_t 
# 1247
count, ::size_t 
# 1248
offset, cudaMemcpyKind 
# 1249
kind) 
# 1250
{ 
# 1251
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
# 1252
} 
# 1300 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1301
cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t 
# 1302
hGraphExec, cudaGraphNode_t 
# 1303
node, const T &
# 1304
symbol, const void *
# 1305
src, ::size_t 
# 1306
count, ::size_t 
# 1307
offset, cudaMemcpyKind 
# 1308
kind) 
# 1309
{ 
# 1310
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
# 1311
} 
# 1359 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1360
cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t 
# 1361
hGraphExec, cudaGraphNode_t 
# 1362
node, void *
# 1363
dst, const T &
# 1364
symbol, ::size_t 
# 1365
count, ::size_t 
# 1366
offset, cudaMemcpyKind 
# 1367
kind) 
# 1368
{ 
# 1369
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
# 1370
} 
# 1373
static inline cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, cudaGraphExecUpdateResult *updateResult_out) 
# 1374
{ 
# 1375
cudaGraphExecUpdateResultInfo resultInfo; 
# 1376
cudaError_t status = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo); 
# 1377
if (hErrorNode_out) { 
# 1378
(*hErrorNode_out) = (resultInfo.errorNode); 
# 1379
}  
# 1380
if (updateResult_out) { 
# 1381
(*updateResult_out) = (resultInfo.result); 
# 1382
}  
# 1383
return status; 
# 1384
} 
# 1412 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1413
cudaUserObjectCreate(cudaUserObject_t *
# 1414
object_out, T *
# 1415
objectToWrap, unsigned 
# 1416
initialRefcount, unsigned 
# 1417
flags) 
# 1418
{ 
# 1419
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
# 1422
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
# 1425
} 
# 1427
template< class T> static inline cudaError_t 
# 1428
cudaUserObjectCreate(cudaUserObject_t *
# 1429
object_out, T *
# 1430
objectToWrap, unsigned 
# 1431
initialRefcount, cudaUserObjectFlags 
# 1432
flags) 
# 1433
{ 
# 1434
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
# 1435
} 
# 1462 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1463
cudaGetSymbolAddress(void **
# 1464
devPtr, const T &
# 1465
symbol) 
# 1467
{ 
# 1468
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 1469
} 
# 1494 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1495
cudaGetSymbolSize(::size_t *
# 1496
size, const T &
# 1497
symbol) 
# 1499
{ 
# 1500
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 1501
} 
# 1546 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1547
cudaFuncSetCacheConfig(T *
# 1548
func, cudaFuncCache 
# 1549
cacheConfig) 
# 1551
{ 
# 1552
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1553
} 
# 1555
template< class T> static inline cudaError_t 
# 1556
cudaFuncSetSharedMemConfig(T *
# 1557
func, cudaSharedMemConfig 
# 1558
config) 
# 1560
{ 
# 1561
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1562
} 
# 1594 "/opt/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1595
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1596
numBlocks, T 
# 1597
func, int 
# 1598
blockSize, ::size_t 
# 1599
dynamicSMemSize) 
# 1600
{ 
# 1601
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1602
} 
# 1646 "/opt/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1647
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1648
numBlocks, T 
# 1649
func, int 
# 1650
blockSize, ::size_t 
# 1651
dynamicSMemSize, unsigned 
# 1652
flags) 
# 1653
{ 
# 1654
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1655
} 
# 1660
class __cudaOccupancyB2DHelper { 
# 1661
::size_t n; 
# 1663
public: __cudaOccupancyB2DHelper(::size_t n_) : n(n_) { } 
# 1664
::size_t operator()(int) 
# 1665
{ 
# 1666
return n; 
# 1667
} 
# 1668
}; 
# 1716 "/opt/cuda/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1717
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1718
minGridSize, int *
# 1719
blockSize, T 
# 1720
func, UnaryFunction 
# 1721
blockSizeToDynamicSMemSize, int 
# 1722
blockSizeLimit = 0, unsigned 
# 1723
flags = 0) 
# 1724
{ 
# 1725
cudaError_t status; 
# 1728
int device; 
# 1729
cudaFuncAttributes attr; 
# 1732
int maxThreadsPerMultiProcessor; 
# 1733
int warpSize; 
# 1734
int devMaxThreadsPerBlock; 
# 1735
int multiProcessorCount; 
# 1736
int funcMaxThreadsPerBlock; 
# 1737
int occupancyLimit; 
# 1738
int granularity; 
# 1741
int maxBlockSize = 0; 
# 1742
int numBlocks = 0; 
# 1743
int maxOccupancy = 0; 
# 1746
int blockSizeToTryAligned; 
# 1747
int blockSizeToTry; 
# 1748
int blockSizeLimitAligned; 
# 1749
int occupancyInBlocks; 
# 1750
int occupancyInThreads; 
# 1751
::size_t dynamicSMemSize; 
# 1757
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 1758
return cudaErrorInvalidValue; 
# 1759
}  
# 1765
status = ::cudaGetDevice(&device); 
# 1766
if (status != (cudaSuccess)) { 
# 1767
return status; 
# 1768
}  
# 1770
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 1774
if (status != (cudaSuccess)) { 
# 1775
return status; 
# 1776
}  
# 1778
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 1782
if (status != (cudaSuccess)) { 
# 1783
return status; 
# 1784
}  
# 1786
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 1790
if (status != (cudaSuccess)) { 
# 1791
return status; 
# 1792
}  
# 1794
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 1798
if (status != (cudaSuccess)) { 
# 1799
return status; 
# 1800
}  
# 1802
status = cudaFuncGetAttributes(&attr, func); 
# 1803
if (status != (cudaSuccess)) { 
# 1804
return status; 
# 1805
}  
# 1807
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 1813
occupancyLimit = maxThreadsPerMultiProcessor; 
# 1814
granularity = warpSize; 
# 1816
if (blockSizeLimit == 0) { 
# 1817
blockSizeLimit = devMaxThreadsPerBlock; 
# 1818
}  
# 1820
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 1821
blockSizeLimit = devMaxThreadsPerBlock; 
# 1822
}  
# 1824
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 1825
blockSizeLimit = funcMaxThreadsPerBlock; 
# 1826
}  
# 1828
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 1830
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 1834
if (blockSizeLimit < blockSizeToTryAligned) { 
# 1835
blockSizeToTry = blockSizeLimit; 
# 1836
} else { 
# 1837
blockSizeToTry = blockSizeToTryAligned; 
# 1838
}  
# 1840
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 1842
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 1849
if (status != (cudaSuccess)) { 
# 1850
return status; 
# 1851
}  
# 1853
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 1855
if (occupancyInThreads > maxOccupancy) { 
# 1856
maxBlockSize = blockSizeToTry; 
# 1857
numBlocks = occupancyInBlocks; 
# 1858
maxOccupancy = occupancyInThreads; 
# 1859
}  
# 1863
if (occupancyLimit == maxOccupancy) { 
# 1864
break; 
# 1865
}  
# 1866
}  
# 1874
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 1875
(*blockSize) = maxBlockSize; 
# 1877
return status; 
# 1878
} 
# 1912 "/opt/cuda/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1913
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1914
minGridSize, int *
# 1915
blockSize, T 
# 1916
func, UnaryFunction 
# 1917
blockSizeToDynamicSMemSize, int 
# 1918
blockSizeLimit = 0) 
# 1919
{ 
# 1920
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 1921
} 
# 1958 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1959
cudaOccupancyMaxPotentialBlockSize(int *
# 1960
minGridSize, int *
# 1961
blockSize, T 
# 1962
func, ::size_t 
# 1963
dynamicSMemSize = 0, int 
# 1964
blockSizeLimit = 0) 
# 1965
{ 
# 1966
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 1967
} 
# 1996 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1997
cudaOccupancyAvailableDynamicSMemPerBlock(::size_t *
# 1998
dynamicSmemSize, T 
# 1999
func, int 
# 2000
numBlocks, int 
# 2001
blockSize) 
# 2002
{ 
# 2003
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
# 2004
} 
# 2055 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2056
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 2057
minGridSize, int *
# 2058
blockSize, T 
# 2059
func, ::size_t 
# 2060
dynamicSMemSize = 0, int 
# 2061
blockSizeLimit = 0, unsigned 
# 2062
flags = 0) 
# 2063
{ 
# 2064
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 2065
} 
# 2099 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2100
cudaOccupancyMaxPotentialClusterSize(int *
# 2101
clusterSize, T *
# 2102
func, const cudaLaunchConfig_t *
# 2103
config) 
# 2104
{ 
# 2105
return ::cudaOccupancyMaxPotentialClusterSize(clusterSize, (const void *)func, config); 
# 2106
} 
# 2142 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2143
cudaOccupancyMaxActiveClusters(int *
# 2144
numClusters, T *
# 2145
func, const cudaLaunchConfig_t *
# 2146
config) 
# 2147
{ 
# 2148
return ::cudaOccupancyMaxActiveClusters(numClusters, (const void *)func, config); 
# 2149
} 
# 2182 "/opt/cuda/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 2183
cudaFuncGetAttributes(cudaFuncAttributes *
# 2184
attr, T *
# 2185
entry) 
# 2187
{ 
# 2188
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 2189
} 
# 2244 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2245
cudaFuncSetAttribute(T *
# 2246
entry, cudaFuncAttribute 
# 2247
attr, int 
# 2248
value) 
# 2250
{ 
# 2251
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
# 2252
} 
# 2268 "/opt/cuda/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2269
cudaGetKernel(cudaKernel_t *
# 2270
kernelPtr, const T *
# 2271
entryFuncAddr) 
# 2273
{ 
# 2274
return ::cudaGetKernel(kernelPtr, (const void *)entryFuncAddr); 
# 2275
} 
# 2286 "/opt/cuda/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 50 "/usr/include/c++/12.2.1/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/12.2.1/bits/memoryfwd.h" 3
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 71
template< class , class > struct uses_allocator; 
# 74
template< class > struct allocator_traits; 
# 81
}
# 42 "/usr/include/c++/12.2.1/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT> struct char_traits; 
# 55
template<> struct char_traits< char> ; 
# 57
template<> struct char_traits< wchar_t> ; 
# 64
template<> struct char_traits< char16_t> ; 
# 65
template<> struct char_traits< char32_t> ; 
# 68
inline namespace __cxx11 { 
# 70
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 71
_Alloc = allocator< _CharT> > class basic_string; 
# 74
}
# 77
typedef __cxx11::basic_string< char>  string; 
# 80
typedef __cxx11::basic_string< wchar_t>  wstring; 
# 89 "/usr/include/c++/12.2.1/bits/stringfwd.h" 3
typedef __cxx11::basic_string< char16_t>  u16string; 
# 92
typedef __cxx11::basic_string< char32_t>  u32string; 
# 98
}
# 40 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 20 "/usr/include/bits/types/wint_t.h" 3
typedef unsigned wint_t; 
# 21 "/usr/include/bits/types/__mbstate_t.h" 3
typedef 
# 14
struct { 
# 15
int __count; 
# 17
union { 
# 18
unsigned __wch; 
# 19
char __wchb[4]; 
# 20
} __value; 
# 21
} __mbstate_t; 
# 6 "/usr/include/bits/types/mbstate_t.h" 3
typedef __mbstate_t mbstate_t; 
# 4 "/usr/include/bits/types/__FILE.h" 3
struct _IO_FILE; 
# 5
typedef _IO_FILE __FILE; 
# 4 "/usr/include/bits/types/FILE.h" 3
struct _IO_FILE; 
# 7
typedef _IO_FILE FILE; 
# 79 "/usr/include/wchar.h" 3
extern "C" {
# 83
struct tm; 
# 87
extern wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) noexcept(true)
# 89
 __attribute((__nonnull__(1, 2))); 
# 92
extern wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) noexcept(true)
# 94
 __attribute((__nonnull__(1, 2))); 
# 97
extern wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) noexcept(true)
# 99
 __attribute((__nonnull__(1, 2))); 
# 101
extern wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) noexcept(true)
# 103
 __attribute((__nonnull__(1, 2))); 
# 106
extern int wcscmp(const wchar_t * __s1, const wchar_t * __s2) noexcept(true)
# 107
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 109
extern int wcsncmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) noexcept(true)
# 110
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 114
extern int wcscasecmp(const wchar_t * __s1, const wchar_t * __s2) noexcept(true); 
# 117
extern int wcsncasecmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) noexcept(true); 
# 122
extern int wcscasecmp_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) noexcept(true); 
# 125
extern int wcsncasecmp_l(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n, locale_t __loc) noexcept(true); 
# 131
extern int wcscoll(const wchar_t * __s1, const wchar_t * __s2) noexcept(true); 
# 135
extern ::size_t wcsxfrm(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) noexcept(true); 
# 144
extern int wcscoll_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) noexcept(true); 
# 150
extern ::size_t wcsxfrm_l(wchar_t * __s1, const wchar_t * __s2, ::size_t __n, locale_t __loc) noexcept(true); 
# 154
extern wchar_t *wcsdup(const wchar_t * __s) noexcept(true)
# 155
 __attribute((__malloc__)) __attribute((__malloc__(__builtin_free, 1))); 
# 160
extern "C++" wchar_t *wcschr(wchar_t * __wcs, wchar_t __wc) noexcept(true) __asm__("wcschr")
# 161
 __attribute((__pure__)); 
# 162
extern "C++" const wchar_t *wcschr(const wchar_t * __wcs, wchar_t __wc) noexcept(true) __asm__("wcschr")
# 163
 __attribute((__pure__)); 
# 170
extern "C++" wchar_t *wcsrchr(wchar_t * __wcs, wchar_t __wc) noexcept(true) __asm__("wcsrchr")
# 171
 __attribute((__pure__)); 
# 172
extern "C++" const wchar_t *wcsrchr(const wchar_t * __wcs, wchar_t __wc) noexcept(true) __asm__("wcsrchr")
# 173
 __attribute((__pure__)); 
# 182 "/usr/include/wchar.h" 3
extern wchar_t *wcschrnul(const wchar_t * __s, wchar_t __wc) noexcept(true)
# 183
 __attribute((__pure__)); 
# 188
extern ::size_t wcscspn(const wchar_t * __wcs, const wchar_t * __reject) noexcept(true)
# 189
 __attribute((__pure__)); 
# 192
extern ::size_t wcsspn(const wchar_t * __wcs, const wchar_t * __accept) noexcept(true)
# 193
 __attribute((__pure__)); 
# 196
extern "C++" wchar_t *wcspbrk(wchar_t * __wcs, const wchar_t * __accept) noexcept(true) __asm__("wcspbrk")
# 197
 __attribute((__pure__)); 
# 198
extern "C++" const wchar_t *wcspbrk(const wchar_t * __wcs, const wchar_t * __accept) noexcept(true) __asm__("wcspbrk")
# 200
 __attribute((__pure__)); 
# 207
extern "C++" wchar_t *wcsstr(wchar_t * __haystack, const wchar_t * __needle) noexcept(true) __asm__("wcsstr")
# 208
 __attribute((__pure__)); 
# 209
extern "C++" const wchar_t *wcsstr(const wchar_t * __haystack, const wchar_t * __needle) noexcept(true) __asm__("wcsstr")
# 211
 __attribute((__pure__)); 
# 218
extern wchar_t *wcstok(wchar_t *__restrict__ __s, const wchar_t *__restrict__ __delim, wchar_t **__restrict__ __ptr) noexcept(true); 
# 223
extern ::size_t wcslen(const wchar_t * __s) noexcept(true) __attribute((__pure__)); 
# 228
extern "C++" wchar_t *wcswcs(wchar_t * __haystack, const wchar_t * __needle) noexcept(true) __asm__("wcswcs")
# 229
 __attribute((__pure__)); 
# 230
extern "C++" const wchar_t *wcswcs(const wchar_t * __haystack, const wchar_t * __needle) noexcept(true) __asm__("wcswcs")
# 232
 __attribute((__pure__)); 
# 241 "/usr/include/wchar.h" 3
extern ::size_t wcsnlen(const wchar_t * __s, ::size_t __maxlen) noexcept(true)
# 242
 __attribute((__pure__)); 
# 248
extern "C++" wchar_t *wmemchr(wchar_t * __s, wchar_t __c, ::size_t __n) noexcept(true) __asm__("wmemchr")
# 249
 __attribute((__pure__)); 
# 250
extern "C++" const wchar_t *wmemchr(const wchar_t * __s, wchar_t __c, ::size_t __n) noexcept(true) __asm__("wmemchr")
# 252
 __attribute((__pure__)); 
# 259
extern int wmemcmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) noexcept(true)
# 260
 __attribute((__pure__)); 
# 263
extern wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) noexcept(true); 
# 268
extern wchar_t *wmemmove(wchar_t * __s1, const wchar_t * __s2, ::size_t __n) noexcept(true); 
# 272
extern wchar_t *wmemset(wchar_t * __s, wchar_t __c, ::size_t __n) noexcept(true); 
# 277
extern wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) noexcept(true); 
# 285
extern wint_t btowc(int __c) noexcept(true); 
# 289
extern int wctob(wint_t __c) noexcept(true); 
# 293
extern int mbsinit(const mbstate_t * __ps) noexcept(true) __attribute((__pure__)); 
# 297
extern ::size_t mbrtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __p) noexcept(true); 
# 302
extern ::size_t wcrtomb(char *__restrict__ __s, wchar_t __wc, mbstate_t *__restrict__ __ps) noexcept(true); 
# 306
extern ::size_t __mbrlen(const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __ps) noexcept(true); 
# 308
extern ::size_t mbrlen(const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __ps) noexcept(true); 
# 338 "/usr/include/wchar.h" 3
extern ::size_t mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) noexcept(true); 
# 344
extern ::size_t wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) noexcept(true); 
# 352
extern ::size_t mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __nmc, ::size_t __len, mbstate_t *__restrict__ __ps) noexcept(true); 
# 358
extern ::size_t wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __nwc, ::size_t __len, mbstate_t *__restrict__ __ps) noexcept(true); 
# 368
extern int wcwidth(wchar_t __c) noexcept(true); 
# 372
extern int wcswidth(const wchar_t * __s, ::size_t __n) noexcept(true); 
# 378
extern double wcstod(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 383
extern float wcstof(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 385
extern long double wcstold(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 397 "/usr/include/wchar.h" 3
extern _Float32 wcstof32(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 402
extern _Float64 wcstof64(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 407
extern _Float128 wcstof128(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 412
extern _Float32x wcstof32x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 417
extern _Float64x wcstof64x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 429 "/usr/include/wchar.h" 3
extern long wcstol(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 434
extern unsigned long wcstoul(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 442
__extension__ extern long long wcstoll(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 449
__extension__ extern unsigned long long wcstoull(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 458
__extension__ extern long long wcstoq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 465
__extension__ extern unsigned long long wcstouq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 474
extern long wcstol_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true); 
# 478
extern unsigned long wcstoul_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true); 
# 483
__extension__ extern long long wcstoll_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true); 
# 488
__extension__ extern unsigned long long wcstoull_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true); 
# 493
extern double wcstod_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 497
extern float wcstof_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 501
extern long double wcstold_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 512 "/usr/include/wchar.h" 3
extern _Float32 wcstof32_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 518
extern _Float64 wcstof64_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 524
extern _Float128 wcstof128_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 530
extern _Float32x wcstof32x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 536
extern _Float64x wcstof64x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 552 "/usr/include/wchar.h" 3
extern wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) noexcept(true); 
# 557
extern wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) noexcept(true); 
# 581 "/usr/include/wchar.h" 3
extern __FILE *open_wmemstream(wchar_t ** __bufloc, ::size_t * __sizeloc) noexcept(true)
# 582
 __attribute((__malloc__)); 
# 588
extern int fwide(__FILE * __fp, int __mode) noexcept(true); 
# 595
extern int fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 602
extern int wprintf(const wchar_t *__restrict__ __format, ...); 
# 605
extern int swprintf(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __format, ...) noexcept(true); 
# 613
extern int vfwprintf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 621
extern int vwprintf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 626
extern int vswprintf(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) noexcept(true); 
# 636
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 643
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 646
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_swscanf"); 
# 657 "/usr/include/wchar.h" 3
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 661
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 664
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_swscanf"); 
# 688 "/usr/include/wchar.h" 3
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 696
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 700
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vswscanf"); 
# 711
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 715
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 718
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vswscanf"); 
# 744 "/usr/include/wchar.h" 3
extern wint_t fgetwc(__FILE * __stream); 
# 745
extern wint_t getwc(__FILE * __stream); 
# 751
extern wint_t getwchar(); 
# 758
extern wint_t fputwc(wchar_t __wc, __FILE * __stream); 
# 759
extern wint_t putwc(wchar_t __wc, __FILE * __stream); 
# 765
extern wint_t putwchar(wchar_t __wc); 
# 773
extern wchar_t *fgetws(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 780
extern int fputws(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 788
extern wint_t ungetwc(wint_t __wc, __FILE * __stream); 
# 799 "/usr/include/wchar.h" 3
extern wint_t getwc_unlocked(__FILE * __stream); 
# 800
extern wint_t getwchar_unlocked(); 
# 808
extern wint_t fgetwc_unlocked(__FILE * __stream); 
# 816
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 825 "/usr/include/wchar.h" 3
extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 826
extern wint_t putwchar_unlocked(wchar_t __wc); 
# 835 "/usr/include/wchar.h" 3
extern wchar_t *fgetws_unlocked(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 844
extern int fputws_unlocked(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 852
extern ::size_t wcsftime(wchar_t *__restrict__ __s, ::size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp) noexcept(true); 
# 859
extern ::size_t wcsftime_l(wchar_t *__restrict__ __s, ::size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) noexcept(true); 
# 882 "/usr/include/wchar.h" 3
}
# 62 "/usr/include/c++/12.2.1/cwchar" 3
namespace std { 
# 64
using ::mbstate_t;
# 65
}
# 135 "/usr/include/c++/12.2.1/cwchar" 3
extern "C++" {
# 137
namespace std __attribute((__visibility__("default"))) { 
# 141
using ::wint_t;
# 143
using ::btowc;
# 144
using ::fgetwc;
# 145
using ::fgetws;
# 146
using ::fputwc;
# 147
using ::fputws;
# 148
using ::fwide;
# 149
using ::fwprintf;
# 150
using ::fwscanf;
# 151
using ::getwc;
# 152
using ::getwchar;
# 153
using ::mbrlen;
# 154
using ::mbrtowc;
# 155
using ::mbsinit;
# 156
using ::mbsrtowcs;
# 157
using ::putwc;
# 158
using ::putwchar;
# 160
using ::swprintf;
# 162
using ::swscanf;
# 163
using ::ungetwc;
# 164
using ::vfwprintf;
# 166
using ::vfwscanf;
# 169
using ::vswprintf;
# 172
using ::vswscanf;
# 174
using ::vwprintf;
# 176
using ::vwscanf;
# 178
using ::wcrtomb;
# 179
using ::wcscat;
# 180
using ::wcscmp;
# 181
using ::wcscoll;
# 182
using ::wcscpy;
# 183
using ::wcscspn;
# 184
using ::wcsftime;
# 185
using ::wcslen;
# 186
using ::wcsncat;
# 187
using ::wcsncmp;
# 188
using ::wcsncpy;
# 189
using ::wcsrtombs;
# 190
using ::wcsspn;
# 191
using ::wcstod;
# 193
using ::wcstof;
# 195
using ::wcstok;
# 196
using ::wcstol;
# 197
using ::wcstoul;
# 198
using ::wcsxfrm;
# 199
using ::wctob;
# 200
using ::wmemcmp;
# 201
using ::wmemcpy;
# 202
using ::wmemmove;
# 203
using ::wmemset;
# 204
using ::wprintf;
# 205
using ::wscanf;
# 206
using ::wcschr;
# 207
using ::wcspbrk;
# 208
using ::wcsrchr;
# 209
using ::wcsstr;
# 210
using ::wmemchr;
# 235 "/usr/include/c++/12.2.1/cwchar" 3
}
# 236
}
# 244
namespace __gnu_cxx { 
# 251
using ::wcstold;
# 260 "/usr/include/c++/12.2.1/cwchar" 3
using ::wcstoll;
# 261
using ::wcstoull;
# 263
}
# 265
namespace std { 
# 267
using __gnu_cxx::wcstold;
# 268
using __gnu_cxx::wcstoll;
# 269
using __gnu_cxx::wcstoull;
# 270
}
# 280 "/usr/include/c++/12.2.1/cwchar" 3
namespace std { 
# 300
}
# 42 "/usr/include/c++/12.2.1/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/12.2.1/bits/postypes.h" 3
typedef long streamoff; 
# 68
typedef ptrdiff_t streamsize; 
# 81 "/usr/include/c++/12.2.1/bits/postypes.h" 3
template< class _StateT> 
# 82
class fpos { 
# 85
streamoff _M_off; 
# 86
_StateT _M_state; 
# 93
public: fpos() : _M_off((0)), _M_state() 
# 94
{ } 
# 103 "/usr/include/c++/12.2.1/bits/postypes.h" 3
fpos(streamoff __off) : _M_off(__off), _M_state() 
# 104
{ } 
# 107
fpos(const fpos &) = default;
# 108
fpos &operator=(const fpos &) = default;
# 109
~fpos() = default;
# 113
operator streamoff() const { return _M_off; } 
# 117
void state(_StateT __st) 
# 118
{ (_M_state) = __st; } 
# 122
_StateT state() const 
# 123
{ return _M_state; } 
# 130
fpos &operator+=(streamoff __off) 
# 131
{ 
# 132
(_M_off) += __off; 
# 133
return *this; 
# 134
} 
# 141
fpos &operator-=(streamoff __off) 
# 142
{ 
# 143
(_M_off) -= __off; 
# 144
return *this; 
# 145
} 
# 154
fpos operator+(streamoff __off) const 
# 155
{ 
# 156
fpos __pos(*this); 
# 157
__pos += __off; 
# 158
return __pos; 
# 159
} 
# 168
fpos operator-(streamoff __off) const 
# 169
{ 
# 170
fpos __pos(*this); 
# 171
__pos -= __off; 
# 172
return __pos; 
# 173
} 
# 181
streamoff operator-(const fpos &__other) const 
# 182
{ return (_M_off) - (__other._M_off); } 
# 183
}; 
# 190
template< class _StateT> inline bool 
# 192
operator==(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 193
{ return ((streamoff)__lhs) == ((streamoff)__rhs); } 
# 195
template< class _StateT> inline bool 
# 197
operator!=(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 198
{ return ((streamoff)__lhs) != ((streamoff)__rhs); } 
# 204
typedef fpos< __mbstate_t>  streampos; 
# 206
typedef fpos< __mbstate_t>  wstreampos; 
# 215 "/usr/include/c++/12.2.1/bits/postypes.h" 3
typedef fpos< __mbstate_t>  u16streampos; 
# 217
typedef fpos< __mbstate_t>  u32streampos; 
# 221
}
# 42 "/usr/include/c++/12.2.1/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/12.2.1/iosfwd" 3
class ios_base; 
# 76
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ios; 
# 79
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf; 
# 82
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_istream; 
# 85
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream; 
# 88
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream; 
# 92
inline namespace __cxx11 { 
# 94
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 95
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 98
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 99
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 102
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 103
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 106
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 107
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 110
}
# 112
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 115
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 118
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 121
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 124
template< class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator; 
# 127
template< class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator; 
# 132
typedef basic_ios< char>  ios; 
# 135
typedef basic_streambuf< char>  streambuf; 
# 138
typedef basic_istream< char>  istream; 
# 141
typedef basic_ostream< char>  ostream; 
# 144
typedef basic_iostream< char>  iostream; 
# 147
typedef __cxx11::basic_stringbuf< char>  stringbuf; 
# 150
typedef __cxx11::basic_istringstream< char>  istringstream; 
# 153
typedef __cxx11::basic_ostringstream< char>  ostringstream; 
# 156
typedef __cxx11::basic_stringstream< char>  stringstream; 
# 159
typedef basic_filebuf< char>  filebuf; 
# 162
typedef basic_ifstream< char>  ifstream; 
# 165
typedef basic_ofstream< char>  ofstream; 
# 168
typedef basic_fstream< char>  fstream; 
# 172
typedef basic_ios< wchar_t>  wios; 
# 175
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 178
typedef basic_istream< wchar_t>  wistream; 
# 181
typedef basic_ostream< wchar_t>  wostream; 
# 184
typedef basic_iostream< wchar_t>  wiostream; 
# 187
typedef __cxx11::basic_stringbuf< wchar_t>  wstringbuf; 
# 190
typedef __cxx11::basic_istringstream< wchar_t>  wistringstream; 
# 193
typedef __cxx11::basic_ostringstream< wchar_t>  wostringstream; 
# 196
typedef __cxx11::basic_stringstream< wchar_t>  wstringstream; 
# 199
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 202
typedef basic_ifstream< wchar_t>  wifstream; 
# 205
typedef basic_ofstream< wchar_t>  wofstream; 
# 208
typedef basic_fstream< wchar_t>  wfstream; 
# 254 "/usr/include/c++/12.2.1/iosfwd" 3
}
# 35 "/usr/include/c++/12.2.1/exception" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/12.2.1/bits/exception.h" 3
#pragma GCC visibility push ( default )
# 40
extern "C++" {
# 42
namespace std { 
# 61 "/usr/include/c++/12.2.1/bits/exception.h" 3
class exception { 
# 64
public: exception() noexcept { } 
# 65
virtual ~exception() noexcept; 
# 67
exception(const exception &) = default;
# 68
exception &operator=(const exception &) = default;
# 69
exception(exception &&) = default;
# 70
exception &operator=(exception &&) = default;
# 76
virtual const char *what() const noexcept; 
# 77
}; 
# 81
}
# 83
}
# 85
#pragma GCC visibility pop
# 40 "/usr/include/c++/12.2.1/exception" 3
extern "C++" {
# 42
namespace std { 
# 53 "/usr/include/c++/12.2.1/exception" 3
class bad_exception : public exception { 
# 56
public: bad_exception() noexcept { } 
# 60
virtual ~bad_exception() noexcept; 
# 64
virtual const char *what() const noexcept; 
# 65
}; 
# 68
typedef void (*terminate_handler)(void); 
# 71
terminate_handler set_terminate(terminate_handler) noexcept; 
# 75
terminate_handler get_terminate() noexcept; 
# 80
void terminate() noexcept __attribute((__noreturn__)); 
# 84
typedef void (*unexpected_handler)(void) __attribute((__deprecated__)); 
# 90
__attribute((__deprecated__)) unexpected_handler 
# 91
set_unexpected(unexpected_handler) noexcept; 
# 99
__attribute((__deprecated__)) unexpected_handler 
# 100
get_unexpected() noexcept; 
# 108
__attribute((__deprecated__)) void 
# 109
unexpected() __attribute((__noreturn__)); 
# 123 "/usr/include/c++/12.2.1/exception" 3
__attribute((__deprecated__("use \'std::uncaught_exceptions()\' instead"))) bool 
# 124
uncaught_exception() noexcept __attribute((__pure__)); 
# 132
int uncaught_exceptions() noexcept __attribute((__pure__)); 
# 136
}
# 138
namespace __gnu_cxx { 
# 158 "/usr/include/c++/12.2.1/exception" 3
void __verbose_terminate_handler(); 
# 161
}
# 163
}
# 165
#pragma GCC visibility pop
# 34 "/usr/include/c++/12.2.1/bits/exception_ptr.h" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/12.2.1/bits/cxxabi_init_exception.h" 3
#pragma GCC visibility push ( default )
# 50 "/usr/include/c++/12.2.1/bits/cxxabi_init_exception.h" 3
namespace std { 
# 52
class type_info; 
# 53
}
# 55
namespace __cxxabiv1 { 
# 57
struct __cxa_refcounted_exception; 
# 59
extern "C" {
# 63
void *__cxa_allocate_exception(::size_t) noexcept; 
# 66
void __cxa_free_exception(void *) noexcept; 
# 70
__cxa_refcounted_exception *__cxa_init_primary_exception(void * object, std::type_info * tinfo, void (* dest)(void *)) noexcept; 
# 73
}
# 74
}
# 78
#pragma GCC visibility pop
# 37 "/usr/include/c++/12.2.1/bits/hash_bytes.h" 3
namespace std { 
# 47
size_t _Hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 54
size_t _Fnv_hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 57
}
# 39 "/usr/include/c++/12.2.1/typeinfo" 3
#pragma GCC visibility push ( default )
# 45
extern "C++" {
# 47
namespace __cxxabiv1 { 
# 49
class __class_type_info; 
# 50
}
# 84 "/usr/include/c++/12.2.1/typeinfo" 3
namespace std { 
# 92
class type_info { 
# 99
public: virtual ~type_info(); 
# 103
const char *name() const noexcept 
# 104
{ return (((__name)[0]) == ('*')) ? (__name) + 1 : (__name); } 
# 108
inline bool before(const type_info & __arg) const noexcept; 
# 111
inline bool operator==(const type_info & __arg) const noexcept; 
# 114
bool operator!=(const type_info &__arg) const noexcept 
# 115
{ return !this->operator==(__arg); } 
# 119
size_t hash_code() const noexcept 
# 120
{ 
# 122
return _Hash_bytes(this->name(), __builtin_strlen(this->name()), static_cast< size_t>(3339675911UL)); 
# 127
} 
# 131
virtual bool __is_pointer_p() const; 
# 134
virtual bool __is_function_p() const; 
# 142
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 146
virtual bool __do_upcast(const __cxxabiv1::__class_type_info * __target, void ** __obj_ptr) const; 
# 150
protected: const char *__name; 
# 152
explicit type_info(const char *__n) : __name(__n) { } 
# 157
private: type_info &operator=(const type_info &) = delete;
# 158
type_info(const type_info &) = delete;
# 167 "/usr/include/c++/12.2.1/typeinfo" 3
}; 
# 171
inline bool type_info::before(const type_info &__arg) const noexcept 
# 172
{ 
# 177
if ((((__name)[0]) != ('*')) || (((__arg.__name)[0]) != ('*'))) { 
# 178
return __builtin_strcmp(__name, __arg.__name) < 0; }  
# 187 "/usr/include/c++/12.2.1/typeinfo" 3
return (__name) < (__arg.__name); 
# 188
} 
# 193
inline bool type_info::operator==(const type_info &__arg) const noexcept 
# 194
{ 
# 195
if (std::__is_constant_evaluated()) { 
# 196
return this == (&__arg); }  
# 198
if ((__name) == (__arg.__name)) { 
# 199
return true; }  
# 206
return (((__name)[0]) != ('*')) && (__builtin_strcmp(__name, __arg.name()) == 0); 
# 210
} 
# 220 "/usr/include/c++/12.2.1/typeinfo" 3
class bad_cast : public exception { 
# 223
public: bad_cast() noexcept { } 
# 227
virtual ~bad_cast() noexcept; 
# 230
virtual const char *what() const noexcept; 
# 231
}; 
# 237
class bad_typeid : public exception { 
# 240
public: bad_typeid() noexcept { } 
# 244
virtual ~bad_typeid() noexcept; 
# 247
virtual const char *what() const noexcept; 
# 248
}; 
# 249
}
# 251
}
# 253
#pragma GCC visibility pop
# 43 "/usr/include/c++/12.2.1/new" 3
#pragma GCC visibility push ( default )
# 45
extern "C++" {
# 47
namespace std { 
# 55
class bad_alloc : public exception { 
# 58
public: bad_alloc() throw() { } 
# 61
bad_alloc(const bad_alloc &) = default;
# 62
bad_alloc &operator=(const bad_alloc &) = default;
# 67
virtual ~bad_alloc() throw(); 
# 70
virtual const char *what() const throw(); 
# 71
}; 
# 74
class bad_array_new_length : public bad_alloc { 
# 77
public: bad_array_new_length() throw() { } 
# 81
virtual ~bad_array_new_length() throw(); 
# 84
virtual const char *what() const throw(); 
# 85
}; 
# 89
enum class align_val_t: size_t { }; 
# 92
struct nothrow_t { 
# 95
explicit nothrow_t() = default;
# 97
}; 
# 99
extern const nothrow_t nothrow; 
# 103
typedef void (*new_handler)(void); 
# 107
new_handler set_new_handler(new_handler) throw(); 
# 111
new_handler get_new_handler() noexcept; 
# 113
}
# 126 "/usr/include/c++/12.2.1/new" 3
[[__nodiscard__]] void *operator new(std::size_t)
# 127
 __attribute((__externally_visible__)); 
# 128
[[__nodiscard__]] void *operator new[](std::size_t)
# 129
 __attribute((__externally_visible__)); 
# 130
void operator delete(void *) noexcept
# 131
 __attribute((__externally_visible__)); 
# 132
void operator delete[](void *) noexcept
# 133
 __attribute((__externally_visible__)); 
# 135
void operator delete(void *, std::size_t) noexcept
# 136
 __attribute((__externally_visible__)); 
# 137
void operator delete[](void *, std::size_t) noexcept
# 138
 __attribute((__externally_visible__)); 
# 140
[[__nodiscard__]] void *operator new(std::size_t, const std::nothrow_t &) noexcept
# 141
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 142
[[__nodiscard__]] void *operator new[](std::size_t, const std::nothrow_t &) noexcept
# 143
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 144
void operator delete(void *, const std::nothrow_t &) noexcept
# 145
 __attribute((__externally_visible__)); 
# 146
void operator delete[](void *, const std::nothrow_t &) noexcept
# 147
 __attribute((__externally_visible__)); 
# 149
[[__nodiscard__]] void *operator new(std::size_t, std::align_val_t)
# 150
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 151
[[__nodiscard__]] void *operator new(std::size_t, std::align_val_t, const std::nothrow_t &) noexcept
# 152
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 153
void operator delete(void *, std::align_val_t) noexcept
# 154
 __attribute((__externally_visible__)); 
# 155
void operator delete(void *, std::align_val_t, const std::nothrow_t &) noexcept
# 156
 __attribute((__externally_visible__)); 
# 157
[[__nodiscard__]] void *operator new[](std::size_t, std::align_val_t)
# 158
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 159
[[__nodiscard__]] void *operator new[](std::size_t, std::align_val_t, const std::nothrow_t &) noexcept
# 160
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 161
void operator delete[](void *, std::align_val_t) noexcept
# 162
 __attribute((__externally_visible__)); 
# 163
void operator delete[](void *, std::align_val_t, const std::nothrow_t &) noexcept
# 164
 __attribute((__externally_visible__)); 
# 166
void operator delete(void *, std::size_t, std::align_val_t) noexcept
# 167
 __attribute((__externally_visible__)); 
# 168
void operator delete[](void *, std::size_t, std::align_val_t) noexcept
# 169
 __attribute((__externally_visible__)); 
# 174
[[__nodiscard__]] inline void *operator new(std::size_t, void *__p) noexcept 
# 175
{ return __p; } 
# 176
[[__nodiscard__]] inline void *operator new[](std::size_t, void *__p) noexcept 
# 177
{ return __p; } 
# 180
inline void operator delete(void *, void *) noexcept { } 
# 181
inline void operator delete[](void *, void *) noexcept { } 
# 183
}
# 186
namespace std { 
# 191
template< class _Tp> 
# 192
[[nodiscard]] constexpr _Tp *
# 193
launder(_Tp *__p) noexcept 
# 194
{ return __builtin_launder(__p); } 
# 199
template < typename _Ret, typename ... _Args, bool _NE >
    void launder ( _Ret ( * ) ( _Args ... ) noexcept ( _NE ) ) = delete;
# 201
template < typename _Ret, typename ... _Args, bool _NE >
    void launder ( _Ret ( * ) ( _Args ... ... ) noexcept ( _NE ) ) = delete;
# 204
inline void launder(void *) = delete;
# 205
inline void launder(const void *) = delete;
# 206
inline void launder(volatile void *) = delete;
# 207
inline void launder(const volatile void *) = delete;
# 212
constexpr inline size_t hardware_destructive_interference_size = (64); 
# 213
constexpr inline size_t hardware_constructive_interference_size = (64); 
# 215
}
# 236 "/usr/include/c++/12.2.1/new" 3
#pragma GCC visibility pop
# 52 "/usr/include/c++/12.2.1/bits/exception_ptr.h" 3
extern "C++" {
# 54
namespace std { 
# 56
class type_info; 
# 63
namespace __exception_ptr { 
# 65
class exception_ptr; 
# 66
}
# 68
using __exception_ptr::exception_ptr;
# 74
__exception_ptr::exception_ptr current_exception() noexcept; 
# 76
template< class _Ex> __exception_ptr::exception_ptr make_exception_ptr(_Ex) noexcept; 
# 80
void rethrow_exception(__exception_ptr::exception_ptr) __attribute((__noreturn__)); 
# 82
namespace __exception_ptr { 
# 84
using std::rethrow_exception;
# 90
class exception_ptr { 
# 92
void *_M_exception_object; 
# 94
explicit exception_ptr(void * __e) noexcept; 
# 96
void _M_addref() noexcept; 
# 97
void _M_release() noexcept; 
# 99
void *_M_get() const noexcept __attribute((__pure__)); 
# 101
friend exception_ptr std::current_exception() noexcept; 
# 102
friend void std::rethrow_exception(exception_ptr); 
# 103
template< class _Ex> friend exception_ptr std::make_exception_ptr(_Ex) noexcept; 
# 107
public: inline exception_ptr() noexcept; 
# 109
inline exception_ptr(const exception_ptr &) noexcept; 
# 112
exception_ptr(nullptr_t) noexcept : _M_exception_object((nullptr)) 
# 114
{ } 
# 116
exception_ptr(exception_ptr &&__o) noexcept : _M_exception_object(__o._M_exception_object) 
# 118
{ (__o._M_exception_object) = (nullptr); } 
# 129 "/usr/include/c++/12.2.1/bits/exception_ptr.h" 3
inline exception_ptr &operator=(const exception_ptr &) noexcept; 
# 133
exception_ptr &operator=(exception_ptr &&__o) noexcept 
# 134
{ 
# 135
((exception_ptr)(static_cast< exception_ptr &&>(__o))).swap(*this); 
# 136
return *this; 
# 137
} 
# 140
inline ~exception_ptr() noexcept; 
# 143
inline void swap(exception_ptr &) noexcept; 
# 155 "/usr/include/c++/12.2.1/bits/exception_ptr.h" 3
explicit operator bool() const noexcept 
# 156
{ return _M_exception_object; } 
# 165
friend inline bool operator==(const exception_ptr &__x, const exception_ptr &__y) noexcept 
# 167
{ return (__x._M_exception_object) == (__y._M_exception_object); } 
# 170
friend inline bool operator!=(const exception_ptr &__x, const exception_ptr &__y) noexcept 
# 172
{ return (__x._M_exception_object) != (__y._M_exception_object); } 
# 176
const type_info *__cxa_exception_type() const noexcept
# 177
 __attribute((__pure__)); 
# 178
}; 
# 182
inline exception_ptr::exception_ptr() noexcept : _M_exception_object((0)) 
# 184
{ } 
# 188
inline exception_ptr::exception_ptr(const exception_ptr &__other) noexcept : _M_exception_object(__other._M_exception_object) 
# 191
{ 
# 192
if (_M_exception_object) { 
# 193
this->_M_addref(); }  
# 194
} 
# 198
inline exception_ptr::~exception_ptr() noexcept 
# 199
{ 
# 200
if (_M_exception_object) { 
# 201
this->_M_release(); }  
# 202
} 
# 206
inline exception_ptr &exception_ptr::operator=(const exception_ptr &__other) noexcept 
# 207
{ 
# 208
((exception_ptr)(__other)).swap(*this); 
# 209
return *this; 
# 210
} 
# 214
inline void exception_ptr::swap(exception_ptr &__other) noexcept 
# 215
{ 
# 216
void *__tmp = _M_exception_object; 
# 217
(_M_exception_object) = (__other._M_exception_object); 
# 218
(__other._M_exception_object) = __tmp; 
# 219
} 
# 223
inline void swap(exception_ptr &__lhs, exception_ptr &__rhs) 
# 224
{ __lhs.swap(__rhs); } 
# 227
template< class _Ex> inline void 
# 230
__dest_thunk(void *__x) 
# 231
{ (static_cast< _Ex *>(__x))->~_Ex(); } 
# 234
}
# 238
template< class _Ex> __exception_ptr::exception_ptr 
# 240
make_exception_ptr(_Ex __ex) noexcept 
# 241
{ 
# 243
using _Ex2 = typename decay< _Ex> ::type; 
# 244
void *__e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex)); 
# 245
(void)__cxxabiv1::__cxa_init_primary_exception(__e, const_cast< type_info *>(&typeid(_Ex)), __exception_ptr::__dest_thunk< typename decay< _Ex> ::type> ); 
# 248
try 
# 249
{ 
# 250
::new (__e) _Ex2(__ex); 
# 251
return ((__exception_ptr::exception_ptr)(__e)); 
# 252
} 
# 253
catch (...) 
# 254
{ 
# 255
__cxxabiv1::__cxa_free_exception(__e); 
# 256
return current_exception(); 
# 257
}  
# 268 "/usr/include/c++/12.2.1/bits/exception_ptr.h" 3
} 
# 282 "/usr/include/c++/12.2.1/bits/exception_ptr.h" 3
}
# 284
}
# 286
#pragma GCC visibility pop
# 33 "/usr/include/c++/12.2.1/bits/nested_exception.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/12.2.1/bits/nested_exception.h" 3
extern "C++" {
# 44
namespace std { 
# 52
class nested_exception { 
# 54
__exception_ptr::exception_ptr _M_ptr; 
# 57
public: nested_exception() noexcept : _M_ptr(current_exception()) { } 
# 59
nested_exception(const nested_exception &) noexcept = default;
# 61
nested_exception &operator=(const nested_exception &) noexcept = default;
# 63
virtual ~nested_exception() noexcept; 
# 65
[[noreturn]] void 
# 67
rethrow_nested() const 
# 68
{ 
# 69
if ((_M_ptr)) { 
# 70
rethrow_exception(_M_ptr); }  
# 71
std::terminate(); 
# 72
} 
# 75
__exception_ptr::exception_ptr nested_ptr() const noexcept 
# 76
{ return _M_ptr; } 
# 77
}; 
# 81
template< class _Except> 
# 82
struct _Nested_exception : public _Except, public nested_exception { 
# 84
explicit _Nested_exception(const _Except &__ex) : _Except(__ex) 
# 86
{ } 
# 88
explicit _Nested_exception(_Except &&__ex) : _Except(static_cast< _Except &&>(__ex)) 
# 90
{ } 
# 91
}; 
# 96
template< class _Tp> 
# 97
[[noreturn]] inline void 
# 99
__throw_with_nested_impl(_Tp &&__t, true_type) 
# 100
{ 
# 101
using _Up = typename remove_reference< _Tp> ::type; 
# 102
throw _Nested_exception< typename remove_reference< _Tp> ::type> {std::forward< _Tp> (__t)}; 
# 103
} 
# 105
template< class _Tp> 
# 106
[[noreturn]] inline void 
# 108
__throw_with_nested_impl(_Tp &&__t, false_type) 
# 109
{ throw std::forward< _Tp> (__t); } 
# 115
template< class _Tp> 
# 116
[[noreturn]] inline void 
# 118
throw_with_nested(_Tp &&__t) 
# 119
{ 
# 120
using _Up = typename decay< _Tp> ::type; 
# 121
using _CopyConstructible = __and_< is_copy_constructible< typename decay< _Tp> ::type> , is_move_constructible< typename decay< _Tp> ::type> > ; 
# 123
static_assert((_CopyConstructible::value), "throw_with_nested argument must be CopyConstructible");
# 125
using __nest = __and_< is_class< typename decay< _Tp> ::type> , __bool_constant< !__is_final(_Up)> , __not_< is_base_of< nested_exception, typename decay< _Tp> ::type> > > ; 
# 127
std::__throw_with_nested_impl(std::forward< _Tp> (__t), __nest{}); 
# 128
} 
# 133
template< class _Tp> using __rethrow_if_nested_cond = typename enable_if< __and_< is_polymorphic< _Tp> , __or_< __not_< is_base_of< nested_exception, _Tp> > , is_convertible< _Tp *, nested_exception *> > > ::value> ::type; 
# 141
template< class _Ex> inline __rethrow_if_nested_cond< _Ex>  
# 143
__rethrow_if_nested_impl(const _Ex *__ptr) 
# 144
{ 
# 145
if (auto __ne_ptr = dynamic_cast< const nested_exception *>(__ptr)) { 
# 146
__ne_ptr->rethrow_nested(); }  
# 147
} 
# 151
inline void __rethrow_if_nested_impl(const void *) 
# 152
{ } 
# 157
template< class _Ex> inline void 
# 159
rethrow_if_nested(const _Ex &__ex) 
# 160
{ std::__rethrow_if_nested_impl(std::__addressof(__ex)); } 
# 163
}
# 165
}
# 169
#pragma GCC visibility pop
# 53 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 57
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstringop-overflow"
#pragma GCC diagnostic ignored "-Wstringop-overread"
#pragma GCC diagnostic ignored "-Warray-bounds"
# 72 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
template< class _CharT> 
# 73
struct _Char_types { 
# 75
typedef unsigned long int_type; 
# 76
typedef std::streampos pos_type; 
# 77
typedef std::streamoff off_type; 
# 78
typedef mbstate_t state_type; 
# 79
}; 
# 97 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
template< class _CharT> 
# 98
struct char_traits { 
# 100
typedef _CharT char_type; 
# 101
typedef typename _Char_types< _CharT> ::int_type int_type; 
# 102
typedef typename _Char_types< _CharT> ::pos_type pos_type; 
# 103
typedef typename _Char_types< _CharT> ::off_type off_type; 
# 104
typedef typename _Char_types< _CharT> ::state_type state_type; 
# 110
static constexpr void assign(char_type &__c1, const char_type &__c2) 
# 111
{ 
# 117
__c1 = __c2; 
# 118
} 
# 121
static constexpr bool eq(const char_type &__c1, const char_type &__c2) 
# 122
{ return __c1 == __c2; } 
# 125
static constexpr bool lt(const char_type &__c1, const char_type &__c2) 
# 126
{ return __c1 < __c2; } 
# 129
static constexpr int compare(const char_type * __s1, const char_type * __s2, std::size_t __n); 
# 132
static constexpr std::size_t length(const char_type * __s); 
# 135
static constexpr const char_type *find(const char_type * __s, std::size_t __n, const char_type & __a); 
# 138
static char_type *move(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 141
static char_type *copy(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 144
static char_type *assign(char_type * __s, std::size_t __n, char_type __a); 
# 147
static constexpr char_type to_char_type(const int_type &__c) 
# 148
{ return static_cast< char_type>(__c); } 
# 151
static constexpr int_type to_int_type(const char_type &__c) 
# 152
{ return static_cast< int_type>(__c); } 
# 155
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 156
{ return __c1 == __c2; } 
# 159
static constexpr int_type eof() 
# 160
{ return static_cast< int_type>(-1); } 
# 163
static constexpr int_type not_eof(const int_type &__c) 
# 164
{ return (!(eq_int_type)(__c, (eof)())) ? __c : (to_int_type)(char_type()); } 
# 165
}; 
# 167
template< class _CharT> constexpr int 
# 170
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, std::size_t __n) 
# 171
{ 
# 172
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 173
if ((lt)(__s1[__i], __s2[__i])) { 
# 174
return -1; } else { 
# 175
if ((lt)(__s2[__i], __s1[__i])) { 
# 176
return 1; }  }  }  
# 177
return 0; 
# 178
} 
# 180
template< class _CharT> constexpr std::size_t 
# 183
char_traits< _CharT> ::length(const char_type *__p) 
# 184
{ 
# 185
std::size_t __i = (0); 
# 186
while (!(eq)(__p[__i], char_type())) { 
# 187
++__i; }  
# 188
return __i; 
# 189
} 
# 191
template< class _CharT> constexpr const typename char_traits< _CharT> ::char_type *
# 194
char_traits< _CharT> ::find(const char_type *__s, std::size_t __n, const char_type &__a) 
# 195
{ 
# 196
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 197
if ((eq)(__s[__i], __a)) { 
# 198
return __s + __i; }  }  
# 199
return 0; 
# 200
} 
# 202
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 206
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 207
{ 
# 208
if (__n == (0)) { 
# 209
return __s1; }  
# 248 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
__builtin_memmove(__s1, __s2, __n * sizeof(char_type)); 
# 249
return __s1; 
# 250
} 
# 252
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 256
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 257
{ 
# 267 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)); 
# 268
return __s1; 
# 269
} 
# 271
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 275
char_traits< _CharT> ::assign(char_type *__s, std::size_t __n, char_type __a) 
# 276
{ 
# 286 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
if constexpr ((sizeof(_CharT) == (1)) && __is_trivial(_CharT)) 
# 287
{ 
# 288
unsigned char __c; 
# 289
__builtin_memcpy(&__c, __builtin_addressof(__a), 1); 
# 290
__builtin_memset(__s, __c, __n); 
# 291
} else 
# 293
{ 
# 294
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 295
(__s[__i]) = __a; }  
# 296
}  
# 297
return __s; 
# 298
} 
# 301
}
# 303
namespace std __attribute((__visibility__("default"))) { 
# 328 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
template< class _CharT> 
# 329
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 330
}; 
# 335
template<> struct char_traits< char>  { 
# 337
typedef char char_type; 
# 338
typedef int int_type; 
# 339
typedef streampos pos_type; 
# 340
typedef streamoff off_type; 
# 341
typedef mbstate_t state_type; 
# 347
static constexpr void assign(char_type &__c1, const char_type &__c2) noexcept 
# 348
{ 
# 354
__c1 = __c2; 
# 355
} 
# 358
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 359
{ return __c1 == __c2; } 
# 362
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 363
{ 
# 365
return ((static_cast< unsigned char>(__c1)) < (static_cast< unsigned char>(__c2))); 
# 367
} 
# 370
static constexpr int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 371
{ 
# 372
if (__n == (0)) { 
# 373
return 0; }  
# 375
if (std::__is_constant_evaluated()) 
# 376
{ 
# 377
for (size_t __i = (0); __i < __n; ++__i) { 
# 378
if (lt(__s1[__i], __s2[__i])) { 
# 379
return -1; } else { 
# 380
if (lt(__s2[__i], __s1[__i])) { 
# 381
return 1; }  }  }  
# 382
return 0; 
# 383
}  
# 385
return __builtin_memcmp(__s1, __s2, __n); 
# 386
} 
# 389
static constexpr size_t length(const char_type *__s) 
# 390
{ 
# 392
if (std::__is_constant_evaluated()) { 
# 393
return __gnu_cxx::char_traits< char> ::length(__s); }  
# 395
return __builtin_strlen(__s); 
# 396
} 
# 399
static constexpr const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 400
{ 
# 401
if (__n == (0)) { 
# 402
return 0; }  
# 404
if (std::__is_constant_evaluated()) { 
# 405
return __gnu_cxx::char_traits< char> ::find(__s, __n, __a); }  
# 407
return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); 
# 408
} 
# 411
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 412
{ 
# 413
if (__n == (0)) { 
# 414
return __s1; }  
# 419
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); 
# 420
} 
# 423
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 424
{ 
# 425
if (__n == (0)) { 
# 426
return __s1; }  
# 431
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); 
# 432
} 
# 435
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 436
{ 
# 437
if (__n == (0)) { 
# 438
return __s; }  
# 443
return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); 
# 444
} 
# 447
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 448
{ return static_cast< char_type>(__c); } 
# 453
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 454
{ return static_cast< int_type>(static_cast< unsigned char>(__c)); } 
# 457
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 458
{ return __c1 == __c2; } 
# 461
static constexpr int_type eof() noexcept 
# 462
{ return static_cast< int_type>(-1); } 
# 465
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 466
{ return (__c == eof()) ? 0 : __c; } 
# 467
}; 
# 473
template<> struct char_traits< wchar_t>  { 
# 475
typedef wchar_t char_type; 
# 476
typedef wint_t int_type; 
# 477
typedef streamoff off_type; 
# 478
typedef wstreampos pos_type; 
# 479
typedef mbstate_t state_type; 
# 485
static constexpr void assign(char_type &__c1, const char_type &__c2) noexcept 
# 486
{ 
# 492
__c1 = __c2; 
# 493
} 
# 496
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 497
{ return __c1 == __c2; } 
# 500
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 501
{ return __c1 < __c2; } 
# 504
static constexpr int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 505
{ 
# 506
if (__n == (0)) { 
# 507
return 0; }  
# 509
if (std::__is_constant_evaluated()) { 
# 510
return __gnu_cxx::char_traits< wchar_t> ::compare(__s1, __s2, __n); }  
# 512
return wmemcmp(__s1, __s2, __n); 
# 513
} 
# 516
static constexpr size_t length(const char_type *__s) 
# 517
{ 
# 519
if (std::__is_constant_evaluated()) { 
# 520
return __gnu_cxx::char_traits< wchar_t> ::length(__s); }  
# 522
return wcslen(__s); 
# 523
} 
# 526
static constexpr const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 527
{ 
# 528
if (__n == (0)) { 
# 529
return 0; }  
# 531
if (std::__is_constant_evaluated()) { 
# 532
return __gnu_cxx::char_traits< wchar_t> ::find(__s, __n, __a); }  
# 534
return wmemchr(__s, __a, __n); 
# 535
} 
# 538
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 539
{ 
# 540
if (__n == (0)) { 
# 541
return __s1; }  
# 546
return wmemmove(__s1, __s2, __n); 
# 547
} 
# 550
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 551
{ 
# 552
if (__n == (0)) { 
# 553
return __s1; }  
# 558
return wmemcpy(__s1, __s2, __n); 
# 559
} 
# 562
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 563
{ 
# 564
if (__n == (0)) { 
# 565
return __s; }  
# 570
return wmemset(__s, __a, __n); 
# 571
} 
# 574
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 575
{ return (char_type)__c; } 
# 578
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 579
{ return (int_type)__c; } 
# 582
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 583
{ return __c1 == __c2; } 
# 586
static constexpr int_type eof() noexcept 
# 587
{ return static_cast< int_type>(4294967295U); } 
# 590
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 591
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 592
}; 
# 727 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
}
# 24 "/usr/include/bits/stdint-uintn.h" 3
typedef __uint8_t uint8_t; 
# 25
typedef __uint16_t uint16_t; 
# 26
typedef __uint32_t uint32_t; 
# 27
typedef __uint64_t uint64_t; 
# 43 "/usr/include/stdint.h" 3
typedef __int_least8_t int_least8_t; 
# 44
typedef __int_least16_t int_least16_t; 
# 45
typedef __int_least32_t int_least32_t; 
# 46
typedef __int_least64_t int_least64_t; 
# 49
typedef __uint_least8_t uint_least8_t; 
# 50
typedef __uint_least16_t uint_least16_t; 
# 51
typedef __uint_least32_t uint_least32_t; 
# 52
typedef __uint_least64_t uint_least64_t; 
# 58
typedef signed char int_fast8_t; 
# 60
typedef long int_fast16_t; 
# 61
typedef long int_fast32_t; 
# 62
typedef long int_fast64_t; 
# 71 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t; 
# 73
typedef unsigned long uint_fast16_t; 
# 74
typedef unsigned long uint_fast32_t; 
# 75
typedef unsigned long uint_fast64_t; 
# 87 "/usr/include/stdint.h" 3
typedef long intptr_t; 
# 90
typedef unsigned long uintptr_t; 
# 101 "/usr/include/stdint.h" 3
typedef __intmax_t intmax_t; 
# 102
typedef __uintmax_t uintmax_t; 
# 44 "/usr/include/c++/12.2.1/cstdint" 3
namespace std { 
# 47
using ::int8_t;
# 48
using ::int16_t;
# 49
using ::int32_t;
# 50
using ::int64_t;
# 52
using ::int_fast8_t;
# 53
using ::int_fast16_t;
# 54
using ::int_fast32_t;
# 55
using ::int_fast64_t;
# 57
using ::int_least8_t;
# 58
using ::int_least16_t;
# 59
using ::int_least32_t;
# 60
using ::int_least64_t;
# 62
using ::intmax_t;
# 63
using ::intptr_t;
# 65
using ::uint8_t;
# 66
using ::uint16_t;
# 67
using ::uint32_t;
# 68
using ::uint64_t;
# 70
using ::uint_fast8_t;
# 71
using ::uint_fast16_t;
# 72
using ::uint_fast32_t;
# 73
using ::uint_fast64_t;
# 75
using ::uint_least8_t;
# 76
using ::uint_least16_t;
# 77
using ::uint_least32_t;
# 78
using ::uint_least64_t;
# 80
using ::uintmax_t;
# 81
using ::uintptr_t;
# 87
}
# 733 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 738
template<> struct char_traits< char16_t>  { 
# 740
typedef char16_t char_type; 
# 742
typedef uint_least16_t int_type; 
# 748
typedef streamoff off_type; 
# 749
typedef u16streampos pos_type; 
# 750
typedef mbstate_t state_type; 
# 756
static constexpr void assign(char_type &__c1, const char_type &__c2) noexcept 
# 757
{ 
# 763
__c1 = __c2; 
# 764
} 
# 767
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 768
{ return __c1 == __c2; } 
# 771
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 772
{ return __c1 < __c2; } 
# 775
static constexpr int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 776
{ 
# 777
for (size_t __i = (0); __i < __n; ++__i) { 
# 778
if (lt(__s1[__i], __s2[__i])) { 
# 779
return -1; } else { 
# 780
if (lt(__s2[__i], __s1[__i])) { 
# 781
return 1; }  }  }  
# 782
return 0; 
# 783
} 
# 786
static constexpr size_t length(const char_type *__s) 
# 787
{ 
# 788
size_t __i = (0); 
# 789
while (!eq(__s[__i], char_type())) { 
# 790
++__i; }  
# 791
return __i; 
# 792
} 
# 795
static constexpr const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 796
{ 
# 797
for (size_t __i = (0); __i < __n; ++__i) { 
# 798
if (eq(__s[__i], __a)) { 
# 799
return __s + __i; }  }  
# 800
return 0; 
# 801
} 
# 804
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 805
{ 
# 806
if (__n == (0)) { 
# 807
return __s1; }  
# 812
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 814
} 
# 817
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 818
{ 
# 819
if (__n == (0)) { 
# 820
return __s1; }  
# 825
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 827
} 
# 830
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 831
{ 
# 832
for (size_t __i = (0); __i < __n; ++__i) { 
# 833
assign(__s[__i], __a); }  
# 834
return __s; 
# 835
} 
# 838
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 839
{ return (char_type)__c; } 
# 842
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 843
{ return (__c == (eof())) ? (int_type)65533 : ((int_type)__c); } 
# 846
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 847
{ return __c1 == __c2; } 
# 850
static constexpr int_type eof() noexcept 
# 851
{ return static_cast< int_type>(-1); } 
# 854
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 855
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 856
}; 
# 859
template<> struct char_traits< char32_t>  { 
# 861
typedef char32_t char_type; 
# 863
typedef uint_least32_t int_type; 
# 869
typedef streamoff off_type; 
# 870
typedef u32streampos pos_type; 
# 871
typedef mbstate_t state_type; 
# 877
static constexpr void assign(char_type &__c1, const char_type &__c2) noexcept 
# 878
{ 
# 884
__c1 = __c2; 
# 885
} 
# 888
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 889
{ return __c1 == __c2; } 
# 892
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 893
{ return __c1 < __c2; } 
# 896
static constexpr int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 897
{ 
# 898
for (size_t __i = (0); __i < __n; ++__i) { 
# 899
if (lt(__s1[__i], __s2[__i])) { 
# 900
return -1; } else { 
# 901
if (lt(__s2[__i], __s1[__i])) { 
# 902
return 1; }  }  }  
# 903
return 0; 
# 904
} 
# 907
static constexpr size_t length(const char_type *__s) 
# 908
{ 
# 909
size_t __i = (0); 
# 910
while (!eq(__s[__i], char_type())) { 
# 911
++__i; }  
# 912
return __i; 
# 913
} 
# 916
static constexpr const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 917
{ 
# 918
for (size_t __i = (0); __i < __n; ++__i) { 
# 919
if (eq(__s[__i], __a)) { 
# 920
return __s + __i; }  }  
# 921
return 0; 
# 922
} 
# 925
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 926
{ 
# 927
if (__n == (0)) { 
# 928
return __s1; }  
# 933
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 935
} 
# 938
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 939
{ 
# 940
if (__n == (0)) { 
# 941
return __s1; }  
# 946
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 948
} 
# 951
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 952
{ 
# 953
for (size_t __i = (0); __i < __n; ++__i) { 
# 954
assign(__s[__i], __a); }  
# 955
return __s; 
# 956
} 
# 959
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 960
{ return (char_type)__c; } 
# 963
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 964
{ return (int_type)__c; } 
# 967
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 968
{ return __c1 == __c2; } 
# 971
static constexpr int_type eof() noexcept 
# 972
{ return static_cast< int_type>(-1); } 
# 975
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 976
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 977
}; 
# 998 "/usr/include/c++/12.2.1/bits/char_traits.h" 3
#pragma GCC diagnostic pop
# 1001
}
# 31 "/usr/include/locale.h" 3
extern "C" {
# 51 "/usr/include/locale.h" 3
struct lconv { 
# 55
char *decimal_point; 
# 56
char *thousands_sep; 
# 62
char *grouping; 
# 68
char *int_curr_symbol; 
# 69
char *currency_symbol; 
# 70
char *mon_decimal_point; 
# 71
char *mon_thousands_sep; 
# 72
char *mon_grouping; 
# 73
char *positive_sign; 
# 74
char *negative_sign; 
# 75
char int_frac_digits; 
# 76
char frac_digits; 
# 78
char p_cs_precedes; 
# 80
char p_sep_by_space; 
# 82
char n_cs_precedes; 
# 84
char n_sep_by_space; 
# 91
char p_sign_posn; 
# 92
char n_sign_posn; 
# 95
char int_p_cs_precedes; 
# 97
char int_p_sep_by_space; 
# 99
char int_n_cs_precedes; 
# 101
char int_n_sep_by_space; 
# 108
char int_p_sign_posn; 
# 109
char int_n_sign_posn; 
# 118 "/usr/include/locale.h" 3
}; 
# 122
extern char *setlocale(int __category, const char * __locale) noexcept(true); 
# 125
extern lconv *localeconv() noexcept(true); 
# 141 "/usr/include/locale.h" 3
extern locale_t newlocale(int __category_mask, const char * __locale, locale_t __base) noexcept(true); 
# 176 "/usr/include/locale.h" 3
extern locale_t duplocale(locale_t __dataset) noexcept(true); 
# 180
extern void freelocale(locale_t __dataset) noexcept(true); 
# 187
extern locale_t uselocale(locale_t __dataset) noexcept(true); 
# 195
}
# 51 "/usr/include/c++/12.2.1/clocale" 3
namespace std { 
# 53
using ::lconv;
# 54
using ::setlocale;
# 55
using ::localeconv;
# 56
}
# 48 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 55
}
# 58
namespace std __attribute((__visibility__("default"))) { 
# 62
typedef __locale_t __c_locale; 
# 74 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/c++locale.h" 3
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 75
__out, const int 
# 76
__size __attribute((__unused__)), const char *
# 77
__fmt, ...) 
# 78
{ 
# 80
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 93 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/c++locale.h" 3
__builtin_va_list __args; 
# 94
__builtin_va_start((__args),__fmt); 
# 97
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 102
__builtin_va_end(__args); 
# 105
__gnu_cxx::__uselocale(__old); 
# 113
return __ret; 
# 114
} 
# 122
}
# 28 "/usr/include/ctype.h" 3
extern "C" {
# 47 "/usr/include/ctype.h" 3
enum { 
# 48
_ISupper = ((0 < 8) ? (1 << 0) << 8 : ((1 << 0) >> 8)), 
# 49
_ISlower = ((1 < 8) ? (1 << 1) << 8 : ((1 << 1) >> 8)), 
# 50
_ISalpha = ((2 < 8) ? (1 << 2) << 8 : ((1 << 2) >> 8)), 
# 51
_ISdigit = ((3 < 8) ? (1 << 3) << 8 : ((1 << 3) >> 8)), 
# 52
_ISxdigit = ((4 < 8) ? (1 << 4) << 8 : ((1 << 4) >> 8)), 
# 53
_ISspace = ((5 < 8) ? (1 << 5) << 8 : ((1 << 5) >> 8)), 
# 54
_ISprint = ((6 < 8) ? (1 << 6) << 8 : ((1 << 6) >> 8)), 
# 55
_ISgraph = ((7 < 8) ? (1 << 7) << 8 : ((1 << 7) >> 8)), 
# 56
_ISblank = ((8 < 8) ? (1 << 8) << 8 : ((1 << 8) >> 8)), 
# 57
_IScntrl, 
# 58
_ISpunct = ((10 < 8) ? (1 << 10) << 8 : ((1 << 10) >> 8)), 
# 59
_ISalnum = ((11 < 8) ? (1 << 11) << 8 : ((1 << 11) >> 8))
# 60
}; 
# 79 "/usr/include/ctype.h" 3
extern const unsigned short **__ctype_b_loc() noexcept(true)
# 80
 __attribute((const)); 
# 81
extern const __int32_t **__ctype_tolower_loc() noexcept(true)
# 82
 __attribute((const)); 
# 83
extern const __int32_t **__ctype_toupper_loc() noexcept(true)
# 84
 __attribute((const)); 
# 108 "/usr/include/ctype.h" 3
extern int isalnum(int) noexcept(true); 
# 109
extern int isalpha(int) noexcept(true); 
# 110
extern int iscntrl(int) noexcept(true); 
# 111
extern int isdigit(int) noexcept(true); 
# 112
extern int islower(int) noexcept(true); 
# 113
extern int isgraph(int) noexcept(true); 
# 114
extern int isprint(int) noexcept(true); 
# 115
extern int ispunct(int) noexcept(true); 
# 116
extern int isspace(int) noexcept(true); 
# 117
extern int isupper(int) noexcept(true); 
# 118
extern int isxdigit(int) noexcept(true); 
# 122
extern int tolower(int __c) noexcept(true); 
# 125
extern int toupper(int __c) noexcept(true); 
# 130
extern int isblank(int) noexcept(true); 
# 135
extern int isctype(int __c, int __mask) noexcept(true); 
# 142
extern int isascii(int __c) noexcept(true); 
# 146
extern int toascii(int __c) noexcept(true); 
# 150
extern int _toupper(int) noexcept(true); 
# 151
extern int _tolower(int) noexcept(true); 
# 251 "/usr/include/ctype.h" 3
extern int isalnum_l(int, locale_t) noexcept(true); 
# 252
extern int isalpha_l(int, locale_t) noexcept(true); 
# 253
extern int iscntrl_l(int, locale_t) noexcept(true); 
# 254
extern int isdigit_l(int, locale_t) noexcept(true); 
# 255
extern int islower_l(int, locale_t) noexcept(true); 
# 256
extern int isgraph_l(int, locale_t) noexcept(true); 
# 257
extern int isprint_l(int, locale_t) noexcept(true); 
# 258
extern int ispunct_l(int, locale_t) noexcept(true); 
# 259
extern int isspace_l(int, locale_t) noexcept(true); 
# 260
extern int isupper_l(int, locale_t) noexcept(true); 
# 261
extern int isxdigit_l(int, locale_t) noexcept(true); 
# 263
extern int isblank_l(int, locale_t) noexcept(true); 
# 267
extern int __tolower_l(int __c, locale_t __l) noexcept(true); 
# 268
extern int tolower_l(int __c, locale_t __l) noexcept(true); 
# 271
extern int __toupper_l(int __c, locale_t __l) noexcept(true); 
# 272
extern int toupper_l(int __c, locale_t __l) noexcept(true); 
# 327 "/usr/include/ctype.h" 3
}
# 62 "/usr/include/c++/12.2.1/cctype" 3
namespace std { 
# 64
using ::isalnum;
# 65
using ::isalpha;
# 66
using ::iscntrl;
# 67
using ::isdigit;
# 68
using ::isgraph;
# 69
using ::islower;
# 70
using ::isprint;
# 71
using ::ispunct;
# 72
using ::isspace;
# 73
using ::isupper;
# 74
using ::isxdigit;
# 75
using ::tolower;
# 76
using ::toupper;
# 77
}
# 85
namespace std { 
# 87
using ::isblank;
# 88
}
# 44 "/usr/include/c++/12.2.1/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/12.2.1/bits/localefwd.h" 3
class locale; 
# 57
template< class _Facet> bool has_facet(const locale &) throw(); 
# 61
template< class _Facet> const _Facet &use_facet(const locale &); 
# 66
template< class _CharT> inline bool isspace(_CharT, const locale &); 
# 70
template< class _CharT> inline bool isprint(_CharT, const locale &); 
# 74
template< class _CharT> inline bool iscntrl(_CharT, const locale &); 
# 78
template< class _CharT> inline bool isupper(_CharT, const locale &); 
# 82
template< class _CharT> inline bool islower(_CharT, const locale &); 
# 86
template< class _CharT> inline bool isalpha(_CharT, const locale &); 
# 90
template< class _CharT> inline bool isdigit(_CharT, const locale &); 
# 94
template< class _CharT> inline bool ispunct(_CharT, const locale &); 
# 98
template< class _CharT> inline bool isxdigit(_CharT, const locale &); 
# 102
template< class _CharT> inline bool isalnum(_CharT, const locale &); 
# 106
template< class _CharT> inline bool isgraph(_CharT, const locale &); 
# 111
template< class _CharT> inline bool isblank(_CharT, const locale &); 
# 116
template< class _CharT> inline _CharT toupper(_CharT, const locale &); 
# 120
template< class _CharT> inline _CharT tolower(_CharT, const locale &); 
# 125
struct ctype_base; 
# 126
template< class _CharT> class ctype; 
# 128
template<> class ctype< char> ; 
# 130
template<> class ctype< wchar_t> ; 
# 132
template< class _CharT> class ctype_byname; 
# 136
class codecvt_base; 
# 137
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 139
template<> class codecvt< char, char, __mbstate_t> ; 
# 141
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 144
template<> class codecvt< char16_t, char, __mbstate_t> ; 
# 145
template<> class codecvt< char32_t, char, __mbstate_t> ; 
# 151
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 156
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class num_get; 
# 158
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class num_put; 
# 161
inline namespace __cxx11 { 
# 162
template< class _CharT> class numpunct; 
# 163
template< class _CharT> class numpunct_byname; 
# 164
}
# 166
inline namespace __cxx11 { 
# 168
template< class _CharT> class collate; 
# 170
template< class _CharT> class collate_byname; 
# 172
}
# 175
class time_base; 
# 176
inline namespace __cxx11 { 
# 177
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get; 
# 179
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get_byname; 
# 181
}
# 182
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put; 
# 184
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put_byname; 
# 188
class money_base; 
# 189
inline namespace __cxx11 { 
# 190
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class money_get; 
# 192
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class money_put; 
# 194
}
# 195
inline namespace __cxx11 { 
# 196
template< class _CharT, bool _Intl = false> class moneypunct; 
# 198
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 200
}
# 203
struct messages_base; 
# 204
inline namespace __cxx11 { 
# 205
template< class _CharT> class messages; 
# 207
template< class _CharT> class messages_byname; 
# 209
}
# 212
}
# 30 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push ( default )
# 23 "/usr/include/bits/types/struct_sched_param.h" 3
struct sched_param { 
# 25
int sched_priority; 
# 26
}; 
# 82 "/usr/include/bits/sched.h" 3
extern "C" {
# 86
extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) noexcept(true); 
# 90
extern int unshare(int __flags) noexcept(true); 
# 93
extern int sched_getcpu() noexcept(true); 
# 96
extern int getcpu(unsigned *, unsigned *) noexcept(true); 
# 99
extern int setns(int __fd, int __nstype) noexcept(true); 
# 102
}
# 32 "/usr/include/bits/cpu-set.h" 3
typedef unsigned long __cpu_mask; 
# 42
typedef 
# 40
struct { 
# 41
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 42
} cpu_set_t; 
# 115 "/usr/include/bits/cpu-set.h" 3
extern "C" {
# 117
extern int __sched_cpucount(::size_t __setsize, const cpu_set_t * __setp) noexcept(true); 
# 119
extern cpu_set_t *__sched_cpualloc(::size_t __count) noexcept(true); 
# 120
extern void __sched_cpufree(cpu_set_t * __set) noexcept(true); 
# 122
}
# 51 "/usr/include/sched.h" 3
extern "C" {
# 54
extern int sched_setparam(__pid_t __pid, const sched_param * __param) noexcept(true); 
# 58
extern int sched_getparam(__pid_t __pid, sched_param * __param) noexcept(true); 
# 61
extern int sched_setscheduler(__pid_t __pid, int __policy, const sched_param * __param) noexcept(true); 
# 65
extern int sched_getscheduler(__pid_t __pid) noexcept(true); 
# 68
extern int sched_yield() noexcept(true); 
# 71
extern int sched_get_priority_max(int __algorithm) noexcept(true); 
# 74
extern int sched_get_priority_min(int __algorithm) noexcept(true); 
# 78
extern int sched_rr_get_interval(__pid_t __pid, timespec * __t) noexcept(true); 
# 130 "/usr/include/sched.h" 3
extern int sched_setaffinity(__pid_t __pid, ::size_t __cpusetsize, const cpu_set_t * __cpuset) noexcept(true); 
# 134
extern int sched_getaffinity(__pid_t __pid, ::size_t __cpusetsize, cpu_set_t * __cpuset) noexcept(true); 
# 138
}
# 31 "/usr/include/bits/setjmp.h" 3
typedef long __jmp_buf[8]; 
# 26 "/usr/include/bits/types/struct___jmp_buf_tag.h" 3
struct __jmp_buf_tag { 
# 32
__jmp_buf __jmpbuf; 
# 33
int __mask_was_saved; 
# 34
__sigset_t __saved_mask; 
# 35
}; 
# 38 "/usr/include/pthread.h" 3
enum { 
# 39
PTHREAD_CREATE_JOINABLE, 
# 41
PTHREAD_CREATE_DETACHED
# 43
}; 
# 48
enum { 
# 49
PTHREAD_MUTEX_TIMED_NP, 
# 50
PTHREAD_MUTEX_RECURSIVE_NP, 
# 51
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 52
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 55
PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP, 
# 56
PTHREAD_MUTEX_RECURSIVE, 
# 57
PTHREAD_MUTEX_ERRORCHECK, 
# 58
PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL, 
# 62
PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
# 64
}; 
# 70
enum { 
# 71
PTHREAD_MUTEX_STALLED, 
# 72
PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED, 
# 73
PTHREAD_MUTEX_ROBUST, 
# 74
PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
# 75
}; 
# 82
enum { 
# 83
PTHREAD_PRIO_NONE, 
# 84
PTHREAD_PRIO_INHERIT, 
# 85
PTHREAD_PRIO_PROTECT
# 86
}; 
# 105 "/usr/include/pthread.h" 3
enum { 
# 106
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 107
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 108
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 109
PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
# 110
}; 
# 125 "/usr/include/pthread.h" 3
enum { 
# 126
PTHREAD_INHERIT_SCHED, 
# 128
PTHREAD_EXPLICIT_SCHED
# 130
}; 
# 135
enum { 
# 136
PTHREAD_SCOPE_SYSTEM, 
# 138
PTHREAD_SCOPE_PROCESS
# 140
}; 
# 145
enum { 
# 146
PTHREAD_PROCESS_PRIVATE, 
# 148
PTHREAD_PROCESS_SHARED
# 150
}; 
# 159 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 161
void (*__routine)(void *); 
# 162
void *__arg; 
# 163
int __canceltype; 
# 164
_pthread_cleanup_buffer *__prev; 
# 165
}; 
# 169
enum { 
# 170
PTHREAD_CANCEL_ENABLE, 
# 172
PTHREAD_CANCEL_DISABLE
# 174
}; 
# 176
enum { 
# 177
PTHREAD_CANCEL_DEFERRED, 
# 179
PTHREAD_CANCEL_ASYNCHRONOUS
# 181
}; 
# 197 "/usr/include/pthread.h" 3
extern "C" {
# 202
extern int pthread_create(pthread_t *__restrict__ __newthread, const pthread_attr_t *__restrict__ __attr, void *(* __start_routine)(void *), void *__restrict__ __arg) noexcept(true)
# 205
 __attribute((__nonnull__(1, 3))); 
# 211
extern void pthread_exit(void * __retval) __attribute((__noreturn__)); 
# 219
extern int pthread_join(pthread_t __th, void ** __thread_return); 
# 224
extern int pthread_tryjoin_np(pthread_t __th, void ** __thread_return) noexcept(true); 
# 233 "/usr/include/pthread.h" 3
extern int pthread_timedjoin_np(pthread_t __th, void ** __thread_return, const timespec * __abstime); 
# 243 "/usr/include/pthread.h" 3
extern int pthread_clockjoin_np(pthread_t __th, void ** __thread_return, clockid_t __clockid, const timespec * __abstime); 
# 269 "/usr/include/pthread.h" 3
extern int pthread_detach(pthread_t __th) noexcept(true); 
# 273
extern pthread_t pthread_self() noexcept(true) __attribute((const)); 
# 276
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) noexcept(true)
# 277
 __attribute((const)); 
# 285
extern int pthread_attr_init(pthread_attr_t * __attr) noexcept(true) __attribute((__nonnull__(1))); 
# 288
extern int pthread_attr_destroy(pthread_attr_t * __attr) noexcept(true)
# 289
 __attribute((__nonnull__(1))); 
# 292
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr, int * __detachstate) noexcept(true)
# 294
 __attribute((__nonnull__(1, 2))); 
# 297
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) noexcept(true)
# 299
 __attribute((__nonnull__(1))); 
# 303
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr, ::size_t * __guardsize) noexcept(true)
# 305
 __attribute((__nonnull__(1, 2))); 
# 308
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, ::size_t __guardsize) noexcept(true)
# 310
 __attribute((__nonnull__(1))); 
# 314
extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ __attr, sched_param *__restrict__ __param) noexcept(true)
# 316
 __attribute((__nonnull__(1, 2))); 
# 319
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict__ __attr, const sched_param *__restrict__ __param) noexcept(true)
# 321
 __attribute((__nonnull__(1, 2))); 
# 324
extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __policy) noexcept(true)
# 326
 __attribute((__nonnull__(1, 2))); 
# 329
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) noexcept(true)
# 330
 __attribute((__nonnull__(1))); 
# 333
extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __inherit) noexcept(true)
# 335
 __attribute((__nonnull__(1, 2))); 
# 338
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) noexcept(true)
# 340
 __attribute((__nonnull__(1))); 
# 344
extern int pthread_attr_getscope(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __scope) noexcept(true)
# 346
 __attribute((__nonnull__(1, 2))); 
# 349
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) noexcept(true)
# 350
 __attribute((__nonnull__(1))); 
# 353
extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr) noexcept(true)
# 355
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 361
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) noexcept(true)
# 363
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 366
extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ __attr, ::size_t *__restrict__ __stacksize) noexcept(true)
# 368
 __attribute((__nonnull__(1, 2))); 
# 373
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, ::size_t __stacksize) noexcept(true)
# 375
 __attribute((__nonnull__(1))); 
# 379
extern int pthread_attr_getstack(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr, ::size_t *__restrict__ __stacksize) noexcept(true)
# 382
 __attribute((__nonnull__(1, 2, 3))); 
# 387
extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, ::size_t __stacksize) noexcept(true)
# 388
 __attribute((__nonnull__(1))); 
# 394
extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, ::size_t __cpusetsize, const cpu_set_t * __cpuset) noexcept(true)
# 397
 __attribute((__nonnull__(1, 3))); 
# 401
extern int pthread_attr_getaffinity_np(const pthread_attr_t * __attr, ::size_t __cpusetsize, cpu_set_t * __cpuset) noexcept(true)
# 404
 __attribute((__nonnull__(1, 3))); 
# 407
extern int pthread_getattr_default_np(pthread_attr_t * __attr) noexcept(true)
# 408
 __attribute((__nonnull__(1))); 
# 411
extern int pthread_attr_setsigmask_np(pthread_attr_t * __attr, const __sigset_t * sigmask); 
# 417
extern int pthread_attr_getsigmask_np(const pthread_attr_t * __attr, __sigset_t * sigmask); 
# 426
extern int pthread_setattr_default_np(const pthread_attr_t * __attr) noexcept(true)
# 427
 __attribute((__nonnull__(1))); 
# 432
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) noexcept(true)
# 433
 __attribute((__nonnull__(2))); 
# 441
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const sched_param * __param) noexcept(true)
# 443
 __attribute((__nonnull__(3))); 
# 446
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict__ __policy, sched_param *__restrict__ __param) noexcept(true)
# 449
 __attribute((__nonnull__(2, 3))); 
# 452
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) noexcept(true); 
# 458
extern int pthread_getname_np(pthread_t __target_thread, char * __buf, ::size_t __buflen) noexcept(true)
# 460
 __attribute((__nonnull__(2))); 
# 463
extern int pthread_setname_np(pthread_t __target_thread, const char * __name) noexcept(true)
# 464
 __attribute((__nonnull__(2))); 
# 470
extern int pthread_getconcurrency() noexcept(true); 
# 473
extern int pthread_setconcurrency(int __level) noexcept(true); 
# 477
extern int pthread_yield() noexcept(true) __asm__("sched_yield"); 
# 479
extern int pthread_yield() noexcept(true) __asm__("sched_yield")
# 480
 __attribute((__deprecated__("pthread_yield is deprecated, use sched_yield instead"))); 
# 489
extern int pthread_setaffinity_np(pthread_t __th, ::size_t __cpusetsize, const cpu_set_t * __cpuset) noexcept(true)
# 491
 __attribute((__nonnull__(3))); 
# 494
extern int pthread_getaffinity_np(pthread_t __th, ::size_t __cpusetsize, cpu_set_t * __cpuset) noexcept(true)
# 496
 __attribute((__nonnull__(3))); 
# 509 "/usr/include/pthread.h" 3
extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void))
# 510
 __attribute((__nonnull__(1, 2))); 
# 521 "/usr/include/pthread.h" 3
extern int pthread_setcancelstate(int __state, int * __oldstate); 
# 525
extern int pthread_setcanceltype(int __type, int * __oldtype); 
# 528
extern int pthread_cancel(pthread_t __th); 
# 533
extern void pthread_testcancel(); 
# 538
struct __cancel_jmp_buf_tag { 
# 540
__jmp_buf __cancel_jmp_buf; 
# 541
int __mask_was_saved; 
# 542
}; 
# 548
typedef 
# 545
struct { 
# 546
__cancel_jmp_buf_tag __cancel_jmp_buf[1]; 
# 547
void *__pad[4]; 
# 548
} __pthread_unwind_buf_t __attribute((__aligned__)); 
# 557 "/usr/include/pthread.h" 3
struct __pthread_cleanup_frame { 
# 559
void (*__cancel_routine)(void *); 
# 560
void *__cancel_arg; 
# 561
int __do_it; 
# 562
int __cancel_type; 
# 563
}; 
# 568
class __pthread_cleanup_class { 
# 570
void (*__cancel_routine)(void *); 
# 571
void *__cancel_arg; 
# 572
int __do_it; 
# 573
int __cancel_type; 
# 576
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 577
{ } 
# 578
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 579
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 580
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 581
} 
# 582
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 583
}; 
# 766 "/usr/include/pthread.h" 3
extern int __sigsetjmp_cancel(__cancel_jmp_buf_tag  __env[1], int __savemask) noexcept(true) __asm__("__sigsetjmp")
# 769
 __attribute((__returns_twice__)); 
# 781 "/usr/include/pthread.h" 3
extern int pthread_mutex_init(pthread_mutex_t * __mutex, const pthread_mutexattr_t * __mutexattr) noexcept(true)
# 783
 __attribute((__nonnull__(1))); 
# 786
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) noexcept(true)
# 787
 __attribute((__nonnull__(1))); 
# 790
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) noexcept(true)
# 791
 __attribute((__nonnull__(1))); 
# 794
extern int pthread_mutex_lock(pthread_mutex_t * __mutex) noexcept(true)
# 795
 __attribute((__nonnull__(1))); 
# 800
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime) noexcept(true)
# 802
 __attribute((__nonnull__(1, 2))); 
# 817 "/usr/include/pthread.h" 3
extern int pthread_mutex_clocklock(pthread_mutex_t *__restrict__ __mutex, clockid_t __clockid, const timespec *__restrict__ __abstime) noexcept(true)
# 820
 __attribute((__nonnull__(1, 3))); 
# 835 "/usr/include/pthread.h" 3
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) noexcept(true)
# 836
 __attribute((__nonnull__(1))); 
# 840
extern int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ __mutex, int *__restrict__ __prioceiling) noexcept(true)
# 843
 __attribute((__nonnull__(1, 2))); 
# 847
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ __mutex, int __prioceiling, int *__restrict__ __old_ceiling) noexcept(true)
# 850
 __attribute((__nonnull__(1, 3))); 
# 855
extern int pthread_mutex_consistent(pthread_mutex_t * __mutex) noexcept(true)
# 856
 __attribute((__nonnull__(1))); 
# 859
extern int pthread_mutex_consistent_np(pthread_mutex_t *) noexcept(true) __asm__("pthread_mutex_consistent")
# 860
 __attribute((__nonnull__(1)))
# 861
 __attribute((__deprecated__("pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent"))); 
# 874 "/usr/include/pthread.h" 3
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) noexcept(true)
# 875
 __attribute((__nonnull__(1))); 
# 878
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) noexcept(true)
# 879
 __attribute((__nonnull__(1))); 
# 882
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __pshared) noexcept(true)
# 885
 __attribute((__nonnull__(1, 2))); 
# 888
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) noexcept(true)
# 890
 __attribute((__nonnull__(1))); 
# 894
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __kind) noexcept(true)
# 896
 __attribute((__nonnull__(1, 2))); 
# 901
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) noexcept(true)
# 902
 __attribute((__nonnull__(1))); 
# 906
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __protocol) noexcept(true)
# 909
 __attribute((__nonnull__(1, 2))); 
# 913
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) noexcept(true)
# 915
 __attribute((__nonnull__(1))); 
# 918
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __prioceiling) noexcept(true)
# 921
 __attribute((__nonnull__(1, 2))); 
# 924
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) noexcept(true)
# 926
 __attribute((__nonnull__(1))); 
# 930
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * __attr, int * __robustness) noexcept(true)
# 932
 __attribute((__nonnull__(1, 2))); 
# 935
extern int pthread_mutexattr_getrobust_np(pthread_mutexattr_t *, int *) noexcept(true) __asm__("pthread_mutexattr_getrobust")
# 937
 __attribute((__nonnull__(1)))
# 938
 __attribute((__deprecated__("pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust"))); 
# 946
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * __attr, int __robustness) noexcept(true)
# 948
 __attribute((__nonnull__(1))); 
# 951
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t *, int) noexcept(true) __asm__("pthread_mutexattr_setrobust")
# 953
 __attribute((__nonnull__(1)))
# 954
 __attribute((__deprecated__("pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust"))); 
# 967 "/usr/include/pthread.h" 3
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict__ __rwlock, const pthread_rwlockattr_t *__restrict__ __attr) noexcept(true)
# 969
 __attribute((__nonnull__(1))); 
# 972
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) noexcept(true)
# 973
 __attribute((__nonnull__(1))); 
# 976
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 977
 __attribute((__nonnull__(1))); 
# 980
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 981
 __attribute((__nonnull__(1))); 
# 986
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) noexcept(true)
# 988
 __attribute((__nonnull__(1, 2))); 
# 1004 "/usr/include/pthread.h" 3
extern int pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) noexcept(true)
# 1007
 __attribute((__nonnull__(1, 3))); 
# 1023 "/usr/include/pthread.h" 3
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 1024
 __attribute((__nonnull__(1))); 
# 1027
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 1028
 __attribute((__nonnull__(1))); 
# 1033
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) noexcept(true)
# 1035
 __attribute((__nonnull__(1, 2))); 
# 1051 "/usr/include/pthread.h" 3
extern int pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) noexcept(true)
# 1054
 __attribute((__nonnull__(1, 3))); 
# 1071 "/usr/include/pthread.h" 3
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 1072
 __attribute((__nonnull__(1))); 
# 1078
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) noexcept(true)
# 1079
 __attribute((__nonnull__(1))); 
# 1082
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) noexcept(true)
# 1083
 __attribute((__nonnull__(1))); 
# 1086
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pshared) noexcept(true)
# 1089
 __attribute((__nonnull__(1, 2))); 
# 1092
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) noexcept(true)
# 1094
 __attribute((__nonnull__(1))); 
# 1097
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pref) noexcept(true)
# 1100
 __attribute((__nonnull__(1, 2))); 
# 1103
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) noexcept(true)
# 1104
 __attribute((__nonnull__(1))); 
# 1112
extern int pthread_cond_init(pthread_cond_t *__restrict__ __cond, const pthread_condattr_t *__restrict__ __cond_attr) noexcept(true)
# 1114
 __attribute((__nonnull__(1))); 
# 1117
extern int pthread_cond_destroy(pthread_cond_t * __cond) noexcept(true)
# 1118
 __attribute((__nonnull__(1))); 
# 1121
extern int pthread_cond_signal(pthread_cond_t * __cond) noexcept(true)
# 1122
 __attribute((__nonnull__(1))); 
# 1125
extern int pthread_cond_broadcast(pthread_cond_t * __cond) noexcept(true)
# 1126
 __attribute((__nonnull__(1))); 
# 1133
extern int pthread_cond_wait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex)
# 1135
 __attribute((__nonnull__(1, 2))); 
# 1145 "/usr/include/pthread.h" 3
extern int pthread_cond_timedwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime)
# 1148
 __attribute((__nonnull__(1, 2, 3))); 
# 1171 "/usr/include/pthread.h" 3
extern int pthread_cond_clockwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, __clockid_t __clock_id, const timespec *__restrict__ __abstime)
# 1175
 __attribute((__nonnull__(1, 2, 4))); 
# 1194 "/usr/include/pthread.h" 3
extern int pthread_condattr_init(pthread_condattr_t * __attr) noexcept(true)
# 1195
 __attribute((__nonnull__(1))); 
# 1198
extern int pthread_condattr_destroy(pthread_condattr_t * __attr) noexcept(true)
# 1199
 __attribute((__nonnull__(1))); 
# 1202
extern int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ __attr, int *__restrict__ __pshared) noexcept(true)
# 1205
 __attribute((__nonnull__(1, 2))); 
# 1208
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) noexcept(true)
# 1209
 __attribute((__nonnull__(1))); 
# 1213
extern int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ __attr, __clockid_t *__restrict__ __clock_id) noexcept(true)
# 1216
 __attribute((__nonnull__(1, 2))); 
# 1219
extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) noexcept(true)
# 1221
 __attribute((__nonnull__(1))); 
# 1230 "/usr/include/pthread.h" 3
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) noexcept(true)
# 1231
 __attribute((__nonnull__(1))); 
# 1234
extern int pthread_spin_destroy(pthread_spinlock_t * __lock) noexcept(true)
# 1235
 __attribute((__nonnull__(1))); 
# 1238
extern int pthread_spin_lock(pthread_spinlock_t * __lock) noexcept(true)
# 1239
 __attribute((__nonnull__(1))); 
# 1242
extern int pthread_spin_trylock(pthread_spinlock_t * __lock) noexcept(true)
# 1243
 __attribute((__nonnull__(1))); 
# 1246
extern int pthread_spin_unlock(pthread_spinlock_t * __lock) noexcept(true)
# 1247
 __attribute((__nonnull__(1))); 
# 1254
extern int pthread_barrier_init(pthread_barrier_t *__restrict__ __barrier, const pthread_barrierattr_t *__restrict__ __attr, unsigned __count) noexcept(true)
# 1257
 __attribute((__nonnull__(1))); 
# 1260
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) noexcept(true)
# 1261
 __attribute((__nonnull__(1))); 
# 1264
extern int pthread_barrier_wait(pthread_barrier_t * __barrier) noexcept(true)
# 1265
 __attribute((__nonnull__(1))); 
# 1269
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) noexcept(true)
# 1270
 __attribute((__nonnull__(1))); 
# 1273
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) noexcept(true)
# 1274
 __attribute((__nonnull__(1))); 
# 1277
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ __attr, int *__restrict__ __pshared) noexcept(true)
# 1280
 __attribute((__nonnull__(1, 2))); 
# 1283
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) noexcept(true)
# 1285
 __attribute((__nonnull__(1))); 
# 1297 "/usr/include/pthread.h" 3
extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) noexcept(true)
# 1299
 __attribute((__nonnull__(1))); 
# 1302
extern int pthread_key_delete(pthread_key_t __key) noexcept(true); 
# 1305
extern void *pthread_getspecific(pthread_key_t __key) noexcept(true); 
# 1308
extern int pthread_setspecific(pthread_key_t __key, const void * __pointer) noexcept(true)
# 1310
 __attribute((__access__(__none__ , 2 ))); 
# 1315
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) noexcept(true)
# 1317
 __attribute((__nonnull__(2))); 
# 1332 "/usr/include/pthread.h" 3
extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) noexcept(true); 
# 1346 "/usr/include/pthread.h" 3
}
# 47 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 48
typedef pthread_key_t __gthread_key_t; 
# 49
typedef pthread_once_t __gthread_once_t; 
# 50
typedef pthread_mutex_t __gthread_mutex_t; 
# 51
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 52
typedef pthread_cond_t __gthread_cond_t; 
# 53
typedef timespec __gthread_time_t; 
# 300 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 301
{ 
# 302
return 1; 
# 303
} 
# 660 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 661
__args) 
# 662
{ 
# 663
return pthread_create(__threadid, __null, __func, __args); 
# 664
} 
# 667
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 668
{ 
# 669
return pthread_join(__threadid, __value_ptr); 
# 670
} 
# 673
static inline int __gthread_detach(__gthread_t __threadid) 
# 674
{ 
# 675
return pthread_detach(__threadid); 
# 676
} 
# 679
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 680
{ 
# 681
return pthread_equal(__t1, __t2); 
# 682
} 
# 685
static inline __gthread_t __gthread_self() 
# 686
{ 
# 687
return pthread_self(); 
# 688
} 
# 691
static inline int __gthread_yield() 
# 692
{ 
# 693
return sched_yield(); 
# 694
} 
# 697
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 698
{ 
# 699
if (__gthread_active_p()) { 
# 700
return pthread_once(__once, __func); } else { 
# 702
return -1; }  
# 703
} 
# 706
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 707
{ 
# 708
return pthread_key_create(__key, __dtor); 
# 709
} 
# 712
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 713
{ 
# 714
return pthread_key_delete(__key); 
# 715
} 
# 718
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 719
{ 
# 720
return pthread_getspecific(__key); 
# 721
} 
# 724
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 725
{ 
# 726
return pthread_setspecific(__key, __ptr); 
# 727
} 
# 730
static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex) 
# 731
{ 
# 732
if (__gthread_active_p()) { 
# 733
pthread_mutex_init(__mutex, __null); }  
# 734
} 
# 737
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 738
{ 
# 739
if (__gthread_active_p()) { 
# 740
return pthread_mutex_destroy(__mutex); } else { 
# 742
return 0; }  
# 743
} 
# 746
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 747
{ 
# 748
if (__gthread_active_p()) { 
# 749
return pthread_mutex_lock(__mutex); } else { 
# 751
return 0; }  
# 752
} 
# 755
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 756
{ 
# 757
if (__gthread_active_p()) { 
# 758
return pthread_mutex_trylock(__mutex); } else { 
# 760
return 0; }  
# 761
} 
# 765
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 766
__abs_timeout) 
# 767
{ 
# 768
if (__gthread_active_p()) { 
# 769
return pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 771
return 0; }  
# 772
} 
# 776
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 777
{ 
# 778
if (__gthread_active_p()) { 
# 779
return pthread_mutex_unlock(__mutex); } else { 
# 781
return 0; }  
# 782
} 
# 809 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 810
{ 
# 811
return __gthread_mutex_lock(__mutex); 
# 812
} 
# 815
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 816
{ 
# 817
return __gthread_mutex_trylock(__mutex); 
# 818
} 
# 822
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 823
__abs_timeout) 
# 824
{ 
# 825
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 826
} 
# 830
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 831
{ 
# 832
return __gthread_mutex_unlock(__mutex); 
# 833
} 
# 836
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex) 
# 837
{ 
# 838
return __gthread_mutex_destroy(__mutex); 
# 839
} 
# 851 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 852
{ 
# 853
return pthread_cond_broadcast(__cond); 
# 854
} 
# 857
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 858
{ 
# 859
return pthread_cond_signal(__cond); 
# 860
} 
# 863
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 864
{ 
# 865
return pthread_cond_wait(__cond, __mutex); 
# 866
} 
# 869
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 870
__abs_timeout) 
# 871
{ 
# 872
return pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 873
} 
# 876
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 877
__mutex) 
# 878
{ 
# 879
return __gthread_cond_wait(__cond, __mutex); 
# 880
} 
# 883
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 884
{ 
# 885
return pthread_cond_destroy(__cond); 
# 886
} 
# 151 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility pop
# 32 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 24 "/usr/include/sys/single_threaded.h" 3
extern "C" {
# 29
extern char __libc_single_threaded; 
# 31
}
# 41 "/usr/include/c++/12.2.1/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 45
__attribute((__always_inline__)) inline bool 
# 47
__is_single_threaded() noexcept 
# 48
{ 
# 52
return ::__libc_single_threaded; 
# 56
} 
# 64
__attribute((__always_inline__)) inline _Atomic_word 
# 65
__exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 66
{ return __atomic_fetch_add(__mem, __val, 4); } 
# 69
__attribute((__always_inline__)) inline void 
# 70
__atomic_add(volatile _Atomic_word *__mem, int __val) 
# 71
{ __atomic_fetch_add(__mem, __val, 4); } 
# 81 "/usr/include/c++/12.2.1/ext/atomicity.h" 3
__attribute((__always_inline__)) inline _Atomic_word 
# 82
__exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 83
{ 
# 84
_Atomic_word __result = *__mem; 
# 85
(*__mem) += __val; 
# 86
return __result; 
# 87
} 
# 90
__attribute((__always_inline__)) inline void 
# 91
__atomic_add_single(_Atomic_word *__mem, int __val) 
# 92
{ (*__mem) += __val; } 
# 95
__attribute((__always_inline__)) inline _Atomic_word 
# 96
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 97
{ 
# 98
if (__is_single_threaded()) { 
# 99
return __exchange_and_add_single(__mem, __val); } else { 
# 101
return __exchange_and_add(__mem, __val); }  
# 102
} 
# 105
__attribute((__always_inline__)) inline void 
# 106
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 107
{ 
# 108
if (__is_single_threaded()) { 
# 109
__atomic_add_single(__mem, __val); } else { 
# 111
__atomic_add(__mem, __val); }  
# 112
} 
# 115
}
# 41 "/usr/include/c++/12.2.1/bits/new_allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/12.2.1/bits/new_allocator.h" 3
template< class _Tp> 
# 56
class __new_allocator { 
# 59
public: typedef _Tp value_type; 
# 60
typedef size_t size_type; 
# 61
typedef ptrdiff_t difference_type; 
# 63
typedef _Tp *pointer; 
# 64
typedef const _Tp *const_pointer; 
# 65
typedef _Tp &reference; 
# 66
typedef const _Tp &const_reference; 
# 68
template< class _Tp1> 
# 69
struct rebind { 
# 70
typedef __new_allocator< _Tp1>  other; }; 
# 76
typedef true_type propagate_on_container_move_assignment; 
# 80
__new_allocator() noexcept { } 
# 83
__new_allocator(const __new_allocator &) noexcept { } 
# 85
template< class _Tp1> 
# 87
__new_allocator(const __new_allocator< _Tp1>  &) noexcept { } 
# 90
~__new_allocator() noexcept { } 
# 93
pointer address(reference __x) const noexcept 
# 94
{ return std::__addressof(__x); } 
# 97
const_pointer address(const_reference __x) const noexcept 
# 98
{ return std::__addressof(__x); } 
# 111 "/usr/include/c++/12.2.1/bits/new_allocator.h" 3
[[__nodiscard__]] _Tp *
# 112
allocate(size_type __n, const void * = 0) 
# 113
{ 
# 117
static_assert((sizeof(_Tp) != (0)), "cannot allocate incomplete types");
# 120
if (__builtin_expect(__n > _M_max_size(), false)) 
# 121
{ 
# 124
if (__n > (((size_t)(-1)) / sizeof(_Tp))) { 
# 125
std::__throw_bad_array_new_length(); }  
# 126
std::__throw_bad_alloc(); 
# 127
}  
# 130
if (__alignof__(_Tp) > (16)) 
# 131
{ 
# 132
align_val_t __al = ((align_val_t)__alignof__(_Tp)); 
# 133
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp), __al)); 
# 135
}  
# 137
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 138
} 
# 142
void deallocate(_Tp *__p, size_type __n __attribute((__unused__))) 
# 143
{ 
# 151
if (__alignof__(_Tp) > (16)) 
# 152
{ 
# 153
::operator delete(__p, __n * sizeof(_Tp), (align_val_t)__alignof__(_Tp)); 
# 155
return; 
# 156
}  
# 158
::operator delete(__p, __n * sizeof(_Tp)); 
# 159
} 
# 167
size_type max_size() const noexcept 
# 168
{ return _M_max_size(); } 
# 171
template< class _Up, class ..._Args> void 
# 173
construct(_Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 175
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 177
template< class _Up> void 
# 179
destroy(_Up *__p) noexcept(std::template is_nothrow_destructible< _Up> ::value) 
# 181
{ __p->~_Up(); } 
# 194 "/usr/include/c++/12.2.1/bits/new_allocator.h" 3
template< class _Up> friend inline bool 
# 196
operator==(const __new_allocator< _Tp>  &, const std::__new_allocator< _Up>  &) noexcept 
# 198
{ return true; } 
# 201
template< class _Up> friend inline bool 
# 203
operator!=(const __new_allocator< _Tp>  &, const std::__new_allocator< _Up>  &) noexcept 
# 205
{ return false; } 
# 210
private: constexpr size_type _M_max_size() const noexcept 
# 211
{ 
# 213
return ((size_t)9223372036854775807L) / sizeof(_Tp); 
# 217
} 
# 218
}; 
# 221
}
# 36 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h" 3
namespace std { 
# 46 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h" 3
template< class _Tp> using __allocator_base = __new_allocator< _Tp> ; 
# 48
}
# 54 "/usr/include/c++/12.2.1/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72 "/usr/include/c++/12.2.1/bits/allocator.h" 3
template<> class allocator< void>  { 
# 75
public: typedef void value_type; 
# 76
typedef size_t size_type; 
# 77
typedef ptrdiff_t difference_type; 
# 81
typedef void *pointer; 
# 82
typedef const void *const_pointer; 
# 84
template< class _Tp1> 
# 85
struct rebind { 
# 86
typedef std::allocator< _Tp1>  other; }; 
# 92
using propagate_on_container_move_assignment = true_type; 
# 94
using is_always_equal = true_type; 
# 113 "/usr/include/c++/12.2.1/bits/allocator.h" 3
}; 
# 123 "/usr/include/c++/12.2.1/bits/allocator.h" 3
template< class _Tp> 
# 124
class allocator : public __allocator_base< _Tp>  { 
# 127
public: typedef _Tp value_type; 
# 128
typedef std::size_t size_type; 
# 129
typedef std::ptrdiff_t difference_type; 
# 133
typedef _Tp *pointer; 
# 134
typedef const _Tp *const_pointer; 
# 135
typedef _Tp &reference; 
# 136
typedef const _Tp &const_reference; 
# 138
template< class _Tp1> 
# 139
struct rebind { 
# 140
typedef allocator< _Tp1>  other; }; 
# 146
using propagate_on_container_move_assignment = std::true_type; 
# 148
using is_always_equal = std::true_type; 
# 156
allocator() noexcept { } 
# 159
allocator(const allocator &__a) noexcept : std::__allocator_base< _Tp> (__a) 
# 160
{ } 
# 164
allocator &operator=(const allocator &) = default;
# 167
template< class _Tp1> 
# 169
allocator(const allocator< _Tp1>  &) noexcept { } 
# 174
~allocator() noexcept { } 
# 205 "/usr/include/c++/12.2.1/bits/allocator.h" 3
friend inline bool operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 206
{ return true; } 
# 210
friend inline bool operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 211
{ return false; } 
# 215
}; 
# 217
template< class _T1, class _T2> inline bool 
# 219
operator==(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 221
{ return true; } 
# 224
template< class _T1, class _T2> inline bool 
# 226
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 228
{ return false; } 
# 233
template< class _Tp> 
# 234
class allocator< const _Tp>  { 
# 237
public: typedef _Tp value_type; 
# 238
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 239
}; 
# 241
template< class _Tp> 
# 242
class allocator< volatile _Tp>  { 
# 245
public: typedef _Tp value_type; 
# 246
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 247
}; 
# 249
template< class _Tp> 
# 250
class allocator< const volatile _Tp>  { 
# 253
public: typedef _Tp value_type; 
# 254
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 255
}; 
# 262
extern template class allocator< char> ;
# 263
extern template class allocator< wchar_t> ;
# 270
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 271
struct __alloc_swap { 
# 272
static void _S_do_it(_Alloc &, _Alloc &) noexcept { } }; 
# 274
template< class _Alloc> 
# 275
struct __alloc_swap< _Alloc, false>  { 
# 278
static void _S_do_it(_Alloc &__one, _Alloc &__two) noexcept 
# 279
{ 
# 281
if (__one != __two) { 
# 282
swap(__one, __two); }  
# 283
} 
# 284
}; 
# 287
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 288
struct __alloc_neq { 
# 291
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 292
{ return false; } 
# 293
}; 
# 295
template< class _Alloc> 
# 296
struct __alloc_neq< _Alloc, false>  { 
# 299
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 300
{ return __one != __two; } 
# 301
}; 
# 304
template< class _Tp, bool 
# 305
 = __or_< is_copy_constructible< typename _Tp::value_type> , is_nothrow_move_constructible< typename _Tp::value_type> > ::value> 
# 307
struct __shrink_to_fit_aux { 
# 308
static bool _S_do_it(_Tp &) noexcept { return false; } }; 
# 310
template< class _Tp> 
# 311
struct __shrink_to_fit_aux< _Tp, true>  { 
# 315
static bool _S_do_it(_Tp &__c) noexcept 
# 316
{ 
# 318
try 
# 319
{ 
# 320
_Tp(__make_move_if_noexcept_iterator(__c.begin()), __make_move_if_noexcept_iterator(__c.end()), __c.get_allocator()).swap(__c); 
# 323
return true; 
# 324
} 
# 325
catch (...) 
# 326
{ return false; }  
# 330
} 
# 331
}; 
# 335
}
# 36 "/usr/include/c++/12.2.1/bits/cxxabi_forced.h" 3
#pragma GCC visibility push ( default )
# 39
namespace __cxxabiv1 { 
# 48
class __forced_unwind { 
# 50
virtual ~__forced_unwind() throw(); 
# 53
virtual void __pure_dummy() = 0; 
# 54
}; 
# 55
}
# 58
#pragma GCC visibility pop
# 39 "/usr/include/c++/12.2.1/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> inline void 
# 45
__ostream_write(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 46
__s, streamsize __n) 
# 47
{ 
# 48
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 49
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 51
const streamsize __put = __out.rdbuf()->sputn(__s, __n); 
# 52
if (__put != __n) { 
# 53
__out.setstate(__ios_base::badbit); }  
# 54
} 
# 56
template< class _CharT, class _Traits> inline void 
# 58
__ostream_fill(basic_ostream< _CharT, _Traits>  &__out, streamsize __n) 
# 59
{ 
# 60
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 61
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 63
const _CharT __c = __out.fill(); 
# 64
for (; __n > (0); --__n) 
# 65
{ 
# 66
const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c); 
# 67
if (_Traits::eq_int_type(__put, _Traits::eof())) 
# 68
{ 
# 69
__out.setstate(__ios_base::badbit); 
# 70
break; 
# 71
}  
# 72
}  
# 73
} 
# 75
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 77
__ostream_insert(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 78
__s, streamsize __n) 
# 79
{ 
# 80
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 81
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 83
typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out); 
# 84
if (__cerb) 
# 85
{ 
# 86
try 
# 87
{ 
# 88
const streamsize __w = __out.width(); 
# 89
if (__w > __n) 
# 90
{ 
# 91
const bool __left = (__out.flags() & __ios_base::adjustfield) == __ios_base::left; 
# 94
if (!__left) { 
# 95
__ostream_fill(__out, __w - __n); }  
# 96
if (__out.good()) { 
# 97
__ostream_write(__out, __s, __n); }  
# 98
if (__left && __out.good()) { 
# 99
__ostream_fill(__out, __w - __n); }  
# 100
} else { 
# 102
__ostream_write(__out, __s, __n); }  
# 103
__out.width(0); 
# 104
} 
# 105
catch (__cxxabiv1::__forced_unwind &) 
# 106
{ 
# 107
__out._M_setstate(__ios_base::badbit); 
# 108
throw; 
# 109
} 
# 110
catch (...) 
# 111
{ __out._M_setstate(__ios_base::badbit); }  
# 112
}  
# 113
return __out; 
# 114
} 
# 119
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & __out, const char * __s, streamsize __n);
# 122
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & __out, const wchar_t * __s, streamsize __n);
# 128
}
# 63 "/usr/include/c++/12.2.1/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 116 "/usr/include/c++/12.2.1/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 117
struct unary_function { 
# 120
typedef _Arg argument_type; 
# 123
typedef _Result result_type; 
# 124
} __attribute((__deprecated__)); 
# 130
template< class _Arg1, class _Arg2, class _Result> 
# 131
struct binary_function { 
# 134
typedef _Arg1 first_argument_type; 
# 137
typedef _Arg2 second_argument_type; 
# 140
typedef _Result result_type; 
# 141
} __attribute((__deprecated__)); 
# 157 "/usr/include/c++/12.2.1/bits/stl_function.h" 3
struct __is_transparent; 
# 159
template< class _Tp = void> struct plus; 
# 162
template< class _Tp = void> struct minus; 
# 165
template< class _Tp = void> struct multiplies; 
# 168
template< class _Tp = void> struct divides; 
# 171
template< class _Tp = void> struct modulus; 
# 174
template< class _Tp = void> struct negate; 
# 179
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 183
template< class _Tp> 
# 184
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 189
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 190
{ return __x + __y; } 
# 191
}; 
# 194
template< class _Tp> 
# 195
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 199
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 200
{ return __x - __y; } 
# 201
}; 
# 204
template< class _Tp> 
# 205
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 209
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 210
{ return __x * __y; } 
# 211
}; 
# 214
template< class _Tp> 
# 215
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 219
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 220
{ return __x / __y; } 
# 221
}; 
# 224
template< class _Tp> 
# 225
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 229
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 230
{ return __x % __y; } 
# 231
}; 
# 234
template< class _Tp> 
# 235
struct negate : public unary_function< _Tp, _Tp>  { 
# 239
constexpr _Tp operator()(const _Tp &__x) const 
# 240
{ return -__x; } 
# 241
}; 
#pragma GCC diagnostic pop
# 249
template<> struct plus< void>  { 
# 251
template< class _Tp, class _Up> constexpr auto 
# 254
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) + std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) + std::forward< _Up> (__u))) 
# 257
{ return std::forward< _Tp> (__t) + std::forward< _Up> (__u); } 
# 259
typedef __is_transparent is_transparent; 
# 260
}; 
# 264
template<> struct minus< void>  { 
# 266
template< class _Tp, class _Up> constexpr auto 
# 269
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) - std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) - std::forward< _Up> (__u))) 
# 272
{ return std::forward< _Tp> (__t) - std::forward< _Up> (__u); } 
# 274
typedef __is_transparent is_transparent; 
# 275
}; 
# 279
template<> struct multiplies< void>  { 
# 281
template< class _Tp, class _Up> constexpr auto 
# 284
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) * std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) * std::forward< _Up> (__u))) 
# 287
{ return std::forward< _Tp> (__t) * std::forward< _Up> (__u); } 
# 289
typedef __is_transparent is_transparent; 
# 290
}; 
# 294
template<> struct divides< void>  { 
# 296
template< class _Tp, class _Up> constexpr auto 
# 299
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) / std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) / std::forward< _Up> (__u))) 
# 302
{ return std::forward< _Tp> (__t) / std::forward< _Up> (__u); } 
# 304
typedef __is_transparent is_transparent; 
# 305
}; 
# 309
template<> struct modulus< void>  { 
# 311
template< class _Tp, class _Up> constexpr auto 
# 314
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) % std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) % std::forward< _Up> (__u))) 
# 317
{ return std::forward< _Tp> (__t) % std::forward< _Up> (__u); } 
# 319
typedef __is_transparent is_transparent; 
# 320
}; 
# 324
template<> struct negate< void>  { 
# 326
template< class _Tp> constexpr auto 
# 329
operator()(_Tp &&__t) const noexcept(noexcept((-std::forward< _Tp> (__t))))->__decltype((-std::forward< _Tp> (__t))) 
# 332
{ return -std::forward< _Tp> (__t); } 
# 334
typedef __is_transparent is_transparent; 
# 335
}; 
# 349 "/usr/include/c++/12.2.1/bits/stl_function.h" 3
template< class _Tp = void> struct equal_to; 
# 352
template< class _Tp = void> struct not_equal_to; 
# 355
template< class _Tp = void> struct greater; 
# 358
template< class _Tp = void> struct less; 
# 361
template< class _Tp = void> struct greater_equal; 
# 364
template< class _Tp = void> struct less_equal; 
# 368
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 372
template< class _Tp> 
# 373
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 377
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 378
{ return __x == __y; } 
# 379
}; 
# 382
template< class _Tp> 
# 383
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 387
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 388
{ return __x != __y; } 
# 389
}; 
# 392
template< class _Tp> 
# 393
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 397
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 398
{ return __x > __y; } 
# 399
}; 
# 402
template< class _Tp> 
# 403
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 407
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 408
{ return __x < __y; } 
# 409
}; 
# 412
template< class _Tp> 
# 413
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 417
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 418
{ return __x >= __y; } 
# 419
}; 
# 422
template< class _Tp> 
# 423
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 427
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 428
{ return __x <= __y; } 
# 429
}; 
# 432
template< class _Tp> 
# 433
struct greater< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 436
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 437
{ 
# 439
if (std::__is_constant_evaluated()) { 
# 440
return __x > __y; }  
# 442
return ((unsigned long)__x) > ((unsigned long)__y); 
# 443
} 
# 444
}; 
# 447
template< class _Tp> 
# 448
struct less< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 451
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 452
{ 
# 454
if (std::__is_constant_evaluated()) { 
# 455
return __x < __y; }  
# 457
return ((unsigned long)__x) < ((unsigned long)__y); 
# 458
} 
# 459
}; 
# 462
template< class _Tp> 
# 463
struct greater_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 466
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 467
{ 
# 469
if (std::__is_constant_evaluated()) { 
# 470
return __x >= __y; }  
# 472
return ((unsigned long)__x) >= ((unsigned long)__y); 
# 473
} 
# 474
}; 
# 477
template< class _Tp> 
# 478
struct less_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 481
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 482
{ 
# 484
if (std::__is_constant_evaluated()) { 
# 485
return __x <= __y; }  
# 487
return ((unsigned long)__x) <= ((unsigned long)__y); 
# 488
} 
# 489
}; 
#pragma GCC diagnostic pop
# 495
template<> struct equal_to< void>  { 
# 497
template< class _Tp, class _Up> constexpr auto 
# 499
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) == std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) == std::forward< _Up> (__u))) 
# 502
{ return std::forward< _Tp> (__t) == std::forward< _Up> (__u); } 
# 504
typedef __is_transparent is_transparent; 
# 505
}; 
# 509
template<> struct not_equal_to< void>  { 
# 511
template< class _Tp, class _Up> constexpr auto 
# 513
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) != std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) != std::forward< _Up> (__u))) 
# 516
{ return std::forward< _Tp> (__t) != std::forward< _Up> (__u); } 
# 518
typedef __is_transparent is_transparent; 
# 519
}; 
# 523
template<> struct greater< void>  { 
# 525
template< class _Tp, class _Up> constexpr auto 
# 527
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) > std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) > std::forward< _Up> (__u))) 
# 530
{ 
# 531
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 533
} 
# 535
template< class _Tp, class _Up> constexpr bool 
# 537
operator()(_Tp *__t, _Up *__u) const noexcept 
# 538
{ return std::greater< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 540
typedef __is_transparent is_transparent; 
# 545
private: 
# 543
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 545
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 546
{ return std::forward< _Tp> (__t) > std::forward< _Up> (__u); } 
# 548
template< class _Tp, class _Up> static constexpr bool 
# 550
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 551
{ 
# 552
return std::greater< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 555
} 
# 558
template< class _Tp, class _Up, class  = void> 
# 559
struct __not_overloaded2 : public true_type { }; 
# 562
template< class _Tp, class _Up> 
# 563
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>(std::declval< _Up> ())))> >  : public false_type { 
# 565
}; 
# 568
template< class _Tp, class _Up, class  = void> 
# 569
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 572
template< class _Tp, class _Up> 
# 573
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 575
}; 
# 577
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 581
}; 
# 585
template<> struct less< void>  { 
# 587
template< class _Tp, class _Up> constexpr auto 
# 589
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) < std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) < std::forward< _Up> (__u))) 
# 592
{ 
# 593
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 595
} 
# 597
template< class _Tp, class _Up> constexpr bool 
# 599
operator()(_Tp *__t, _Up *__u) const noexcept 
# 600
{ return std::less< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 602
typedef __is_transparent is_transparent; 
# 607
private: 
# 605
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 607
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 608
{ return std::forward< _Tp> (__t) < std::forward< _Up> (__u); } 
# 610
template< class _Tp, class _Up> static constexpr bool 
# 612
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 613
{ 
# 614
return std::less< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 617
} 
# 620
template< class _Tp, class _Up, class  = void> 
# 621
struct __not_overloaded2 : public true_type { }; 
# 624
template< class _Tp, class _Up> 
# 625
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator< (std::declval< _Up> ())))> >  : public false_type { 
# 627
}; 
# 630
template< class _Tp, class _Up, class  = void> 
# 631
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 634
template< class _Tp, class _Up> 
# 635
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator< (std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 637
}; 
# 639
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 643
}; 
# 647
template<> struct greater_equal< void>  { 
# 649
template< class _Tp, class _Up> constexpr auto 
# 651
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))) 
# 654
{ 
# 655
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 657
} 
# 659
template< class _Tp, class _Up> constexpr bool 
# 661
operator()(_Tp *__t, _Up *__u) const noexcept 
# 662
{ return std::greater_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 664
typedef __is_transparent is_transparent; 
# 669
private: 
# 667
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 669
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 670
{ return std::forward< _Tp> (__t) >= std::forward< _Up> (__u); } 
# 672
template< class _Tp, class _Up> static constexpr bool 
# 674
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 675
{ 
# 676
return std::greater_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 679
} 
# 682
template< class _Tp, class _Up, class  = void> 
# 683
struct __not_overloaded2 : public true_type { }; 
# 686
template< class _Tp, class _Up> 
# 687
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>=(std::declval< _Up> ())))> >  : public false_type { 
# 689
}; 
# 692
template< class _Tp, class _Up, class  = void> 
# 693
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 696
template< class _Tp, class _Up> 
# 697
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 699
}; 
# 701
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 705
}; 
# 709
template<> struct less_equal< void>  { 
# 711
template< class _Tp, class _Up> constexpr auto 
# 713
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))) 
# 716
{ 
# 717
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 719
} 
# 721
template< class _Tp, class _Up> constexpr bool 
# 723
operator()(_Tp *__t, _Up *__u) const noexcept 
# 724
{ return std::less_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 726
typedef __is_transparent is_transparent; 
# 731
private: 
# 729
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 731
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 732
{ return std::forward< _Tp> (__t) <= std::forward< _Up> (__u); } 
# 734
template< class _Tp, class _Up> static constexpr bool 
# 736
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 737
{ 
# 738
return std::less_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 741
} 
# 744
template< class _Tp, class _Up, class  = void> 
# 745
struct __not_overloaded2 : public true_type { }; 
# 748
template< class _Tp, class _Up> 
# 749
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator<=(std::declval< _Up> ())))> >  : public false_type { 
# 751
}; 
# 754
template< class _Tp, class _Up, class  = void> 
# 755
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 758
template< class _Tp, class _Up> 
# 759
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator<=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 761
}; 
# 763
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 767
}; 
# 781 "/usr/include/c++/12.2.1/bits/stl_function.h" 3
template< class _Tp = void> struct logical_and; 
# 784
template< class _Tp = void> struct logical_or; 
# 787
template< class _Tp = void> struct logical_not; 
# 791
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 795
template< class _Tp> 
# 796
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 800
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 801
{ return __x && __y; } 
# 802
}; 
# 805
template< class _Tp> 
# 806
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 810
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 811
{ return __x || __y; } 
# 812
}; 
# 815
template< class _Tp> 
# 816
struct logical_not : public unary_function< _Tp, bool>  { 
# 820
constexpr bool operator()(const _Tp &__x) const 
# 821
{ return !__x; } 
# 822
}; 
#pragma GCC diagnostic pop
# 828
template<> struct logical_and< void>  { 
# 830
template< class _Tp, class _Up> constexpr auto 
# 833
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) && std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) && std::forward< _Up> (__u))) 
# 836
{ return std::forward< _Tp> (__t) && std::forward< _Up> (__u); } 
# 838
typedef __is_transparent is_transparent; 
# 839
}; 
# 843
template<> struct logical_or< void>  { 
# 845
template< class _Tp, class _Up> constexpr auto 
# 848
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) || std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) || std::forward< _Up> (__u))) 
# 851
{ return std::forward< _Tp> (__t) || std::forward< _Up> (__u); } 
# 853
typedef __is_transparent is_transparent; 
# 854
}; 
# 858
template<> struct logical_not< void>  { 
# 860
template< class _Tp> constexpr auto 
# 863
operator()(_Tp &&__t) const noexcept(noexcept((!std::forward< _Tp> (__t))))->__decltype((!std::forward< _Tp> (__t))) 
# 866
{ return !std::forward< _Tp> (__t); } 
# 868
typedef __is_transparent is_transparent; 
# 869
}; 
# 874
template< class _Tp = void> struct bit_and; 
# 877
template< class _Tp = void> struct bit_or; 
# 880
template< class _Tp = void> struct bit_xor; 
# 883
template< class _Tp = void> struct bit_not; 
# 887
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 892
template< class _Tp> 
# 893
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 897
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 898
{ return __x & __y; } 
# 899
}; 
# 901
template< class _Tp> 
# 902
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 906
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 907
{ return __x | __y; } 
# 908
}; 
# 910
template< class _Tp> 
# 911
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 915
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 916
{ return __x ^ __y; } 
# 917
}; 
# 919
template< class _Tp> 
# 920
struct bit_not : public unary_function< _Tp, _Tp>  { 
# 924
constexpr _Tp operator()(const _Tp &__x) const 
# 925
{ return ~__x; } 
# 926
}; 
#pragma GCC diagnostic pop
# 931
template<> struct bit_and< void>  { 
# 933
template< class _Tp, class _Up> constexpr auto 
# 936
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) & std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) & std::forward< _Up> (__u))) 
# 939
{ return std::forward< _Tp> (__t) & std::forward< _Up> (__u); } 
# 941
typedef __is_transparent is_transparent; 
# 942
}; 
# 945
template<> struct bit_or< void>  { 
# 947
template< class _Tp, class _Up> constexpr auto 
# 950
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) | std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) | std::forward< _Up> (__u))) 
# 953
{ return std::forward< _Tp> (__t) | std::forward< _Up> (__u); } 
# 955
typedef __is_transparent is_transparent; 
# 956
}; 
# 959
template<> struct bit_xor< void>  { 
# 961
template< class _Tp, class _Up> constexpr auto 
# 964
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))) 
# 967
{ return std::forward< _Tp> (__t) ^ std::forward< _Up> (__u); } 
# 969
typedef __is_transparent is_transparent; 
# 970
}; 
# 973
template<> struct bit_not< void>  { 
# 975
template< class _Tp> constexpr auto 
# 978
operator()(_Tp &&__t) const noexcept(noexcept((~std::forward< _Tp> (__t))))->__decltype((~std::forward< _Tp> (__t))) 
# 981
{ return ~std::forward< _Tp> (__t); } 
# 983
typedef __is_transparent is_transparent; 
# 984
}; 
# 987
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 1023 "/usr/include/c++/12.2.1/bits/stl_function.h" 3
template< class _Predicate> 
# 1024
class [[__deprecated__]] unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 1028
protected: _Predicate _M_pred; 
# 1033
public: constexpr explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1037
constexpr bool operator()(const typename _Predicate::argument_type &__x) const 
# 1038
{ return !(_M_pred)(__x); } 
# 1039
}; 
# 1042
template< class _Predicate> 
# 1043
__attribute((__deprecated__("use \'std::not_fn\' instead"))) constexpr unary_negate< _Predicate>  
# 1046
not1(const _Predicate &__pred) 
# 1047
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 1050
template< class _Predicate> 
# 1051
class [[__deprecated__]] binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 1056
protected: _Predicate _M_pred; 
# 1061
public: constexpr explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1065
constexpr bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 1066
__y) const 
# 1067
{ return !(_M_pred)(__x, __y); } 
# 1068
}; 
# 1071
template< class _Predicate> 
# 1072
__attribute((__deprecated__("use \'std::not_fn\' instead"))) constexpr binary_negate< _Predicate>  
# 1075
not2(const _Predicate &__pred) 
# 1076
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 1104 "/usr/include/c++/12.2.1/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 1105
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 1108
protected: _Result (*_M_ptr)(_Arg); 
# 1111
public: pointer_to_unary_function() { } 
# 1114
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 1115
{ } 
# 1118
_Result operator()(_Arg __x) const 
# 1119
{ return (_M_ptr)(__x); } 
# 1120
} __attribute((__deprecated__)); 
# 1123
template< class _Arg, class _Result> 
# 1124
__attribute((__deprecated__("use \'std::function\' instead"))) inline pointer_to_unary_function< _Arg, _Result>  
# 1126
ptr_fun(_Result (*__x)(_Arg)) 
# 1127
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 1130
template< class _Arg1, class _Arg2, class _Result> 
# 1131
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 1135
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 1138
public: pointer_to_binary_function() { } 
# 1141
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 1142
{ } 
# 1145
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 1146
{ return (_M_ptr)(__x, __y); } 
# 1147
} __attribute((__deprecated__)); 
# 1150
template< class _Arg1, class _Arg2, class _Result> 
# 1151
__attribute((__deprecated__("use \'std::function\' instead"))) inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 1153
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 1154
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 1157
template< class _Tp> 
# 1158
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 1162
_Tp &operator()(_Tp &__x) const 
# 1163
{ return __x; } 
# 1166
const _Tp &operator()(const _Tp &__x) const 
# 1167
{ return __x; } 
# 1168
}; 
# 1171
template< class _Tp> struct _Identity< const _Tp>  : public std::_Identity< _Tp>  { }; 
# 1173
template< class _Pair> 
# 1174
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 1178
typename _Pair::first_type &operator()(_Pair &__x) const 
# 1179
{ return __x.first; } 
# 1182
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 1183
{ return __x.first; } 
# 1186
template< class _Pair2> typename _Pair2::first_type &
# 1188
operator()(_Pair2 &__x) const 
# 1189
{ return __x.first; } 
# 1191
template< class _Pair2> const typename _Pair2::first_type &
# 1193
operator()(const _Pair2 &__x) const 
# 1194
{ return __x.first; } 
# 1196
}; 
# 1198
template< class _Pair> 
# 1199
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 1203
typename _Pair::second_type &operator()(_Pair &__x) const 
# 1204
{ return __x.second; } 
# 1207
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 1208
{ return __x.second; } 
# 1209
}; 
# 1231 "/usr/include/c++/12.2.1/bits/stl_function.h" 3
template< class _Ret, class _Tp> 
# 1232
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 1236
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1237
{ } 
# 1240
_Ret operator()(_Tp *__p) const 
# 1241
{ return (__p->*(_M_f))(); } 
# 1244
private: _Ret (_Tp::*_M_f)(void); 
# 1245
} __attribute((__deprecated__)); 
# 1248
template< class _Ret, class _Tp> 
# 1249
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 1253
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1254
{ } 
# 1257
_Ret operator()(const _Tp *__p) const 
# 1258
{ return (__p->*(_M_f))(); } 
# 1261
private: _Ret (_Tp::*_M_f)(void) const; 
# 1262
} __attribute((__deprecated__)); 
# 1265
template< class _Ret, class _Tp> 
# 1266
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1270
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1271
{ } 
# 1274
_Ret operator()(_Tp &__r) const 
# 1275
{ return (__r.*(_M_f))(); } 
# 1278
private: _Ret (_Tp::*_M_f)(void); 
# 1279
} __attribute((__deprecated__)); 
# 1282
template< class _Ret, class _Tp> 
# 1283
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1287
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1288
{ } 
# 1291
_Ret operator()(const _Tp &__r) const 
# 1292
{ return (__r.*(_M_f))(); } 
# 1295
private: _Ret (_Tp::*_M_f)(void) const; 
# 1296
} __attribute((__deprecated__)); 
# 1299
template< class _Ret, class _Tp, class _Arg> 
# 1300
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 1304
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1305
{ } 
# 1308
_Ret operator()(_Tp *__p, _Arg __x) const 
# 1309
{ return (__p->*(_M_f))(__x); } 
# 1312
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1313
} __attribute((__deprecated__)); 
# 1316
template< class _Ret, class _Tp, class _Arg> 
# 1317
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 1321
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1322
{ } 
# 1325
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 1326
{ return (__p->*(_M_f))(__x); } 
# 1329
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1330
} __attribute((__deprecated__)); 
# 1333
template< class _Ret, class _Tp, class _Arg> 
# 1334
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1338
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1339
{ } 
# 1342
_Ret operator()(_Tp &__r, _Arg __x) const 
# 1343
{ return (__r.*(_M_f))(__x); } 
# 1346
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1347
} __attribute((__deprecated__)); 
# 1350
template< class _Ret, class _Tp, class _Arg> 
# 1351
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1355
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1356
{ } 
# 1359
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 1360
{ return (__r.*(_M_f))(__x); } 
# 1363
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1364
} __attribute((__deprecated__)); 
# 1368
template< class _Ret, class _Tp> 
# 1369
__attribute((__deprecated__("use \'std::mem_fn\' instead"))) inline mem_fun_t< _Ret, _Tp>  
# 1371
mem_fun(_Ret (_Tp::*__f)(void)) 
# 1372
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1374
template< class _Ret, class _Tp> 
# 1375
__attribute((__deprecated__("use \'std::mem_fn\' instead"))) inline const_mem_fun_t< _Ret, _Tp>  
# 1377
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 1378
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1380
template< class _Ret, class _Tp> 
# 1381
__attribute((__deprecated__("use \'std::mem_fn\' instead"))) inline mem_fun_ref_t< _Ret, _Tp>  
# 1383
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 1384
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1386
template< class _Ret, class _Tp> 
# 1387
__attribute((__deprecated__("use \'std::mem_fn\' instead"))) inline const_mem_fun_ref_t< _Ret, _Tp>  
# 1389
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 1390
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1392
template< class _Ret, class _Tp, class _Arg> 
# 1393
__attribute((__deprecated__("use \'std::mem_fn\' instead"))) inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 1395
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 1396
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1398
template< class _Ret, class _Tp, class _Arg> 
# 1399
__attribute((__deprecated__("use \'std::mem_fn\' instead"))) inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 1401
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 1402
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1404
template< class _Ret, class _Tp, class _Arg> 
# 1405
__attribute((__deprecated__("use \'std::mem_fn\' instead"))) inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1407
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 1408
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1410
template< class _Ret, class _Tp, class _Arg> 
# 1411
__attribute((__deprecated__("use \'std::mem_fn\' instead"))) inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1413
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 1414
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
#pragma GCC diagnostic pop
# 1420
template< class _Func, class _SfinaeType, class  = __void_t< > > 
# 1421
struct __has_is_transparent { 
# 1422
}; 
# 1424
template< class _Func, class _SfinaeType> 
# 1425
struct __has_is_transparent< _Func, _SfinaeType, __void_t< typename _Func::is_transparent> >  { 
# 1427
typedef void type; }; 
# 1429
template< class _Func, class _SfinaeType> using __has_is_transparent_t = typename __has_is_transparent< _Func, _SfinaeType> ::type; 
# 1435
}
# 60 "/usr/include/c++/12.2.1/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63
namespace std __attribute((__visibility__("default"))) { 
# 107 "/usr/include/c++/12.2.1/backward/binders.h" 3
template< class _Operation> 
# 108
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 113
protected: _Operation op; 
# 114
typename _Operation::first_argument_type value; 
# 117
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 118
__y) : op(__x), value(__y) 
# 119
{ } 
# 122
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 123
{ return (op)(value, __x); } 
# 128
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 129
{ return (op)(value, __x); } 
# 130
} __attribute((__deprecated__("use \'std::bind\' instead"))); 
# 133
template< class _Operation, class _Tp> 
# 134
__attribute((__deprecated__("use \'std::bind\' instead"))) inline binder1st< _Operation>  
# 136
bind1st(const _Operation &__fn, const _Tp &__x) 
# 137
{ 
# 138
typedef typename _Operation::first_argument_type _Arg1_type; 
# 139
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 140
} 
# 143
template< class _Operation> 
# 144
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 149
protected: _Operation op; 
# 150
typename _Operation::second_argument_type value; 
# 153
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 154
__y) : op(__x), value(__y) 
# 155
{ } 
# 158
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 159
{ return (op)(__x, value); } 
# 164
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 165
{ return (op)(__x, value); } 
# 166
} __attribute((__deprecated__("use \'std::bind\' instead"))); 
# 169
template< class _Operation, class _Tp> 
# 170
__attribute((__deprecated__("use \'std::bind\' instead"))) inline binder2nd< _Operation>  
# 172
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 173
{ 
# 174
typedef typename _Operation::second_argument_type _Arg2_type; 
# 175
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 176
} 
# 180
}
# 182
#pragma GCC diagnostic pop
# 42 "/usr/include/c++/12.2.1/bits/invoke.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 53 "/usr/include/c++/12.2.1/bits/invoke.h" 3
template< class _Tp, class _Up = typename __inv_unwrap< _Tp> ::type> constexpr _Up &&
# 55
__invfwd(typename remove_reference< _Tp> ::type &__t) noexcept 
# 56
{ return static_cast< _Up &&>(__t); } 
# 58
template< class _Res, class _Fn, class ..._Args> constexpr _Res 
# 60
__invoke_impl(__invoke_other, _Fn &&__f, _Args &&...__args) 
# 61
{ return std::forward< _Fn> (__f)(std::forward< _Args> (__args)...); } 
# 63
template< class _Res, class _MemFun, class _Tp, class ..._Args> constexpr _Res 
# 65
__invoke_impl(__invoke_memfun_ref, _MemFun &&__f, _Tp &&__t, _Args &&...
# 66
__args) 
# 67
{ return (__invfwd< _Tp> (__t).*__f)(std::forward< _Args> (__args)...); } 
# 69
template< class _Res, class _MemFun, class _Tp, class ..._Args> constexpr _Res 
# 71
__invoke_impl(__invoke_memfun_deref, _MemFun &&__f, _Tp &&__t, _Args &&...
# 72
__args) 
# 73
{ 
# 74
return ((*std::forward< _Tp> (__t)).*__f)(std::forward< _Args> (__args)...); 
# 75
} 
# 77
template< class _Res, class _MemPtr, class _Tp> constexpr _Res 
# 79
__invoke_impl(__invoke_memobj_ref, _MemPtr &&__f, _Tp &&__t) 
# 80
{ return __invfwd< _Tp> (__t).*__f; } 
# 82
template< class _Res, class _MemPtr, class _Tp> constexpr _Res 
# 84
__invoke_impl(__invoke_memobj_deref, _MemPtr &&__f, _Tp &&__t) 
# 85
{ return (*std::forward< _Tp> (__t)).*__f; } 
# 88
template< class _Callable, class ..._Args> constexpr typename __invoke_result< _Callable, _Args...> ::type 
# 90
__invoke(_Callable &&__fn, _Args &&...__args) noexcept(__is_nothrow_invocable< _Callable, _Args...> ::value) 
# 92
{ 
# 93
using __result = __invoke_result< _Callable, _Args...> ; 
# 94
using __type = typename __invoke_result< _Callable, _Args...> ::type; 
# 95
using __tag = typename __invoke_result< _Callable, _Args...> ::__invoke_type; 
# 96
return std::__invoke_impl< typename __invoke_result< _Callable, _Args...> ::type> (__tag{}, std::forward< _Callable> (__fn), std::forward< _Args> (__args)...); 
# 98
} 
# 102
template< class _Res, class _Callable, class ..._Args> constexpr enable_if_t< is_invocable_r_v< _Res, _Callable, _Args...> , _Res>  
# 104
__invoke_r(_Callable &&__fn, _Args &&...__args) noexcept(is_nothrow_invocable_r_v< _Res, _Callable, _Args...> ) 
# 106
{ 
# 107
using __result = __invoke_result< _Callable, _Args...> ; 
# 108
using __type = typename __invoke_result< _Callable, _Args...> ::type; 
# 109
using __tag = typename __invoke_result< _Callable, _Args...> ::__invoke_type; 
# 110
if constexpr (is_void_v< _Res> ) { 
# 111
std::__invoke_impl< typename __invoke_result< _Callable, _Args...> ::type> (__tag{}, std::forward< _Callable> (__fn), std::forward< _Args> (__args)...); } else { 
# 114
return std::__invoke_impl< typename __invoke_result< _Callable, _Args...> ::type> (__tag{}, std::forward< _Callable> (__fn), std::forward< _Args> (__args)...); }  
# 117
} 
# 160 "/usr/include/c++/12.2.1/bits/invoke.h" 3
}
# 41 "/usr/include/c++/12.2.1/bits/refwrap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52 "/usr/include/c++/12.2.1/bits/refwrap.h" 3
template< class _Res, class ..._ArgTypes> 
# 53
struct _Maybe_unary_or_binary_function { }; 
# 56
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 60
template< class _Res, class _T1> 
# 61
struct _Maybe_unary_or_binary_function< _Res, _T1>  : public unary_function< _T1, _Res>  { 
# 62
}; 
# 65
template< class _Res, class _T1, class _T2> 
# 66
struct _Maybe_unary_or_binary_function< _Res, _T1, _T2>  : public binary_function< _T1, _T2, _Res>  { 
# 67
}; 
# 69
#pragma GCC diagnostic pop
# 71
template< class _Signature> struct _Mem_fn_traits; 
# 74
template< class _Res, class _Class, class ..._ArgTypes> 
# 75
struct _Mem_fn_traits_base { 
# 77
using __result_type = _Res; 
# 78
using __maybe_type = _Maybe_unary_or_binary_function< _Res, _Class *, _ArgTypes...> ; 
# 80
using __arity = integral_constant< size_t, sizeof...(_ArgTypes)> ; 
# 81
}; 
# 103 "/usr/include/c++/12.2.1/bits/refwrap.h" 3
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...)>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...)>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 104
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) &>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) &>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const &>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const &>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile &>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile &>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile &>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile &>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 105
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) &&>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) &&>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const &&>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const &&>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile &&>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile &&>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile &&>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile &&>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 108
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 109
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) & noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) & noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const & noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const & noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile & noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile & noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile & noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile & noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 110
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) && noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) && noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const && noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const && noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile && noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile && noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile && noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile && noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 117
template< class _Functor, class  = __void_t< > > 
# 118
struct _Maybe_get_result_type { 
# 119
}; 
# 121
template< class _Functor> 
# 122
struct _Maybe_get_result_type< _Functor, __void_t< typename _Functor::result_type> >  { 
# 124
typedef typename _Functor::result_type result_type; }; 
# 130
template< class _Functor> 
# 131
struct _Weak_result_type_impl : public _Maybe_get_result_type< _Functor>  { 
# 133
}; 
# 136
template< class _Res, class ..._ArgTypes, bool _NE> 
# 137
struct _Weak_result_type_impl< _Res (_ArgTypes ...) noexcept(_NE)>  { 
# 138
typedef _Res result_type; }; 
# 141
template< class _Res, class ..._ArgTypes, bool _NE> 
# 142
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...) noexcept(_NE)>  { 
# 143
typedef _Res result_type; }; 
# 146
template< class _Res, class ..._ArgTypes, bool _NE> 
# 147
struct _Weak_result_type_impl< _Res (*)(_ArgTypes ...) noexcept(_NE)>  { 
# 148
typedef _Res result_type; }; 
# 151
template< class _Res, class ..._ArgTypes, bool _NE> 
# 153
struct _Weak_result_type_impl< _Res (*)(_ArgTypes ..., ...) noexcept(_NE)>  { 
# 154
typedef _Res result_type; }; 
# 157
template< class _Functor, bool 
# 158
 = is_member_function_pointer< _Functor> ::value> 
# 159
struct _Weak_result_type_memfun : public _Weak_result_type_impl< _Functor>  { 
# 161
}; 
# 164
template< class _MemFunPtr> 
# 165
struct _Weak_result_type_memfun< _MemFunPtr, true>  { 
# 167
using result_type = typename _Mem_fn_traits< _MemFunPtr> ::__result_type; 
# 168
}; 
# 171
template< class _Func, class _Class> 
# 172
struct _Weak_result_type_memfun< _Func (_Class::*), false>  { 
# 173
}; 
# 179
template< class _Functor> 
# 180
struct _Weak_result_type : public _Weak_result_type_memfun< typename remove_cv< _Functor> ::type>  { 
# 182
}; 
# 186
template< class _Tp, class  = __void_t< > > 
# 187
struct _Refwrap_base_arg1 { 
# 188
}; 
# 191
template< class _Tp> 
# 192
struct _Refwrap_base_arg1< _Tp, __void_t< typename _Tp::argument_type> >  { 
# 195
typedef typename _Tp::argument_type argument_type; 
# 196
}; 
# 199
template< class _Tp, class  = __void_t< > > 
# 200
struct _Refwrap_base_arg2 { 
# 201
}; 
# 204
template< class _Tp> 
# 205
struct _Refwrap_base_arg2< _Tp, __void_t< typename _Tp::first_argument_type, typename _Tp::second_argument_type> >  { 
# 209
typedef typename _Tp::first_argument_type first_argument_type; 
# 210
typedef typename _Tp::second_argument_type second_argument_type; 
# 211
}; 
# 219
template< class _Tp> 
# 220
struct _Reference_wrapper_base : public _Weak_result_type< _Tp> , public _Refwrap_base_arg1< _Tp> , public _Refwrap_base_arg2< _Tp>  { 
# 222
}; 
# 225
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 229
template< class _Res, class _T1, bool _NE> 
# 230
struct _Reference_wrapper_base< _Res (_T1) noexcept(_NE)>  : public unary_function< _T1, _Res>  { 
# 232
}; 
# 234
template< class _Res, class _T1> 
# 235
struct _Reference_wrapper_base< _Res (_T1) const>  : public unary_function< _T1, _Res>  { 
# 237
}; 
# 239
template< class _Res, class _T1> 
# 240
struct _Reference_wrapper_base< _Res (_T1) volatile>  : public unary_function< _T1, _Res>  { 
# 242
}; 
# 244
template< class _Res, class _T1> 
# 245
struct _Reference_wrapper_base< _Res (_T1) const volatile>  : public unary_function< _T1, _Res>  { 
# 247
}; 
# 250
template< class _Res, class _T1, class _T2, bool _NE> 
# 251
struct _Reference_wrapper_base< _Res (_T1, _T2) noexcept(_NE)>  : public binary_function< _T1, _T2, _Res>  { 
# 253
}; 
# 255
template< class _Res, class _T1, class _T2> 
# 256
struct _Reference_wrapper_base< _Res (_T1, _T2) const>  : public binary_function< _T1, _T2, _Res>  { 
# 258
}; 
# 260
template< class _Res, class _T1, class _T2> 
# 261
struct _Reference_wrapper_base< _Res (_T1, _T2) volatile>  : public binary_function< _T1, _T2, _Res>  { 
# 263
}; 
# 265
template< class _Res, class _T1, class _T2> 
# 266
struct _Reference_wrapper_base< _Res (_T1, _T2) const volatile>  : public binary_function< _T1, _T2, _Res>  { 
# 268
}; 
# 271
template< class _Res, class _T1, bool _NE> 
# 272
struct _Reference_wrapper_base< _Res (*)(_T1) noexcept(_NE)>  : public unary_function< _T1, _Res>  { 
# 274
}; 
# 277
template< class _Res, class _T1, class _T2, bool _NE> 
# 278
struct _Reference_wrapper_base< _Res (*)(_T1, _T2) noexcept(_NE)>  : public binary_function< _T1, _T2, _Res>  { 
# 280
}; 
# 282
template< class _Tp, bool  = is_member_function_pointer< _Tp> ::value> 
# 283
struct _Reference_wrapper_base_memfun : public _Reference_wrapper_base< _Tp>  { 
# 285
}; 
# 287
template< class _MemFunPtr> 
# 288
struct _Reference_wrapper_base_memfun< _MemFunPtr, true>  : public _Mem_fn_traits< _MemFunPtr> ::__maybe_type { 
# 291
using result_type = typename _Mem_fn_traits< _MemFunPtr> ::__result_type; 
# 292
}; 
#pragma GCC diagnostic pop
# 302 "/usr/include/c++/12.2.1/bits/refwrap.h" 3
template< class _Tp> 
# 303
class reference_wrapper : public _Reference_wrapper_base_memfun< typename remove_cv< _Tp> ::type>  { 
# 310
_Tp *_M_data; 
# 313
static _Tp *_S_fun(_Tp &__r) noexcept { return std::__addressof(__r); } 
# 315
static void _S_fun(_Tp &&) = delete;
# 317
template< class _Up, class _Up2 = std::__remove_cvref_t< _Up> > using __not_same = typename enable_if< !is_same< reference_wrapper, _Up2> ::value> ::type; 
# 322
public: typedef _Tp type; 
# 327
template< class _Up, class  = __not_same< _Up> , class 
# 328
 = __decltype((reference_wrapper< _Tp> ::_S_fun(std::declval< _Up> ())))> 
# 330
reference_wrapper(_Up &&__uref) noexcept(noexcept(reference_wrapper< _Tp> ::_S_fun(std::declval< _Up> ()))) : _M_data(reference_wrapper< _Tp> ::_S_fun(std::forward< _Up> (__uref))) 
# 333
{ } 
# 335
reference_wrapper(const reference_wrapper &) = default;
# 338
reference_wrapper &operator=(const reference_wrapper &) = default;
# 341
operator _Tp &() const noexcept 
# 342
{ return get(); } 
# 346
_Tp &get() const noexcept 
# 347
{ return *(_M_data); } 
# 349
template< class ..._Args> typename result_of< _Tp &(_Args && ...)> ::type 
# 352
operator()(_Args &&...__args) const 
# 353
{ 
# 358
return std::__invoke(get(), std::forward< _Args> (__args)...); 
# 359
} 
# 360
}; 
# 363
template< class _Tp> 
# 364
reference_wrapper(_Tp &)->reference_wrapper< _Tp> ; 
# 370
template< class _Tp> inline reference_wrapper< _Tp>  
# 373
ref(_Tp &__t) noexcept 
# 374
{ return ((reference_wrapper< _Tp> )(__t)); } 
# 377
template< class _Tp> inline reference_wrapper< const _Tp>  
# 380
cref(const _Tp &__t) noexcept 
# 381
{ return ((reference_wrapper< const _Tp> )(__t)); } 
# 383
template < typename _Tp >
    void ref ( const _Tp && ) = delete;
# 386
template < typename _Tp >
    void cref ( const _Tp && ) = delete;
# 390
template< class _Tp> inline reference_wrapper< _Tp>  
# 393
ref(reference_wrapper< _Tp>  __t) noexcept 
# 394
{ return __t; } 
# 397
template< class _Tp> inline reference_wrapper< const _Tp>  
# 400
cref(reference_wrapper< _Tp>  __t) noexcept 
# 401
{ return {__t.get()}; } 
# 406
}
# 40 "/usr/include/c++/12.2.1/bits/range_access.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _Container> 
# 50
[[__nodiscard__]] constexpr auto 
# 52
begin(_Container &__cont)->__decltype((__cont.begin())) 
# 53
{ return __cont.begin(); } 
# 60
template< class _Container> 
# 61
[[__nodiscard__]] constexpr auto 
# 63
begin(const _Container &__cont)->__decltype((__cont.begin())) 
# 64
{ return __cont.begin(); } 
# 71
template< class _Container> 
# 72
[[__nodiscard__]] constexpr auto 
# 74
end(_Container &__cont)->__decltype((__cont.end())) 
# 75
{ return __cont.end(); } 
# 82
template< class _Container> 
# 83
[[__nodiscard__]] constexpr auto 
# 85
end(const _Container &__cont)->__decltype((__cont.end())) 
# 86
{ return __cont.end(); } 
# 92
template< class _Tp, size_t _Nm> 
# 93
[[__nodiscard__]] constexpr _Tp *
# 95
begin(_Tp (&__arr)[_Nm]) noexcept 
# 96
{ return __arr; } 
# 103
template< class _Tp, size_t _Nm> 
# 104
[[__nodiscard__]] constexpr _Tp *
# 106
end(_Tp (&__arr)[_Nm]) noexcept 
# 107
{ return __arr + _Nm; } 
# 111
template< class _Tp> class valarray; 
# 113
template< class _Tp> _Tp *begin(valarray< _Tp>  &) noexcept; 
# 114
template< class _Tp> const _Tp *begin(const valarray< _Tp>  &) noexcept; 
# 115
template< class _Tp> _Tp *end(valarray< _Tp>  &) noexcept; 
# 116
template< class _Tp> const _Tp *end(const valarray< _Tp>  &) noexcept; 
# 123
template< class _Container> 
# 124
[[__nodiscard__]] constexpr auto 
# 126
cbegin(const _Container &__cont) noexcept(noexcept(std::begin(__cont)))->__decltype((std::begin(__cont))) 
# 128
{ return std::begin(__cont); } 
# 135
template< class _Container> 
# 136
[[__nodiscard__]] constexpr auto 
# 138
cend(const _Container &__cont) noexcept(noexcept(std::end(__cont)))->__decltype((std::end(__cont))) 
# 140
{ return std::end(__cont); } 
# 147
template< class _Container> 
# 148
[[__nodiscard__]] constexpr auto 
# 150
rbegin(_Container &__cont)->__decltype((__cont.rbegin())) 
# 151
{ return __cont.rbegin(); } 
# 158
template< class _Container> 
# 159
[[__nodiscard__]] constexpr auto 
# 161
rbegin(const _Container &__cont)->__decltype((__cont.rbegin())) 
# 162
{ return __cont.rbegin(); } 
# 169
template< class _Container> 
# 170
[[__nodiscard__]] constexpr auto 
# 172
rend(_Container &__cont)->__decltype((__cont.rend())) 
# 173
{ return __cont.rend(); } 
# 180
template< class _Container> 
# 181
[[__nodiscard__]] constexpr auto 
# 183
rend(const _Container &__cont)->__decltype((__cont.rend())) 
# 184
{ return __cont.rend(); } 
# 191
template< class _Tp, size_t _Nm> 
# 192
[[__nodiscard__]] constexpr reverse_iterator< _Tp *>  
# 194
rbegin(_Tp (&__arr)[_Nm]) noexcept 
# 195
{ return ((reverse_iterator< _Tp *> )(__arr + _Nm)); } 
# 202
template< class _Tp, size_t _Nm> 
# 203
[[__nodiscard__]] constexpr reverse_iterator< _Tp *>  
# 205
rend(_Tp (&__arr)[_Nm]) noexcept 
# 206
{ return ((reverse_iterator< _Tp *> )(__arr)); } 
# 213
template< class _Tp> 
# 214
[[__nodiscard__]] constexpr reverse_iterator< const _Tp *>  
# 216
rbegin(initializer_list< _Tp>  __il) noexcept 
# 217
{ return ((reverse_iterator< const _Tp *> )(__il.end())); } 
# 224
template< class _Tp> 
# 225
[[__nodiscard__]] constexpr reverse_iterator< const _Tp *>  
# 227
rend(initializer_list< _Tp>  __il) noexcept 
# 228
{ return ((reverse_iterator< const _Tp *> )(__il.begin())); } 
# 235
template< class _Container> 
# 236
[[__nodiscard__]] constexpr auto 
# 238
crbegin(const _Container &__cont)->__decltype((std::rbegin(__cont))) 
# 239
{ return std::rbegin(__cont); } 
# 246
template< class _Container> 
# 247
[[__nodiscard__]] constexpr auto 
# 249
crend(const _Container &__cont)->__decltype((std::rend(__cont))) 
# 250
{ return std::rend(__cont); } 
# 261 "/usr/include/c++/12.2.1/bits/range_access.h" 3
template< class _Container> 
# 262
[[nodiscard]] constexpr auto 
# 264
size(const _Container &__cont) noexcept(noexcept(__cont.size()))->__decltype((__cont.size())) 
# 266
{ return __cont.size(); } 
# 271
template< class _Tp, size_t _Nm> 
# 272
[[nodiscard]] constexpr size_t 
# 274
size(const _Tp (&)[_Nm]) noexcept 
# 275
{ return _Nm; } 
# 281
template< class _Container> 
# 282
[[nodiscard]] constexpr auto 
# 283
empty(const _Container &__cont) noexcept(noexcept(__cont.empty()))->__decltype((__cont.empty())) 
# 285
{ return __cont.empty(); } 
# 290
template< class _Tp, size_t _Nm> 
# 291
[[nodiscard]] constexpr bool 
# 292
empty(const _Tp (&)[_Nm]) noexcept 
# 293
{ return false; } 
# 299
template< class _Tp> 
# 300
[[nodiscard]] constexpr bool 
# 301
empty(initializer_list< _Tp>  __il) noexcept 
# 302
{ return __il.size() == 0; } 
# 308
template< class _Container> 
# 309
[[nodiscard]] constexpr auto 
# 311
data(_Container &__cont) noexcept(noexcept(__cont.data()))->__decltype((__cont.data())) 
# 313
{ return __cont.data(); } 
# 319
template< class _Container> 
# 320
[[nodiscard]] constexpr auto 
# 322
data(const _Container &__cont) noexcept(noexcept(__cont.data()))->__decltype((__cont.data())) 
# 324
{ return __cont.data(); } 
# 330
template< class _Tp, size_t _Nm> 
# 331
[[nodiscard]] constexpr _Tp *
# 333
data(_Tp (&__array)[_Nm]) noexcept 
# 334
{ return __array; } 
# 340
template< class _Tp> 
# 341
[[nodiscard]] constexpr const _Tp *
# 343
data(initializer_list< _Tp>  __il) noexcept 
# 344
{ return __il.begin(); } 
# 368 "/usr/include/c++/12.2.1/bits/range_access.h" 3
}
# 73 "/usr/include/c++/12.2.1/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 78
template< class _Tp> inline void 
# 80
destroy_at(_Tp *__location) 
# 81
{ 
# 82
if constexpr ((201703L > 201703L) && is_array_v< _Tp> ) 
# 83
{ 
# 84
for (auto &__x : *__location) { 
# 85
std::destroy_at(std::__addressof(__x)); }  
# 86
} else { 
# 88
__location->~_Tp(); }  
# 89
} 
# 106 "/usr/include/c++/12.2.1/bits/stl_construct.h" 3
template< class _Tp, class ..._Args> inline void 
# 109
_Construct(_Tp *__p, _Args &&...__args) 
# 110
{ 
# 119 "/usr/include/c++/12.2.1/bits/stl_construct.h" 3
::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); 
# 120
} 
# 132 "/usr/include/c++/12.2.1/bits/stl_construct.h" 3
template< class _T1> inline void 
# 134
_Construct_novalue(_T1 *__p) 
# 135
{ ::new ((void *)__p) _T1; } 
# 137
template< class _ForwardIterator> inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last); 
# 144
template< class _Tp> constexpr void 
# 146
_Destroy(_Tp *__pointer) 
# 147
{ 
# 151
__pointer->~_Tp(); 
# 153
} 
# 155
template< bool > 
# 156
struct _Destroy_aux { 
# 158
template< class _ForwardIterator> static void 
# 160
__destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 161
{ 
# 162
for (; __first != __last; ++__first) { 
# 163
std::_Destroy(std::__addressof(*__first)); }  
# 164
} 
# 165
}; 
# 168
template<> struct _Destroy_aux< true>  { 
# 170
template< class _ForwardIterator> static void 
# 172
__destroy(_ForwardIterator, _ForwardIterator) { } 
# 173
}; 
# 180
template< class _ForwardIterator> inline void 
# 182
_Destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 183
{ 
# 185
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 188
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 195
std::template _Destroy_aux< __has_trivial_destructor(_Value_type)> ::__destroy(__first, __last); 
# 197
} 
# 199
template< bool > 
# 200
struct _Destroy_n_aux { 
# 202
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 204
__destroy_n(_ForwardIterator __first, _Size __count) 
# 205
{ 
# 206
for (; __count > 0; ((void)(++__first)), (--__count)) { 
# 207
std::_Destroy(std::__addressof(*__first)); }  
# 208
return __first; 
# 209
} 
# 210
}; 
# 213
template<> struct _Destroy_n_aux< true>  { 
# 215
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 217
__destroy_n(_ForwardIterator __first, _Size __count) 
# 218
{ 
# 219
std::advance(__first, __count); 
# 220
return __first; 
# 221
} 
# 222
}; 
# 229
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 231
_Destroy_n(_ForwardIterator __first, _Size __count) 
# 232
{ 
# 234
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 237
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 244
return std::template _Destroy_n_aux< __has_trivial_destructor(_Value_type)> ::__destroy_n(__first, __count); 
# 246
} 
# 249
template< class _ForwardIterator> inline void 
# 251
destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 252
{ 
# 253
std::_Destroy(__first, __last); 
# 254
} 
# 256
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 258
destroy_n(_ForwardIterator __first, _Size __count) 
# 259
{ 
# 260
return std::_Destroy_n(__first, __count); 
# 261
} 
# 265
}
# 41 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
struct __allocator_traits_base { 
# 51
template< class _Tp, class _Up, class  = void> 
# 52
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 54
template< class _Tp, class _Up> 
# 55
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> ::other> >  { 
# 57
using type = typename _Tp::template rebind< _Up> ::other; }; 
# 61
protected: 
# 60
template< class _Tp> using __pointer = typename _Tp::pointer; 
# 62
template< class _Tp> using __c_pointer = typename _Tp::const_pointer; 
# 64
template< class _Tp> using __v_pointer = typename _Tp::void_pointer; 
# 66
template< class _Tp> using __cv_pointer = typename _Tp::const_void_pointer; 
# 68
template< class _Tp> using __pocca = typename _Tp::propagate_on_container_copy_assignment; 
# 70
template< class _Tp> using __pocma = typename _Tp::propagate_on_container_move_assignment; 
# 72
template< class _Tp> using __pocs = typename _Tp::propagate_on_container_swap; 
# 74
template< class _Tp> using __equal = typename _Tp::is_always_equal; 
# 76
}; 
# 78
template< class _Alloc, class _Up> using __alloc_rebind = typename __allocator_traits_base::__rebind< _Alloc, _Up> ::type; 
# 89 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Alloc> 
# 90
struct allocator_traits : public __allocator_traits_base { 
# 93
typedef _Alloc allocator_type; 
# 95
typedef typename _Alloc::value_type value_type; 
# 102
using pointer = __detected_or_t< value_type *, __pointer, _Alloc> ; 
# 107
private: 
# 106
template< template< class >  class _Func, class _Tp, class  = void> 
# 107
struct _Ptr { 
# 109
using type = typename pointer_traits< pointer> ::template rebind< _Tp> ; 
# 110
}; 
# 112
template< template< class >  class _Func, class _Tp> 
# 113
struct _Ptr< _Func, _Tp, __void_t< _Func< _Alloc> > >  { 
# 115
using type = _Func< _Alloc> ; 
# 116
}; 
# 119
template< class _A2, class _PtrT, class  = void> 
# 120
struct _Diff { 
# 121
using type = typename pointer_traits< _PtrT> ::difference_type; }; 
# 123
template< class _A2, class _PtrT> 
# 124
struct _Diff< _A2, _PtrT, __void_t< typename _A2::difference_type> >  { 
# 125
using type = typename _A2::difference_type; }; 
# 128
template< class _A2, class _DiffT, class  = void> 
# 129
struct _Size : public make_unsigned< _DiffT>  { }; 
# 131
template< class _A2, class _DiffT> 
# 132
struct _Size< _A2, _DiffT, __void_t< typename _A2::size_type> >  { 
# 133
using type = typename _A2::size_type; }; 
# 142
public: using const_pointer = typename _Ptr< __c_pointer, const value_type> ::type; 
# 150
using void_pointer = typename _Ptr< __v_pointer, void> ::type; 
# 158
using const_void_pointer = typename _Ptr< __cv_pointer, const void> ::type; 
# 166
using difference_type = typename _Diff< _Alloc, pointer> ::type; 
# 174
using size_type = typename _Size< _Alloc, difference_type> ::type; 
# 182
using propagate_on_container_copy_assignment = __detected_or_t< false_type, __pocca, _Alloc> ; 
# 191
using propagate_on_container_move_assignment = __detected_or_t< false_type, __pocma, _Alloc> ; 
# 200
using propagate_on_container_swap = __detected_or_t< false_type, __pocs, _Alloc> ; 
# 209
using is_always_equal = __detected_or_t< typename is_empty< _Alloc> ::type, __equal, _Alloc> ; 
# 212
template< class _Tp> using rebind_alloc = __alloc_rebind< _Alloc, _Tp> ; 
# 214
template< class _Tp> using rebind_traits = allocator_traits< rebind_alloc< _Tp> > ; 
# 220
private: 
# 218
template< class _Alloc2> static constexpr auto 
# 220
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer __hint, int)->__decltype((__a.allocate(__n, __hint))) 
# 222
{ return __a.allocate(__n, __hint); } 
# 224
template< class _Alloc2> static constexpr pointer 
# 226
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer, ...) 
# 227
{ return __a.allocate(__n); } 
# 229
template< class _Tp, class ..._Args> 
# 230
struct __construct_helper { 
# 232
template< class _Alloc2, class 
# 233
 = __decltype((std::declval< _Alloc2 *> ()->construct(std::declval< _Tp *> (), std::declval< _Args> ()...)))> static true_type 
# 232
__test(int); 
# 237
template< class > static false_type __test(...); 
# 240
using type = __decltype((__test< _Alloc> (0))); 
# 241
}; 
# 243
template< class _Tp, class ..._Args> using __has_construct = typename __construct_helper< _Tp, _Args...> ::type; 
# 247
template< class _Tp, class ..._Args> static constexpr _Require< __has_construct< _Tp, _Args...> >  
# 249
_S_construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(__a.construct(__p, std::forward< _Args> (__args)...))) 
# 251
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 253
template< class _Tp, class ..._Args> static constexpr _Require< __and_< __not_< __has_construct< _Tp, _Args...> > , is_constructible< _Tp, _Args...> > >  
# 257
_S_construct(_Alloc &, _Tp *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Tp, _Args...> ::value) 
# 259
{ 
# 261
::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); 
# 265
} 
# 267
template< class _Alloc2, class _Tp> static constexpr auto 
# 269
_S_destroy(_Alloc2 &__a, _Tp *__p, int) noexcept(noexcept(__a.destroy(__p)))->__decltype((__a.destroy(__p))) 
# 272
{ __a.destroy(__p); } 
# 274
template< class _Alloc2, class _Tp> static constexpr void 
# 276
_S_destroy(_Alloc2 &, _Tp *__p, ...) noexcept(std::template is_nothrow_destructible< _Tp> ::value) 
# 278
{ std::_Destroy(__p); } 
# 280
template< class _Alloc2> static constexpr auto 
# 282
_S_max_size(_Alloc2 &__a, int)->__decltype((__a.max_size())) 
# 284
{ return __a.max_size(); } 
# 286
template< class _Alloc2> static constexpr size_type 
# 288
_S_max_size(_Alloc2 &, ...) 
# 289
{ 
# 292
return __gnu_cxx::template __numeric_traits< size_type> ::__max / sizeof(value_type); 
# 294
} 
# 296
template< class _Alloc2> static constexpr auto 
# 298
_S_select(_Alloc2 &__a, int)->__decltype((__a.select_on_container_copy_construction())) 
# 300
{ return __a.select_on_container_copy_construction(); } 
# 302
template< class _Alloc2> static constexpr _Alloc2 
# 304
_S_select(_Alloc2 &__a, ...) 
# 305
{ return __a; } 
# 317 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
public: 
# 316
[[__nodiscard__]] static pointer 
# 317
allocate(_Alloc &__a, size_type __n) 
# 318
{ return __a.allocate(__n); } 
# 331 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 332
allocate(_Alloc &__a, size_type __n, const_void_pointer __hint) 
# 333
{ return _S_allocate(__a, __n, __hint, 0); } 
# 344 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
static void deallocate(_Alloc &__a, pointer __p, size_type __n) 
# 345
{ __a.deallocate(__p, __n); } 
# 358 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Tp, class ..._Args> static auto 
# 360
construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(_S_construct(__a, __p, std::forward< _Args> (__args)...)))->__decltype((_S_construct(__a, __p, std::forward< _Args> (__args)...))) 
# 364
{ _S_construct(__a, __p, std::forward< _Args> (__args)...); } 
# 374 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Tp> static void 
# 376
destroy(_Alloc &__a, _Tp *__p) noexcept(noexcept(_S_destroy(__a, __p, 0))) 
# 378
{ _S_destroy(__a, __p, 0); } 
# 389 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
static size_type max_size(const _Alloc &__a) noexcept 
# 390
{ return _S_max_size(__a, 0); } 
# 401 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
static _Alloc select_on_container_copy_construction(const _Alloc &__rhs) 
# 402
{ return _S_select(__rhs, 0); } 
# 403
}; 
# 410
template< class _Tp> 
# 411
struct allocator_traits< allocator< _Tp> >  { 
# 414
using allocator_type = allocator< _Tp> ; 
# 417
using value_type = _Tp; 
# 420
using pointer = _Tp *; 
# 423
using const_pointer = const _Tp *; 
# 426
using void_pointer = void *; 
# 429
using const_void_pointer = const void *; 
# 432
using difference_type = ptrdiff_t; 
# 435
using size_type = size_t; 
# 438
using propagate_on_container_copy_assignment = false_type; 
# 441
using propagate_on_container_move_assignment = true_type; 
# 444
using propagate_on_container_swap = false_type; 
# 447
using is_always_equal = true_type; 
# 449
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 452
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 462 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 463
allocate(allocator_type &__a, size_type __n) 
# 464
{ return __a.allocate(__n); } 
# 476 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 477
allocate(allocator_type &__a, size_type __n, const_void_pointer __hint) 
# 478
{ 
# 480
return __a.allocate(__n, __hint); 
# 484
} 
# 495 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
static void deallocate(allocator_type &__a, pointer __p, size_type __n) 
# 496
{ __a.deallocate(__p, __n); } 
# 509 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 511
construct(allocator_type &__a __attribute((__unused__)), _Up *__p, _Args &&...
# 512
__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 514
{ 
# 516
__a.construct(__p, std::forward< _Args> (__args)...); 
# 520
} 
# 529 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Up> static void 
# 531
destroy(allocator_type &__a __attribute((__unused__)), _Up *__p) noexcept(is_nothrow_destructible< _Up> ::value) 
# 533
{ 
# 535
__a.destroy(__p); 
# 539
} 
# 547
static size_type max_size(const allocator_type &__a __attribute((__unused__))) noexcept 
# 548
{ 
# 550
return __a.max_size(); 
# 554
} 
# 562
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 563
{ return __rhs; } 
# 564
}; 
# 568
template<> struct allocator_traits< allocator< void> >  { 
# 571
using allocator_type = allocator< void> ; 
# 574
using value_type = void; 
# 577
using pointer = void *; 
# 580
using const_pointer = const void *; 
# 583
using void_pointer = void *; 
# 586
using const_void_pointer = const void *; 
# 589
using difference_type = ptrdiff_t; 
# 592
using size_type = size_t; 
# 595
using propagate_on_container_copy_assignment = false_type; 
# 598
using propagate_on_container_move_assignment = true_type; 
# 601
using propagate_on_container_swap = false_type; 
# 604
using is_always_equal = true_type; 
# 606
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 609
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 614
static void *allocate(allocator_type &, size_type, const void * = 0) = delete;
# 618
static void deallocate(allocator_type &, void *, size_type) = delete;
# 631 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 633
construct(allocator_type &, _Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 635
{ std::_Construct(__p, std::forward< _Args> (__args)...); } 
# 644 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Up> static void 
# 646
destroy(allocator_type &, _Up *__p) noexcept(is_nothrow_destructible< _Up> ::value) 
# 648
{ std::_Destroy(__p); } 
# 652
static size_type max_size(const allocator_type &) = delete;
# 660
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 661
{ return __rhs; } 
# 662
}; 
# 676 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 678
__alloc_on_copy(_Alloc &__one, const _Alloc &__two) 
# 679
{ 
# 680
typedef allocator_traits< _Alloc>  __traits; 
# 681
typedef typename allocator_traits< _Alloc> ::propagate_on_container_copy_assignment __pocca; 
# 683
if constexpr (__pocca::value) { 
# 684
__one = __two; }  
# 688
} 
# 690
template< class _Alloc> constexpr _Alloc 
# 692
__alloc_on_copy(const _Alloc &__a) 
# 693
{ 
# 694
typedef allocator_traits< _Alloc>  __traits; 
# 695
return __traits::select_on_container_copy_construction(__a); 
# 696
} 
# 708 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 710
__alloc_on_move(_Alloc &__one, _Alloc &__two) 
# 711
{ 
# 712
typedef allocator_traits< _Alloc>  __traits; 
# 713
typedef typename allocator_traits< _Alloc> ::propagate_on_container_move_assignment __pocma; 
# 715
if constexpr (__pocma::value) { 
# 716
__one = std::move(__two); }  
# 720
} 
# 735 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 737
__alloc_on_swap(_Alloc &__one, _Alloc &__two) 
# 738
{ 
# 739
typedef allocator_traits< _Alloc>  __traits; 
# 740
typedef typename allocator_traits< _Alloc> ::propagate_on_container_swap __pocs; 
# 742
if constexpr (__pocs::value) 
# 743
{ 
# 744
using std::swap;
# 745
swap(__one, __two); 
# 746
}  
# 750
} 
# 752
template< class _Alloc, class _Tp, class 
# 753
_ValueT = __remove_cvref_t< typename _Alloc::value_type> , class 
# 754
 = void> 
# 755
struct __is_alloc_insertable_impl : public false_type { 
# 757
}; 
# 759
template< class _Alloc, class _Tp, class _ValueT> 
# 760
struct __is_alloc_insertable_impl< _Alloc, _Tp, _ValueT, __void_t< __decltype((allocator_traits< _Alloc> ::construct(std::declval< _Alloc &> (), std::declval< _ValueT *> (), std::declval< _Tp> ())))> >  : public true_type { 
# 765
}; 
# 770
template< class _Alloc> 
# 771
struct __is_copy_insertable : public __is_alloc_insertable_impl< _Alloc, const typename _Alloc::value_type &> ::type { 
# 774
}; 
# 777
template< class _Tp> 
# 778
struct __is_copy_insertable< allocator< _Tp> >  : public is_copy_constructible< _Tp>  { 
# 780
}; 
# 785
template< class _Alloc> 
# 786
struct __is_move_insertable : public __is_alloc_insertable_impl< _Alloc, typename _Alloc::value_type> ::type { 
# 788
}; 
# 791
template< class _Tp> 
# 792
struct __is_move_insertable< allocator< _Tp> >  : public is_move_constructible< _Tp>  { 
# 794
}; 
# 797
template< class _Alloc, class  = void> 
# 798
struct __is_allocator : public false_type { }; 
# 800
template< class _Alloc> 
# 801
struct __is_allocator< _Alloc, __void_t< typename _Alloc::value_type, __decltype((std::declval< _Alloc &> ().allocate((unsigned long)0UL)))> >  : public true_type { 
# 804
}; 
# 806
template< class _Alloc> using _RequireAllocator = typename enable_if< __is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 810
template< class _Alloc> using _RequireNotAllocator = typename enable_if< !__is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 829 "/usr/include/c++/12.2.1/bits/alloc_traits.h" 3
template< class _ForwardIterator, class _Allocator> void 
# 832
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &
# 833
__alloc) 
# 834
{ 
# 835
for (; __first != __last; ++__first) { 
# 839
allocator_traits< _Allocator> ::destroy(__alloc, std::__addressof(*__first)); }  
# 842
} 
# 844
template< class _ForwardIterator, class _Tp> inline void 
# 847
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp>  &) 
# 849
{ 
# 850
_Destroy(__first, __last); 
# 851
} 
# 854
}
# 39 "/usr/include/c++/12.2.1/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 47
template< class _Alloc, class  = typename _Alloc::value_type> 
# 48
struct __alloc_traits : public std::allocator_traits< _Alloc>  { 
# 53
typedef _Alloc allocator_type; 
# 55
typedef std::allocator_traits< _Alloc>  _Base_type; 
# 56
typedef typename std::allocator_traits< _Alloc> ::value_type value_type; 
# 57
typedef typename std::allocator_traits< _Alloc> ::pointer pointer; 
# 58
typedef typename std::allocator_traits< _Alloc> ::const_pointer const_pointer; 
# 59
typedef typename std::allocator_traits< _Alloc> ::size_type size_type; 
# 60
typedef typename std::allocator_traits< _Alloc> ::difference_type difference_type; 
# 62
typedef value_type &reference; 
# 63
typedef const value_type &const_reference; 
# 64
using std::allocator_traits< _Alloc> ::allocate;
# 65
using std::allocator_traits< _Alloc> ::deallocate;
# 66
using std::allocator_traits< _Alloc> ::construct;
# 67
using std::allocator_traits< _Alloc> ::destroy;
# 68
using std::allocator_traits< _Alloc> ::max_size;
# 72
private: 
# 71
template< class _Ptr> using __is_custom_pointer = std::__and_< std::is_same< pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ; 
# 81
public: 
# 78
template< class _Ptr, class ..._Args> static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr> ::value>  
# 81
construct(_Alloc &__a, _Ptr __p, _Args &&...__args) noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...))) 
# 84
{ 
# 85
_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...); 
# 87
} 
# 90
template< class _Ptr> static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr> ::value>  
# 93
destroy(_Alloc &__a, _Ptr __p) noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p)))) 
# 95
{ _Base_type::destroy(__a, std::__to_address(__p)); } 
# 97
static constexpr _Alloc _S_select_on_copy(const _Alloc &__a) 
# 98
{ return _Base_type::select_on_container_copy_construction(__a); } 
# 100
static constexpr void _S_on_swap(_Alloc &__a, _Alloc &__b) 
# 101
{ std::__alloc_on_swap(__a, __b); } 
# 103
static constexpr bool _S_propagate_on_copy_assign() 
# 104
{ return _Base_type::propagate_on_container_copy_assignment::value; } 
# 106
static constexpr bool _S_propagate_on_move_assign() 
# 107
{ return _Base_type::propagate_on_container_move_assignment::value; } 
# 109
static constexpr bool _S_propagate_on_swap() 
# 110
{ return _Base_type::propagate_on_container_swap::value; } 
# 112
static constexpr bool _S_always_equal() 
# 113
{ return _Base_type::is_always_equal::value; } 
# 115
static constexpr bool _S_nothrow_move() 
# 116
{ return (_S_propagate_on_move_assign)() || (_S_always_equal)(); } 
# 118
template< class _Tp> 
# 119
struct rebind { 
# 120
typedef typename std::allocator_traits< _Alloc> ::template rebind_alloc< _Tp>  other; }; 
# 166 "/usr/include/c++/12.2.1/ext/alloc_traits.h" 3
}; 
# 169
}
# 38 "/usr/include/c++/12.2.1/bits/functional_hash.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/12.2.1/bits/functional_hash.h" 3
template< class _Result, class _Arg> 
# 51
struct __hash_base { 
# 53
typedef _Result result_type [[__deprecated__]]; 
# 54
typedef _Arg argument_type [[__deprecated__]]; 
# 55
}; 
# 58
template< class _Tp> struct hash; 
# 61
template< class _Tp, class  = void> 
# 62
struct __poison_hash { 
# 64
static constexpr inline bool __enable_hash_call = false; 
# 67
private: __poison_hash(__poison_hash &&); 
# 68
~__poison_hash(); 
# 69
}; 
# 71
template< class _Tp> 
# 72
struct __poison_hash< _Tp, __void_t< __decltype((hash< _Tp> ()(declval< _Tp> ())))> >  { 
# 74
static constexpr inline bool __enable_hash_call = true; 
# 75
}; 
# 78
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 79
struct __hash_enum { 
# 83
private: __hash_enum(__hash_enum &&); 
# 84
~__hash_enum(); 
# 85
}; 
# 88
template< class _Tp> 
# 89
struct __hash_enum< _Tp, true>  : public __hash_base< unsigned long, _Tp>  { 
# 92
std::size_t operator()(_Tp __val) const noexcept 
# 93
{ 
# 94
using __type = typename underlying_type< _Tp> ::type; 
# 95
return hash< typename underlying_type< _Tp> ::type> {}(static_cast< __type>(__val)); 
# 96
} 
# 97
}; 
# 101
template< class _Tp> 
# 102
struct hash : public __hash_enum< _Tp>  { 
# 103
}; 
# 106
template< class _Tp> 
# 107
struct hash< _Tp *>  : public __hash_base< unsigned long, _Tp *>  { 
# 110
std::size_t operator()(_Tp *__p) const noexcept 
# 111
{ return reinterpret_cast< std::size_t>(__p); } 
# 112
}; 
# 125 "/usr/include/c++/12.2.1/bits/functional_hash.h" 3
template<> struct hash< bool>  : public __hash_base< unsigned long, bool>  { size_t operator()(bool __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 128
template<> struct hash< char>  : public __hash_base< unsigned long, char>  { size_t operator()(char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 131
template<> struct hash< signed char>  : public __hash_base< unsigned long, signed char>  { size_t operator()(signed char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 134
template<> struct hash< unsigned char>  : public __hash_base< unsigned long, unsigned char>  { size_t operator()(unsigned char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 137
template<> struct hash< wchar_t>  : public __hash_base< unsigned long, wchar_t>  { size_t operator()(wchar_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 145
template<> struct hash< char16_t>  : public __hash_base< unsigned long, char16_t>  { size_t operator()(char16_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 148
template<> struct hash< char32_t>  : public __hash_base< unsigned long, char32_t>  { size_t operator()(char32_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 151
template<> struct hash< short>  : public __hash_base< unsigned long, short>  { size_t operator()(short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 154
template<> struct hash< int>  : public __hash_base< unsigned long, int>  { size_t operator()(int __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 157
template<> struct hash< long>  : public __hash_base< unsigned long, long>  { size_t operator()(long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 160
template<> struct hash< long long>  : public __hash_base< unsigned long, long long>  { size_t operator()(long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 163
template<> struct hash< unsigned short>  : public __hash_base< unsigned long, unsigned short>  { size_t operator()(unsigned short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 166
template<> struct hash< unsigned>  : public __hash_base< unsigned long, unsigned>  { size_t operator()(unsigned __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 169
template<> struct hash< unsigned long>  : public __hash_base< unsigned long, unsigned long>  { size_t operator()(unsigned long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 172
template<> struct hash< unsigned long long>  : public __hash_base< unsigned long, unsigned long long>  { size_t operator()(unsigned long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 201 "/usr/include/c++/12.2.1/bits/functional_hash.h" 3
struct _Hash_impl { 
# 204
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 205
__seed = static_cast< size_t>(3339675911UL)) 
# 206
{ return _Hash_bytes(__ptr, __clength, __seed); } 
# 208
template< class _Tp> static size_t 
# 210
hash(const _Tp &__val) 
# 211
{ return hash(&__val, sizeof(__val)); } 
# 213
template< class _Tp> static size_t 
# 215
__hash_combine(const _Tp &__val, size_t __hash) 
# 216
{ return hash(&__val, sizeof(__val), __hash); } 
# 217
}; 
# 220
struct _Fnv_hash_impl { 
# 223
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 224
__seed = static_cast< size_t>(2166136261UL)) 
# 225
{ return _Fnv_hash_bytes(__ptr, __clength, __seed); } 
# 227
template< class _Tp> static size_t 
# 229
hash(const _Tp &__val) 
# 230
{ return hash(&__val, sizeof(__val)); } 
# 232
template< class _Tp> static size_t 
# 234
__hash_combine(const _Tp &__val, size_t __hash) 
# 235
{ return hash(&__val, sizeof(__val), __hash); } 
# 236
}; 
# 240
template<> struct hash< float>  : public __hash_base< unsigned long, float>  { 
# 243
size_t operator()(float __val) const noexcept 
# 244
{ 
# 246
return (__val != (0.0F)) ? std::_Hash_impl::hash(__val) : (0); 
# 247
} 
# 248
}; 
# 252
template<> struct hash< double>  : public __hash_base< unsigned long, double>  { 
# 255
size_t operator()(double __val) const noexcept 
# 256
{ 
# 258
return (__val != (0.0)) ? std::_Hash_impl::hash(__val) : (0); 
# 259
} 
# 260
}; 
# 264
template<> struct hash< long double>  : public __hash_base< unsigned long, long double>  { 
# 267
__attribute((__pure__)) size_t 
# 268
operator()(long double __val) const noexcept; 
# 269
}; 
# 273
template<> struct hash< __decltype((nullptr))>  : public __hash_base< unsigned long, __decltype((nullptr))>  { 
# 276
size_t operator()(nullptr_t) const noexcept 
# 277
{ return 0; } 
# 278
}; 
# 287 "/usr/include/c++/12.2.1/bits/functional_hash.h" 3
template< class _Hash> 
# 288
struct __is_fast_hash : public true_type { 
# 289
}; 
# 292
template<> struct __is_fast_hash< hash< long double> >  : public false_type { 
# 293
}; 
# 296
}
# 53 "/usr/include/c++/12.2.1/string_view" 3
namespace std __attribute((__visibility__("default"))) { 
# 64
constexpr size_t __sv_check(size_t __size, size_t __pos, const char *__s) 
# 65
{ 
# 66
if (__pos > __size) { 
# 67
__throw_out_of_range_fmt("%s: __pos (which is %zu) > __size (which is %zu)", __s, __pos, __size); }  
# 69
return __pos; 
# 70
} 
# 75
constexpr size_t __sv_limit(size_t __size, size_t __pos, size_t __off) noexcept 
# 76
{ 
# 77
const bool __testoff = __off < (__size - __pos); 
# 78
return __testoff ? __off : (__size - __pos); 
# 79
} 
# 99 "/usr/include/c++/12.2.1/string_view" 3
template< class _CharT, class _Traits = char_traits< _CharT> > 
# 100
class basic_string_view { 
# 102
static_assert((!is_array_v< _CharT> ));
# 103
static_assert((is_trivial_v< _CharT>  && is_standard_layout_v< _CharT> ));
# 104
static_assert((is_same_v< _CharT, typename _Traits::char_type> ));
# 109
public: using traits_type = _Traits; 
# 110
using value_type = _CharT; 
# 111
using pointer = value_type *; 
# 112
using const_pointer = const value_type *; 
# 113
using reference = value_type &; 
# 114
using const_reference = const value_type &; 
# 115
using const_iterator = const value_type *; 
# 116
using iterator = const_iterator; 
# 117
using const_reverse_iterator = std::reverse_iterator< const_iterator> ; 
# 118
using reverse_iterator = const_reverse_iterator; 
# 119
using size_type = size_t; 
# 120
using difference_type = ptrdiff_t; 
# 121
static constexpr inline size_type npos = ((size_type)(-1)); 
# 126
constexpr basic_string_view() noexcept : _M_len{(0)}, _M_str{(nullptr)} 
# 128
{ } 
# 130
constexpr basic_string_view(const basic_string_view &) noexcept = default;
# 132
__attribute((__nonnull__)) constexpr 
# 133
basic_string_view(const _CharT *__str) noexcept : _M_len{traits_type::length(__str)}, _M_str{__str} 
# 136
{ } 
# 139
constexpr basic_string_view(const _CharT *__str, size_type __len) noexcept : _M_len{__len}, _M_str{__str} 
# 141
{ } 
# 177 "/usr/include/c++/12.2.1/string_view" 3
constexpr basic_string_view &operator=(const basic_string_view &) noexcept = default;
# 182
constexpr const_iterator begin() const noexcept 
# 183
{ return this->_M_str; } 
# 186
constexpr const_iterator end() const noexcept 
# 187
{ return (this->_M_str) + (this->_M_len); } 
# 190
constexpr const_iterator cbegin() const noexcept 
# 191
{ return this->_M_str; } 
# 194
constexpr const_iterator cend() const noexcept 
# 195
{ return (this->_M_str) + (this->_M_len); } 
# 198
constexpr const_reverse_iterator rbegin() const noexcept 
# 199
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 202
constexpr const_reverse_iterator rend() const noexcept 
# 203
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 206
constexpr const_reverse_iterator crbegin() const noexcept 
# 207
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 210
constexpr const_reverse_iterator crend() const noexcept 
# 211
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 216
constexpr size_type size() const noexcept 
# 217
{ return this->_M_len; } 
# 220
constexpr size_type length() const noexcept 
# 221
{ return _M_len; } 
# 224
constexpr size_type max_size() const noexcept 
# 225
{ 
# 226
return (((npos - sizeof(size_type)) - sizeof(void *)) / sizeof(value_type)) / (4); 
# 228
} 
# 230
[[nodiscard]] constexpr bool 
# 231
empty() const noexcept 
# 232
{ return (this->_M_len) == (0); } 
# 237
constexpr const_reference operator[](size_type __pos) const noexcept 
# 238
{ 
# 239
do { if (std::__is_constant_evaluated() && (!((bool)(__pos < (this->_M_len))))) { __builtin_unreachable(); }  } while (false); 
# 240
return *((this->_M_str) + __pos); 
# 241
} 
# 244
constexpr const_reference at(size_type __pos) const 
# 245
{ 
# 246
if (__pos >= (_M_len)) { 
# 247
__throw_out_of_range_fmt("basic_string_view::at: __pos (which is %zu) >= this->size() (which is %zu)", __pos, size()); }  
# 250
return *((this->_M_str) + __pos); 
# 251
} 
# 254
constexpr const_reference front() const noexcept 
# 255
{ 
# 256
do { if (std::__is_constant_evaluated() && (!((bool)((this->_M_len) > (0))))) { __builtin_unreachable(); }  } while (false); 
# 257
return *(this->_M_str); 
# 258
} 
# 261
constexpr const_reference back() const noexcept 
# 262
{ 
# 263
do { if (std::__is_constant_evaluated() && (!((bool)((this->_M_len) > (0))))) { __builtin_unreachable(); }  } while (false); 
# 264
return *(((this->_M_str) + (this->_M_len)) - 1); 
# 265
} 
# 268
constexpr const_pointer data() const noexcept 
# 269
{ return this->_M_str; } 
# 274
constexpr void remove_prefix(size_type __n) noexcept 
# 275
{ 
# 276
do { if (std::__is_constant_evaluated() && (!((bool)((this->_M_len) >= __n)))) { __builtin_unreachable(); }  } while (false); 
# 277
(this->_M_str) += __n; 
# 278
(this->_M_len) -= __n; 
# 279
} 
# 282
constexpr void remove_suffix(size_type __n) noexcept 
# 283
{ (this->_M_len) -= __n; } 
# 286
constexpr void swap(basic_string_view &__sv) noexcept 
# 287
{ 
# 288
auto __tmp = *this; 
# 289
(*this) = __sv; 
# 290
__sv = __tmp; 
# 291
} 
# 297
size_type copy(_CharT *__str, size_type __n, size_type __pos = 0) const 
# 298
{ 
# 299
; 
# 300
__pos = std::__sv_check(size(), __pos, "basic_string_view::copy"); 
# 301
const size_type __rlen = std::min(__n, (_M_len) - __pos); 
# 304
traits_type::copy(__str, data() + __pos, __rlen); 
# 305
return __rlen; 
# 306
} 
# 309
constexpr basic_string_view substr(size_type __pos = 0, size_type __n = npos) const noexcept(false) 
# 310
{ 
# 311
__pos = std::__sv_check(size(), __pos, "basic_string_view::substr"); 
# 312
const size_type __rlen = std::min(__n, (_M_len) - __pos); 
# 313
return basic_string_view{(_M_str) + __pos, __rlen}; 
# 314
} 
# 317
constexpr int compare(basic_string_view __str) const noexcept 
# 318
{ 
# 319
const size_type __rlen = std::min(this->_M_len, __str._M_len); 
# 320
int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen); 
# 321
if (__ret == 0) { 
# 322
__ret = (_S_compare)(this->_M_len, __str._M_len); }  
# 323
return __ret; 
# 324
} 
# 327
constexpr int compare(size_type __pos1, size_type __n1, basic_string_view __str) const 
# 328
{ return substr(__pos1, __n1).compare(__str); } 
# 331
constexpr int compare(size_type __pos1, size_type __n1, basic_string_view 
# 332
__str, size_type __pos2, size_type __n2) const 
# 333
{ 
# 334
return substr(__pos1, __n1).compare(__str.substr(__pos2, __n2)); 
# 335
} 
# 337
__attribute((__nonnull__)) constexpr int 
# 338
compare(const _CharT *__str) const noexcept 
# 339
{ return this->compare(basic_string_view{__str}); } 
# 341
__attribute((__nonnull__)) constexpr int 
# 342
compare(size_type __pos1, size_type __n1, const _CharT *__str) const 
# 343
{ return substr(__pos1, __n1).compare(basic_string_view{__str}); } 
# 346
constexpr int compare(size_type __pos1, size_type __n1, const _CharT *
# 347
__str, size_type __n2) const noexcept(false) 
# 348
{ 
# 349
return substr(__pos1, __n1).compare(basic_string_view(__str, __n2)); 
# 351
} 
# 403 "/usr/include/c++/12.2.1/string_view" 3
constexpr size_type find(basic_string_view __str, size_type __pos = 0) const noexcept 
# 404
{ return this->find(__str._M_str, __pos, __str._M_len); } 
# 407
constexpr size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 410
constexpr size_type find(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 412
__attribute((__nonnull__)) constexpr size_type 
# 413
find(const _CharT *__str, size_type __pos = 0) const noexcept 
# 414
{ return this->find(__str, __pos, traits_type::length(__str)); } 
# 417
constexpr size_type rfind(basic_string_view __str, size_type __pos = npos) const noexcept 
# 418
{ return this->rfind(__str._M_str, __pos, __str._M_len); } 
# 421
constexpr size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 424
constexpr size_type rfind(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 426
__attribute((__nonnull__)) constexpr size_type 
# 427
rfind(const _CharT *__str, size_type __pos = npos) const noexcept 
# 428
{ return this->rfind(__str, __pos, traits_type::length(__str)); } 
# 431
constexpr size_type find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept 
# 432
{ return this->find_first_of(__str._M_str, __pos, __str._M_len); } 
# 435
constexpr size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 436
{ return this->find(__c, __pos); } 
# 439
constexpr size_type find_first_of(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 442
__attribute((__nonnull__)) constexpr size_type 
# 443
find_first_of(const _CharT *__str, size_type __pos = 0) const noexcept 
# 444
{ return this->find_first_of(__str, __pos, traits_type::length(__str)); } 
# 447
constexpr size_type find_last_of(basic_string_view __str, size_type 
# 448
__pos = npos) const noexcept 
# 449
{ return this->find_last_of(__str._M_str, __pos, __str._M_len); } 
# 452
constexpr size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 453
{ return this->rfind(__c, __pos); } 
# 456
constexpr size_type find_last_of(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 459
__attribute((__nonnull__)) constexpr size_type 
# 460
find_last_of(const _CharT *__str, size_type __pos = npos) const noexcept 
# 461
{ return this->find_last_of(__str, __pos, traits_type::length(__str)); } 
# 464
constexpr size_type find_first_not_of(basic_string_view __str, size_type 
# 465
__pos = 0) const noexcept 
# 466
{ return this->find_first_not_of(__str._M_str, __pos, __str._M_len); } 
# 469
constexpr size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 472
constexpr size_type find_first_not_of(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 475
__attribute((__nonnull__)) constexpr size_type 
# 476
find_first_not_of(const _CharT *__str, size_type __pos = 0) const noexcept 
# 477
{ 
# 478
return this->find_first_not_of(__str, __pos, traits_type::length(__str)); 
# 480
} 
# 483
constexpr size_type find_last_not_of(basic_string_view __str, size_type 
# 484
__pos = npos) const noexcept 
# 485
{ return this->find_last_not_of(__str._M_str, __pos, __str._M_len); } 
# 488
constexpr size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 491
constexpr size_type find_last_not_of(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 494
__attribute((__nonnull__)) constexpr size_type 
# 495
find_last_not_of(const _CharT *__str, size_type 
# 496
__pos = npos) const noexcept 
# 497
{ 
# 498
return this->find_last_not_of(__str, __pos, traits_type::length(__str)); 
# 500
} 
# 505
private: static constexpr int _S_compare(size_type __n1, size_type __n2) noexcept 
# 506
{ 
# 507
using __limits = __gnu_cxx::__int_traits< int> ; 
# 508
const difference_type __diff = __n1 - __n2; 
# 509
if (__diff > __gnu_cxx::__numeric_traits_integer< int> ::__max) { 
# 510
return __limits::__max; }  
# 511
if (__diff < __gnu_cxx::__numeric_traits_integer< int> ::__min) { 
# 512
return __limits::__min; }  
# 513
return static_cast< int>(__diff); 
# 514
} 
# 516
size_t _M_len; 
# 517
const _CharT *_M_str; 
# 518
}; 
# 538 "/usr/include/c++/12.2.1/string_view" 3
template< class _CharT, class _Traits> constexpr bool 
# 540
operator==(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 541
__y) noexcept 
# 542
{ return (__x.size() == __y.size()) && (__x.compare(__y) == 0); } 
# 544
template< class _CharT, class _Traits> constexpr bool 
# 546
operator==(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 547
__y) noexcept 
# 549
{ return (__x.size() == __y.size()) && (__x.compare(__y) == 0); } 
# 567 "/usr/include/c++/12.2.1/string_view" 3
template< class _CharT, class _Traits> constexpr bool 
# 569
operator==(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 570
__y) noexcept 
# 571
{ return (__x.size() == __y.size()) && (__x.compare(__y) == 0); } 
# 573
template< class _CharT, class _Traits> constexpr bool 
# 575
operator!=(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 576
__y) noexcept 
# 577
{ return !(__x == __y); } 
# 579
template< class _CharT, class _Traits> constexpr bool 
# 581
operator!=(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 582
__y) noexcept 
# 584
{ return !(__x == __y); } 
# 586
template< class _CharT, class _Traits> constexpr bool 
# 588
operator!=(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 589
__y) noexcept 
# 590
{ return !(__x == __y); } 
# 592
template< class _CharT, class _Traits> constexpr bool 
# 594
operator<(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 595
__y) noexcept 
# 596
{ return __x.compare(__y) < 0; } 
# 598
template< class _CharT, class _Traits> constexpr bool 
# 600
operator<(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 601
__y) noexcept 
# 603
{ return __x.compare(__y) < 0; } 
# 605
template< class _CharT, class _Traits> constexpr bool 
# 607
operator<(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 608
__y) noexcept 
# 609
{ return __x.compare(__y) < 0; } 
# 611
template< class _CharT, class _Traits> constexpr bool 
# 613
operator>(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 614
__y) noexcept 
# 615
{ return __x.compare(__y) > 0; } 
# 617
template< class _CharT, class _Traits> constexpr bool 
# 619
operator>(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 620
__y) noexcept 
# 622
{ return __x.compare(__y) > 0; } 
# 624
template< class _CharT, class _Traits> constexpr bool 
# 626
operator>(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 627
__y) noexcept 
# 628
{ return __x.compare(__y) > 0; } 
# 630
template< class _CharT, class _Traits> constexpr bool 
# 632
operator<=(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 633
__y) noexcept 
# 634
{ return __x.compare(__y) <= 0; } 
# 636
template< class _CharT, class _Traits> constexpr bool 
# 638
operator<=(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 639
__y) noexcept 
# 641
{ return __x.compare(__y) <= 0; } 
# 643
template< class _CharT, class _Traits> constexpr bool 
# 645
operator<=(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 646
__y) noexcept 
# 647
{ return __x.compare(__y) <= 0; } 
# 649
template< class _CharT, class _Traits> constexpr bool 
# 651
operator>=(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 652
__y) noexcept 
# 653
{ return __x.compare(__y) >= 0; } 
# 655
template< class _CharT, class _Traits> constexpr bool 
# 657
operator>=(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 658
__y) noexcept 
# 660
{ return __x.compare(__y) >= 0; } 
# 662
template< class _CharT, class _Traits> constexpr bool 
# 664
operator>=(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 665
__y) noexcept 
# 666
{ return __x.compare(__y) >= 0; } 
# 670
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 672
operator<<(basic_ostream< _CharT, _Traits>  &__os, basic_string_view< _CharT, _Traits>  
# 673
__str) 
# 674
{ return __ostream_insert(__os, __str.data(), __str.size()); } 
# 679
using string_view = basic_string_view< char> ; 
# 680
using wstring_view = basic_string_view< wchar_t> ; 
# 684
using u16string_view = basic_string_view< char16_t> ; 
# 685
using u32string_view = basic_string_view< char32_t> ; 
# 689
template< class _Tp> struct hash; 
# 693
template<> struct hash< basic_string_view< char> >  : public __hash_base< unsigned long, basic_string_view< char> >  { 
# 697
size_t operator()(const string_view &__str) const noexcept 
# 698
{ return std::_Hash_impl::hash(__str.data(), __str.length()); } 
# 699
}; 
# 702
template<> struct __is_fast_hash< hash< basic_string_view< char> > >  : public false_type { 
# 703
}; 
# 706
template<> struct hash< basic_string_view< wchar_t> >  : public __hash_base< unsigned long, basic_string_view< wchar_t> >  { 
# 710
size_t operator()(const wstring_view &__s) const noexcept 
# 711
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 712
} 
# 713
}; 
# 716
template<> struct __is_fast_hash< hash< basic_string_view< wchar_t> > >  : public false_type { 
# 717
}; 
# 735 "/usr/include/c++/12.2.1/string_view" 3
template<> struct hash< basic_string_view< char16_t> >  : public __hash_base< unsigned long, basic_string_view< char16_t> >  { 
# 739
size_t operator()(const u16string_view &__s) const noexcept 
# 740
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 741
} 
# 742
}; 
# 745
template<> struct __is_fast_hash< hash< basic_string_view< char16_t> > >  : public false_type { 
# 746
}; 
# 749
template<> struct hash< basic_string_view< char32_t> >  : public __hash_base< unsigned long, basic_string_view< char32_t> >  { 
# 753
size_t operator()(const u32string_view &__s) const noexcept 
# 754
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 755
} 
# 756
}; 
# 759
template<> struct __is_fast_hash< hash< basic_string_view< char32_t> > >  : public false_type { 
# 760
}; 
# 762
inline namespace literals { 
# 764
inline namespace string_view_literals { 
# 766
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
# 769
constexpr basic_string_view< char>  operator ""sv(const char *__str, size_t __len) noexcept 
# 770
{ return basic_string_view< char> {__str, __len}; } 
# 773
constexpr basic_string_view< wchar_t>  operator ""sv(const wchar_t *__str, size_t __len) noexcept 
# 774
{ return basic_string_view< wchar_t> {__str, __len}; } 
# 783
constexpr basic_string_view< char16_t>  operator ""sv(const char16_t *__str, size_t __len) noexcept 
# 784
{ return basic_string_view< char16_t> {__str, __len}; } 
# 787
constexpr basic_string_view< char32_t>  operator ""sv(const char32_t *__str, size_t __len) noexcept 
# 788
{ return basic_string_view< char32_t> {__str, __len}; } 
# 790
#pragma GCC diagnostic pop
}
# 792
}
# 809 "/usr/include/c++/12.2.1/string_view" 3
}
# 41 "/usr/include/c++/12.2.1/bits/string_view.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 48
basic_string_view< _CharT, _Traits> ::find(const _CharT *__str, size_type __pos, size_type __n) const noexcept 
# 49
{ 
# 50
; 
# 52
if (__n == (0)) { 
# 53
return (__pos <= (_M_len)) ? __pos : npos; }  
# 54
if (__pos >= (_M_len)) { 
# 55
return npos; }  
# 57
const _CharT __elem0 = __str[0]; 
# 58
const _CharT *__first = (_M_str) + __pos; 
# 59
const _CharT *const __last = (_M_str) + (_M_len); 
# 60
size_type __len = (_M_len) - __pos; 
# 62
while (__len >= __n) 
# 63
{ 
# 65
__first = traits_type::find(__first, (__len - __n) + (1), __elem0); 
# 66
if (!__first) { 
# 67
return npos; }  
# 71
if (traits_type::compare(__first, __str, __n) == 0) { 
# 72
return __first - (_M_str); }  
# 73
__len = (__last - (++__first)); 
# 74
}  
# 75
return npos; 
# 76
} 
# 78
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 81
basic_string_view< _CharT, _Traits> ::find(_CharT __c, size_type __pos) const noexcept 
# 82
{ 
# 83
size_type __ret = npos; 
# 84
if (__pos < (this->_M_len)) 
# 85
{ 
# 86
const size_type __n = (this->_M_len) - __pos; 
# 87
const _CharT *__p = traits_type::find((this->_M_str) + __pos, __n, __c); 
# 88
if (__p) { 
# 89
__ret = (__p - (this->_M_str)); }  
# 90
}  
# 91
return __ret; 
# 92
} 
# 94
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 97
basic_string_view< _CharT, _Traits> ::rfind(const _CharT *__str, size_type __pos, size_type __n) const noexcept 
# 98
{ 
# 99
; 
# 101
if (__n <= (this->_M_len)) 
# 102
{ 
# 103
__pos = std::min((size_type)((this->_M_len) - __n), __pos); 
# 104
do 
# 105
{ 
# 106
if (traits_type::compare((this->_M_str) + __pos, __str, __n) == 0) { 
# 107
return __pos; }  
# 108
} 
# 109
while ((__pos--) > (0)); 
# 110
}  
# 111
return npos; 
# 112
} 
# 114
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 117
basic_string_view< _CharT, _Traits> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 118
{ 
# 119
size_type __size = this->_M_len; 
# 120
if (__size > (0)) 
# 121
{ 
# 122
if ((--__size) > __pos) { 
# 123
__size = __pos; }  
# 124
for (++__size; (__size--) > (0);) { 
# 125
if (traits_type::eq((this->_M_str)[__size], __c)) { 
# 126
return __size; }  }  
# 127
}  
# 128
return npos; 
# 129
} 
# 131
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 134
basic_string_view< _CharT, _Traits> ::find_first_of(const _CharT *__str, size_type __pos, size_type 
# 135
__n) const noexcept 
# 136
{ 
# 137
; 
# 138
for (; __n && (__pos < (this->_M_len)); ++__pos) 
# 139
{ 
# 140
const _CharT *__p = traits_type::find(__str, __n, (this->_M_str)[__pos]); 
# 142
if (__p) { 
# 143
return __pos; }  
# 144
}  
# 145
return npos; 
# 146
} 
# 148
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 151
basic_string_view< _CharT, _Traits> ::find_last_of(const _CharT *__str, size_type __pos, size_type 
# 152
__n) const noexcept 
# 153
{ 
# 154
; 
# 155
size_type __size = size(); 
# 156
if (__size && __n) 
# 157
{ 
# 158
if ((--__size) > __pos) { 
# 159
__size = __pos; }  
# 160
do 
# 161
{ 
# 162
if (traits_type::find(__str, __n, (this->_M_str)[__size])) { 
# 163
return __size; }  
# 164
} 
# 165
while ((__size--) != (0)); 
# 166
}  
# 167
return npos; 
# 168
} 
# 170
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 173
basic_string_view< _CharT, _Traits> ::find_first_not_of(const _CharT *__str, size_type __pos, size_type 
# 174
__n) const noexcept 
# 175
{ 
# 176
; 
# 177
for (; __pos < (this->_M_len); ++__pos) { 
# 178
if (!traits_type::find(__str, __n, (this->_M_str)[__pos])) { 
# 179
return __pos; }  }  
# 180
return npos; 
# 181
} 
# 183
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 186
basic_string_view< _CharT, _Traits> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 187
{ 
# 188
for (; __pos < (this->_M_len); ++__pos) { 
# 189
if (!traits_type::eq((this->_M_str)[__pos], __c)) { 
# 190
return __pos; }  }  
# 191
return npos; 
# 192
} 
# 194
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 197
basic_string_view< _CharT, _Traits> ::find_last_not_of(const _CharT *__str, size_type __pos, size_type 
# 198
__n) const noexcept 
# 199
{ 
# 200
; 
# 201
size_type __size = this->_M_len; 
# 202
if (__size) 
# 203
{ 
# 204
if ((--__size) > __pos) { 
# 205
__size = __pos; }  
# 206
do 
# 207
{ 
# 208
if (!traits_type::find(__str, __n, (this->_M_str)[__size])) { 
# 209
return __size; }  
# 210
} 
# 211
while (__size--); 
# 212
}  
# 213
return npos; 
# 214
} 
# 216
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 219
basic_string_view< _CharT, _Traits> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 220
{ 
# 221
size_type __size = this->_M_len; 
# 222
if (__size) 
# 223
{ 
# 224
if ((--__size) > __pos) { 
# 225
__size = __pos; }  
# 226
do 
# 227
{ 
# 228
if (!traits_type::eq((this->_M_str)[__size], __c)) { 
# 229
return __size; }  
# 230
} 
# 231
while (__size--); 
# 232
}  
# 233
return npos; 
# 234
} 
# 237
}
# 53 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 56
inline namespace __cxx11 { 
# 84 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> 
# 85
class basic_string { 
# 88
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 91
typedef __gnu_cxx::__alloc_traits< _Char_alloc_type>  _Alloc_traits; 
# 123 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
public: typedef _Traits traits_type; 
# 124
typedef typename _Traits::char_type value_type; 
# 125
typedef _Char_alloc_type allocator_type; 
# 126
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::size_type size_type; 
# 127
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::difference_type difference_type; 
# 128
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::reference reference; 
# 129
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_reference const_reference; 
# 130
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::pointer pointer; 
# 131
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_pointer const_pointer; 
# 132
typedef __gnu_cxx::__normal_iterator< pointer, basic_string>  iterator; 
# 134
typedef __gnu_cxx::__normal_iterator< const_pointer, basic_string>  const_iterator; 
# 135
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 136
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 139
static const size_type npos = (static_cast< size_type>(-1)); 
# 146
protected: typedef const_iterator __const_iterator; 
# 152
private: typedef basic_string_view< _CharT, _Traits>  __sv_type; 
# 154
template< class _Tp, class _Res> using _If_sv = enable_if_t< __and_< is_convertible< const _Tp &, __sv_type> , __not_< is_convertible< const _Tp *, const basic_string *> > , __not_< is_convertible< const _Tp &, const _CharT *> > > ::value, _Res> ; 
# 164
static __sv_type _S_to_string_view(__sv_type __svt) noexcept 
# 165
{ return __svt; } 
# 171
struct __sv_wrapper { 
# 174
explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { } 
# 176
__sv_type _M_sv; 
# 177
}; 
# 187
explicit basic_string(__sv_wrapper __svw, const _Alloc &__a) : basic_string((__svw._M_sv).data(), (__svw._M_sv).size(), __a) 
# 188
{ } 
# 192
struct _Alloc_hider : public allocator_type { 
# 199
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, const _Alloc &__a) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(__a), _M_p(__dat) 
# 200
{ } 
# 203
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, _Alloc &&__a = _Alloc()) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(std::move(__a)), _M_p(__dat) 
# 204
{ } 
# 207
typename basic_string< _CharT, _Traits, _Alloc> ::pointer _M_p; 
# 208
}; 
# 210
_Alloc_hider _M_dataplus; 
# 211
size_type _M_string_length; 
# 213
enum { _S_local_capacity = (15) / sizeof(_CharT)}; 
# 216
union { 
# 217
_CharT _M_local_buf[_S_local_capacity + 1]; 
# 218
size_type _M_allocated_capacity; 
# 219
}; 
# 223
void _M_data(pointer __p) 
# 224
{ ((_M_dataplus)._M_p) = __p; } 
# 228
void _M_length(size_type __length) 
# 229
{ (_M_string_length) = __length; } 
# 233
pointer _M_data() const 
# 234
{ return (_M_dataplus)._M_p; } 
# 238
pointer _M_local_data() 
# 239
{ 
# 241
return std::template pointer_traits< pointer> ::pointer_to(*(_M_local_buf)); 
# 245
} 
# 249
const_pointer _M_local_data() const 
# 250
{ 
# 252
return std::template pointer_traits< const_pointer> ::pointer_to(*(_M_local_buf)); 
# 256
} 
# 260
void _M_capacity(size_type __capacity) 
# 261
{ (_M_allocated_capacity) = __capacity; } 
# 265
void _M_set_length(size_type __n) 
# 266
{ 
# 267
_M_length(__n); 
# 268
traits_type::assign(_M_data()[__n], _CharT()); 
# 269
} 
# 273
bool _M_is_local() const 
# 274
{ return _M_data() == _M_local_data(); } 
# 279
pointer _M_create(size_type &, size_type); 
# 283
void _M_dispose() 
# 284
{ 
# 285
if (!_M_is_local()) { 
# 286
_M_destroy(_M_allocated_capacity); }  
# 287
} 
# 291
void _M_destroy(size_type __size) throw() 
# 292
{ _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); } 
# 319 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _InIterator> void _M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag); 
# 327
template< class _FwdIterator> void _M_construct(_FwdIterator __beg, _FwdIterator __end, forward_iterator_tag); 
# 335
void _M_construct(size_type __req, _CharT __c); 
# 339
allocator_type &_M_get_allocator() 
# 340
{ return _M_dataplus; } 
# 344
const allocator_type &_M_get_allocator() const 
# 345
{ return _M_dataplus; } 
# 348
__attribute((__always_inline__)) constexpr pointer 
# 351
_M_use_local_data() noexcept 
# 352
{ 
# 358
return _M_local_data(); 
# 359
} 
# 379 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type _M_check(size_type __pos, const char *__s) const 
# 380
{ 
# 381
if (__pos > size()) { 
# 382
__throw_out_of_range_fmt("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, size()); }  
# 385
return __pos; 
# 386
} 
# 390
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const 
# 391
{ 
# 392
if ((max_size() - (size() - __n1)) < __n2) { 
# 393
__throw_length_error(__s); }  
# 394
} 
# 400
size_type _M_limit(size_type __pos, size_type __off) const noexcept 
# 401
{ 
# 402
const bool __testoff = __off < (size() - __pos); 
# 403
return __testoff ? __off : (size() - __pos); 
# 404
} 
# 408
bool _M_disjunct(const _CharT *__s) const noexcept 
# 409
{ 
# 410
return (less< const _CharT *> ()(__s, _M_data()) || less< const _CharT *> ()(_M_data() + size(), __s)); 
# 412
} 
# 418
static void _S_copy(_CharT *__d, const _CharT *__s, size_type __n) 
# 419
{ 
# 420
if (__n == 1) { 
# 421
traits_type::assign(*__d, *__s); } else { 
# 423
traits_type::copy(__d, __s, __n); }  
# 424
} 
# 428
static void _S_move(_CharT *__d, const _CharT *__s, size_type __n) 
# 429
{ 
# 430
if (__n == 1) { 
# 431
traits_type::assign(*__d, *__s); } else { 
# 433
traits_type::move(__d, __s, __n); }  
# 434
} 
# 438
static void _S_assign(_CharT *__d, size_type __n, _CharT __c) 
# 439
{ 
# 440
if (__n == 1) { 
# 441
traits_type::assign(*__d, __c); } else { 
# 443
traits_type::assign(__d, __n, __c); }  
# 444
} 
# 448
template< class _Iterator> static void 
# 451
_S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) 
# 452
{ 
# 453
for (; __k1 != __k2; (++__k1), ((void)(++__p))) { 
# 454
traits_type::assign(*__p, *__k1); }  
# 455
} 
# 459
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) noexcept 
# 460
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 464
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) noexcept 
# 466
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 470
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) noexcept 
# 471
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 475
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) noexcept 
# 477
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 481
static int _S_compare(size_type __n1, size_type __n2) noexcept 
# 482
{ 
# 483
const difference_type __d = (difference_type)(__n1 - __n2); 
# 485
if (__d > __gnu_cxx::__numeric_traits< int> ::__max) { 
# 486
return __gnu_cxx::__numeric_traits< int> ::__max; } else { 
# 487
if (__d < __gnu_cxx::__numeric_traits< int> ::__min) { 
# 488
return __gnu_cxx::__numeric_traits< int> ::__min; } else { 
# 490
return (int)__d; }  }  
# 491
} 
# 495
void _M_assign(const basic_string &); 
# 499
void _M_mutate(size_type __pos, size_type __len1, const _CharT * __s, size_type __len2); 
# 504
void _M_erase(size_type __pos, size_type __n); 
# 515
public: basic_string() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_dataplus(_M_local_data()) 
# 518
{ 
# 519
_M_use_local_data(); 
# 520
_M_set_length(0); 
# 521
} 
# 528
explicit basic_string(const _Alloc &__a) noexcept : _M_dataplus(_M_local_data(), __a) 
# 530
{ 
# 531
_M_use_local_data(); 
# 532
_M_set_length(0); 
# 533
} 
# 540
basic_string(const basic_string &__str) : _M_dataplus(_M_local_data(), _Alloc_traits::_S_select_on_copy(__str._M_get_allocator())) 
# 543
{ 
# 544
_M_construct(__str._M_data(), __str._M_data() + __str.length(), forward_iterator_tag()); 
# 546
} 
# 557 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, const _Alloc &
# 558
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 560
{ 
# 561
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 563
_M_construct(__start, __start + __str._M_limit(__pos, npos), forward_iterator_tag()); 
# 565
} 
# 574
basic_string(const basic_string &__str, size_type __pos, size_type 
# 575
__n) : _M_dataplus(_M_local_data()) 
# 577
{ 
# 578
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 580
_M_construct(__start, __start + __str._M_limit(__pos, __n), forward_iterator_tag()); 
# 582
} 
# 592 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, size_type 
# 593
__n, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 595
{ 
# 596
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "string::string"); 
# 598
_M_construct(__start, __start + __str._M_limit(__pos, __n), forward_iterator_tag()); 
# 600
} 
# 612 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string(const _CharT *__s, size_type __n, const _Alloc &
# 613
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 615
{ 
# 617
if ((__s == 0) && (__n > 0)) { 
# 618
std::__throw_logic_error("basic_string: construction from null is not valid"); }  
# 620
_M_construct(__s, __s + __n, forward_iterator_tag()); 
# 621
} 
# 631 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class  = _RequireAllocator< _Alloc> > 
# 634
basic_string(const _CharT *__s, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 636
{ 
# 638
if (__s == 0) { 
# 639
std::__throw_logic_error("basic_string: construction from null is not valid"); }  
# 641
const _CharT *__end = __s + traits_type::length(__s); 
# 642
_M_construct(__s, __end, forward_iterator_tag()); 
# 643
} 
# 654 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class  = _RequireAllocator< _Alloc> > 
# 657
basic_string(size_type __n, _CharT __c, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 659
{ _M_construct(__n, __c); } 
# 670 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string(basic_string &&__str) noexcept : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator())) 
# 672
{ 
# 673
if (__str._M_is_local()) 
# 674
{ 
# 675
traits_type::copy(_M_local_buf, __str._M_local_buf, __str.length() + 1); 
# 677
} else 
# 679
{ 
# 680
_M_data(__str._M_data()); 
# 681
_M_capacity(__str._M_allocated_capacity); 
# 682
}  
# 687
_M_length(__str.length()); 
# 688
__str._M_data(__str._M_local_data()); 
# 689
__str._M_set_length(0); 
# 690
} 
# 698
basic_string(initializer_list< _CharT>  __l, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 700
{ _M_construct(__l.begin(), __l.end(), forward_iterator_tag()); } 
# 703
basic_string(const basic_string &__str, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 705
{ _M_construct(__str.begin(), __str.end(), forward_iterator_tag()); } 
# 708
basic_string(basic_string &&__str, const _Alloc &__a) noexcept(_Alloc_traits::_S_always_equal()) : _M_dataplus(_M_local_data(), __a) 
# 711
{ 
# 712
if (__str._M_is_local()) 
# 713
{ 
# 714
traits_type::copy(_M_local_buf, __str._M_local_buf, __str.length() + 1); 
# 716
_M_length(__str.length()); 
# 717
__str._M_set_length(0); 
# 718
} else { 
# 719
if (_Alloc_traits::_S_always_equal() || (__str.get_allocator() == __a)) 
# 721
{ 
# 722
_M_data(__str._M_data()); 
# 723
_M_length(__str.length()); 
# 724
_M_capacity(__str._M_allocated_capacity); 
# 725
__str._M_data(__str._M_local_buf); 
# 726
__str._M_set_length(0); 
# 727
} else { 
# 729
_M_construct(__str.begin(), __str.end(), forward_iterator_tag()); }  }  
# 730
} 
# 745 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _InputIterator, class 
# 746
 = _RequireInputIter< _InputIterator> > 
# 751
basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &
# 752
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 754
{ 
# 756
_M_construct(__beg, __end, std::__iterator_category(__beg)); 
# 761
} 
# 771 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp, class 
# 772
 = enable_if_t< is_convertible_v< const _Tp &, __sv_type> > > 
# 774
basic_string(const _Tp &__t, size_type __pos, size_type __n, const _Alloc &
# 775
__a = _Alloc()) : basic_string((_S_to_string_view)(__t).substr(__pos, __n), __a) 
# 776
{ } 
# 783
template< class _Tp, class  = _If_sv< _Tp, void> > explicit 
# 786
basic_string(const _Tp &__t, const _Alloc &__a = _Alloc()) : basic_string((__sv_wrapper)(_S_to_string_view)(__t), __a) 
# 787
{ } 
# 794
~basic_string() 
# 795
{ _M_dispose(); } 
# 803
basic_string &operator=(const basic_string &__str) 
# 804
{ 
# 805
return this->assign(__str); 
# 806
} 
# 814
basic_string &operator=(const _CharT *__s) 
# 815
{ return this->assign(__s); } 
# 826 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &operator=(_CharT __c) 
# 827
{ 
# 828
this->assign(1, __c); 
# 829
return *this; 
# 830
} 
# 844 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &operator=(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 846
{ 
# 847
if ((!_M_is_local()) && _Alloc_traits::_S_propagate_on_move_assign() && (!_Alloc_traits::_S_always_equal()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 850
{ 
# 852
_M_destroy(_M_allocated_capacity); 
# 853
_M_data(_M_local_data()); 
# 854
_M_set_length(0); 
# 855
}  
# 857
std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator()); 
# 859
if (__str._M_is_local()) 
# 860
{ 
# 864
if (__builtin_expect(std::__addressof(__str) != this, true)) 
# 865
{ 
# 866
if (__str.size()) { 
# 867
this->_S_copy(_M_data(), __str._M_data(), __str.size()); }  
# 868
_M_set_length(__str.size()); 
# 869
}  
# 870
} else { 
# 871
if ((_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()) || (_M_get_allocator() == __str._M_get_allocator())) 
# 874
{ 
# 876
pointer __data = (nullptr); 
# 877
size_type __capacity; 
# 878
if (!_M_is_local()) 
# 879
{ 
# 880
if (_Alloc_traits::_S_always_equal()) 
# 881
{ 
# 883
__data = _M_data(); 
# 884
__capacity = (_M_allocated_capacity); 
# 885
} else { 
# 887
_M_destroy(_M_allocated_capacity); }  
# 888
}  
# 890
_M_data(__str._M_data()); 
# 891
_M_length(__str.length()); 
# 892
_M_capacity(__str._M_allocated_capacity); 
# 893
if (__data) 
# 894
{ 
# 895
__str._M_data(__data); 
# 896
__str._M_capacity(__capacity); 
# 897
} else { 
# 899
__str._M_data(__str._M_local_buf); }  
# 900
} else { 
# 902
assign(__str); }  }  
# 903
__str.clear(); 
# 904
return *this; 
# 905
} 
# 913
basic_string &operator=(initializer_list< _CharT>  __l) 
# 914
{ 
# 915
this->assign(__l.begin(), __l.size()); 
# 916
return *this; 
# 917
} 
# 925
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 928
operator=(const _Tp &__svt) 
# 929
{ return this->assign(__svt); } 
# 936
operator __sv_type() const noexcept 
# 937
{ return __sv_type(data(), size()); } 
# 947
iterator begin() noexcept 
# 948
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data())); } 
# 956
const_iterator begin() const noexcept 
# 957
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data())); } 
# 965
iterator end() noexcept 
# 966
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + size())); } 
# 974
const_iterator end() const noexcept 
# 975
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data() + size())); } 
# 984
reverse_iterator rbegin() noexcept 
# 985
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 994
const_reverse_iterator rbegin() const noexcept 
# 995
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 1004
reverse_iterator rend() noexcept 
# 1005
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 1014
const_reverse_iterator rend() const noexcept 
# 1015
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 1024
const_iterator cbegin() const noexcept 
# 1025
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data())); } 
# 1033
const_iterator cend() const noexcept 
# 1034
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data() + size())); } 
# 1043
const_reverse_iterator crbegin() const noexcept 
# 1044
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 1053
const_reverse_iterator crend() const noexcept 
# 1054
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 1063
size_type size() const noexcept 
# 1064
{ return _M_string_length; } 
# 1070
size_type length() const noexcept 
# 1071
{ return _M_string_length; } 
# 1076
size_type max_size() const noexcept 
# 1077
{ return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; } 
# 1091 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
void resize(size_type __n, _CharT __c); 
# 1105 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
void resize(size_type __n) 
# 1106
{ this->resize(__n, _CharT()); } 
# 1109
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 1114
void shrink_to_fit() noexcept 
# 1115
{ reserve(); } 
#pragma GCC diagnostic pop
# 1132 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type capacity() const noexcept 
# 1133
{ 
# 1134
return (_M_is_local()) ? (size_type)_S_local_capacity : (_M_allocated_capacity); 
# 1136
} 
# 1157 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
void reserve(size_type __res_arg); 
# 1167
void reserve(); 
# 1174
void clear() noexcept 
# 1175
{ _M_set_length(0); } 
# 1181
[[__nodiscard__]] bool 
# 1183
empty() const noexcept 
# 1184
{ return size() == 0; } 
# 1199 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
const_reference operator[](size_type __pos) const noexcept 
# 1200
{ 
# 1201
do { if (std::__is_constant_evaluated() && (!((bool)(__pos <= size())))) { __builtin_unreachable(); }  } while (false); 
# 1202
return _M_data()[__pos]; 
# 1203
} 
# 1217 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
reference operator[](size_type __pos) 
# 1218
{ 
# 1221
do { if (std::__is_constant_evaluated() && (!((bool)(__pos <= size())))) { __builtin_unreachable(); }  } while (false); 
# 1223
; 
# 1224
return _M_data()[__pos]; 
# 1225
} 
# 1239 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
const_reference at(size_type __n) const 
# 1240
{ 
# 1241
if (__n >= size()) { 
# 1242
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1246
return _M_data()[__n]; 
# 1247
} 
# 1261 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
reference at(size_type __n) 
# 1262
{ 
# 1263
if (__n >= size()) { 
# 1264
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1268
return _M_data()[__n]; 
# 1269
} 
# 1278
reference front() noexcept 
# 1279
{ 
# 1280
do { if (std::__is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1281
return operator[](0); 
# 1282
} 
# 1290
const_reference front() const noexcept 
# 1291
{ 
# 1292
do { if (std::__is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1293
return operator[](0); 
# 1294
} 
# 1302
reference back() noexcept 
# 1303
{ 
# 1304
do { if (std::__is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1305
return operator[](size() - 1); 
# 1306
} 
# 1314
const_reference back() const noexcept 
# 1315
{ 
# 1316
do { if (std::__is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1317
return operator[](size() - 1); 
# 1318
} 
# 1329 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &operator+=(const basic_string &__str) 
# 1330
{ return this->append(__str); } 
# 1339
basic_string &operator+=(const _CharT *__s) 
# 1340
{ return this->append(__s); } 
# 1349
basic_string &operator+=(_CharT __c) 
# 1350
{ 
# 1351
push_back(__c); 
# 1352
return *this; 
# 1353
} 
# 1363
basic_string &operator+=(initializer_list< _CharT>  __l) 
# 1364
{ return this->append(__l.begin(), __l.size()); } 
# 1373 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1376
operator+=(const _Tp &__svt) 
# 1377
{ return this->append(__svt); } 
# 1387
basic_string &append(const basic_string &__str) 
# 1388
{ return this->append(__str._M_data(), __str.size()); } 
# 1405 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &append(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1406
{ return this->append(__str._M_data() + __str._M_check(__pos, "basic_string::append"), __str._M_limit(__pos, __n)); 
# 1408
} 
# 1418
basic_string &append(const _CharT *__s, size_type __n) 
# 1419
{ 
# 1420
; 
# 1421
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1422
return _M_append(__s, __n); 
# 1423
} 
# 1432
basic_string &append(const _CharT *__s) 
# 1433
{ 
# 1434
; 
# 1435
const size_type __n = traits_type::length(__s); 
# 1436
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1437
return _M_append(__s, __n); 
# 1438
} 
# 1450 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &append(size_type __n, _CharT __c) 
# 1451
{ return _M_replace_aux(size(), (size_type)0, __n, __c); } 
# 1461
basic_string &append(initializer_list< _CharT>  __l) 
# 1462
{ return this->append(__l.begin(), __l.size()); } 
# 1474 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1475
 = _RequireInputIter< _InputIterator> > basic_string &
# 1481
append(_InputIterator __first, _InputIterator __last) 
# 1482
{ return this->replace(end(), end(), __first, __last); } 
# 1490
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1493
append(const _Tp &__svt) 
# 1494
{ 
# 1495
__sv_type __sv = __svt; 
# 1496
return this->append(__sv.data(), __sv.size()); 
# 1497
} 
# 1506 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1509
append(const _Tp &__svt, size_type __pos, size_type __n = npos) 
# 1510
{ 
# 1511
__sv_type __sv = __svt; 
# 1512
return _M_append(__sv.data() + std::__sv_check(__sv.size(), __pos, "basic_string::append"), std::__sv_limit(__sv.size(), __pos, __n)); 
# 1515
} 
# 1524
void push_back(_CharT __c) 
# 1525
{ 
# 1526
const size_type __size = size(); 
# 1527
if ((__size + 1) > capacity()) { 
# 1528
_M_mutate(__size, (size_type)0, 0, (size_type)1); }  
# 1529
traits_type::assign(this->_M_data()[__size], __c); 
# 1530
_M_set_length(__size + 1); 
# 1531
} 
# 1540
basic_string &assign(const basic_string &__str) 
# 1541
{ 
# 1543
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 1544
{ 
# 1545
if ((!_Alloc_traits::_S_always_equal()) && (!_M_is_local()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 1547
{ 
# 1550
if (__str.size() <= _S_local_capacity) 
# 1551
{ 
# 1552
_M_destroy(_M_allocated_capacity); 
# 1553
_M_data(_M_use_local_data()); 
# 1554
_M_set_length(0); 
# 1555
} else 
# 1557
{ 
# 1558
const auto __len = __str.size(); 
# 1559
auto __alloc = __str._M_get_allocator(); 
# 1561
auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1); 
# 1562
_M_destroy(_M_allocated_capacity); 
# 1563
_M_data(__ptr); 
# 1564
_M_capacity(__len); 
# 1565
_M_set_length(__len); 
# 1566
}  
# 1567
}  
# 1568
std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator()); 
# 1569
}  
# 1571
_M_assign(__str); 
# 1572
return *this; 
# 1573
} 
# 1586 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &assign(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 1588
{ 
# 1591
return (*this) = std::move(__str); 
# 1592
} 
# 1610 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &assign(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1611
{ return _M_replace((size_type)0, size(), __str._M_data() + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n)); 
# 1613
} 
# 1627 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s, size_type __n) 
# 1628
{ 
# 1629
; 
# 1630
return _M_replace((size_type)0, size(), __s, __n); 
# 1631
} 
# 1644 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s) 
# 1645
{ 
# 1646
; 
# 1647
return _M_replace((size_type)0, size(), __s, traits_type::length(__s)); 
# 1649
} 
# 1662 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &assign(size_type __n, _CharT __c) 
# 1663
{ return _M_replace_aux((size_type)0, size(), __n, __c); } 
# 1674 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1675
 = _RequireInputIter< _InputIterator> > basic_string &
# 1681
assign(_InputIterator __first, _InputIterator __last) 
# 1682
{ return this->replace(begin(), end(), __first, __last); } 
# 1692
basic_string &assign(initializer_list< _CharT>  __l) 
# 1693
{ return this->assign(__l.begin(), __l.size()); } 
# 1702 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1705
assign(const _Tp &__svt) 
# 1706
{ 
# 1707
__sv_type __sv = __svt; 
# 1708
return this->assign(__sv.data(), __sv.size()); 
# 1709
} 
# 1718 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1721
assign(const _Tp &__svt, size_type __pos, size_type __n = npos) 
# 1722
{ 
# 1723
__sv_type __sv = __svt; 
# 1724
return _M_replace((size_type)0, size(), __sv.data() + std::__sv_check(__sv.size(), __pos, "basic_string::assign"), std::__sv_limit(__sv.size(), __pos, __n)); 
# 1728
} 
# 1749 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
iterator insert(const_iterator __p, size_type __n, _CharT __c) 
# 1750
{ 
# 1751
; 
# 1752
const size_type __pos = __p - begin(); 
# 1753
this->replace(__p, __p, __n, __c); 
# 1754
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1755
} 
# 1790 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1791
 = _RequireInputIter< _InputIterator> > iterator 
# 1794
insert(const_iterator __p, _InputIterator __beg, _InputIterator __end) 
# 1795
{ 
# 1796
; 
# 1797
const size_type __pos = __p - begin(); 
# 1798
this->replace(__p, __p, __beg, __end); 
# 1799
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1800
} 
# 1829 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
iterator insert(const_iterator __p, initializer_list< _CharT>  __l) 
# 1830
{ return this->insert(__p, __l.begin(), __l.end()); } 
# 1857 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str) 
# 1858
{ return this->replace(__pos1, (size_type)0, __str._M_data(), __str.size()); 
# 1859
} 
# 1881 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str, size_type 
# 1882
__pos2, size_type __n = npos) 
# 1883
{ return this->replace(__pos1, (size_type)0, __str._M_data() + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n)); 
# 1885
} 
# 1905 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s, size_type __n) 
# 1906
{ return this->replace(__pos, (size_type)0, __s, __n); } 
# 1925 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s) 
# 1926
{ 
# 1927
; 
# 1928
return this->replace(__pos, (size_type)0, __s, traits_type::length(__s)); 
# 1930
} 
# 1950 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &insert(size_type __pos, size_type __n, _CharT __c) 
# 1951
{ return _M_replace_aux(_M_check(__pos, "basic_string::insert"), (size_type)0, __n, __c); 
# 1952
} 
# 1969 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
iterator insert(__const_iterator __p, _CharT __c) 
# 1970
{ 
# 1971
; 
# 1972
const size_type __pos = __p - begin(); 
# 1973
_M_replace_aux(__pos, (size_type)0, (size_type)1, __c); 
# 1974
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1975
} 
# 1984 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1987
insert(size_type __pos, const _Tp &__svt) 
# 1988
{ 
# 1989
__sv_type __sv = __svt; 
# 1990
return this->insert(__pos, __sv.data(), __sv.size()); 
# 1991
} 
# 2001 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 2004
insert(size_type __pos1, const _Tp &__svt, size_type 
# 2005
__pos2, size_type __n = npos) 
# 2006
{ 
# 2007
__sv_type __sv = __svt; 
# 2008
return this->replace(__pos1, (size_type)0, __sv.data() + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"), std::__sv_limit(__sv.size(), __pos2, __n)); 
# 2012
} 
# 2032 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &erase(size_type __pos = 0, size_type __n = npos) 
# 2033
{ 
# 2034
_M_check(__pos, "basic_string::erase"); 
# 2035
if (__n == npos) { 
# 2036
_M_set_length(__pos); } else { 
# 2037
if (__n != 0) { 
# 2038
_M_erase(__pos, _M_limit(__pos, __n)); }  }  
# 2039
return *this; 
# 2040
} 
# 2052 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
iterator erase(__const_iterator __position) 
# 2053
{ 
# 2055
; 
# 2056
const size_type __pos = __position - begin(); 
# 2057
_M_erase(__pos, (size_type)1); 
# 2058
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 2059
} 
# 2072 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
iterator erase(__const_iterator __first, __const_iterator __last) 
# 2073
{ 
# 2075
; 
# 2076
const size_type __pos = __first - begin(); 
# 2077
if (__last == end()) { 
# 2078
_M_set_length(__pos); } else { 
# 2080
_M_erase(__pos, __last - __first); }  
# 2081
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 2082
} 
# 2092
void pop_back() noexcept 
# 2093
{ 
# 2094
do { if (std::__is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 2095
_M_erase(size() - 1, 1); 
# 2096
} 
# 2118 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n, const basic_string &__str) 
# 2119
{ return this->replace(__pos, __n, __str._M_data(), __str.size()); } 
# 2141 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 2142
__pos2, size_type __n2 = npos) 
# 2143
{ return this->replace(__pos1, __n1, __str._M_data() + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2)); 
# 2145
} 
# 2167 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 2168
__n2) 
# 2169
{ 
# 2170
; 
# 2171
return _M_replace(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __s, __n2); 
# 2173
} 
# 2193 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s) 
# 2194
{ 
# 2195
; 
# 2196
return this->replace(__pos, __n1, __s, traits_type::length(__s)); 
# 2197
} 
# 2218 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) 
# 2219
{ return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c); 
# 2220
} 
# 2237 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const basic_string &
# 2238
__str) 
# 2239
{ return this->replace(__i1, __i2, __str._M_data(), __str.size()); } 
# 2258 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2259
__s, size_type __n) 
# 2260
{ 
# 2262
; 
# 2263
return this->replace(__i1 - begin(), __i2 - __i1, __s, __n); 
# 2264
} 
# 2281 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *__s) 
# 2282
{ 
# 2283
; 
# 2284
return this->replace(__i1, __i2, __s, traits_type::length(__s)); 
# 2285
} 
# 2303 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, size_type __n, _CharT 
# 2304
__c) 
# 2305
{ 
# 2307
; 
# 2308
return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c); 
# 2309
} 
# 2327 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _InputIterator, class 
# 2328
 = _RequireInputIter< _InputIterator> > basic_string &
# 2331
replace(const_iterator __i1, const_iterator __i2, _InputIterator 
# 2332
__k1, _InputIterator __k2) 
# 2333
{ 
# 2335
; 
# 2336
; 
# 2337
return this->_M_replace_dispatch(__i1, __i2, __k1, __k2, __false_type()); 
# 2339
} 
# 2362 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, _CharT *
# 2363
__k1, _CharT *__k2) 
# 2364
{ 
# 2366
; 
# 2367
; 
# 2368
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2370
} 
# 2374
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2375
__k1, const _CharT *__k2) 
# 2376
{ 
# 2378
; 
# 2379
; 
# 2380
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2382
} 
# 2386
basic_string &replace(__const_iterator __i1, __const_iterator __i2, iterator 
# 2387
__k1, iterator __k2) 
# 2388
{ 
# 2390
; 
# 2391
; 
# 2392
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2394
} 
# 2398
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const_iterator 
# 2399
__k1, const_iterator __k2) 
# 2400
{ 
# 2402
; 
# 2403
; 
# 2404
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2406
} 
# 2424 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string &replace(const_iterator __i1, const_iterator __i2, initializer_list< _CharT>  
# 2425
__l) 
# 2426
{ return this->replace(__i1, __i2, __l.begin(), __l.size()); } 
# 2437 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 2440
replace(size_type __pos, size_type __n, const _Tp &__svt) 
# 2441
{ 
# 2442
__sv_type __sv = __svt; 
# 2443
return this->replace(__pos, __n, __sv.data(), __sv.size()); 
# 2444
} 
# 2455 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 2458
replace(size_type __pos1, size_type __n1, const _Tp &__svt, size_type 
# 2459
__pos2, size_type __n2 = npos) 
# 2460
{ 
# 2461
__sv_type __sv = __svt; 
# 2462
return this->replace(__pos1, __n1, __sv.data() + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"), std::__sv_limit(__sv.size(), __pos2, __n2)); 
# 2466
} 
# 2477 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 2480
replace(const_iterator __i1, const_iterator __i2, const _Tp &__svt) 
# 2481
{ 
# 2482
__sv_type __sv = __svt; 
# 2483
return this->replace(__i1 - begin(), __i2 - __i1, __sv); 
# 2484
} 
# 2491
private: 
# 2488
template< class _Integer> basic_string &
# 2491
_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _Integer 
# 2492
__n, _Integer __val, __true_type) 
# 2493
{ return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); } 
# 2495
template< class _InputIterator> basic_string &_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type); 
# 2504
basic_string &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c); 
# 2509
basic_string &_M_replace(size_type __pos, size_type __len1, const _CharT * __s, const size_type __len2); 
# 2514
basic_string &_M_append(const _CharT * __s, size_type __n); 
# 2532 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
public: size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const; 
# 2543 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
void swap(basic_string & __s) noexcept; 
# 2554 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
const _CharT *c_str() const noexcept 
# 2555
{ return _M_data(); } 
# 2567 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
const _CharT *data() const noexcept 
# 2568
{ return _M_data(); } 
# 2579 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
_CharT *data() noexcept 
# 2580
{ return _M_data(); } 
# 2588
allocator_type get_allocator() const noexcept 
# 2589
{ return _M_get_allocator(); } 
# 2605 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2620 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2622
{ return this->find(__str.data(), __pos, __str.size()); } 
# 2631 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2634
find(const _Tp &__svt, size_type __pos = 0) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2636
{ 
# 2637
__sv_type __sv = __svt; 
# 2638
return this->find(__sv.data(), __pos, __sv.size()); 
# 2639
} 
# 2654 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2655
{ 
# 2656
; 
# 2657
return this->find(__s, __pos, traits_type::length(__s)); 
# 2658
} 
# 2672 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 2686 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type rfind(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2688
{ return this->rfind(__str.data(), __pos, __str.size()); } 
# 2697 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2700
rfind(const _Tp &__svt, size_type __pos = npos) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2702
{ 
# 2703
__sv_type __sv = __svt; 
# 2704
return this->rfind(__sv.data(), __pos, __sv.size()); 
# 2705
} 
# 2722 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2737 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type rfind(const _CharT *__s, size_type __pos = npos) const 
# 2738
{ 
# 2739
; 
# 2740
return this->rfind(__s, __pos, traits_type::length(__s)); 
# 2741
} 
# 2755 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 2770 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_first_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2772
{ return this->find_first_of(__str.data(), __pos, __str.size()); } 
# 2782 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2785
find_first_of(const _Tp &__svt, size_type __pos = 0) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2787
{ 
# 2788
__sv_type __sv = __svt; 
# 2789
return this->find_first_of(__sv.data(), __pos, __sv.size()); 
# 2790
} 
# 2807 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2822 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2824
{ 
# 2825
; 
# 2826
return this->find_first_of(__s, __pos, traits_type::length(__s)); 
# 2827
} 
# 2843 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 2844
{ return this->find(__c, __pos); } 
# 2859 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_last_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2861
{ return this->find_last_of(__str.data(), __pos, __str.size()); } 
# 2871 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2874
find_last_of(const _Tp &__svt, size_type __pos = npos) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2876
{ 
# 2877
__sv_type __sv = __svt; 
# 2878
return this->find_last_of(__sv.data(), __pos, __sv.size()); 
# 2879
} 
# 2896 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2911 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2913
{ 
# 2914
; 
# 2915
return this->find_last_of(__s, __pos, traits_type::length(__s)); 
# 2916
} 
# 2932 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 2933
{ return this->rfind(__c, __pos); } 
# 2947 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_first_not_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2949
{ return this->find_first_not_of(__str.data(), __pos, __str.size()); } 
# 2959 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2962
find_first_not_of(const _Tp &__svt, size_type __pos = 0) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2964
{ 
# 2965
__sv_type __sv = __svt; 
# 2966
return this->find_first_not_of(__sv.data(), __pos, __sv.size()); 
# 2967
} 
# 2984 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2999 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 3001
{ 
# 3002
; 
# 3003
return this->find_first_not_of(__s, __pos, traits_type::length(__s)); 
# 3004
} 
# 3018 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 3034 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_last_not_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 3036
{ return this->find_last_not_of(__str.data(), __pos, __str.size()); } 
# 3046 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 3049
find_last_not_of(const _Tp &__svt, size_type __pos = npos) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 3051
{ 
# 3052
__sv_type __sv = __svt; 
# 3053
return this->find_last_not_of(__sv.data(), __pos, __sv.size()); 
# 3054
} 
# 3071 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 3086 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 3088
{ 
# 3089
; 
# 3090
return this->find_last_not_of(__s, __pos, traits_type::length(__s)); 
# 3091
} 
# 3105 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 3122 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
basic_string substr(size_type __pos = 0, size_type __n = npos) const 
# 3123
{ return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n); 
# 3124
} 
# 3142 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
int compare(const basic_string &__str) const 
# 3143
{ 
# 3144
const size_type __size = size(); 
# 3145
const size_type __osize = __str.size(); 
# 3146
const size_type __len = std::min(__size, __osize); 
# 3148
int __r = traits_type::compare(_M_data(), __str.data(), __len); 
# 3149
if (!__r) { 
# 3150
__r = (_S_compare)(__size, __osize); }  
# 3151
return __r; 
# 3152
} 
# 3160
template< class _Tp> _If_sv< _Tp, int>  
# 3163
compare(const _Tp &__svt) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 3165
{ 
# 3166
__sv_type __sv = __svt; 
# 3167
const size_type __size = size(); 
# 3168
const size_type __osize = __sv.size(); 
# 3169
const size_type __len = std::min(__size, __osize); 
# 3171
int __r = traits_type::compare(_M_data(), __sv.data(), __len); 
# 3172
if (!__r) { 
# 3173
__r = (_S_compare)(__size, __osize); }  
# 3174
return __r; 
# 3175
} 
# 3185 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, int>  
# 3188
compare(size_type __pos, size_type __n, const _Tp &__svt) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 3190
{ 
# 3191
__sv_type __sv = __svt; 
# 3192
return ((basic_string_view< _CharT, _Traits> )(*this)).substr(__pos, __n).compare(__sv); 
# 3193
} 
# 3205 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, int>  
# 3208
compare(size_type __pos1, size_type __n1, const _Tp &__svt, size_type 
# 3209
__pos2, size_type __n2 = npos) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 3211
{ 
# 3212
__sv_type __sv = __svt; 
# 3213
return ((basic_string_view< _CharT, _Traits> )(*this)).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2)); 
# 3215
} 
# 3239 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n, const basic_string & __str) const; 
# 3266 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2 = npos) const; 
# 3285 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
int compare(const _CharT * __s) const noexcept; 
# 3310 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s) const; 
# 3338 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const; 
# 3382 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class , class , class > friend class basic_stringbuf; 
# 3383
}; 
# 3384
}
# 3386
}
# 3389
namespace std __attribute((__visibility__("default"))) { 
# 3394
inline namespace __cxx11 { 
# 3395
template< class _InputIterator, class _CharT = typename iterator_traits< _InputIterator> ::value_type, class 
# 3397
_Allocator = allocator< _CharT> , class 
# 3398
 = _RequireInputIter< _InputIterator> , class 
# 3399
 = _RequireAllocator< _Allocator> > 
# 3400
basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())->basic_string< _CharT, char_traits< _CharT> , _Allocator> ; 
# 3405
template< class _CharT, class _Traits, class 
# 3406
_Allocator = allocator< _CharT> , class 
# 3407
 = _RequireAllocator< _Allocator> > 
# 3408
basic_string(basic_string_view< _CharT, _Traits> , const _Allocator & = _Allocator())->basic_string< _CharT, _Traits, _Allocator> ; 
# 3411
template< class _CharT, class _Traits, class 
# 3412
_Allocator = allocator< _CharT> , class 
# 3413
 = _RequireAllocator< _Allocator> > 
# 3414
basic_string(basic_string_view< _CharT, _Traits> , typename basic_string< _CharT, _Traits, _Allocator> ::size_type, typename basic_string< _CharT, _Traits, _Allocator> ::size_type, const _Allocator & = _Allocator())->basic_string< _CharT, _Traits, _Allocator> ; 
# 3419
}
# 3429 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3432
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3433
__rhs) 
# 3434
{ 
# 3435
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 3436
__str.append(__rhs); 
# 3437
return __str; 
# 3438
} 
# 3446
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(const _CharT * __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 3458
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 3469
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3472
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 3473
__rhs) 
# 3474
{ 
# 3475
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 3476
__str.append(__rhs); 
# 3477
return __str; 
# 3478
} 
# 3486
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3489
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, _CharT __rhs) 
# 3490
{ 
# 3491
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 3492
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 3493
__string_type __str(__lhs); 
# 3494
__str.append((__size_type)1, __rhs); 
# 3495
return __str; 
# 3496
} 
# 3499
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3502
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3503
__rhs) 
# 3504
{ return std::move(__lhs.append(__rhs)); } 
# 3506
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3509
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 3510
__rhs) 
# 3511
{ return std::move(__rhs.insert(0, __lhs)); } 
# 3513
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3516
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 3517
__rhs) 
# 3518
{ 
# 3520
using _Alloc_traits = allocator_traits< _Alloc> ; 
# 3521
bool __use_rhs = false; 
# 3522
if constexpr (typename allocator_traits< _Alloc> ::is_always_equal{}) { 
# 3523
__use_rhs = true; } else { 
# 3524
if (__lhs.get_allocator() == __rhs.get_allocator()) { 
# 3525
__use_rhs = true; }  }  
# 3526
if (__use_rhs) 
# 3528
{ 
# 3529
const auto __size = __lhs.size() + __rhs.size(); 
# 3530
if ((__size > __lhs.capacity()) && (__size <= __rhs.capacity())) { 
# 3531
return std::move(__rhs.insert(0, __lhs)); }  
# 3532
}  
# 3533
return std::move(__lhs.append(__rhs)); 
# 3534
} 
# 3536
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3539
operator+(const _CharT *__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 3540
__rhs) 
# 3541
{ return std::move(__rhs.insert(0, __lhs)); } 
# 3543
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3546
operator+(_CharT __lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 3547
__rhs) 
# 3548
{ return std::move(__rhs.insert(0, 1, __lhs)); } 
# 3550
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3553
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const _CharT *
# 3554
__rhs) 
# 3555
{ return std::move(__lhs.append(__rhs)); } 
# 3557
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 3560
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, _CharT 
# 3561
__rhs) 
# 3562
{ return std::move(__lhs.append(1, __rhs)); } 
# 3572 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3575
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3576
__rhs) noexcept 
# 3578
{ return __lhs.compare(__rhs) == 0; } 
# 3580
template< class _CharT> inline typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, bool> ::__type 
# 3584
operator==(const __cxx11::basic_string< _CharT>  &__lhs, const __cxx11::basic_string< _CharT>  &
# 3585
__rhs) noexcept 
# 3586
{ return ((__lhs.size() == __rhs.size()) && (!std::template char_traits< _CharT> ::compare(__lhs.data(), __rhs.data(), __lhs.size()))); 
# 3588
} 
# 3596
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3599
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 3600
__rhs) 
# 3601
{ return __lhs.compare(__rhs) == 0; } 
# 3638 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3640
operator==(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3641
__rhs) 
# 3642
{ return __rhs.compare(__lhs) == 0; } 
# 3651 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3653
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3654
__rhs) noexcept 
# 3656
{ return !(__lhs == __rhs); } 
# 3664
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3666
operator!=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3667
__rhs) 
# 3668
{ return !(__lhs == __rhs); } 
# 3676
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3678
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 3679
__rhs) 
# 3680
{ return !(__lhs == __rhs); } 
# 3689 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3691
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3692
__rhs) noexcept 
# 3694
{ return __lhs.compare(__rhs) < 0; } 
# 3702
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3704
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 3705
__rhs) 
# 3706
{ return __lhs.compare(__rhs) < 0; } 
# 3714
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3716
operator<(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3717
__rhs) 
# 3718
{ return __rhs.compare(__lhs) > 0; } 
# 3727 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3729
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3730
__rhs) noexcept 
# 3732
{ return __lhs.compare(__rhs) > 0; } 
# 3740
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3742
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 3743
__rhs) 
# 3744
{ return __lhs.compare(__rhs) > 0; } 
# 3752
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3754
operator>(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3755
__rhs) 
# 3756
{ return __rhs.compare(__lhs) < 0; } 
# 3765 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3767
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3768
__rhs) noexcept 
# 3770
{ return __lhs.compare(__rhs) <= 0; } 
# 3778
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3780
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 3781
__rhs) 
# 3782
{ return __lhs.compare(__rhs) <= 0; } 
# 3790
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3792
operator<=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3793
__rhs) 
# 3794
{ return __rhs.compare(__lhs) >= 0; } 
# 3803 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3805
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3806
__rhs) noexcept 
# 3808
{ return __lhs.compare(__rhs) >= 0; } 
# 3816
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3818
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 3819
__rhs) 
# 3820
{ return __lhs.compare(__rhs) >= 0; } 
# 3828
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 3830
operator>=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3831
__rhs) 
# 3832
{ return __rhs.compare(__lhs) <= 0; } 
# 3842 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline void 
# 3845
swap(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3846
__rhs) noexcept(noexcept(__lhs.swap(__rhs))) 
# 3848
{ __lhs.swap(__rhs); } 
# 3863 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str); 
# 3870
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str); 
# 3881 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_ostream< _CharT, _Traits>  &
# 3883
operator<<(basic_ostream< _CharT, _Traits>  &__os, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3884
__str) 
# 3885
{ 
# 3888
return __ostream_insert(__os, __str.data(), __str.size()); 
# 3889
} 
# 3904 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &getline(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str, _CharT __delim); 
# 3921 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 3923
getline(basic_istream< _CharT, _Traits>  &__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3924
__str) 
# 3925
{ return std::getline(__is, __str, __is.widen('\n')); } 
# 3929
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 3931
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3932
__str, _CharT __delim) 
# 3933
{ return std::getline(__is, __str, __delim); } 
# 3936
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 3938
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 3939
__str) 
# 3940
{ return std::getline(__is, __str); } 
# 3945
template<> basic_istream< char>  &getline(basic_istream< char>  & __in, __cxx11::basic_string< char>  & __str, char __delim); 
# 3951
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __in, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim); 
# 3956
}
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 14 "/usr/include/bits/types/__fpos_t.h" 3
typedef 
# 10
struct _G_fpos_t { 
# 12
__off_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos_t; 
# 14 "/usr/include/bits/types/__fpos64_t.h" 3
typedef 
# 10
struct _G_fpos64_t { 
# 12
__off64_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos64_t; 
# 35 "/usr/include/bits/types/struct_FILE.h" 3
struct _IO_FILE; 
# 36
struct _IO_marker; 
# 37
struct _IO_codecvt; 
# 38
struct _IO_wide_data; 
# 43
typedef void _IO_lock_t; 
# 49
struct _IO_FILE { 
# 51
int _flags; 
# 54
char *_IO_read_ptr; 
# 55
char *_IO_read_end; 
# 56
char *_IO_read_base; 
# 57
char *_IO_write_base; 
# 58
char *_IO_write_ptr; 
# 59
char *_IO_write_end; 
# 60
char *_IO_buf_base; 
# 61
char *_IO_buf_end; 
# 64
char *_IO_save_base; 
# 65
char *_IO_backup_base; 
# 66
char *_IO_save_end; 
# 68
_IO_marker *_markers; 
# 70
_IO_FILE *_chain; 
# 72
int _fileno; 
# 73
int _flags2; 
# 74
__off_t _old_offset; 
# 77
unsigned short _cur_column; 
# 78
signed char _vtable_offset; 
# 79
char _shortbuf[1]; 
# 81
_IO_lock_t *_lock; 
# 89
__off64_t _offset; 
# 91
_IO_codecvt *_codecvt; 
# 92
_IO_wide_data *_wide_data; 
# 93
_IO_FILE *_freeres_list; 
# 94
void *_freeres_buf; 
# 95
::size_t __pad5; 
# 96
int _mode; 
# 98
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(::size_t)]; 
# 99
}; 
# 27 "/usr/include/bits/types/cookie_io_functions_t.h" 3
typedef __ssize_t cookie_read_function_t(void * __cookie, char * __buf, ::size_t __nbytes); 
# 36
typedef __ssize_t cookie_write_function_t(void * __cookie, const char * __buf, ::size_t __nbytes); 
# 45
typedef int cookie_seek_function_t(void * __cookie, __off64_t * __pos, int __w); 
# 48
typedef int cookie_close_function_t(void * __cookie); 
# 61
typedef 
# 55
struct _IO_cookie_io_functions_t { 
# 57
cookie_read_function_t *read; 
# 58
cookie_write_function_t *write; 
# 59
cookie_seek_function_t *seek; 
# 60
cookie_close_function_t *close; 
# 61
} cookie_io_functions_t; 
# 52 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 84 "/usr/include/stdio.h" 3
typedef __fpos_t fpos_t; 
# 89
typedef __fpos64_t fpos64_t; 
# 143 "/usr/include/stdio.h" 3
extern FILE *stdin; 
# 144
extern FILE *stdout; 
# 145
extern FILE *stderr; 
# 152
extern int remove(const char * __filename) noexcept(true); 
# 154
extern int rename(const char * __old, const char * __new) noexcept(true); 
# 158
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) noexcept(true); 
# 170 "/usr/include/stdio.h" 3
extern int renameat2(int __oldfd, const char * __old, int __newfd, const char * __new, unsigned __flags) noexcept(true); 
# 178
extern int fclose(FILE * __stream); 
# 188 "/usr/include/stdio.h" 3
extern FILE *tmpfile()
# 189
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 200 "/usr/include/stdio.h" 3
extern FILE *tmpfile64()
# 201
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 205
extern char *tmpnam(char [20]) noexcept(true); 
# 210
extern char *tmpnam_r(char  __s[20]) noexcept(true); 
# 222 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) noexcept(true)
# 223
 __attribute((__malloc__)) __attribute((__malloc__(__builtin_free, 1))); 
# 230
extern int fflush(FILE * __stream); 
# 239 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream); 
# 249 "/usr/include/stdio.h" 3
extern int fcloseall(); 
# 258 "/usr/include/stdio.h" 3
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 260
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 265
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 283 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 285
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 286
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 293
extern FILE *fdopen(int __fd, const char * __modes) noexcept(true)
# 294
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 300
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, cookie_io_functions_t __io_funcs) noexcept(true)
# 303
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 308
extern FILE *fmemopen(void * __s, ::size_t __len, const char * __modes) noexcept(true)
# 309
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 314
extern FILE *open_memstream(char ** __bufloc, ::size_t * __sizeloc) noexcept(true)
# 315
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 321
extern __FILE *open_wmemstream(wchar_t ** __bufloc, ::size_t * __sizeloc) noexcept(true)
# 322
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 328
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) noexcept(true); 
# 332
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, ::size_t __n) noexcept(true); 
# 338
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, ::size_t __size) noexcept(true); 
# 342
extern void setlinebuf(FILE * __stream) noexcept(true); 
# 350
extern int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 356
extern int printf(const char *__restrict__ __format, ...); 
# 358
extern int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true); 
# 365
extern int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 371
extern int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 373
extern int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true); 
# 378
extern int snprintf(char *__restrict__ __s, ::size_t __maxlen, const char *__restrict__ __format, ...) noexcept(true)
# 380
 __attribute((__format__(__printf__, 3, 4))); 
# 382
extern int vsnprintf(char *__restrict__ __s, ::size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true)
# 384
 __attribute((__format__(__printf__, 3, 0))); 
# 390
extern int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) noexcept(true)
# 392
 __attribute((__format__(__printf__, 2, 0))); 
# 393
extern int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) noexcept(true)
# 395
 __attribute((__format__(__printf__, 2, 3))); 
# 396
extern int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) noexcept(true)
# 398
 __attribute((__format__(__printf__, 2, 3))); 
# 403
extern int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 405
 __attribute((__format__(__printf__, 2, 0))); 
# 406
extern int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 407
 __attribute((__format__(__printf__, 2, 3))); 
# 415
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 421
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 423
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_sscanf"); 
# 434 "/usr/include/stdio.h" 3
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 437
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 439
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_sscanf"); 
# 459 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 461
 __attribute((__format__(__scanf__, 2, 0))); 
# 467
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 468
 __attribute((__format__(__scanf__, 1, 0))); 
# 471
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vsscanf")
# 473
 __attribute((__format__(__scanf__, 2, 0))); 
# 479
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 483
 __attribute((__format__(__scanf__, 2, 0))); 
# 484
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 486
 __attribute((__format__(__scanf__, 1, 0))); 
# 487
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vsscanf")
# 491
 __attribute((__format__(__scanf__, 2, 0))); 
# 513 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream); 
# 514
extern int getc(FILE * __stream); 
# 520
extern int getchar(); 
# 527
extern int getc_unlocked(FILE * __stream); 
# 528
extern int getchar_unlocked(); 
# 538 "/usr/include/stdio.h" 3
extern int fgetc_unlocked(FILE * __stream); 
# 549 "/usr/include/stdio.h" 3
extern int fputc(int __c, FILE * __stream); 
# 550
extern int putc(int __c, FILE * __stream); 
# 556
extern int putchar(int __c); 
# 565 "/usr/include/stdio.h" 3
extern int fputc_unlocked(int __c, FILE * __stream); 
# 573
extern int putc_unlocked(int __c, FILE * __stream); 
# 574
extern int putchar_unlocked(int __c); 
# 581
extern int getw(FILE * __stream); 
# 584
extern int putw(int __w, FILE * __stream); 
# 592
extern char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream)
# 593
 __attribute((__access__(__write_only__ , 1 , 2 ))); 
# 615 "/usr/include/stdio.h" 3
extern char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream)
# 617
 __attribute((__access__(__write_only__ , 1 , 2 ))); 
# 632 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 635
extern __ssize_t getdelim(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 645
extern __ssize_t getline(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, FILE *__restrict__ __stream); 
# 655
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 661
extern int puts(const char * __s); 
# 668
extern int ungetc(int __c, FILE * __stream); 
# 675
extern ::size_t fread(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream); 
# 681
extern ::size_t fwrite(const void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __s); 
# 691 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 702 "/usr/include/stdio.h" 3
extern ::size_t fread_unlocked(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream); 
# 704
extern ::size_t fwrite_unlocked(const void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream); 
# 713
extern int fseek(FILE * __stream, long __off, int __whence); 
# 718
extern long ftell(FILE * __stream); 
# 723
extern void rewind(FILE * __stream); 
# 736 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 741
extern __off_t ftello(FILE * __stream); 
# 760 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 765
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 779 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 780
extern __off64_t ftello64(FILE * __stream); 
# 781
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 782
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 786
extern void clearerr(FILE * __stream) noexcept(true); 
# 788
extern int feof(FILE * __stream) noexcept(true); 
# 790
extern int ferror(FILE * __stream) noexcept(true); 
# 794
extern void clearerr_unlocked(FILE * __stream) noexcept(true); 
# 795
extern int feof_unlocked(FILE * __stream) noexcept(true); 
# 796
extern int ferror_unlocked(FILE * __stream) noexcept(true); 
# 804
extern void perror(const char * __s); 
# 809
extern int fileno(FILE * __stream) noexcept(true); 
# 814
extern int fileno_unlocked(FILE * __stream) noexcept(true); 
# 823 "/usr/include/stdio.h" 3
extern int pclose(FILE * __stream); 
# 829
extern FILE *popen(const char * __command, const char * __modes)
# 830
 __attribute((__malloc__)) __attribute((__malloc__(pclose, 1))); 
# 837
extern char *ctermid(char * __s) noexcept(true)
# 838
 __attribute((__access__(__write_only__ , 1 ))); 
# 844
extern char *cuserid(char * __s)
# 845
 __attribute((__access__(__write_only__ , 1 ))); 
# 850
struct obstack; 
# 853
extern int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) noexcept(true)
# 855
 __attribute((__format__(__printf__, 2, 3))); 
# 856
extern int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) noexcept(true)
# 859
 __attribute((__format__(__printf__, 2, 0))); 
# 867
extern void flockfile(FILE * __stream) noexcept(true); 
# 871
extern int ftrylockfile(FILE * __stream) noexcept(true); 
# 874
extern void funlockfile(FILE * __stream) noexcept(true); 
# 885 "/usr/include/stdio.h" 3
extern int __uflow(FILE *); 
# 886
extern int __overflow(FILE *, int); 
# 909 "/usr/include/stdio.h" 3
}
# 96 "/usr/include/c++/12.2.1/cstdio" 3
namespace std { 
# 98
using ::FILE;
# 99
using ::fpos_t;
# 101
using ::clearerr;
# 102
using ::fclose;
# 103
using ::feof;
# 104
using ::ferror;
# 105
using ::fflush;
# 106
using ::fgetc;
# 107
using ::fgetpos;
# 108
using ::fgets;
# 109
using ::fopen;
# 110
using ::fprintf;
# 111
using ::fputc;
# 112
using ::fputs;
# 113
using ::fread;
# 114
using ::freopen;
# 115
using ::fscanf;
# 116
using ::fseek;
# 117
using ::fsetpos;
# 118
using ::ftell;
# 119
using ::fwrite;
# 120
using ::getc;
# 121
using ::getchar;
# 126
using ::perror;
# 127
using ::printf;
# 128
using ::putc;
# 129
using ::putchar;
# 130
using ::puts;
# 131
using ::remove;
# 132
using ::rename;
# 133
using ::rewind;
# 134
using ::scanf;
# 135
using ::setbuf;
# 136
using ::setvbuf;
# 137
using ::sprintf;
# 138
using ::sscanf;
# 139
using ::tmpfile;
# 141
using ::tmpnam;
# 143
using ::ungetc;
# 144
using ::vfprintf;
# 145
using ::vprintf;
# 146
using ::vsprintf;
# 147
}
# 157 "/usr/include/c++/12.2.1/cstdio" 3
namespace __gnu_cxx { 
# 175 "/usr/include/c++/12.2.1/cstdio" 3
using ::snprintf;
# 176
using ::vfscanf;
# 177
using ::vscanf;
# 178
using ::vsnprintf;
# 179
using ::vsscanf;
# 181
}
# 183
namespace std { 
# 185
using __gnu_cxx::snprintf;
# 186
using __gnu_cxx::vfscanf;
# 187
using __gnu_cxx::vscanf;
# 188
using __gnu_cxx::vsnprintf;
# 189
using __gnu_cxx::vsscanf;
# 190
}
# 34 "/usr/include/errno.h" 3
extern "C" {
# 37
extern int *__errno_location() noexcept(true) __attribute((const)); 
# 45
extern char *program_invocation_name; 
# 46
extern char *program_invocation_short_name; 
# 22 "/usr/include/bits/types/error_t.h" 3
typedef int error_t; 
# 52 "/usr/include/errno.h" 3
}
# 46 "/usr/include/c++/12.2.1/ext/string_conversions.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 51
template< class _TRet, class _Ret = _TRet, class _CharT, class ...
# 52
_Base> _Ret 
# 54
__stoa(_TRet (*__convf)(const _CharT *, _CharT **, _Base ...), const char *
# 55
__name, const _CharT *__str, std::size_t *__idx, _Base ...
# 56
__base) 
# 57
{ 
# 58
_Ret __ret; 
# 60
_CharT *__endptr; 
# 66
const 
# 62
struct _Save_errno { 
# 63
_Save_errno() : _M_errno(*__errno_location()) { (*__errno_location()) = 0; } 
# 64
~_Save_errno() { if ((*__errno_location()) == 0) { (*__errno_location()) = (_M_errno); }  } 
# 65
int _M_errno; 
# 66
} __save_errno; 
# 68
struct _Range_chk { 
# 70
static bool _S_chk(_TRet, std::false_type) { return false; } 
# 73
static bool _S_chk(_TRet __val, std::true_type) 
# 74
{ 
# 75
return (__val < ((_TRet)__numeric_traits< int> ::__min)) || (__val > ((_TRet)__numeric_traits< int> ::__max)); 
# 77
} 
# 78
}; 
# 80
const _TRet __tmp = __convf(__str, &__endptr, __base...); 
# 82
if (__endptr == __str) { 
# 83
std::__throw_invalid_argument(__name); } else { 
# 84
if (((*__errno_location()) == 34) || _Range_chk::_S_chk(__tmp, std::is_same< _Ret, int> {})) { 
# 86
std::__throw_out_of_range(__name); } else { 
# 88
__ret = __tmp; }  }  
# 90
if (__idx) { 
# 91
(*__idx) = (__endptr - __str); }  
# 93
return __ret; 
# 94
} 
# 97
template< class _String, class _CharT = typename _String::value_type> _String 
# 99
__to_xstring(int (*__convf)(_CharT *, std::size_t, const _CharT *, __builtin_va_list), std::size_t 
# 100
__n, const _CharT *
# 101
__fmt, ...) 
# 102
{ 
# 105
_CharT *__s = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __n)); 
# 108
__builtin_va_list __args; 
# 109
__builtin_va_start((__args),__fmt); 
# 111
const int __len = __convf(__s, __n, __fmt, __args); 
# 113
__builtin_va_end(__args); 
# 115
return _String(__s, __s + __len); 
# 116
} 
# 119
}
# 39 "/usr/include/c++/12.2.1/bits/charconv.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
namespace __detail { 
# 45
template< class _Tp> constexpr unsigned 
# 47
__to_chars_len(_Tp __value, int __base = 10) noexcept 
# 48
{ 
# 49
static_assert((is_integral< _Tp> ::value), "implementation bug");
# 50
static_assert((is_unsigned< _Tp> ::value), "implementation bug");
# 52
unsigned __n = (1); 
# 53
const unsigned __b2 = __base * __base; 
# 54
const unsigned __b3 = __b2 * __base; 
# 55
const unsigned long __b4 = __b3 * __base; 
# 56
for (; ;) 
# 57
{ 
# 58
if (__value < ((unsigned)__base)) { return __n; }  
# 59
if (__value < __b2) { return __n + (1); }  
# 60
if (__value < __b3) { return __n + (2); }  
# 61
if (__value < __b4) { return __n + (3); }  
# 62
__value /= __b4; 
# 63
__n += (4); 
# 64
}  
# 65
} 
# 70
template< class _Tp> void 
# 72
__to_chars_10_impl(char *__first, unsigned __len, _Tp __val) noexcept 
# 73
{ 
# 74
static_assert((is_integral< _Tp> ::value), "implementation bug");
# 75
static_assert((is_unsigned< _Tp> ::value), "implementation bug");
# 77
static constexpr char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263" "646566676869707172737475767778798081828384858687888990919293949596979899"; 
# 83
unsigned __pos = __len - (1); 
# 84
while (__val >= 100) 
# 85
{ 
# 86
const auto __num = (__val % 100) * 2; 
# 87
__val /= 100; 
# 88
(__first[__pos]) = (__digits[__num + 1]); 
# 89
(__first[__pos - (1)]) = (__digits[__num]); 
# 90
__pos -= (2); 
# 91
}  
# 92
if (__val >= 10) 
# 93
{ 
# 94
const auto __num = __val * 2; 
# 95
(__first[1]) = (__digits[__num + 1]); 
# 96
(__first[0]) = (__digits[__num]); 
# 97
} else { 
# 99
(__first[0]) = ('0' + __val); }  
# 100
} 
# 102
}
# 104
}
# 3963 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 3966
inline namespace __cxx11 { 
# 3971
inline int stoi(const string &__str, size_t *__idx = 0, int __base = 10) 
# 3972
{ return __gnu_cxx::__stoa< long, int> (&std::strtol, "stoi", __str.c_str(), __idx, __base); 
# 3973
} 
# 3976
inline long stol(const string &__str, size_t *__idx = 0, int __base = 10) 
# 3977
{ return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(), __idx, __base); 
# 3978
} 
# 3981
inline unsigned long stoul(const string &__str, size_t *__idx = 0, int __base = 10) 
# 3982
{ return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(), __idx, __base); 
# 3983
} 
# 3986
inline long long stoll(const string &__str, size_t *__idx = 0, int __base = 10) 
# 3987
{ return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(), __idx, __base); 
# 3988
} 
# 3991
inline unsigned long long stoull(const string &__str, size_t *__idx = 0, int __base = 10) 
# 3992
{ return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(), __idx, __base); 
# 3993
} 
# 3997
inline float stof(const string &__str, size_t *__idx = 0) 
# 3998
{ return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); } 
# 4001
inline double stod(const string &__str, size_t *__idx = 0) 
# 4002
{ return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); } 
# 4005
inline long double stold(const string &__str, size_t *__idx = 0) 
# 4006
{ return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); } 
# 4012
inline string to_string(int __val) noexcept 
# 4016
{ 
# 4017
const bool __neg = __val < 0; 
# 4018
const unsigned __uval = __neg ? ((unsigned)(~__val)) + 1U : __val; 
# 4019
const auto __len = __detail::__to_chars_len(__uval); 
# 4020
string __str(__neg + __len, '-'); 
# 4021
__detail::__to_chars_10_impl(&__str[__neg], __len, __uval); 
# 4022
return __str; 
# 4023
} 
# 4026
inline string to_string(unsigned __val) noexcept 
# 4030
{ 
# 4031
string __str(__detail::__to_chars_len(__val), '\000'); 
# 4032
__detail::__to_chars_10_impl(&__str[0], __str.size(), __val); 
# 4033
return __str; 
# 4034
} 
# 4037
inline string to_string(long __val) 
# 4041
{ 
# 4042
const bool __neg = __val < (0); 
# 4043
const unsigned long __uval = __neg ? ((unsigned long)(~__val)) + 1UL : __val; 
# 4044
const auto __len = __detail::__to_chars_len(__uval); 
# 4045
string __str(__neg + __len, '-'); 
# 4046
__detail::__to_chars_10_impl(&__str[__neg], __len, __uval); 
# 4047
return __str; 
# 4048
} 
# 4051
inline string to_string(unsigned long __val) 
# 4055
{ 
# 4056
string __str(__detail::__to_chars_len(__val), '\000'); 
# 4057
__detail::__to_chars_10_impl(&__str[0], __str.size(), __val); 
# 4058
return __str; 
# 4059
} 
# 4062
inline string to_string(long long __val) 
# 4063
{ 
# 4064
const bool __neg = __val < (0); 
# 4065
const unsigned long long __uval = __neg ? ((unsigned long long)(~__val)) + 1ULL : __val; 
# 4067
const auto __len = __detail::__to_chars_len(__uval); 
# 4068
string __str(__neg + __len, '-'); 
# 4069
__detail::__to_chars_10_impl(&__str[__neg], __len, __uval); 
# 4070
return __str; 
# 4071
} 
# 4074
inline string to_string(unsigned long long __val) 
# 4075
{ 
# 4076
string __str(__detail::__to_chars_len(__val), '\000'); 
# 4077
__detail::__to_chars_10_impl(&__str[0], __str.size(), __val); 
# 4078
return __str; 
# 4079
} 
# 4085
inline string to_string(float __val) 
# 4086
{ 
# 4087
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 4089
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 4091
} 
# 4094
inline string to_string(double __val) 
# 4095
{ 
# 4096
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 4098
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 4100
} 
# 4103
inline string to_string(long double __val) 
# 4104
{ 
# 4105
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 4107
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%Lf", __val); 
# 4109
} 
# 4114
inline int stoi(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 4115
{ return __gnu_cxx::__stoa< long, int> (&std::wcstol, "stoi", __str.c_str(), __idx, __base); 
# 4116
} 
# 4119
inline long stol(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 4120
{ return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(), __idx, __base); 
# 4121
} 
# 4124
inline unsigned long stoul(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 4125
{ return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(), __idx, __base); 
# 4126
} 
# 4129
inline long long stoll(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 4130
{ return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(), __idx, __base); 
# 4131
} 
# 4134
inline unsigned long long stoull(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 4135
{ return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(), __idx, __base); 
# 4136
} 
# 4140
inline float stof(const wstring &__str, size_t *__idx = 0) 
# 4141
{ return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); } 
# 4144
inline double stod(const wstring &__str, size_t *__idx = 0) 
# 4145
{ return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); } 
# 4148
inline long double stold(const wstring &__str, size_t *__idx = 0) 
# 4149
{ return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); } 
# 4154
inline wstring to_wstring(int __val) 
# 4155
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(int), L"\x25\x64", __val); 
# 4156
} 
# 4159
inline wstring to_wstring(unsigned __val) 
# 4160
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned), L"\x25\x75", __val); 
# 4162
} 
# 4165
inline wstring to_wstring(long __val) 
# 4166
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long), L"\x25\x6c\x64", __val); 
# 4167
} 
# 4170
inline wstring to_wstring(unsigned long __val) 
# 4171
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long), L"\x25\x6c\x75", __val); 
# 4173
} 
# 4176
inline wstring to_wstring(long long __val) 
# 4177
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long long), L"\x25\x6c\x6c\x64", __val); 
# 4179
} 
# 4182
inline wstring to_wstring(unsigned long long __val) 
# 4183
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long long), L"\x25\x6c\x6c\x75", __val); 
# 4185
} 
# 4188
inline wstring to_wstring(float __val) 
# 4189
{ 
# 4190
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 4192
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 4194
} 
# 4197
inline wstring to_wstring(double __val) 
# 4198
{ 
# 4199
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 4201
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 4203
} 
# 4206
inline wstring to_wstring(long double __val) 
# 4207
{ 
# 4208
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 4210
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x4c\x66", __val); 
# 4212
} 
# 4216
}
# 4218
}
# 4226
namespace std __attribute((__visibility__("default"))) { 
# 4235
template<> struct hash< __cxx11::basic_string< char> >  : public __hash_base< unsigned long, __cxx11::basic_string< char> >  { 
# 4239
size_t operator()(const string &__s) const noexcept 
# 4240
{ return std::_Hash_impl::hash(__s.data(), __s.length()); } 
# 4241
}; 
# 4244
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char> > >  : public false_type { 
# 4245
}; 
# 4249
template<> struct hash< __cxx11::basic_string< wchar_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< wchar_t> >  { 
# 4253
size_t operator()(const wstring &__s) const noexcept 
# 4254
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 4255
} 
# 4256
}; 
# 4259
template<> struct __is_fast_hash< hash< __cxx11::basic_string< wchar_t> > >  : public false_type { 
# 4260
}; 
# 4282 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
template<> struct hash< __cxx11::basic_string< char16_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char16_t> >  { 
# 4286
size_t operator()(const u16string &__s) const noexcept 
# 4287
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 4288
} 
# 4289
}; 
# 4292
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char16_t> > >  : public false_type { 
# 4293
}; 
# 4297
template<> struct hash< __cxx11::basic_string< char32_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char32_t> >  { 
# 4301
size_t operator()(const u32string &__s) const noexcept 
# 4302
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 4303
} 
# 4304
}; 
# 4307
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char32_t> > >  : public false_type { 
# 4308
}; 
# 4314
inline namespace literals { 
# 4316
inline namespace string_literals { 
# 4318
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
# 4327
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char>  
# 4329
operator ""s(const char *__str, size_t __len) 
# 4330
{ return __cxx11::basic_string< char> {__str, __len}; } 
# 4332
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< wchar_t>  
# 4334
operator ""s(const wchar_t *__str, size_t __len) 
# 4335
{ return __cxx11::basic_string< wchar_t> {__str, __len}; } 
# 4344 "/usr/include/c++/12.2.1/bits/basic_string.h" 3
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char16_t>  
# 4346
operator ""s(const char16_t *__str, size_t __len) 
# 4347
{ return __cxx11::basic_string< char16_t> {__str, __len}; } 
# 4349
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char32_t>  
# 4351
operator ""s(const char32_t *__str, size_t __len) 
# 4352
{ return __cxx11::basic_string< char32_t> {__str, __len}; } 
# 4355
#pragma GCC diagnostic pop
}
# 4357
}
# 4360
namespace __detail { namespace __variant { 
# 4362
template< class > struct _Never_valueless_alt; 
# 4366
template< class _Tp, class _Traits, class _Alloc> 
# 4367
struct _Never_valueless_alt< __cxx11::basic_string< _Tp, _Traits, _Alloc> >  : public __and_< is_nothrow_move_constructible< __cxx11::basic_string< _Tp, _Traits, _Alloc> > , is_nothrow_move_assignable< __cxx11::basic_string< _Tp, _Traits, _Alloc> > > ::type { 
# 4372
}; 
# 4373
}}
# 4378
}
# 46 "/usr/include/c++/12.2.1/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT, class _Traits, class _Alloc> const typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __cxx11::basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 56
template< class _CharT, class _Traits, class _Alloc> void 
# 60
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::swap(basic_string &__s) noexcept 
# 61
{ 
# 62
if (this == std::__addressof(__s)) { 
# 63
return; }  
# 65
_Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator()); 
# 67
if (_M_is_local()) { 
# 68
if (__s._M_is_local()) 
# 69
{ 
# 70
if (length() && __s.length()) 
# 71
{ 
# 72
_CharT __tmp_data[_S_local_capacity + 1]; 
# 73
traits_type::copy(__tmp_data, __s._M_local_buf, __s.length() + 1); 
# 75
traits_type::copy(__s._M_local_buf, _M_local_buf, length() + 1); 
# 77
traits_type::copy(_M_local_buf, __tmp_data, __s.length() + 1); 
# 79
} else { 
# 80
if (__s.length()) 
# 81
{ 
# 82
traits_type::copy(_M_local_buf, __s._M_local_buf, __s.length() + 1); 
# 84
_M_length(__s.length()); 
# 85
__s._M_set_length(0); 
# 86
return; 
# 87
} else { 
# 88
if (length()) 
# 89
{ 
# 90
traits_type::copy(__s._M_local_buf, _M_local_buf, length() + 1); 
# 92
__s._M_length(length()); 
# 93
_M_set_length(0); 
# 94
return; 
# 95
}  }  }  
# 96
} else 
# 98
{ 
# 99
const size_type __tmp_capacity = __s._M_allocated_capacity; 
# 100
traits_type::copy(__s._M_local_buf, _M_local_buf, length() + 1); 
# 102
_M_data(__s._M_data()); 
# 103
__s._M_data(__s._M_local_buf); 
# 104
_M_capacity(__tmp_capacity); 
# 105
}  } else 
# 107
{ 
# 108
const size_type __tmp_capacity = _M_allocated_capacity; 
# 109
if (__s._M_is_local()) 
# 110
{ 
# 111
traits_type::copy(_M_local_buf, __s._M_local_buf, __s.length() + 1); 
# 113
__s._M_data(_M_data()); 
# 114
_M_data(_M_local_buf); 
# 115
} else 
# 117
{ 
# 118
pointer __tmp_ptr = _M_data(); 
# 119
_M_data(__s._M_data()); 
# 120
__s._M_data(__tmp_ptr); 
# 121
_M_capacity(__s._M_allocated_capacity); 
# 122
}  
# 123
__s._M_capacity(__tmp_capacity); 
# 124
}  
# 126
const size_type __tmp_length = length(); 
# 127
_M_length(__s.length()); 
# 128
__s._M_length(__tmp_length); 
# 129
} 
# 131
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer 
# 135
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_create(size_type &__capacity, size_type __old_capacity) 
# 136
{ 
# 139
if (__capacity > max_size()) { 
# 140
std::__throw_length_error("basic_string::_M_create"); }  
# 145
if ((__capacity > __old_capacity) && (__capacity < (2 * __old_capacity))) 
# 146
{ 
# 147
__capacity = (2 * __old_capacity); 
# 149
if (__capacity > max_size()) { 
# 150
__capacity = max_size(); }  
# 151
}  
# 155
return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1); 
# 156
} 
# 162
template< class _CharT, class _Traits, class _Alloc> 
# 163
template< class _InIterator> void 
# 167
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag) 
# 169
{ 
# 170
size_type __len = (0); 
# 171
size_type __capacity = ((size_type)_S_local_capacity); 
# 173
pointer __p = _M_use_local_data(); 
# 175
while ((__beg != __end) && (__len < __capacity)) 
# 176
{ 
# 177
(__p[__len++]) = (*__beg); 
# 178
++__beg; 
# 179
}  
# 181
struct _Guard { 
# 184
explicit _Guard(basic_string *__s) : _M_guarded(__s) { } 
# 187
~_Guard() { if (_M_guarded) { (_M_guarded)->_M_dispose(); }  } 
# 189
basic_string *_M_guarded; 
# 190
} __guard(this); 
# 192
while (__beg != __end) 
# 193
{ 
# 194
if (__len == __capacity) 
# 195
{ 
# 197
__capacity = (__len + 1); 
# 198
pointer __another = _M_create(__capacity, __len); 
# 199
this->_S_copy(__another, _M_data(), __len); 
# 200
_M_dispose(); 
# 201
_M_data(__another); 
# 202
_M_capacity(__capacity); 
# 203
}  
# 204
traits_type::assign(_M_data()[__len++], *__beg); 
# 205
++__beg; 
# 206
}  
# 208
(__guard._M_guarded) = 0; 
# 210
_M_set_length(__len); 
# 211
} 
# 213
template< class _CharT, class _Traits, class _Alloc> 
# 214
template< class _InIterator> void 
# 218
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, forward_iterator_tag) 
# 220
{ 
# 221
size_type __dnew = static_cast< size_type>(std::distance(__beg, __end)); 
# 223
if (__dnew > ((size_type)_S_local_capacity)) 
# 224
{ 
# 225
_M_data(_M_create(__dnew, (size_type)0)); 
# 226
_M_capacity(__dnew); 
# 227
} else { 
# 229
_M_use_local_data(); }  
# 232
struct _Guard { 
# 235
explicit _Guard(basic_string *__s) : _M_guarded(__s) { } 
# 238
~_Guard() { if (_M_guarded) { (_M_guarded)->_M_dispose(); }  } 
# 240
basic_string *_M_guarded; 
# 241
} __guard(this); 
# 243
this->_S_copy_chars(_M_data(), __beg, __end); 
# 245
(__guard._M_guarded) = 0; 
# 247
_M_set_length(__dnew); 
# 248
} 
# 250
template< class _CharT, class _Traits, class _Alloc> void 
# 254
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(size_type __n, _CharT __c) 
# 255
{ 
# 256
if (__n > ((size_type)_S_local_capacity)) 
# 257
{ 
# 258
_M_data(_M_create(__n, (size_type)0)); 
# 259
_M_capacity(__n); 
# 260
} else { 
# 262
_M_use_local_data(); }  
# 264
if (__n) { 
# 265
this->_S_assign(_M_data(), __n, __c); }  
# 267
_M_set_length(__n); 
# 268
} 
# 270
template< class _CharT, class _Traits, class _Alloc> void 
# 274
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_assign(const basic_string &__str) 
# 275
{ 
# 276
if (this != std::__addressof(__str)) 
# 277
{ 
# 278
const size_type __rsize = __str.length(); 
# 279
const size_type __capacity = capacity(); 
# 281
if (__rsize > __capacity) 
# 282
{ 
# 283
size_type __new_capacity = __rsize; 
# 284
pointer __tmp = _M_create(__new_capacity, __capacity); 
# 285
_M_dispose(); 
# 286
_M_data(__tmp); 
# 287
_M_capacity(__new_capacity); 
# 288
}  
# 290
if (__rsize) { 
# 291
this->_S_copy(_M_data(), __str._M_data(), __rsize); }  
# 293
_M_set_length(__rsize); 
# 294
}  
# 295
} 
# 297
template< class _CharT, class _Traits, class _Alloc> void 
# 301
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res) 
# 302
{ 
# 303
const size_type __capacity = capacity(); 
# 308
if (__res <= __capacity) { 
# 309
return; }  
# 311
pointer __tmp = _M_create(__res, __capacity); 
# 312
this->_S_copy(__tmp, _M_data(), length() + 1); 
# 313
_M_dispose(); 
# 314
_M_data(__tmp); 
# 315
_M_capacity(__res); 
# 316
} 
# 318
template< class _CharT, class _Traits, class _Alloc> void 
# 322
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, const _CharT *__s, size_type 
# 323
__len2) 
# 324
{ 
# 325
const size_type __how_much = (length() - __pos) - __len1; 
# 327
size_type __new_capacity = (length() + __len2) - __len1; 
# 328
pointer __r = _M_create(__new_capacity, capacity()); 
# 330
if (__pos) { 
# 331
this->_S_copy(__r, _M_data(), __pos); }  
# 332
if (__s && __len2) { 
# 333
this->_S_copy(__r + __pos, __s, __len2); }  
# 334
if (__how_much) { 
# 335
this->_S_copy((__r + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much); }  
# 338
_M_dispose(); 
# 339
_M_data(__r); 
# 340
_M_capacity(__new_capacity); 
# 341
} 
# 343
template< class _CharT, class _Traits, class _Alloc> void 
# 347
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_erase(size_type __pos, size_type __n) 
# 348
{ 
# 349
const size_type __how_much = (length() - __pos) - __n; 
# 351
if (__how_much && __n) { 
# 352
this->_S_move(_M_data() + __pos, (_M_data() + __pos) + __n, __how_much); }  
# 354
_M_set_length(length() - __n); 
# 355
} 
# 357
template< class _CharT, class _Traits, class _Alloc> void 
# 361
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve() 
# 362
{ 
# 363
if (_M_is_local()) { 
# 364
return; }  
# 366
const size_type __length = length(); 
# 367
const size_type __capacity = _M_allocated_capacity; 
# 369
if (__length <= ((size_type)_S_local_capacity)) 
# 370
{ 
# 371
this->_S_copy(_M_use_local_data(), _M_data(), __length + 1); 
# 372
_M_destroy(__capacity); 
# 373
_M_data(_M_local_data()); 
# 374
} else { 
# 376
if (__length < __capacity) { 
# 377
try 
# 378
{ 
# 379
pointer __tmp = _Alloc_traits::allocate(_M_get_allocator(), __length + 1); 
# 381
this->_S_copy(__tmp, _M_data(), __length + 1); 
# 382
_M_dispose(); 
# 383
_M_data(__tmp); 
# 384
_M_capacity(__length); 
# 385
} 
# 386
catch (const __cxxabiv1::__forced_unwind &) 
# 387
{ throw; } 
# 388
catch (...) 
# 389
{ }  }  }  
# 391
} 
# 393
template< class _CharT, class _Traits, class _Alloc> void 
# 397
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c) 
# 398
{ 
# 399
const size_type __size = size(); 
# 400
if (__size < __n) { 
# 401
this->append(__n - __size, __c); } else { 
# 402
if (__n < __size) { 
# 403
_M_set_length(__n); }  }  
# 404
} 
# 406
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 410
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_append(const _CharT *__s, size_type __n) 
# 411
{ 
# 412
const size_type __len = __n + size(); 
# 414
if (__len <= capacity()) 
# 415
{ 
# 416
if (__n) { 
# 417
this->_S_copy(this->_M_data() + size(), __s, __n); }  
# 418
} else { 
# 420
_M_mutate(size(), (size_type)0, __s, __n); }  
# 422
_M_set_length(__len); 
# 423
return *this; 
# 424
} 
# 426
template< class _CharT, class _Traits, class _Alloc> 
# 427
template< class _InputIterator> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 431
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator 
# 432
__k1, _InputIterator __k2, __false_type) 
# 434
{ 
# 437
const basic_string __s(__k1, __k2, get_allocator()); 
# 438
const size_type __n1 = __i2 - __i1; 
# 439
return _M_replace(__i1 - begin(), __n1, __s._M_data(), __s.size()); 
# 441
} 
# 443
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 447
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT 
# 448
__c) 
# 449
{ 
# 450
_M_check_length(__n1, __n2, "basic_string::_M_replace_aux"); 
# 452
const size_type __old_size = size(); 
# 453
const size_type __new_size = (__old_size + __n2) - __n1; 
# 455
if (__new_size <= capacity()) 
# 456
{ 
# 457
pointer __p = this->_M_data() + __pos1; 
# 459
const size_type __how_much = (__old_size - __pos1) - __n1; 
# 460
if (__how_much && (__n1 != __n2)) { 
# 461
this->_S_move(__p + __n2, __p + __n1, __how_much); }  
# 462
} else { 
# 464
_M_mutate(__pos1, __n1, 0, __n2); }  
# 466
if (__n2) { 
# 467
this->_S_assign(this->_M_data() + __pos1, __n2, __c); }  
# 469
_M_set_length(__new_size); 
# 470
return *this; 
# 471
} 
# 473
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 477
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace(size_type __pos, size_type __len1, const _CharT *__s, const size_type 
# 478
__len2) 
# 479
{ 
# 480
_M_check_length(__len1, __len2, "basic_string::_M_replace"); 
# 482
const size_type __old_size = size(); 
# 483
const size_type __new_size = (__old_size + __len2) - __len1; 
# 485
if (__new_size <= capacity()) 
# 486
{ 
# 487
pointer __p = this->_M_data() + __pos; 
# 489
const size_type __how_much = (__old_size - __pos) - __len1; 
# 503 "/usr/include/c++/12.2.1/bits/basic_string.tcc" 3
if (_M_disjunct(__s)) 
# 504
{ 
# 505
if (__how_much && (__len1 != __len2)) { 
# 506
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 507
if (__len2) { 
# 508
this->_S_copy(__p, __s, __len2); }  
# 509
} else 
# 511
{ 
# 513
if (__len2 && (__len2 <= __len1)) { 
# 514
this->_S_move(__p, __s, __len2); }  
# 515
if (__how_much && (__len1 != __len2)) { 
# 516
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 517
if (__len2 > __len1) 
# 518
{ 
# 519
if ((__s + __len2) <= (__p + __len1)) { 
# 520
this->_S_move(__p, __s, __len2); } else { 
# 521
if (__s >= (__p + __len1)) 
# 522
{ 
# 525
const size_type __poff = (__s - __p) + (__len2 - __len1); 
# 526
this->_S_copy(__p, __p + __poff, __len2); 
# 527
} else 
# 529
{ 
# 530
const size_type __nleft = (__p + __len1) - __s; 
# 531
this->_S_move(__p, __s, __nleft); 
# 532
this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft); 
# 534
}  }  
# 535
}  
# 536
}  
# 537
} else { 
# 539
_M_mutate(__pos, __len1, __s, __len2); }  
# 541
_M_set_length(__new_size); 
# 542
return *this; 
# 543
} 
# 545
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 549
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const 
# 550
{ 
# 551
_M_check(__pos, "basic_string::copy"); 
# 552
__n = _M_limit(__pos, __n); 
# 553
; 
# 554
if (__n) { 
# 555
(_S_copy)(__s, _M_data() + __pos, __n); }  
# 557
return __n; 
# 558
} 
# 603 "/usr/include/c++/12.2.1/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 606
operator+(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 607
__rhs) 
# 608
{ 
# 609
; 
# 610
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 611
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 613
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 614
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other>  _Alloc_traits; 
# 615
const __size_type __len = _Traits::length(__lhs); 
# 616
__string_type __str(_Alloc_traits::_S_select_on_copy(__rhs.get_allocator())); 
# 618
__str.reserve(__len + __rhs.size()); 
# 619
__str.append(__lhs, __len); 
# 620
__str.append(__rhs); 
# 621
return __str; 
# 622
} 
# 624
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 627
operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__rhs) 
# 628
{ 
# 629
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 630
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 632
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 633
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other>  _Alloc_traits; 
# 634
__string_type __str(_Alloc_traits::_S_select_on_copy(__rhs.get_allocator())); 
# 636
const __size_type __len = __rhs.size(); 
# 637
__str.reserve(__len + 1); 
# 638
__str.append((__size_type)1, __lhs); 
# 639
__str.append(__rhs); 
# 640
return __str; 
# 641
} 
# 643
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 647
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 649
{ 
# 650
; 
# 651
const size_type __size = size(); 
# 653
if (__n == 0) { 
# 654
return (__pos <= __size) ? __pos : npos; }  
# 655
if (__pos >= __size) { 
# 656
return npos; }  
# 658
const _CharT __elem0 = __s[0]; 
# 659
const _CharT *const __data = data(); 
# 660
const _CharT *__first = __data + __pos; 
# 661
const _CharT *const __last = __data + __size; 
# 662
size_type __len = __size - __pos; 
# 664
while (__len >= __n) 
# 665
{ 
# 667
__first = traits_type::find(__first, (__len - __n) + 1, __elem0); 
# 668
if (!__first) { 
# 669
return npos; }  
# 673
if (traits_type::compare(__first, __s, __n) == 0) { 
# 674
return __first - __data; }  
# 675
__len = (__last - (++__first)); 
# 676
}  
# 677
return npos; 
# 678
} 
# 680
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 684
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const noexcept 
# 685
{ 
# 686
size_type __ret = npos; 
# 687
const size_type __size = size(); 
# 688
if (__pos < __size) 
# 689
{ 
# 690
const _CharT *__data = _M_data(); 
# 691
const size_type __n = __size - __pos; 
# 692
const _CharT *__p = traits_type::find(__data + __pos, __n, __c); 
# 693
if (__p) { 
# 694
__ret = (__p - __data); }  
# 695
}  
# 696
return __ret; 
# 697
} 
# 699
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 703
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 705
{ 
# 706
; 
# 707
const size_type __size = size(); 
# 708
if (__n <= __size) 
# 709
{ 
# 710
__pos = std::min((size_type)(__size - __n), __pos); 
# 711
const _CharT *__data = _M_data(); 
# 712
do 
# 713
{ 
# 714
if (traits_type::compare(__data + __pos, __s, __n) == 0) { 
# 715
return __pos; }  
# 716
} 
# 717
while ((__pos--) > 0); 
# 718
}  
# 719
return npos; 
# 720
} 
# 722
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 726
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 727
{ 
# 728
size_type __size = size(); 
# 729
if (__size) 
# 730
{ 
# 731
if ((--__size) > __pos) { 
# 732
__size = __pos; }  
# 733
for (++__size; (__size--) > 0;) { 
# 734
if (traits_type::eq(_M_data()[__size], __c)) { 
# 735
return __size; }  }  
# 736
}  
# 737
return npos; 
# 738
} 
# 740
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 744
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 746
{ 
# 747
; 
# 748
for (; __n && (__pos < size()); ++__pos) 
# 749
{ 
# 750
const _CharT *__p = traits_type::find(__s, __n, _M_data()[__pos]); 
# 751
if (__p) { 
# 752
return __pos; }  
# 753
}  
# 754
return npos; 
# 755
} 
# 757
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 761
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 763
{ 
# 764
; 
# 765
size_type __size = size(); 
# 766
if (__size && __n) 
# 767
{ 
# 768
if ((--__size) > __pos) { 
# 769
__size = __pos; }  
# 770
do 
# 771
{ 
# 772
if (traits_type::find(__s, __n, _M_data()[__size])) { 
# 773
return __size; }  
# 774
} 
# 775
while ((__size--) != 0); 
# 776
}  
# 777
return npos; 
# 778
} 
# 780
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 784
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 786
{ 
# 787
; 
# 788
for (; __pos < size(); ++__pos) { 
# 789
if (!traits_type::find(__s, __n, _M_data()[__pos])) { 
# 790
return __pos; }  }  
# 791
return npos; 
# 792
} 
# 794
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 798
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 799
{ 
# 800
for (; __pos < size(); ++__pos) { 
# 801
if (!traits_type::eq(_M_data()[__pos], __c)) { 
# 802
return __pos; }  }  
# 803
return npos; 
# 804
} 
# 806
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 810
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 812
{ 
# 813
; 
# 814
size_type __size = size(); 
# 815
if (__size) 
# 816
{ 
# 817
if ((--__size) > __pos) { 
# 818
__size = __pos; }  
# 819
do 
# 820
{ 
# 821
if (!traits_type::find(__s, __n, _M_data()[__size])) { 
# 822
return __size; }  
# 823
} 
# 824
while (__size--); 
# 825
}  
# 826
return npos; 
# 827
} 
# 829
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 833
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 834
{ 
# 835
size_type __size = size(); 
# 836
if (__size) 
# 837
{ 
# 838
if ((--__size) > __pos) { 
# 839
__size = __pos; }  
# 840
do 
# 841
{ 
# 842
if (!traits_type::eq(_M_data()[__size], __c)) { 
# 843
return __size; }  
# 844
} 
# 845
while (__size--); 
# 846
}  
# 847
return npos; 
# 848
} 
# 850
template< class _CharT, class _Traits, class _Alloc> int 
# 854
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const basic_string &__str) const 
# 855
{ 
# 856
_M_check(__pos, "basic_string::compare"); 
# 857
__n = _M_limit(__pos, __n); 
# 858
const size_type __osize = __str.size(); 
# 859
const size_type __len = std::min(__n, __osize); 
# 860
int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len); 
# 861
if (!__r) { 
# 862
__r = (_S_compare)(__n, __osize); }  
# 863
return __r; 
# 864
} 
# 866
template< class _CharT, class _Traits, class _Alloc> int 
# 870
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 871
__pos2, size_type __n2) const 
# 872
{ 
# 873
_M_check(__pos1, "basic_string::compare"); 
# 874
__str._M_check(__pos2, "basic_string::compare"); 
# 875
__n1 = _M_limit(__pos1, __n1); 
# 876
__n2 = __str._M_limit(__pos2, __n2); 
# 877
const size_type __len = std::min(__n1, __n2); 
# 878
int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len); 
# 880
if (!__r) { 
# 881
__r = (_S_compare)(__n1, __n2); }  
# 882
return __r; 
# 883
} 
# 885
template< class _CharT, class _Traits, class _Alloc> int 
# 889
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const noexcept 
# 890
{ 
# 891
; 
# 892
const size_type __size = size(); 
# 893
const size_type __osize = traits_type::length(__s); 
# 894
const size_type __len = std::min(__size, __osize); 
# 895
int __r = traits_type::compare(_M_data(), __s, __len); 
# 896
if (!__r) { 
# 897
__r = (_S_compare)(__size, __osize); }  
# 898
return __r; 
# 899
} 
# 901
template< class _CharT, class _Traits, class _Alloc> int 
# 905
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const 
# 906
{ 
# 907
; 
# 908
_M_check(__pos, "basic_string::compare"); 
# 909
__n1 = _M_limit(__pos, __n1); 
# 910
const size_type __osize = traits_type::length(__s); 
# 911
const size_type __len = std::min(__n1, __osize); 
# 912
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 913
if (!__r) { 
# 914
__r = (_S_compare)(__n1, __osize); }  
# 915
return __r; 
# 916
} 
# 918
template< class _CharT, class _Traits, class _Alloc> int 
# 922
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 923
__n2) const 
# 924
{ 
# 925
; 
# 926
_M_check(__pos, "basic_string::compare"); 
# 927
__n1 = _M_limit(__pos, __n1); 
# 928
const size_type __len = std::min(__n1, __n2); 
# 929
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 930
if (!__r) { 
# 931
__r = (_S_compare)(__n1, __n2); }  
# 932
return __r; 
# 933
} 
# 938
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 940
operator>>(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 941
__str) 
# 942
{ 
# 943
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 944
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 945
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 946
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 947
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 948
typedef ctype< _CharT>  __ctype_type; 
# 949
typedef typename ctype< _CharT> ::ctype_base __ctype_base; 
# 951
__size_type __extracted = (0); 
# 952
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 953
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 954
if (__cerb) 
# 955
{ 
# 956
try 
# 957
{ 
# 959
__str.erase(); 
# 960
_CharT __buf[128]; 
# 961
__size_type __len = (0); 
# 962
const streamsize __w = __in.width(); 
# 963
const __size_type __n = (__w > (0)) ? static_cast< __size_type>(__w) : __str.max_size(); 
# 965
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 966
const __int_type __eof = _Traits::eof(); 
# 967
__int_type __c = __in.rdbuf()->sgetc(); 
# 969
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(__ctype_base::space, _Traits::to_char_type(__c)))) 
# 973
{ 
# 974
if (__len == (sizeof(__buf) / sizeof(_CharT))) 
# 975
{ 
# 976
__str.append(__buf, sizeof(__buf) / sizeof(_CharT)); 
# 977
__len = 0; 
# 978
}  
# 979
(__buf[__len++]) = _Traits::to_char_type(__c); 
# 980
++__extracted; 
# 981
__c = __in.rdbuf()->snextc(); 
# 982
}  
# 983
__str.append(__buf, __len); 
# 985
if ((__extracted < __n) && _Traits::eq_int_type(__c, __eof)) { 
# 986
__err |= __ios_base::eofbit; }  
# 987
__in.width(0); 
# 988
} 
# 989
catch (__cxxabiv1::__forced_unwind &) 
# 990
{ 
# 991
__in._M_setstate(__ios_base::badbit); 
# 992
throw; 
# 993
} 
# 994
catch (...) 
# 995
{ 
# 999
__in._M_setstate(__ios_base::badbit); 
# 1000
}  
# 1001
}  
# 1003
if (!__extracted) { 
# 1004
__err |= __ios_base::failbit; }  
# 1005
if (__err) { 
# 1006
__in.setstate(__err); }  
# 1007
return __in; 
# 1008
} 
# 1010
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1012
getline(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1013
__str, _CharT __delim) 
# 1014
{ 
# 1015
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1016
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1017
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1018
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1019
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1021
__size_type __extracted = (0); 
# 1022
const __size_type __n = __str.max_size(); 
# 1023
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1024
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1025
if (__cerb) 
# 1026
{ 
# 1027
try 
# 1028
{ 
# 1029
__str.erase(); 
# 1030
const __int_type __idelim = _Traits::to_int_type(__delim); 
# 1031
const __int_type __eof = _Traits::eof(); 
# 1032
__int_type __c = __in.rdbuf()->sgetc(); 
# 1034
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!_Traits::eq_int_type(__c, __idelim))) 
# 1037
{ 
# 1038
__str += _Traits::to_char_type(__c); 
# 1039
++__extracted; 
# 1040
__c = __in.rdbuf()->snextc(); 
# 1041
}  
# 1043
if (_Traits::eq_int_type(__c, __eof)) { 
# 1044
__err |= __ios_base::eofbit; } else { 
# 1045
if (_Traits::eq_int_type(__c, __idelim)) 
# 1046
{ 
# 1047
++__extracted; 
# 1048
__in.rdbuf()->sbumpc(); 
# 1049
} else { 
# 1051
__err |= __ios_base::failbit; }  }  
# 1052
} 
# 1053
catch (__cxxabiv1::__forced_unwind &) 
# 1054
{ 
# 1055
__in._M_setstate(__ios_base::badbit); 
# 1056
throw; 
# 1057
} 
# 1058
catch (...) 
# 1059
{ 
# 1063
__in._M_setstate(__ios_base::badbit); 
# 1064
}  
# 1065
}  
# 1066
if (!__extracted) { 
# 1067
__err |= __ios_base::failbit; }  
# 1068
if (__err) { 
# 1069
__in.setstate(__err); }  
# 1070
return __in; 
# 1071
} 
# 1082 "/usr/include/c++/12.2.1/bits/basic_string.tcc" 3
extern template class __cxx11::basic_string< char> ;
# 1090
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1093
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __os, const __cxx11::basic_string< char>  & __str);
# 1096
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str, char __delim);
# 1099
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1105
extern template class __cxx11::basic_string< wchar_t> ;
# 1111
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1114
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __os, const __cxx11::basic_string< wchar_t>  & __str);
# 1117
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim);
# 1120
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1127
}
# 57 "/usr/include/c++/12.2.1/string" 3
namespace std __attribute((__visibility__("default"))) { 
# 60
namespace pmr { 
# 61
template< class _Tp> class polymorphic_allocator; 
# 62
template< class _CharT, class _Traits = char_traits< _CharT> > using basic_string = __cxx11::basic_string< _CharT, _Traits, polymorphic_allocator< _CharT> > ; 
# 65
using string = basic_string< char> ; 
# 69
using u16string = basic_string< char16_t> ; 
# 70
using u32string = basic_string< char32_t> ; 
# 71
using wstring = basic_string< wchar_t> ; 
# 72
}
# 74
template< class _Str> 
# 75
struct __hash_string_base : public __hash_base< unsigned long, _Str>  { 
# 79
std::size_t operator()(const _Str &__s) const noexcept 
# 80
{ return hash< basic_string_view< typename _Str::value_type> > {}(__s); } 
# 81
}; 
# 84
template<> struct hash< __cxx11::basic_string< char, char_traits< char> , pmr::polymorphic_allocator< char> > >  : public __hash_string_base< __cxx11::basic_string< char, char_traits< char> , pmr::polymorphic_allocator< char> > >  { 
# 86
}; 
# 94
template<> struct hash< __cxx11::basic_string< char16_t, char_traits< char16_t> , pmr::polymorphic_allocator< char16_t> > >  : public __hash_string_base< __cxx11::basic_string< char16_t, char_traits< char16_t> , pmr::polymorphic_allocator< char16_t> > >  { 
# 96
}; 
# 98
template<> struct hash< __cxx11::basic_string< char32_t, char_traits< char32_t> , pmr::polymorphic_allocator< char32_t> > >  : public __hash_string_base< __cxx11::basic_string< char32_t, char_traits< char32_t> , pmr::polymorphic_allocator< char32_t> > >  { 
# 100
}; 
# 102
template<> struct hash< __cxx11::basic_string< wchar_t, char_traits< wchar_t> , pmr::polymorphic_allocator< wchar_t> > >  : public __hash_string_base< __cxx11::basic_string< wchar_t, char_traits< wchar_t> , pmr::polymorphic_allocator< wchar_t> > >  { 
# 104
}; 
# 107
}
# 43 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
class locale { 
# 67
public: typedef int category; 
# 70
class facet; 
# 71
class id; 
# 72
class _Impl; 
# 74
friend class facet; 
# 75
friend class _Impl; 
# 77
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 81
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 85
template< class _Cache> friend struct __use_cache; 
# 98 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
static const category none = 0; 
# 99
static const category ctype = (1L << 0); 
# 100
static const category numeric = (1L << 1); 
# 101
static const category collate = (1L << 2); 
# 102
static const category time = (1L << 3); 
# 103
static const category monetary = (1L << 4); 
# 104
static const category messages = (1L << 5); 
# 105
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 117 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
locale() throw(); 
# 126 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
locale(const locale & __other) throw(); 
# 137 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
explicit locale(const char * __s); 
# 151 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
locale(const locale & __base, const char * __s, category __cat); 
# 163 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
explicit locale(const string &__s) : locale(__s.c_str()) { } 
# 177 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
locale(const locale &__base, const string &__s, category __cat) : locale(__base, __s.c_str(), __cat) 
# 178
{ } 
# 192 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
locale(const locale & __base, const locale & __add, category __cat); 
# 205 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
template< class _Facet> locale(const locale & __other, _Facet * __f); 
# 209
~locale() throw(); 
# 220 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
const locale &operator=(const locale & __other) throw(); 
# 234 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
template< class _Facet> locale combine(const locale & __other) const; 
# 243
__attribute((__abi_tag__("cxx11"))) string 
# 245
name() const; 
# 255 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
bool operator==(const locale & __other) const throw(); 
# 265 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
bool operator!=(const locale &__other) const throw() 
# 266
{ return !this->operator==(__other); } 
# 284 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
template< class _Char, class _Traits, class _Alloc> bool operator()(const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s1, const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s2) const; 
# 301 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
static locale global(const locale & __loc); 
# 307
static const locale &classic(); 
# 311
private: _Impl *_M_impl; 
# 314
static _Impl *_S_classic; 
# 317
static _Impl *_S_global; 
# 323
static const char *const *const _S_categories; 
# 335 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
enum { _S_categories_size = (6 + 6)}; 
# 338
static __gthread_once_t _S_once; 
# 342
explicit locale(_Impl *) throw(); 
# 345
static void _S_initialize(); 
# 348
static void _S_initialize_once() throw(); 
# 351
static category _S_normalize_category(category); 
# 354
void _M_coalesce(const locale & __base, const locale & __add, category __cat); 
# 357
static const id *const _S_twinned_facets[]; 
# 359
}; 
# 373 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
class locale::facet { 
# 376
friend class locale; 
# 377
friend class _Impl; 
# 379
mutable _Atomic_word _M_refcount; 
# 382
static __c_locale _S_c_locale; 
# 385
static const char _S_c_name[2]; 
# 388
static __gthread_once_t _S_once; 
# 392
static void _S_initialize_once(); 
# 405 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = 0) throw() : _M_refcount((__refs) ? 1 : 0) 
# 406
{ } 
# 410
virtual ~facet(); 
# 413
static void _S_create_c_locale(__c_locale & __cloc, const char * __s, __c_locale __old = 0); 
# 417
static __c_locale _S_clone_c_locale(__c_locale & __cloc) throw(); 
# 420
static void _S_destroy_c_locale(__c_locale & __cloc); 
# 423
static __c_locale _S_lc_ctype_c_locale(__c_locale __cloc, const char * __s); 
# 428
static __c_locale _S_get_c_locale(); 
# 430
__attribute((const)) static const char *
# 431
_S_get_c_name() throw(); 
# 440 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
facet(const facet &) = delete;
# 443
facet &operator=(const facet &) = delete;
# 448
private: void _M_add_reference() const throw() 
# 449
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 452
void _M_remove_reference() const throw() 
# 453
{ 
# 455
; 
# 456
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 457
{ 
# 458
; 
# 459
try 
# 460
{ delete this; } 
# 461
catch (...) 
# 462
{ }  
# 463
}  
# 464
} 
# 466
const facet *_M_sso_shim(const id *) const; 
# 467
const facet *_M_cow_shim(const id *) const; 
# 470
protected: class __shim; 
# 471
}; 
# 485 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
class locale::id { 
# 488
friend class locale; 
# 489
friend class _Impl; 
# 491
template< class _Facet> friend const _Facet &use_facet(const std::locale &); 
# 495
template< class _Facet> friend bool has_facet(const std::locale &) throw(); 
# 502
mutable size_t _M_index; 
# 505
static _Atomic_word _S_refcount; 
# 508
void operator=(const id &); 
# 510
id(const id &); 
# 516
public: id() { } 
# 519
size_t _M_id() const throw(); 
# 520
}; 
# 524
class locale::_Impl { 
# 528
friend class locale; 
# 529
friend class facet; 
# 531
template< class _Facet> friend bool has_facet(const std::locale &) throw(); 
# 535
template< class _Facet> friend const _Facet &use_facet(const std::locale &); 
# 539
template< class _Cache> friend struct __use_cache; 
# 544
_Atomic_word _M_refcount; 
# 545
const facet **_M_facets; 
# 546
size_t _M_facets_size; 
# 547
const facet **_M_caches; 
# 548
char **_M_names; 
# 549
static const id *const _S_id_ctype[]; 
# 550
static const id *const _S_id_numeric[]; 
# 551
static const id *const _S_id_collate[]; 
# 552
static const id *const _S_id_time[]; 
# 553
static const id *const _S_id_monetary[]; 
# 554
static const id *const _S_id_messages[]; 
# 555
static const id *const *const _S_facet_categories[]; 
# 558
void _M_add_reference() throw() 
# 559
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 562
void _M_remove_reference() throw() 
# 563
{ 
# 565
; 
# 566
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 567
{ 
# 568
; 
# 569
try 
# 570
{ delete this; } 
# 571
catch (...) 
# 572
{ }  
# 573
}  
# 574
} 
# 576
_Impl(const _Impl &, size_t); 
# 577
_Impl(const char *, size_t); 
# 578
_Impl(size_t) throw(); 
# 580
~_Impl() throw(); 
# 582
_Impl(const _Impl &); 
# 585
void operator=(const _Impl &); 
# 588
bool _M_check_same_name() 
# 589
{ 
# 590
bool __ret = true; 
# 591
if ((_M_names)[1]) { 
# 593
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 594
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 595
return __ret; 
# 596
} 
# 599
void _M_replace_categories(const _Impl *, category); 
# 602
void _M_replace_category(const _Impl *, const id *const *); 
# 605
void _M_replace_facet(const _Impl *, const id *); 
# 608
void _M_install_facet(const id *, const facet *); 
# 610
template< class _Facet> void 
# 612
_M_init_facet(_Facet *__facet) 
# 613
{ this->_M_install_facet(&_Facet::id, __facet); } 
# 615
template< class _Facet> void 
# 617
_M_init_facet_unchecked(_Facet *__facet) 
# 618
{ 
# 619
__facet->_M_add_reference(); 
# 620
((_M_facets)[(_Facet::id._M_id)()]) = __facet; 
# 621
} 
# 624
void _M_install_cache(const facet *, size_t); 
# 626
void _M_init_extra(facet **); 
# 627
void _M_init_extra(void *, void *, const char *, const char *); 
# 632
}; 
# 647 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
template< class _CharT> 
# 648
class __cxx11::collate : public locale::facet { 
# 654
public: typedef _CharT char_type; 
# 655
typedef basic_string< _CharT>  string_type; 
# 661
protected: __c_locale _M_c_locale_collate; 
# 665
public: static locale::id id; 
# 675 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
explicit collate(size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_get_c_locale()) 
# 677
{ } 
# 689 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
explicit collate(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc)) 
# 691
{ } 
# 706 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
int compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 707
__lo2, const _CharT *__hi2) const 
# 708
{ return do_compare(__lo1, __hi1, __lo2, __hi2); } 
# 725 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
string_type transform(const _CharT *__lo, const _CharT *__hi) const 
# 726
{ return do_transform(__lo, __hi); } 
# 739 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
long hash(const _CharT *__lo, const _CharT *__hi) const 
# 740
{ return do_hash(__lo, __hi); } 
# 744
int _M_compare(const _CharT *, const _CharT *) const throw(); 
# 747
size_t _M_transform(_CharT *, const _CharT *, size_t) const throw(); 
# 752
protected: virtual ~collate() 
# 753
{ _S_destroy_c_locale(_M_c_locale_collate); } 
# 768 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
virtual int do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const; 
# 782 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
virtual string_type do_transform(const _CharT * __lo, const _CharT * __hi) const; 
# 795 "/usr/include/c++/12.2.1/bits/locale_classes.h" 3
virtual long do_hash(const _CharT * __lo, const _CharT * __hi) const; 
# 796
}; 
# 798
template< class _CharT> locale::id 
# 799
__cxx11::collate< _CharT> ::id; 
# 804
template<> int collate< char> ::_M_compare(const char *, const char *) const throw(); 
# 808
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const throw(); 
# 813
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const throw(); 
# 817
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const throw(); 
# 821
template< class _CharT> 
# 822
class __cxx11::collate_byname : public collate< _CharT>  { 
# 827
public: typedef _CharT char_type; 
# 828
typedef basic_string< _CharT>  string_type; 
# 832
explicit collate_byname(const char *__s, std::size_t __refs = 0) : collate< _CharT> (__refs) 
# 834
{ 
# 835
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 837
{ 
# 838
this->_S_destroy_c_locale((this->_M_c_locale_collate)); 
# 839
this->_S_create_c_locale((this->_M_c_locale_collate), __s); 
# 840
}  
# 841
} 
# 845
explicit collate_byname(const std::string &__s, std::size_t __refs = 0) : collate_byname(__s.c_str(), __refs) 
# 846
{ } 
# 851
protected: virtual ~collate_byname() { } 
# 852
}; 
# 855
}
# 39 "/usr/include/c++/12.2.1/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Facet> 
# 45
locale::locale(const locale &__other, _Facet *__f) 
# 46
{ 
# 47
(_M_impl) = (new _Impl(*(__other._M_impl), 1)); 
# 49
try 
# 50
{ (_M_impl)->_M_install_facet(&_Facet::id, __f); } 
# 51
catch (...) 
# 52
{ 
# 53
(_M_impl)->_M_remove_reference(); 
# 54
throw; 
# 55
}  
# 56
delete [] (((_M_impl)->_M_names)[0]); 
# 57
(((_M_impl)->_M_names)[0]) = (0); 
# 58
} 
# 60
template< class _Facet> locale 
# 63
locale::combine(const locale &__other) const 
# 64
{ 
# 65
_Impl *__tmp = new _Impl(*(_M_impl), 1); 
# 66
try 
# 67
{ 
# 68
__tmp->_M_replace_facet(__other._M_impl, &_Facet::id); 
# 69
} 
# 70
catch (...) 
# 71
{ 
# 72
__tmp->_M_remove_reference(); 
# 73
throw; 
# 74
}  
# 75
return ((locale)(__tmp)); 
# 76
} 
# 78
template< class _CharT, class _Traits, class _Alloc> bool 
# 81
locale::operator()(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__s1, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 82
__s2) const 
# 83
{ 
# 84
typedef __cxx11::collate< _CharT>  __collate_type; 
# 85
const __collate_type &__collate = use_facet< __cxx11::collate< _CharT> > (*this); 
# 86
return (__collate.compare(__s1.data(), __s1.data() + __s1.length(), __s2.data(), __s2.data() + __s2.length()) < 0); 
# 88
} 
# 102 "/usr/include/c++/12.2.1/bits/locale_classes.tcc" 3
template< class _Facet> bool 
# 104
has_facet(const locale &__loc) throw() 
# 105
{ 
# 106
const size_t __i = (_Facet::id._M_id)(); 
# 107
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 108
return ((__i < ((__loc._M_impl)->_M_facets_size)) && (dynamic_cast< const _Facet *>(__facets[__i]))); 
# 114
} 
# 130 "/usr/include/c++/12.2.1/bits/locale_classes.tcc" 3
template< class _Facet> const _Facet &
# 132
use_facet(const locale &__loc) 
# 133
{ 
# 134
const size_t __i = (_Facet::id._M_id)(); 
# 135
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 136
if ((__i >= ((__loc._M_impl)->_M_facets_size)) || (!(__facets[__i]))) { 
# 137
__throw_bad_cast(); }  
# 139
return dynamic_cast< const _Facet &>(*(__facets[__i])); 
# 143
} 
# 147
template< class _CharT> int 
# 149
__cxx11::collate< _CharT> ::_M_compare(const _CharT *, const _CharT *) const throw() 
# 150
{ return 0; } 
# 153
template< class _CharT> size_t 
# 155
__cxx11::collate< _CharT> ::_M_transform(_CharT *, const _CharT *, size_t) const throw() 
# 156
{ return 0; } 
# 158
template< class _CharT> int 
# 161
__cxx11::collate< _CharT> ::do_compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 162
__lo2, const _CharT *__hi2) const 
# 163
{ 
# 166
const string_type __one(__lo1, __hi1); 
# 167
const string_type __two(__lo2, __hi2); 
# 169
const _CharT *__p = __one.c_str(); 
# 170
const _CharT *__pend = __one.data() + __one.length(); 
# 171
const _CharT *__q = __two.c_str(); 
# 172
const _CharT *__qend = __two.data() + __two.length(); 
# 177
for (; ;) 
# 178
{ 
# 179
const int __res = _M_compare(__p, __q); 
# 180
if (__res) { 
# 181
return __res; }  
# 183
__p += char_traits< _CharT> ::length(__p); 
# 184
__q += char_traits< _CharT> ::length(__q); 
# 185
if ((__p == __pend) && (__q == __qend)) { 
# 186
return 0; } else { 
# 187
if (__p == __pend) { 
# 188
return -1; } else { 
# 189
if (__q == __qend) { 
# 190
return 1; }  }  }  
# 192
__p++; 
# 193
__q++; 
# 194
}  
# 195
} 
# 197
template< class _CharT> typename __cxx11::collate< _CharT> ::string_type 
# 200
__cxx11::collate< _CharT> ::do_transform(const _CharT *__lo, const _CharT *__hi) const 
# 201
{ 
# 202
string_type __ret; 
# 205
const string_type __str(__lo, __hi); 
# 207
const _CharT *__p = __str.c_str(); 
# 208
const _CharT *__pend = __str.data() + __str.length(); 
# 210
size_t __len = (__hi - __lo) * 2; 
# 212
_CharT *__c = new _CharT [__len]; 
# 214
try 
# 215
{ 
# 219
for (; ;) 
# 220
{ 
# 222
size_t __res = _M_transform(__c, __p, __len); 
# 225
if (__res >= __len) 
# 226
{ 
# 227
__len = (__res + (1)); 
# 228
(delete [] __c), (__c = 0); 
# 229
__c = (new _CharT [__len]); 
# 230
__res = _M_transform(__c, __p, __len); 
# 231
}  
# 233
__ret.append(__c, __res); 
# 234
__p += char_traits< _CharT> ::length(__p); 
# 235
if (__p == __pend) { 
# 236
break; }  
# 238
__p++; 
# 239
__ret.push_back(_CharT()); 
# 240
}  
# 241
} 
# 242
catch (...) 
# 243
{ 
# 244
delete [] __c; 
# 245
throw; 
# 246
}  
# 248
delete [] __c; 
# 250
return __ret; 
# 251
} 
# 253
template< class _CharT> long 
# 256
__cxx11::collate< _CharT> ::do_hash(const _CharT *__lo, const _CharT *__hi) const 
# 257
{ 
# 258
unsigned long __val = (0); 
# 259
for (; __lo < __hi; ++__lo) { 
# 260
__val = ((*__lo) + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits - 7)))); }  
# 264
return static_cast< long>(__val); 
# 265
} 
# 270
extern template class __cxx11::collate< char> ;
# 271
extern template class __cxx11::collate_byname< char> ;
# 273
extern template const __cxx11::collate< char>  &use_facet< __cxx11::collate< char> > (const locale &);
# 277
extern template bool has_facet< __cxx11::collate< char> > (const locale &) throw();
# 282
extern template class __cxx11::collate< wchar_t> ;
# 283
extern template class __cxx11::collate_byname< wchar_t> ;
# 285
extern template const __cxx11::collate< wchar_t>  &use_facet< __cxx11::collate< wchar_t> > (const locale &);
# 289
extern template bool has_facet< __cxx11::collate< wchar_t> > (const locale &) throw();
# 296
}
# 36 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/error_constants.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
enum class errc { 
# 42
address_family_not_supported = 97, 
# 43
address_in_use, 
# 44
address_not_available, 
# 45
already_connected = 106, 
# 46
argument_list_too_long = 7, 
# 47
argument_out_of_domain = 33, 
# 48
bad_address = 14, 
# 49
bad_file_descriptor = 9, 
# 52
bad_message = 74, 
# 55
broken_pipe = 32, 
# 56
connection_aborted = 103, 
# 57
connection_already_in_progress = 114, 
# 58
connection_refused = 111, 
# 59
connection_reset = 104, 
# 60
cross_device_link = 18, 
# 61
destination_address_required = 89, 
# 62
device_or_resource_busy = 16, 
# 63
directory_not_empty = 39, 
# 64
executable_format_error = 8, 
# 65
file_exists = 17, 
# 66
file_too_large = 27, 
# 67
filename_too_long = 36, 
# 68
function_not_supported = 38, 
# 69
host_unreachable = 113, 
# 72
identifier_removed = 43, 
# 75
illegal_byte_sequence = 84, 
# 76
inappropriate_io_control_operation = 25, 
# 77
interrupted = 4, 
# 78
invalid_argument = 22, 
# 79
invalid_seek = 29, 
# 80
io_error = 5, 
# 81
is_a_directory = 21, 
# 82
message_size = 90, 
# 83
network_down = 100, 
# 84
network_reset = 102, 
# 85
network_unreachable = 101, 
# 86
no_buffer_space = 105, 
# 87
no_child_process = 10, 
# 90
no_link = 67, 
# 93
no_lock_available = 37, 
# 96
no_message_available = 61, 
# 99
no_message = 42, 
# 100
no_protocol_option = 92, 
# 101
no_space_on_device = 28, 
# 104
no_stream_resources = 63, 
# 107
no_such_device_or_address = 6, 
# 108
no_such_device = 19, 
# 109
no_such_file_or_directory = 2, 
# 110
no_such_process, 
# 111
not_a_directory = 20, 
# 112
not_a_socket = 88, 
# 115
not_a_stream = 60, 
# 118
not_connected = 107, 
# 119
not_enough_memory = 12, 
# 122
not_supported = 95, 
# 126
operation_canceled = 125, 
# 129
operation_in_progress = 115, 
# 130
operation_not_permitted = 1, 
# 131
operation_not_supported = 95, 
# 132
operation_would_block = 11, 
# 135
owner_dead = 130, 
# 138
permission_denied = 13, 
# 141
protocol_error = 71, 
# 144
protocol_not_supported = 93, 
# 145
read_only_file_system = 30, 
# 146
resource_deadlock_would_occur = 35, 
# 147
resource_unavailable_try_again = 11, 
# 148
result_out_of_range = 34, 
# 151
state_not_recoverable = 131, 
# 155
stream_timeout = 62, 
# 159
text_file_busy = 26, 
# 162
timed_out = 110, 
# 163
too_many_files_open_in_system = 23, 
# 164
too_many_files_open, 
# 165
too_many_links = 31, 
# 166
too_many_symbolic_link_levels = 40, 
# 169
value_too_large = 75, 
# 172
wrong_protocol_type = 91
# 173
}; 
# 176
}
# 41 "/usr/include/c++/12.2.1/stdexcept" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
struct __cow_string { 
# 50
union { 
# 51
const char *_M_p; 
# 52
char _M_bytes[sizeof(const char *)]; 
# 53
}; 
# 55
__cow_string(); 
# 56
__cow_string(const string &); 
# 57
__cow_string(const char *, size_t); 
# 58
__cow_string(const __cow_string &) noexcept; 
# 59
__cow_string &operator=(const __cow_string &) noexcept; 
# 60
~__cow_string(); 
# 62
__cow_string(__cow_string &&) noexcept; 
# 63
__cow_string &operator=(__cow_string &&) noexcept; 
# 65
}; 
# 67
typedef __cxx11::basic_string< char>  __sso_string; 
# 113 "/usr/include/c++/12.2.1/stdexcept" 3
class logic_error : public exception { 
# 115
__cow_string _M_msg; 
# 120
public: explicit logic_error(const string & __arg); 
# 124
explicit logic_error(const char *); 
# 126
logic_error(logic_error &&) noexcept; 
# 127
logic_error &operator=(logic_error &&) noexcept; 
# 131
logic_error(const logic_error &) noexcept; 
# 132
logic_error &operator=(const logic_error &) noexcept; 
# 138
virtual ~logic_error() noexcept; 
# 143
virtual const char *what() const noexcept; 
# 149
}; 
# 153
class domain_error : public logic_error { 
# 156
public: explicit domain_error(const string & __arg); 
# 158
explicit domain_error(const char *); 
# 159
domain_error(const domain_error &) = default;
# 160
domain_error &operator=(const domain_error &) = default;
# 161
domain_error(domain_error &&) = default;
# 162
domain_error &operator=(domain_error &&) = default;
# 164
virtual ~domain_error() noexcept; 
# 165
}; 
# 168
class invalid_argument : public logic_error { 
# 171
public: explicit invalid_argument(const string & __arg); 
# 173
explicit invalid_argument(const char *); 
# 174
invalid_argument(const invalid_argument &) = default;
# 175
invalid_argument &operator=(const invalid_argument &) = default;
# 176
invalid_argument(invalid_argument &&) = default;
# 177
invalid_argument &operator=(invalid_argument &&) = default;
# 179
virtual ~invalid_argument() noexcept; 
# 180
}; 
# 184
class length_error : public logic_error { 
# 187
public: explicit length_error(const string & __arg); 
# 189
explicit length_error(const char *); 
# 190
length_error(const length_error &) = default;
# 191
length_error &operator=(const length_error &) = default;
# 192
length_error(length_error &&) = default;
# 193
length_error &operator=(length_error &&) = default;
# 195
virtual ~length_error() noexcept; 
# 196
}; 
# 200
class out_of_range : public logic_error { 
# 203
public: explicit out_of_range(const string & __arg); 
# 205
explicit out_of_range(const char *); 
# 206
out_of_range(const out_of_range &) = default;
# 207
out_of_range &operator=(const out_of_range &) = default;
# 208
out_of_range(out_of_range &&) = default;
# 209
out_of_range &operator=(out_of_range &&) = default;
# 211
virtual ~out_of_range() noexcept; 
# 212
}; 
# 219
class runtime_error : public exception { 
# 221
__cow_string _M_msg; 
# 226
public: explicit runtime_error(const string & __arg); 
# 230
explicit runtime_error(const char *); 
# 232
runtime_error(runtime_error &&) noexcept; 
# 233
runtime_error &operator=(runtime_error &&) noexcept; 
# 237
runtime_error(const runtime_error &) noexcept; 
# 238
runtime_error &operator=(const runtime_error &) noexcept; 
# 244
virtual ~runtime_error() noexcept; 
# 249
virtual const char *what() const noexcept; 
# 255
}; 
# 258
class range_error : public runtime_error { 
# 261
public: explicit range_error(const string & __arg); 
# 263
explicit range_error(const char *); 
# 264
range_error(const range_error &) = default;
# 265
range_error &operator=(const range_error &) = default;
# 266
range_error(range_error &&) = default;
# 267
range_error &operator=(range_error &&) = default;
# 269
virtual ~range_error() noexcept; 
# 270
}; 
# 273
class overflow_error : public runtime_error { 
# 276
public: explicit overflow_error(const string & __arg); 
# 278
explicit overflow_error(const char *); 
# 279
overflow_error(const overflow_error &) = default;
# 280
overflow_error &operator=(const overflow_error &) = default;
# 281
overflow_error(overflow_error &&) = default;
# 282
overflow_error &operator=(overflow_error &&) = default;
# 284
virtual ~overflow_error() noexcept; 
# 285
}; 
# 288
class underflow_error : public runtime_error { 
# 291
public: explicit underflow_error(const string & __arg); 
# 293
explicit underflow_error(const char *); 
# 294
underflow_error(const underflow_error &) = default;
# 295
underflow_error &operator=(const underflow_error &) = default;
# 296
underflow_error(underflow_error &&) = default;
# 297
underflow_error &operator=(underflow_error &&) = default;
# 299
virtual ~underflow_error() noexcept; 
# 300
}; 
# 305
}
# 46 "/usr/include/c++/12.2.1/system_error" 3
namespace std __attribute((__visibility__("default"))) { 
# 54
class error_code; 
# 55
class error_condition; 
# 56
class system_error; 
# 59
template< class _Tp> 
# 60
struct is_error_code_enum : public false_type { }; 
# 63
template< class _Tp> 
# 64
struct is_error_condition_enum : public false_type { }; 
# 67
template<> struct is_error_condition_enum< errc>  : public true_type { 
# 68
}; 
# 71
template< class _Tp> constexpr bool 
# 72
is_error_code_enum_v = (is_error_code_enum< _Tp> ::value); 
# 74
template< class _Tp> constexpr bool 
# 75
is_error_condition_enum_v = (is_error_condition_enum< _Tp> ::value); 
# 80
inline namespace _V2 { 
# 97 "/usr/include/c++/12.2.1/system_error" 3
class error_category { 
# 100
public: constexpr error_category() noexcept = default;
# 102
virtual ~error_category(); 
# 104
error_category(const error_category &) = delete;
# 105
error_category &operator=(const error_category &) = delete;
# 108
virtual const char *name() const noexcept = 0; 
# 118
private: 
# 116
__attribute((__abi_tag__("cxx11"))) virtual __cow_string 
# 118
_M_message(int) const; 
# 123
public: 
# 121
__attribute((__abi_tag__("cxx11"))) virtual string 
# 123
message(int) const = 0; 
# 135 "/usr/include/c++/12.2.1/system_error" 3
virtual error_condition default_error_condition(int __i) const noexcept; 
# 138
virtual bool equivalent(int __i, const error_condition & __cond) const noexcept; 
# 141
virtual bool equivalent(const error_code & __code, int __i) const noexcept; 
# 144
bool operator==(const error_category &__other) const noexcept 
# 145
{ return this == (&__other); } 
# 153
bool operator!=(const error_category &__other) const noexcept 
# 154
{ return this != (&__other); } 
# 157
bool operator<(const error_category &__other) const noexcept 
# 158
{ return less< const error_category *> ()(this, &__other); } 
# 160
}; 
# 165
__attribute((const)) const error_category &generic_category() noexcept; 
# 168
__attribute((const)) const error_category &system_category() noexcept; 
# 171
}
# 177
inline error_code make_error_code(errc) noexcept; 
# 196 "/usr/include/c++/12.2.1/system_error" 3
class error_code { 
# 199
public: error_code() noexcept : _M_value(0), _M_cat(&system_category()) 
# 200
{ } 
# 202
error_code(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 203
{ } 
# 205
template< class _ErrorCodeEnum, class  = typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value> ::type> 
# 207
error_code(_ErrorCodeEnum __e) noexcept 
# 208
{ (*this) = make_error_code(__e); } 
# 211
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 212
{ 
# 213
(_M_value) = __v; 
# 214
(_M_cat) = (&__cat); 
# 215
} 
# 218
void clear() noexcept 
# 219
{ this->assign(0, system_category()); } 
# 222
template< class _ErrorCodeEnum> typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value, error_code &> ::type 
# 225
operator=(_ErrorCodeEnum __e) noexcept 
# 226
{ return (*this) = make_error_code(__e); } 
# 229
int value() const noexcept { return _M_value; } 
# 232
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 235
error_condition default_error_condition() const noexcept; 
# 237
__attribute((__abi_tag__("cxx11"))) string 
# 239
message() const 
# 240
{ return this->category().message(this->value()); } 
# 242
explicit operator bool() const noexcept 
# 243
{ return (_M_value) != 0; } 
# 247
private: int _M_value; 
# 248
const _V2::error_category *_M_cat; 
# 249
}; 
# 256
inline error_code make_error_code(errc __e) noexcept 
# 257
{ return error_code(static_cast< int>(__e), generic_category()); } 
# 269 "/usr/include/c++/12.2.1/system_error" 3
inline bool operator<(const error_code &__lhs, const error_code &__rhs) noexcept 
# 270
{ 
# 271
return (((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value()))); 
# 274
} 
# 277
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 279
operator<<(basic_ostream< _CharT, _Traits>  &__os, const error_code &__e) 
# 280
{ return (((__os << __e.category().name()) << ':') << __e.value()); } 
# 284
inline error_condition make_error_condition(errc) noexcept; 
# 297 "/usr/include/c++/12.2.1/system_error" 3
class error_condition { 
# 300
public: error_condition() noexcept : _M_value(0), _M_cat(&generic_category()) 
# 301
{ } 
# 303
error_condition(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 304
{ } 
# 306
template< class _ErrorConditionEnum, class  = typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value> ::type> 
# 308
error_condition(_ErrorConditionEnum __e) noexcept 
# 309
{ (*this) = make_error_condition(__e); } 
# 312
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 313
{ 
# 314
(_M_value) = __v; 
# 315
(_M_cat) = (&__cat); 
# 316
} 
# 319
template< class _ErrorConditionEnum> typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value, error_condition &> ::type 
# 322
operator=(_ErrorConditionEnum __e) noexcept 
# 323
{ return (*this) = make_error_condition(__e); } 
# 326
void clear() noexcept 
# 327
{ this->assign(0, generic_category()); } 
# 331
int value() const noexcept { return _M_value; } 
# 334
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 336
__attribute((__abi_tag__("cxx11"))) string 
# 338
message() const 
# 339
{ return this->category().message(this->value()); } 
# 341
explicit operator bool() const noexcept 
# 342
{ return (_M_value) != 0; } 
# 346
private: int _M_value; 
# 347
const _V2::error_category *_M_cat; 
# 348
}; 
# 355
inline error_condition make_error_condition(errc __e) noexcept 
# 356
{ return error_condition(static_cast< int>(__e), generic_category()); } 
# 362
inline bool operator==(const error_code &__lhs, const error_code &__rhs) noexcept 
# 363
{ return (((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value())); 
# 364
} 
# 368
inline bool operator==(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 369
{ 
# 370
return (__lhs.category().equivalent(__lhs.value(), __rhs) || __rhs.category().equivalent(__lhs, __rhs.value())); 
# 372
} 
# 376
inline bool operator==(const error_condition &__lhs, const error_condition &
# 377
__rhs) noexcept 
# 378
{ 
# 379
return (((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value())); 
# 381
} 
# 398 "/usr/include/c++/12.2.1/system_error" 3
inline bool operator<(const error_condition &__lhs, const error_condition &
# 399
__rhs) noexcept 
# 400
{ 
# 401
return (((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value()))); 
# 404
} 
# 408
inline bool operator==(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 409
{ 
# 410
return (__rhs.category().equivalent(__rhs.value(), __lhs) || __lhs.category().equivalent(__rhs, __lhs.value())); 
# 412
} 
# 416
inline bool operator!=(const error_code &__lhs, const error_code &__rhs) noexcept 
# 417
{ return !(__lhs == __rhs); } 
# 421
inline bool operator!=(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 422
{ return !(__lhs == __rhs); } 
# 426
inline bool operator!=(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 427
{ return !(__lhs == __rhs); } 
# 431
inline bool operator!=(const error_condition &__lhs, const error_condition &
# 432
__rhs) noexcept 
# 433
{ return !(__lhs == __rhs); } 
# 446 "/usr/include/c++/12.2.1/system_error" 3
class system_error : public runtime_error { 
# 449
error_code _M_code; 
# 452
public: system_error(error_code __ec = error_code()) : runtime_error(__ec.message()), _M_code(__ec) 
# 453
{ } 
# 455
system_error(error_code __ec, const string &__what) : runtime_error((((__what + (": "))) + (__ec.message()))), _M_code(__ec) 
# 456
{ } 
# 458
system_error(error_code __ec, const char *__what) : runtime_error((__what + (((": ") + (__ec.message()))))), _M_code(__ec) 
# 459
{ } 
# 461
system_error(int __v, const _V2::error_category &__ecat, const char *__what) : system_error(error_code(__v, __ecat), __what) 
# 462
{ } 
# 464
system_error(int __v, const _V2::error_category &__ecat) : runtime_error(error_code(__v, __ecat).message()), _M_code(__v, __ecat) 
# 466
{ } 
# 468
system_error(int __v, const _V2::error_category &__ecat, const string &__what) : runtime_error((((__what + (": "))) + (error_code(__v, __ecat).message()))), _M_code(__v, __ecat) 
# 470
{ } 
# 473
system_error(const system_error &) = default;
# 474
system_error &operator=(const system_error &) = default;
# 477
virtual ~system_error() noexcept; 
# 480
const error_code &code() const noexcept { return _M_code; } 
# 481
}; 
# 484
}
# 488
namespace std __attribute((__visibility__("default"))) { 
# 497
template<> struct hash< error_code>  : public __hash_base< unsigned long, error_code>  { 
# 501
size_t operator()(const error_code &__e) const noexcept 
# 502
{ 
# 503
const size_t __tmp = std::_Hash_impl::hash(__e.value()); 
# 504
return std::_Hash_impl::__hash_combine(&__e.category(), __tmp); 
# 505
} 
# 506
}; 
# 514
template<> struct hash< error_condition>  : public __hash_base< unsigned long, error_condition>  { 
# 518
size_t operator()(const error_condition &__e) const noexcept 
# 519
{ 
# 520
const size_t __tmp = std::_Hash_impl::hash(__e.value()); 
# 521
return std::_Hash_impl::__hash_combine(&__e.category(), __tmp); 
# 522
} 
# 523
}; 
# 527
}
# 49 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
enum _Ios_Fmtflags { 
# 59
_S_boolalpha = (1L << 0), 
# 60
_S_dec, 
# 61
_S_fixed = (1L << 2), 
# 62
_S_hex = (1L << 3), 
# 63
_S_internal = (1L << 4), 
# 64
_S_left = (1L << 5), 
# 65
_S_oct = (1L << 6), 
# 66
_S_right = (1L << 7), 
# 67
_S_scientific = (1L << 8), 
# 68
_S_showbase = (1L << 9), 
# 69
_S_showpoint = (1L << 10), 
# 70
_S_showpos = (1L << 11), 
# 71
_S_skipws = (1L << 12), 
# 72
_S_unitbuf = (1L << 13), 
# 73
_S_uppercase = (1L << 14), 
# 74
_S_adjustfield = ((_S_left | _S_right) | _S_internal), 
# 75
_S_basefield = ((_S_dec | _S_oct) | _S_hex), 
# 76
_S_floatfield = (_S_scientific | _S_fixed), 
# 77
_S_ios_fmtflags_end = (1L << 16), 
# 78
_S_ios_fmtflags_max = 2147483647, 
# 79
_S_ios_fmtflags_min = (~2147483647)
# 80
}; 
# 83
constexpr _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 84
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 87
constexpr _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 88
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 91
constexpr _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 92
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 95
constexpr _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 96
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 99
inline const _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 100
{ return __a = (__a | __b); } 
# 103
inline const _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 104
{ return __a = (__a & __b); } 
# 107
inline const _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 108
{ return __a = (__a ^ __b); } 
# 111
enum _Ios_Openmode { 
# 113
_S_app = (1L << 0), 
# 114
_S_ate, 
# 115
_S_bin = (1L << 2), 
# 116
_S_in = (1L << 3), 
# 117
_S_out = (1L << 4), 
# 118
_S_trunc = (1L << 5), 
# 119
_S_noreplace = (1L << 6), 
# 120
_S_ios_openmode_end = (1L << 16), 
# 121
_S_ios_openmode_max = 2147483647, 
# 122
_S_ios_openmode_min = (~2147483647)
# 123
}; 
# 126
constexpr _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 127
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 130
constexpr _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 131
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 134
constexpr _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 135
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 138
constexpr _Ios_Openmode operator~(_Ios_Openmode __a) 
# 139
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 142
inline const _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 143
{ return __a = (__a | __b); } 
# 146
inline const _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 147
{ return __a = (__a & __b); } 
# 150
inline const _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 151
{ return __a = (__a ^ __b); } 
# 154
enum _Ios_Iostate { 
# 156
_S_goodbit, 
# 157
_S_badbit, 
# 158
_S_eofbit, 
# 159
_S_failbit = (1L << 2), 
# 160
_S_ios_iostate_end = (1L << 16), 
# 161
_S_ios_iostate_max = 2147483647, 
# 162
_S_ios_iostate_min = (~2147483647)
# 163
}; 
# 166
constexpr _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 167
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 170
constexpr _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 171
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 174
constexpr _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 175
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 178
constexpr _Ios_Iostate operator~(_Ios_Iostate __a) 
# 179
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 182
inline const _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 183
{ return __a = (__a | __b); } 
# 186
inline const _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 187
{ return __a = (__a & __b); } 
# 190
inline const _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 191
{ return __a = (__a ^ __b); } 
# 194
enum _Ios_Seekdir { 
# 196
_S_beg, 
# 197
_S_cur, 
# 198
_S_end, 
# 199
_S_ios_seekdir_end = (1L << 16)
# 200
}; 
# 204
enum class io_errc { stream = 1}; 
# 206
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
# 208
const _V2::error_category &iostream_category() noexcept; 
# 211
inline error_code make_error_code(io_errc __e) noexcept 
# 212
{ return error_code(static_cast< int>(__e), iostream_category()); } 
# 215
inline error_condition make_error_condition(io_errc __e) noexcept 
# 216
{ return error_condition(static_cast< int>(__e), iostream_category()); } 
# 229 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
class ios_base { 
# 256 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
public: class __attribute((__abi_tag__("cxx11"))) failure : public system_error { 
# 260
public: explicit failure(const string & __str); 
# 264
explicit failure(const string &, const error_code &); 
# 267
explicit failure(const char *, const error_code & = io_errc::stream); 
# 271
virtual ~failure() throw(); 
# 274
virtual const char *what() const throw(); 
# 275
}; 
# 342 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags; 
# 345
static const fmtflags boolalpha = _S_boolalpha; 
# 348
static const fmtflags dec = _S_dec; 
# 351
static const fmtflags fixed = _S_fixed; 
# 354
static const fmtflags hex = _S_hex; 
# 359
static const fmtflags internal = _S_internal; 
# 363
static const fmtflags left = _S_left; 
# 366
static const fmtflags oct = _S_oct; 
# 370
static const fmtflags right = _S_right; 
# 373
static const fmtflags scientific = _S_scientific; 
# 377
static const fmtflags showbase = _S_showbase; 
# 381
static const fmtflags showpoint = _S_showpoint; 
# 384
static const fmtflags showpos = _S_showpos; 
# 387
static const fmtflags skipws = _S_skipws; 
# 390
static const fmtflags unitbuf = _S_unitbuf; 
# 394
static const fmtflags uppercase = _S_uppercase; 
# 397
static const fmtflags adjustfield = _S_adjustfield; 
# 400
static const fmtflags basefield = _S_basefield; 
# 403
static const fmtflags floatfield = _S_floatfield; 
# 417 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
typedef _Ios_Iostate iostate; 
# 421
static const iostate badbit = _S_badbit; 
# 424
static const iostate eofbit = _S_eofbit; 
# 429
static const iostate failbit = _S_failbit; 
# 432
static const iostate goodbit = _S_goodbit; 
# 448 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
typedef _Ios_Openmode openmode; 
# 451
static const openmode app = _S_app; 
# 454
static const openmode ate = _S_ate; 
# 459
static const openmode binary = _S_bin; 
# 462
static const openmode in = _S_in; 
# 465
static const openmode out = _S_out; 
# 468
static const openmode trunc = _S_trunc; 
# 470
static const openmode __noreplace = _S_noreplace; 
# 488 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir; 
# 491
static const seekdir beg = _S_beg; 
# 494
static const seekdir cur = _S_cur; 
# 497
static const seekdir end = _S_end; 
# 521 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
enum event { 
# 523
erase_event, 
# 524
imbue_event, 
# 525
copyfmt_event
# 526
}; 
# 538 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
typedef void (*event_callback)(event __e, ios_base & __b, int __i); 
# 551 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
void register_callback(event_callback __fn, int __index); 
# 554
protected: streamsize _M_precision; 
# 555
streamsize _M_width; 
# 556
fmtflags _M_flags; 
# 557
iostate _M_exception; 
# 558
iostate _M_streambuf_state; 
# 562
struct _Callback_list { 
# 565
_Callback_list *_M_next; 
# 566
event_callback _M_fn; 
# 567
int _M_index; 
# 568
_Atomic_word _M_refcount; 
# 570
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 571
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 572
{ } 
# 575
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 579
int _M_remove_reference() 
# 580
{ 
# 582
; 
# 583
int __res = __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); 
# 584
if (__res == 0) 
# 585
{ 
# 586
; 
# 587
}  
# 588
return __res; 
# 589
} 
# 590
}; 
# 592
_Callback_list *_M_callbacks; 
# 595
void _M_call_callbacks(event __ev) throw(); 
# 598
void _M_dispose_callbacks() throw(); 
# 601
struct _Words { 
# 603
void *_M_pword; 
# 604
long _M_iword; 
# 605
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 606
}; 
# 609
_Words _M_word_zero; 
# 613
enum { _S_local_word_size = 8}; 
# 614
_Words _M_local_word[_S_local_word_size]; 
# 617
int _M_word_size; 
# 618
_Words *_M_word; 
# 621
_Words &_M_grow_words(int __index, bool __iword); 
# 624
locale _M_ios_locale; 
# 627
void _M_init() throw(); 
# 635
public: class Init { 
# 637
friend class ios_base; 
# 639
public: Init(); 
# 640
~Init(); 
# 643
Init(const Init &) = default;
# 644
Init &operator=(const Init &) = default;
# 648
private: static _Atomic_word _S_refcount; 
# 649
static bool _S_synced_with_stdio; 
# 650
}; 
# 658
fmtflags flags() const 
# 659
{ return _M_flags; } 
# 669 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl) 
# 670
{ 
# 671
fmtflags __old = _M_flags; 
# 672
(_M_flags) = __fmtfl; 
# 673
return __old; 
# 674
} 
# 685 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl) 
# 686
{ 
# 687
fmtflags __old = _M_flags; 
# 688
((_M_flags) |= __fmtfl); 
# 689
return __old; 
# 690
} 
# 702 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 703
{ 
# 704
fmtflags __old = _M_flags; 
# 705
((_M_flags) &= ((~__mask))); 
# 706
((_M_flags) |= ((__fmtfl & __mask))); 
# 707
return __old; 
# 708
} 
# 717
void unsetf(fmtflags __mask) 
# 718
{ ((_M_flags) &= ((~__mask))); } 
# 728 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
streamsize precision() const 
# 729
{ return _M_precision; } 
# 737
streamsize precision(streamsize __prec) 
# 738
{ 
# 739
streamsize __old = _M_precision; 
# 740
(_M_precision) = __prec; 
# 741
return __old; 
# 742
} 
# 751
streamsize width() const 
# 752
{ return _M_width; } 
# 760
streamsize width(streamsize __wide) 
# 761
{ 
# 762
streamsize __old = _M_width; 
# 763
(_M_width) = __wide; 
# 764
return __old; 
# 765
} 
# 779 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
static bool sync_with_stdio(bool __sync = true); 
# 791 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
locale imbue(const locale & __loc) throw(); 
# 802 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
locale getloc() const 
# 803
{ return _M_ios_locale; } 
# 813 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
const locale &_M_getloc() const 
# 814
{ return _M_ios_locale; } 
# 832 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
static int xalloc() throw(); 
# 848 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
long &iword(int __ix) 
# 849
{ 
# 850
_Words &__word = (((unsigned)__ix) < ((unsigned)(_M_word_size))) ? (_M_word)[__ix] : this->_M_grow_words(__ix, true); 
# 852
return __word._M_iword; 
# 853
} 
# 869 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
void *&pword(int __ix) 
# 870
{ 
# 871
_Words &__word = (((unsigned)__ix) < ((unsigned)(_M_word_size))) ? (_M_word)[__ix] : this->_M_grow_words(__ix, false); 
# 873
return __word._M_pword; 
# 874
} 
# 885 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
virtual ~ios_base(); 
# 888
protected: ios_base() throw(); 
# 900 "/usr/include/c++/12.2.1/bits/ios_base.h" 3
public: ios_base(const ios_base &) = delete;
# 903
ios_base &operator=(const ios_base &) = delete;
# 907
protected: void _M_move(ios_base &) noexcept; 
# 910
void _M_swap(ios_base & __rhs) noexcept; 
# 912
}; 
# 917
inline ios_base &boolalpha(ios_base &__base) 
# 918
{ 
# 919
__base.setf(ios_base::boolalpha); 
# 920
return __base; 
# 921
} 
# 925
inline ios_base &noboolalpha(ios_base &__base) 
# 926
{ 
# 927
__base.unsetf(ios_base::boolalpha); 
# 928
return __base; 
# 929
} 
# 933
inline ios_base &showbase(ios_base &__base) 
# 934
{ 
# 935
__base.setf(ios_base::showbase); 
# 936
return __base; 
# 937
} 
# 941
inline ios_base &noshowbase(ios_base &__base) 
# 942
{ 
# 943
__base.unsetf(ios_base::showbase); 
# 944
return __base; 
# 945
} 
# 949
inline ios_base &showpoint(ios_base &__base) 
# 950
{ 
# 951
__base.setf(ios_base::showpoint); 
# 952
return __base; 
# 953
} 
# 957
inline ios_base &noshowpoint(ios_base &__base) 
# 958
{ 
# 959
__base.unsetf(ios_base::showpoint); 
# 960
return __base; 
# 961
} 
# 965
inline ios_base &showpos(ios_base &__base) 
# 966
{ 
# 967
__base.setf(ios_base::showpos); 
# 968
return __base; 
# 969
} 
# 973
inline ios_base &noshowpos(ios_base &__base) 
# 974
{ 
# 975
__base.unsetf(ios_base::showpos); 
# 976
return __base; 
# 977
} 
# 981
inline ios_base &skipws(ios_base &__base) 
# 982
{ 
# 983
__base.setf(ios_base::skipws); 
# 984
return __base; 
# 985
} 
# 989
inline ios_base &noskipws(ios_base &__base) 
# 990
{ 
# 991
__base.unsetf(ios_base::skipws); 
# 992
return __base; 
# 993
} 
# 997
inline ios_base &uppercase(ios_base &__base) 
# 998
{ 
# 999
__base.setf(ios_base::uppercase); 
# 1000
return __base; 
# 1001
} 
# 1005
inline ios_base &nouppercase(ios_base &__base) 
# 1006
{ 
# 1007
__base.unsetf(ios_base::uppercase); 
# 1008
return __base; 
# 1009
} 
# 1013
inline ios_base &unitbuf(ios_base &__base) 
# 1014
{ 
# 1015
__base.setf(ios_base::unitbuf); 
# 1016
return __base; 
# 1017
} 
# 1021
inline ios_base &nounitbuf(ios_base &__base) 
# 1022
{ 
# 1023
__base.unsetf(ios_base::unitbuf); 
# 1024
return __base; 
# 1025
} 
# 1030
inline ios_base &internal(ios_base &__base) 
# 1031
{ 
# 1032
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 1033
return __base; 
# 1034
} 
# 1038
inline ios_base &left(ios_base &__base) 
# 1039
{ 
# 1040
__base.setf(ios_base::left, ios_base::adjustfield); 
# 1041
return __base; 
# 1042
} 
# 1046
inline ios_base &right(ios_base &__base) 
# 1047
{ 
# 1048
__base.setf(ios_base::right, ios_base::adjustfield); 
# 1049
return __base; 
# 1050
} 
# 1055
inline ios_base &dec(ios_base &__base) 
# 1056
{ 
# 1057
__base.setf(ios_base::dec, ios_base::basefield); 
# 1058
return __base; 
# 1059
} 
# 1063
inline ios_base &hex(ios_base &__base) 
# 1064
{ 
# 1065
__base.setf(ios_base::hex, ios_base::basefield); 
# 1066
return __base; 
# 1067
} 
# 1071
inline ios_base &oct(ios_base &__base) 
# 1072
{ 
# 1073
__base.setf(ios_base::oct, ios_base::basefield); 
# 1074
return __base; 
# 1075
} 
# 1080
inline ios_base &fixed(ios_base &__base) 
# 1081
{ 
# 1082
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 1083
return __base; 
# 1084
} 
# 1088
inline ios_base &scientific(ios_base &__base) 
# 1089
{ 
# 1090
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 1091
return __base; 
# 1092
} 
# 1100
inline ios_base &hexfloat(ios_base &__base) 
# 1101
{ 
# 1102
__base.setf((ios_base::fixed | ios_base::scientific), ios_base::floatfield); 
# 1103
return __base; 
# 1104
} 
# 1108
inline ios_base &defaultfloat(ios_base &__base) 
# 1109
{ 
# 1110
__base.unsetf(ios_base::floatfield); 
# 1111
return __base; 
# 1112
} 
# 1116
}
# 45 "/usr/include/c++/12.2.1/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
template< class _CharT, class _Traits> streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 121 "/usr/include/c++/12.2.1/streambuf" 3
template< class _CharT, class _Traits> 
# 122
class basic_streambuf { 
# 131
public: typedef _CharT char_type; 
# 132
typedef _Traits traits_type; 
# 133
typedef typename _Traits::int_type int_type; 
# 134
typedef typename _Traits::pos_type pos_type; 
# 135
typedef typename _Traits::off_type off_type; 
# 140
typedef basic_streambuf __streambuf_type; 
# 143
friend class basic_ios< char_type, traits_type> ; 
# 144
friend class basic_istream< char_type, traits_type> ; 
# 145
friend class basic_ostream< char_type, traits_type> ; 
# 146
friend class istreambuf_iterator< char_type, traits_type> ; 
# 147
friend class ostreambuf_iterator< char_type, traits_type> ; 
# 150
friend streamsize __copy_streambufs_eof<> (basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 152
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , _CharT2 *); 
# 158
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2> > ::__type find(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , const _CharT2 &); 
# 164
template< class _CharT2, class _Distance> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, void> ::__type advance(std::istreambuf_iterator< _CharT2>  &, _Distance); 
# 169
friend void __istream_extract(std::istream &, char *, std::streamsize); 
# 171
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &operator>>(std::basic_istream< _CharT2, _Traits2>  &, std::__cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &); 
# 176
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &getline(std::basic_istream< _CharT2, _Traits2>  &, std::__cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &, _CharT2); 
# 189
protected: char_type *_M_in_beg; 
# 190
char_type *_M_in_cur; 
# 191
char_type *_M_in_end; 
# 192
char_type *_M_out_beg; 
# 193
char_type *_M_out_cur; 
# 194
char_type *_M_out_end; 
# 197
locale _M_buf_locale; 
# 202
public: virtual ~basic_streambuf() 
# 203
{ } 
# 214 "/usr/include/c++/12.2.1/streambuf" 3
locale pubimbue(const locale &__loc) 
# 215
{ 
# 216
locale __tmp(getloc()); 
# 217
imbue(__loc); 
# 218
((_M_buf_locale) = __loc); 
# 219
return __tmp; 
# 220
} 
# 231 "/usr/include/c++/12.2.1/streambuf" 3
locale getloc() const 
# 232
{ return _M_buf_locale; } 
# 244 "/usr/include/c++/12.2.1/streambuf" 3
basic_streambuf *pubsetbuf(char_type *__s, streamsize __n) 
# 245
{ return setbuf(__s, __n); } 
# 256 "/usr/include/c++/12.2.1/streambuf" 3
pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode 
# 257
__mode = (ios_base::in | ios_base::out)) 
# 258
{ return seekoff(__off, __way, __mode); } 
# 268 "/usr/include/c++/12.2.1/streambuf" 3
pos_type pubseekpos(pos_type __sp, ios_base::openmode 
# 269
__mode = (ios_base::in | ios_base::out)) 
# 270
{ return seekpos(__sp, __mode); } 
# 276
int pubsync() { return sync(); } 
# 289 "/usr/include/c++/12.2.1/streambuf" 3
streamsize in_avail() 
# 290
{ 
# 291
const streamsize __ret = egptr() - gptr(); 
# 292
return (__ret) ? __ret : showmanyc(); 
# 293
} 
# 303 "/usr/include/c++/12.2.1/streambuf" 3
int_type snextc() 
# 304
{ 
# 305
int_type __ret = traits_type::eof(); 
# 306
if (__builtin_expect(!traits_type::eq_int_type(sbumpc(), __ret), true)) { 
# 308
__ret = sgetc(); }  
# 309
return __ret; 
# 310
} 
# 321 "/usr/include/c++/12.2.1/streambuf" 3
int_type sbumpc() 
# 322
{ 
# 323
int_type __ret; 
# 324
if (__builtin_expect(gptr() < egptr(), true)) 
# 325
{ 
# 326
__ret = traits_type::to_int_type(*gptr()); 
# 327
gbump(1); 
# 328
} else { 
# 330
__ret = uflow(); }  
# 331
return __ret; 
# 332
} 
# 343 "/usr/include/c++/12.2.1/streambuf" 3
int_type sgetc() 
# 344
{ 
# 345
int_type __ret; 
# 346
if (__builtin_expect(gptr() < egptr(), true)) { 
# 347
__ret = traits_type::to_int_type(*gptr()); } else { 
# 349
__ret = underflow(); }  
# 350
return __ret; 
# 351
} 
# 362 "/usr/include/c++/12.2.1/streambuf" 3
streamsize sgetn(char_type *__s, streamsize __n) 
# 363
{ return xsgetn(__s, __n); } 
# 377 "/usr/include/c++/12.2.1/streambuf" 3
int_type sputbackc(char_type __c) 
# 378
{ 
# 379
int_type __ret; 
# 380
const bool __testpos = eback() < gptr(); 
# 381
if (__builtin_expect((!__testpos) || (!traits_type::eq(__c, gptr()[-1])), false)) { 
# 383
__ret = pbackfail(traits_type::to_int_type(__c)); } else 
# 385
{ 
# 386
gbump(-1); 
# 387
__ret = traits_type::to_int_type(*gptr()); 
# 388
}  
# 389
return __ret; 
# 390
} 
# 402 "/usr/include/c++/12.2.1/streambuf" 3
int_type sungetc() 
# 403
{ 
# 404
int_type __ret; 
# 405
if (__builtin_expect(eback() < gptr(), true)) 
# 406
{ 
# 407
gbump(-1); 
# 408
__ret = traits_type::to_int_type(*gptr()); 
# 409
} else { 
# 411
__ret = pbackfail(); }  
# 412
return __ret; 
# 413
} 
# 429 "/usr/include/c++/12.2.1/streambuf" 3
int_type sputc(char_type __c) 
# 430
{ 
# 431
int_type __ret; 
# 432
if (__builtin_expect(pptr() < epptr(), true)) 
# 433
{ 
# 434
(*pptr()) = __c; 
# 435
pbump(1); 
# 436
__ret = traits_type::to_int_type(__c); 
# 437
} else { 
# 439
__ret = overflow(traits_type::to_int_type(__c)); }  
# 440
return __ret; 
# 441
} 
# 455 "/usr/include/c++/12.2.1/streambuf" 3
streamsize sputn(const char_type *__s, streamsize __n) 
# 456
{ return xsputn(__s, __n); } 
# 468 "/usr/include/c++/12.2.1/streambuf" 3
protected: basic_streambuf() : _M_in_beg((0)), _M_in_cur((0)), _M_in_end((0)), _M_out_beg((0)), _M_out_cur((0)), _M_out_end((0)), _M_buf_locale(locale()) 
# 472
{ } 
# 487 "/usr/include/c++/12.2.1/streambuf" 3
char_type *eback() const { return _M_in_beg; } 
# 490
char_type *gptr() const { return _M_in_cur; } 
# 493
char_type *egptr() const { return _M_in_end; } 
# 503 "/usr/include/c++/12.2.1/streambuf" 3
void gbump(int __n) { (_M_in_cur) += __n; } 
# 514 "/usr/include/c++/12.2.1/streambuf" 3
void setg(char_type *__gbeg, char_type *__gnext, char_type *__gend) 
# 515
{ 
# 516
(_M_in_beg) = __gbeg; 
# 517
(_M_in_cur) = __gnext; 
# 518
(_M_in_end) = __gend; 
# 519
} 
# 534 "/usr/include/c++/12.2.1/streambuf" 3
char_type *pbase() const { return _M_out_beg; } 
# 537
char_type *pptr() const { return _M_out_cur; } 
# 540
char_type *epptr() const { return _M_out_end; } 
# 550 "/usr/include/c++/12.2.1/streambuf" 3
void pbump(int __n) { (_M_out_cur) += __n; } 
# 560 "/usr/include/c++/12.2.1/streambuf" 3
void setp(char_type *__pbeg, char_type *__pend) 
# 561
{ 
# 562
(_M_out_beg) = ((_M_out_cur) = __pbeg); 
# 563
(_M_out_end) = __pend; 
# 564
} 
# 581 "/usr/include/c++/12.2.1/streambuf" 3
virtual void imbue(const locale &__loc __attribute((__unused__))) 
# 582
{ } 
# 596 "/usr/include/c++/12.2.1/streambuf" 3
virtual basic_streambuf *setbuf(char_type *, streamsize) 
# 597
{ return this; } 
# 607 "/usr/include/c++/12.2.1/streambuf" 3
virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 609
{ return (pos_type)((off_type)(-1)); } 
# 619 "/usr/include/c++/12.2.1/streambuf" 3
virtual pos_type seekpos(pos_type, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 621
{ return (pos_type)((off_type)(-1)); } 
# 632 "/usr/include/c++/12.2.1/streambuf" 3
virtual int sync() { return 0; } 
# 654 "/usr/include/c++/12.2.1/streambuf" 3
virtual streamsize showmanyc() { return 0; } 
# 670 "/usr/include/c++/12.2.1/streambuf" 3
virtual streamsize xsgetn(char_type * __s, streamsize __n); 
# 692 "/usr/include/c++/12.2.1/streambuf" 3
virtual int_type underflow() 
# 693
{ return traits_type::eof(); } 
# 705 "/usr/include/c++/12.2.1/streambuf" 3
virtual int_type uflow() 
# 706
{ 
# 707
int_type __ret = traits_type::eof(); 
# 708
const bool __testeof = traits_type::eq_int_type(underflow(), __ret); 
# 710
if (!__testeof) 
# 711
{ 
# 712
__ret = traits_type::to_int_type(*gptr()); 
# 713
gbump(1); 
# 714
}  
# 715
return __ret; 
# 716
} 
# 729 "/usr/include/c++/12.2.1/streambuf" 3
virtual int_type pbackfail(int_type __c __attribute((__unused__)) = traits_type::eof()) 
# 730
{ return traits_type::eof(); } 
# 747 "/usr/include/c++/12.2.1/streambuf" 3
virtual streamsize xsputn(const char_type * __s, streamsize __n); 
# 773 "/usr/include/c++/12.2.1/streambuf" 3
virtual int_type overflow(int_type __c __attribute((__unused__)) = traits_type::eof()) 
# 774
{ return traits_type::eof(); } 
# 800 "/usr/include/c++/12.2.1/streambuf" 3
void __safe_gbump(streamsize __n) { (_M_in_cur) += __n; } 
# 803
void __safe_pbump(streamsize __n) { (_M_out_cur) += __n; } 
# 810
basic_streambuf(const basic_streambuf &); 
# 813
basic_streambuf &operator=(const basic_streambuf &); 
# 817
void swap(basic_streambuf &__sb) 
# 818
{ 
# 819
std::swap(_M_in_beg, __sb._M_in_beg); 
# 820
std::swap(_M_in_cur, __sb._M_in_cur); 
# 821
std::swap(_M_in_end, __sb._M_in_end); 
# 822
std::swap(_M_out_beg, __sb._M_out_beg); 
# 823
std::swap(_M_out_cur, __sb._M_out_cur); 
# 824
std::swap(_M_out_end, __sb._M_out_end); 
# 825
std::swap(_M_buf_locale, __sb._M_buf_locale); 
# 826
} 
# 828
}; 
# 831
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > ::
    basic_streambuf ( const basic_streambuf & ) = default;
# 835
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > &
    std :: basic_streambuf < _CharT, _Traits > ::
    operator = ( const basic_streambuf & ) = default;
# 844
template<> streamsize __copy_streambufs_eof(basic_streambuf< char>  * __sbin, basic_streambuf< char>  * __sbout, bool & __ineof); 
# 849
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t>  * __sbin, basic_streambuf< wchar_t>  * __sbout, bool & __ineof); 
# 856
}
# 39 "/usr/include/c++/12.2.1/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> streamsize 
# 46
basic_streambuf< _CharT, _Traits> ::xsgetn(char_type *__s, streamsize __n) 
# 47
{ 
# 48
streamsize __ret = (0); 
# 49
while (__ret < __n) 
# 50
{ 
# 51
const streamsize __buf_len = egptr() - gptr(); 
# 52
if (__buf_len) 
# 53
{ 
# 54
const streamsize __remaining = __n - __ret; 
# 55
const streamsize __len = std::min(__buf_len, __remaining); 
# 56
traits_type::copy(__s, gptr(), __len); 
# 57
__ret += __len; 
# 58
__s += __len; 
# 59
__safe_gbump(__len); 
# 60
}  
# 62
if (__ret < __n) 
# 63
{ 
# 64
const int_type __c = uflow(); 
# 65
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 66
{ 
# 67
traits_type::assign(*(__s++), traits_type::to_char_type(__c)); 
# 68
++__ret; 
# 69
} else { 
# 71
break; }  
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits> streamsize 
# 80
basic_streambuf< _CharT, _Traits> ::xsputn(const char_type *__s, streamsize __n) 
# 81
{ 
# 82
streamsize __ret = (0); 
# 83
while (__ret < __n) 
# 84
{ 
# 85
const streamsize __buf_len = epptr() - pptr(); 
# 86
if (__buf_len) 
# 87
{ 
# 88
const streamsize __remaining = __n - __ret; 
# 89
const streamsize __len = std::min(__buf_len, __remaining); 
# 90
traits_type::copy(pptr(), __s, __len); 
# 91
__ret += __len; 
# 92
__s += __len; 
# 93
__safe_pbump(__len); 
# 94
}  
# 96
if (__ret < __n) 
# 97
{ 
# 98
int_type __c = overflow(traits_type::to_int_type(*__s)); 
# 99
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 100
{ 
# 101
++__ret; 
# 102
++__s; 
# 103
} else { 
# 105
break; }  
# 106
}  
# 107
}  
# 108
return __ret; 
# 109
} 
# 114
template< class _CharT, class _Traits> streamsize 
# 116
__copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 117
__sbout, bool &
# 118
__ineof) 
# 119
{ 
# 120
streamsize __ret = (0); 
# 121
__ineof = true; 
# 122
typename _Traits::int_type __c = __sbin->sgetc(); 
# 123
while (!_Traits::eq_int_type(__c, _Traits::eof())) 
# 124
{ 
# 125
__c = __sbout->sputc(_Traits::to_char_type(__c)); 
# 126
if (_Traits::eq_int_type(__c, _Traits::eof())) 
# 127
{ 
# 128
__ineof = false; 
# 129
break; 
# 130
}  
# 131
++__ret; 
# 132
__c = __sbin->snextc(); 
# 133
}  
# 134
return __ret; 
# 135
} 
# 137
template< class _CharT, class _Traits> inline streamsize 
# 139
__copy_streambufs(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 140
__sbout) 
# 141
{ 
# 142
bool __ineof; 
# 143
return __copy_streambufs_eof(__sbin, __sbout, __ineof); 
# 144
} 
# 149
extern template class basic_streambuf< char> ;
# 151
extern template streamsize __copy_streambufs(basic_streambuf< char>  * __sbin, basic_streambuf< char>  * __sbout);
# 157
extern template class basic_streambuf< wchar_t> ;
# 159
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t>  * __sbin, basic_streambuf< wchar_t>  * __sbout);
# 167
}
# 38 "/usr/include/bits/wctype-wchar.h" 3
typedef unsigned long wctype_t; 
# 57 "/usr/include/bits/wctype-wchar.h" 3
enum { 
# 58
__ISwupper, 
# 59
__ISwlower, 
# 60
__ISwalpha, 
# 61
__ISwdigit, 
# 62
__ISwxdigit, 
# 63
__ISwspace, 
# 64
__ISwprint, 
# 65
__ISwgraph, 
# 66
__ISwblank, 
# 67
__ISwcntrl, 
# 68
__ISwpunct, 
# 69
__ISwalnum, 
# 71
_ISwupper = ((__ISwupper < 8) ? (int)((1UL << __ISwupper) << 24) : ((__ISwupper < 16) ? (int)((1UL << __ISwupper) << 8) : ((__ISwupper < 24) ? (int)((1UL << __ISwupper) >> 8) : ((int)((1UL << __ISwupper) >> 24))))), 
# 72
_ISwlower = ((__ISwlower < 8) ? (int)((1UL << __ISwlower) << 24) : ((__ISwlower < 16) ? (int)((1UL << __ISwlower) << 8) : ((__ISwlower < 24) ? (int)((1UL << __ISwlower) >> 8) : ((int)((1UL << __ISwlower) >> 24))))), 
# 73
_ISwalpha = ((__ISwalpha < 8) ? (int)((1UL << __ISwalpha) << 24) : ((__ISwalpha < 16) ? (int)((1UL << __ISwalpha) << 8) : ((__ISwalpha < 24) ? (int)((1UL << __ISwalpha) >> 8) : ((int)((1UL << __ISwalpha) >> 24))))), 
# 74
_ISwdigit = ((__ISwdigit < 8) ? (int)((1UL << __ISwdigit) << 24) : ((__ISwdigit < 16) ? (int)((1UL << __ISwdigit) << 8) : ((__ISwdigit < 24) ? (int)((1UL << __ISwdigit) >> 8) : ((int)((1UL << __ISwdigit) >> 24))))), 
# 75
_ISwxdigit = ((__ISwxdigit < 8) ? (int)((1UL << __ISwxdigit) << 24) : ((__ISwxdigit < 16) ? (int)((1UL << __ISwxdigit) << 8) : ((__ISwxdigit < 24) ? (int)((1UL << __ISwxdigit) >> 8) : ((int)((1UL << __ISwxdigit) >> 24))))), 
# 76
_ISwspace = ((__ISwspace < 8) ? (int)((1UL << __ISwspace) << 24) : ((__ISwspace < 16) ? (int)((1UL << __ISwspace) << 8) : ((__ISwspace < 24) ? (int)((1UL << __ISwspace) >> 8) : ((int)((1UL << __ISwspace) >> 24))))), 
# 77
_ISwprint = ((__ISwprint < 8) ? (int)((1UL << __ISwprint) << 24) : ((__ISwprint < 16) ? (int)((1UL << __ISwprint) << 8) : ((__ISwprint < 24) ? (int)((1UL << __ISwprint) >> 8) : ((int)((1UL << __ISwprint) >> 24))))), 
# 78
_ISwgraph = ((__ISwgraph < 8) ? (int)((1UL << __ISwgraph) << 24) : ((__ISwgraph < 16) ? (int)((1UL << __ISwgraph) << 8) : ((__ISwgraph < 24) ? (int)((1UL << __ISwgraph) >> 8) : ((int)((1UL << __ISwgraph) >> 24))))), 
# 79
_ISwblank = ((__ISwblank < 8) ? (int)((1UL << __ISwblank) << 24) : ((__ISwblank < 16) ? (int)((1UL << __ISwblank) << 8) : ((__ISwblank < 24) ? (int)((1UL << __ISwblank) >> 8) : ((int)((1UL << __ISwblank) >> 24))))), 
# 80
_ISwcntrl = ((__ISwcntrl < 8) ? (int)((1UL << __ISwcntrl) << 24) : ((__ISwcntrl < 16) ? (int)((1UL << __ISwcntrl) << 8) : ((__ISwcntrl < 24) ? (int)((1UL << __ISwcntrl) >> 8) : ((int)((1UL << __ISwcntrl) >> 24))))), 
# 81
_ISwpunct = ((__ISwpunct < 8) ? (int)((1UL << __ISwpunct) << 24) : ((__ISwpunct < 16) ? (int)((1UL << __ISwpunct) << 8) : ((__ISwpunct < 24) ? (int)((1UL << __ISwpunct) >> 8) : ((int)((1UL << __ISwpunct) >> 24))))), 
# 82
_ISwalnum = ((__ISwalnum < 8) ? (int)((1UL << __ISwalnum) << 24) : ((__ISwalnum < 16) ? (int)((1UL << __ISwalnum) << 8) : ((__ISwalnum < 24) ? (int)((1UL << __ISwalnum) >> 8) : ((int)((1UL << __ISwalnum) >> 24)))))
# 83
}; 
# 87
extern "C" {
# 95
extern int iswalnum(wint_t __wc) noexcept(true); 
# 101
extern int iswalpha(wint_t __wc) noexcept(true); 
# 104
extern int iswcntrl(wint_t __wc) noexcept(true); 
# 108
extern int iswdigit(wint_t __wc) noexcept(true); 
# 112
extern int iswgraph(wint_t __wc) noexcept(true); 
# 117
extern int iswlower(wint_t __wc) noexcept(true); 
# 120
extern int iswprint(wint_t __wc) noexcept(true); 
# 125
extern int iswpunct(wint_t __wc) noexcept(true); 
# 130
extern int iswspace(wint_t __wc) noexcept(true); 
# 135
extern int iswupper(wint_t __wc) noexcept(true); 
# 140
extern int iswxdigit(wint_t __wc) noexcept(true); 
# 146
extern int iswblank(wint_t __wc) noexcept(true); 
# 155 "/usr/include/bits/wctype-wchar.h" 3
extern wctype_t wctype(const char * __property) noexcept(true); 
# 159
extern int iswctype(wint_t __wc, wctype_t __desc) noexcept(true); 
# 166
extern wint_t towlower(wint_t __wc) noexcept(true); 
# 169
extern wint_t towupper(wint_t __wc) noexcept(true); 
# 171
}
# 44 "/usr/include/wctype.h" 3
extern "C" {
# 48
typedef const __int32_t *wctrans_t; 
# 52
extern wctrans_t wctrans(const char * __property) noexcept(true); 
# 55
extern wint_t towctrans(wint_t __wc, wctrans_t __desc) noexcept(true); 
# 63
extern int iswalnum_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 69
extern int iswalpha_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 72
extern int iswcntrl_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 76
extern int iswdigit_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 80
extern int iswgraph_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 85
extern int iswlower_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 88
extern int iswprint_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 93
extern int iswpunct_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 98
extern int iswspace_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 103
extern int iswupper_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 108
extern int iswxdigit_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 113
extern int iswblank_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 117
extern wctype_t wctype_l(const char * __property, locale_t __locale) noexcept(true); 
# 122
extern int iswctype_l(wint_t __wc, wctype_t __desc, locale_t __locale) noexcept(true); 
# 130
extern wint_t towlower_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 133
extern wint_t towupper_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 137
extern wctrans_t wctrans_l(const char * __property, locale_t __locale) noexcept(true); 
# 141
extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, locale_t __locale) noexcept(true); 
# 146
}
# 80 "/usr/include/c++/12.2.1/cwctype" 3
namespace std { 
# 82
using ::wctrans_t;
# 83
using ::wctype_t;
# 86
using ::iswalnum;
# 87
using ::iswalpha;
# 89
using ::iswblank;
# 91
using ::iswcntrl;
# 92
using ::iswctype;
# 93
using ::iswdigit;
# 94
using ::iswgraph;
# 95
using ::iswlower;
# 96
using ::iswprint;
# 97
using ::iswpunct;
# 98
using ::iswspace;
# 99
using ::iswupper;
# 100
using ::iswxdigit;
# 101
using ::towctrans;
# 102
using ::towlower;
# 103
using ::towupper;
# 104
using ::wctrans;
# 105
using ::wctype;
# 106
}
# 36 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
struct ctype_base { 
# 44
typedef const int *__to_type; 
# 48
typedef unsigned short mask; 
# 49
static const mask upper = (_ISupper); 
# 50
static const mask lower = (_ISlower); 
# 51
static const mask alpha = (_ISalpha); 
# 52
static const mask digit = (_ISdigit); 
# 53
static const mask xdigit = (_ISxdigit); 
# 54
static const mask space = (_ISspace); 
# 55
static const mask print = (_ISprint); 
# 56
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 57
static const mask cntrl = (_IScntrl); 
# 58
static const mask punct = (_ISpunct); 
# 59
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 61
static const mask blank = (_ISblank); 
# 63
}; 
# 66
}
# 38 "/usr/include/c++/12.2.1/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 52
template< class _CharT, class _Traits> 
# 53
class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT>  { 
# 69 "/usr/include/c++/12.2.1/bits/streambuf_iterator.h" 3
public: typedef _CharT char_type; 
# 70
typedef _Traits traits_type; 
# 71
typedef typename _Traits::int_type int_type; 
# 72
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 73
typedef basic_istream< _CharT, _Traits>  istream_type; 
# 76
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2> > ::__type copy(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , std::ostreambuf_iterator< _CharT2> ); 
# 82
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , _CharT2 *); 
# 88
template< class _CharT2, class _Size> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_n_a(std::istreambuf_iterator< _CharT2> , _Size, _CharT2 *, bool); 
# 93
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2> > ::__type find(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , const _CharT2 &); 
# 99
template< class _CharT2, class _Distance> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, void> ::__type advance(std::istreambuf_iterator< _CharT2>  &, _Distance); 
# 112
private: mutable streambuf_type *_M_sbuf; 
# 113
int_type _M_c; 
# 117
public: constexpr istreambuf_iterator() noexcept : _M_sbuf((0)), _M_c(traits_type::eof()) 
# 118
{ } 
# 126
istreambuf_iterator(const istreambuf_iterator &) noexcept = default;
# 128
~istreambuf_iterator() = default;
# 132
istreambuf_iterator(istream_type &__s) noexcept : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) 
# 133
{ } 
# 136
istreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_c(traits_type::eof()) 
# 137
{ } 
# 141
istreambuf_iterator &operator=(const istreambuf_iterator &) noexcept = default;
# 147
[[__nodiscard__]] char_type 
# 149
operator*() const 
# 150
{ 
# 151
int_type __c = _M_get(); 
# 160 "/usr/include/c++/12.2.1/bits/streambuf_iterator.h" 3
return traits_type::to_char_type(__c); 
# 161
} 
# 165
istreambuf_iterator &operator++() 
# 166
{ 
# 170
; 
# 172
(_M_sbuf)->sbumpc(); 
# 173
(_M_c) = traits_type::eof(); 
# 174
return *this; 
# 175
} 
# 179
istreambuf_iterator operator++(int) 
# 180
{ 
# 184
; 
# 186
istreambuf_iterator __old = *this; 
# 187
(__old._M_c) = (_M_sbuf)->sbumpc(); 
# 188
(_M_c) = traits_type::eof(); 
# 189
return __old; 
# 190
} 
# 196
[[__nodiscard__]] bool 
# 198
equal(const istreambuf_iterator &__b) const 
# 199
{ return _M_at_eof() == __b._M_at_eof(); } 
# 203
private: int_type _M_get() const 
# 204
{ 
# 205
int_type __ret = _M_c; 
# 206
if ((_M_sbuf) && (_S_is_eof)(__ret) && (_S_is_eof)(__ret = (_M_sbuf)->sgetc())) { 
# 207
(_M_sbuf) = 0; }  
# 208
return __ret; 
# 209
} 
# 212
bool _M_at_eof() const 
# 213
{ return (_S_is_eof)(_M_get()); } 
# 216
static bool _S_is_eof(int_type __c) 
# 217
{ 
# 218
const int_type __eof = traits_type::eof(); 
# 219
return traits_type::eq_int_type(__c, __eof); 
# 220
} 
# 228
}; 
# 230
template< class _CharT, class _Traits> 
# 231
[[__nodiscard__]] inline bool 
# 233
operator==(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 234
__b) 
# 235
{ return __a.equal(__b); } 
# 238
template< class _CharT, class _Traits> 
# 239
[[__nodiscard__]] inline bool 
# 241
operator!=(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 242
__b) 
# 243
{ return !__a.equal(__b); } 
# 247
template< class _CharT, class _Traits> 
# 248
class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 258
public: typedef _CharT char_type; 
# 259
typedef _Traits traits_type; 
# 260
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 261
typedef basic_ostream< _CharT, _Traits>  ostream_type; 
# 264
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2> > ::__type copy(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , std::ostreambuf_iterator< _CharT2> ); 
# 271
private: streambuf_type *_M_sbuf; 
# 272
bool _M_failed; 
# 283 "/usr/include/c++/12.2.1/bits/streambuf_iterator.h" 3
public: ostreambuf_iterator(ostream_type &__s) noexcept : _M_sbuf(__s.rdbuf()), _M_failed((!(_M_sbuf))) 
# 284
{ } 
# 287
ostreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_failed((!(_M_sbuf))) 
# 288
{ } 
# 292
ostreambuf_iterator &operator=(_CharT __c) 
# 293
{ 
# 294
if ((!(_M_failed)) && _Traits::eq_int_type((_M_sbuf)->sputc(__c), _Traits::eof())) { 
# 296
(_M_failed) = true; }  
# 297
return *this; 
# 298
} 
# 301
[[__nodiscard__]] ostreambuf_iterator &
# 303
operator*() 
# 304
{ return *this; } 
# 308
ostreambuf_iterator &operator++(int) 
# 309
{ return *this; } 
# 313
ostreambuf_iterator &operator++() 
# 314
{ return *this; } 
# 317
[[__nodiscard__]] bool 
# 319
failed() const noexcept 
# 320
{ return _M_failed; } 
# 323
ostreambuf_iterator &_M_put(const _CharT *__ws, streamsize __len) 
# 324
{ 
# 325
if ((__builtin_expect(!(_M_failed), true)) && (__builtin_expect((this->_M_sbuf)->sputn(__ws, __len) != __len, false))) { 
# 328
(_M_failed) = true; }  
# 329
return *this; 
# 330
} 
# 331
}; 
#pragma GCC diagnostic pop
# 335
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 338
copy(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 339
__last, ostreambuf_iterator< _CharT>  
# 340
__result) 
# 341
{ 
# 342
if ((__first._M_sbuf) && (!(__last._M_sbuf)) && (!(__result._M_failed))) 
# 343
{ 
# 344
bool __ineof; 
# 345
__copy_streambufs_eof((__first._M_sbuf), (__result._M_sbuf), __ineof); 
# 346
if (!__ineof) { 
# 347
(__result._M_failed) = true; }  
# 348
}  
# 349
return __result; 
# 350
} 
# 352
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 355
__copy_move_a2(_CharT *__first, _CharT *__last, ostreambuf_iterator< _CharT>  
# 356
__result) 
# 357
{ 
# 358
const streamsize __num = __last - __first; 
# 359
if (__num > (0)) { 
# 360
__result._M_put(__first, __num); }  
# 361
return __result; 
# 362
} 
# 364
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 367
__copy_move_a2(const _CharT *__first, const _CharT *__last, ostreambuf_iterator< _CharT>  
# 368
__result) 
# 369
{ 
# 370
const streamsize __num = __last - __first; 
# 371
if (__num > (0)) { 
# 372
__result._M_put(__first, __num); }  
# 373
return __result; 
# 374
} 
# 376
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 379
__copy_move_a2(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 380
__last, _CharT *__result) 
# 381
{ 
# 382
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 383
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 384
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 385
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 387
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 388
{ 
# 389
streambuf_type *__sb = ((__first._M_sbuf)); 
# 390
int_type __c = __sb->sgetc(); 
# 391
while (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 392
{ 
# 393
const streamsize __n = __sb->egptr() - __sb->gptr(); 
# 394
if (__n > (1)) 
# 395
{ 
# 396
traits_type::copy(__result, __sb->gptr(), __n); 
# 397
__sb->__safe_gbump(__n); 
# 398
__result += __n; 
# 399
__c = __sb->underflow(); 
# 400
} else 
# 402
{ 
# 403
(*(__result++)) = traits_type::to_char_type(__c); 
# 404
__c = __sb->snextc(); 
# 405
}  
# 406
}  
# 407
}  
# 408
return __result; 
# 409
} 
# 411
template< class _CharT, class _Size> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 414
__copy_n_a(istreambuf_iterator< _CharT>  __it, _Size __n, _CharT *__result, bool 
# 415
__strict __attribute((__unused__))) 
# 416
{ 
# 417
if (__n == 0) { 
# 418
return __result; }  
# 422
; 
# 423
_CharT *__beg = __result; 
# 424
__result += (__it._M_sbuf)->sgetn(__beg, __n); 
# 427
; 
# 428
return __result; 
# 429
} 
# 431
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, istreambuf_iterator< _CharT> > ::__type 
# 434
find(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 435
__last, const _CharT &__val) 
# 436
{ 
# 437
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 438
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 439
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 440
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 441
const int_type __eof = traits_type::eof(); 
# 443
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 444
{ 
# 445
const int_type __ival = traits_type::to_int_type(__val); 
# 446
streambuf_type *__sb = ((__first._M_sbuf)); 
# 447
int_type __c = __sb->sgetc(); 
# 448
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __ival))) 
# 450
{ 
# 451
streamsize __n = __sb->egptr() - __sb->gptr(); 
# 452
if (__n > (1)) 
# 453
{ 
# 454
const _CharT *__p = traits_type::find(__sb->gptr(), __n, __val); 
# 456
if (__p) { 
# 457
__n = (__p - __sb->gptr()); }  
# 458
__sb->__safe_gbump(__n); 
# 459
__c = __sb->sgetc(); 
# 460
} else { 
# 462
__c = __sb->snextc(); }  
# 463
}  
# 465
(__first._M_c) = __eof; 
# 466
}  
# 468
return __first; 
# 469
} 
# 471
template< class _CharT, class _Distance> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, void> ::__type 
# 474
advance(istreambuf_iterator< _CharT>  &__i, _Distance __n) 
# 475
{ 
# 476
if (__n == 0) { 
# 477
return; }  
# 479
do { if (std::__is_constant_evaluated() && (!((bool)(__n > 0)))) { __builtin_unreachable(); }  } while (false); 
# 482
; 
# 484
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 485
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 486
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 487
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 488
const int_type __eof = traits_type::eof(); 
# 490
streambuf_type *__sb = ((__i._M_sbuf)); 
# 491
while (__n > 0) 
# 492
{ 
# 493
streamsize __size = __sb->egptr() - __sb->gptr(); 
# 494
if (__size > __n) 
# 495
{ 
# 496
__sb->__safe_gbump(__n); 
# 497
break; 
# 498
}  
# 500
__sb->__safe_gbump(__size); 
# 501
__n -= __size; 
# 502
if (traits_type::eq_int_type(__sb->underflow(), __eof)) 
# 503
{ 
# 506
; 
# 507
break; 
# 508
}  
# 509
}  
# 511
(__i._M_c) = __eof; 
# 512
} 
# 517
}
# 50 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
template< class _Tp> void __convert_to_v(const char *, _Tp &, ios_base::iostate &, const __c_locale &) throw(); 
# 82
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &) throw(); 
# 87
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &) throw(); 
# 92
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &) throw(); 
# 97
template< class _CharT, class _Traits> 
# 98
struct __pad { 
# 101
static void _S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, streamsize __newlen, streamsize __oldlen); 
# 103
}; 
# 110
template< class _CharT> _CharT *__add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last); 
# 119
template< class _CharT> inline ostreambuf_iterator< _CharT>  
# 122
__write(ostreambuf_iterator< _CharT>  __s, const _CharT *__ws, int __len) 
# 123
{ 
# 124
__s._M_put(__ws, __len); 
# 125
return __s; 
# 126
} 
# 129
template< class _CharT, class _OutIter> inline _OutIter 
# 132
__write(_OutIter __s, const _CharT *__ws, int __len) 
# 133
{ 
# 134
for (int __j = 0; __j < __len; (__j++), (++__s)) { 
# 135
(*__s) = (__ws[__j]); }  
# 136
return __s; 
# 137
} 
# 152 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
template< class _CharT> 
# 153
class __ctype_abstract_base : public locale::facet, public ctype_base { 
# 158
public: typedef _CharT char_type; 
# 172 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
bool is(mask __m, char_type __c) const 
# 173
{ return this->do_is(__m, __c); } 
# 189 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *is(const char_type *__lo, const char_type *__hi, mask *__vec) const 
# 190
{ return this->do_is(__lo, __hi, __vec); } 
# 205 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *scan_is(mask __m, const char_type *__lo, const char_type *__hi) const 
# 206
{ return do_scan_is(__m, __lo, __hi); } 
# 221 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *scan_not(mask __m, const char_type *__lo, const char_type *__hi) const 
# 222
{ return do_scan_not(__m, __lo, __hi); } 
# 235 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 236
{ return this->do_toupper(__c); } 
# 250 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 251
{ return this->do_toupper(__lo, __hi); } 
# 264 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 265
{ return this->do_tolower(__c); } 
# 279 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 280
{ return this->do_tolower(__lo, __hi); } 
# 296 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 297
{ return this->do_widen(__c); } 
# 315 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 316
{ return this->do_widen(__lo, __hi, __to); } 
# 334 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 335
{ return this->do_narrow(__c, __dfault); } 
# 356 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 357
__dfault, char *__to) const 
# 358
{ return this->do_narrow(__lo, __hi, __dfault, __to); } 
# 362
protected: explicit __ctype_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 365
virtual ~__ctype_abstract_base() { } 
# 381 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const = 0; 
# 400 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const = 0; 
# 419 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 438 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 456 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const = 0; 
# 473 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const = 0; 
# 489 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const = 0; 
# 506 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const = 0; 
# 525 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const = 0; 
# 546 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const = 0; 
# 567 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const = 0; 
# 592 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const = 0; 
# 594
}; 
# 614 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
template< class _CharT> 
# 615
class ctype : public __ctype_abstract_base< _CharT>  { 
# 619
public: typedef _CharT char_type; 
# 620
typedef typename __ctype_abstract_base< _CharT> ::mask mask; 
# 623
static std::locale::id id; 
# 626
explicit ctype(std::size_t __refs = 0) : __ctype_abstract_base< _CharT> (__refs) { } 
# 630
protected: virtual ~ctype(); 
# 633
virtual bool do_is(mask __m, char_type __c) const; 
# 636
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 639
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 642
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 646
virtual char_type do_toupper(char_type __c) const; 
# 649
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 652
virtual char_type do_tolower(char_type __c) const; 
# 655
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 658
virtual char_type do_widen(char __c) const; 
# 661
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __dest) const; 
# 664
virtual char do_narrow(char_type, char __dfault) const; 
# 667
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 669
}; 
# 671
template< class _CharT> locale::id 
# 672
ctype< _CharT> ::id; 
# 676
template< class _CharT, class _Traits, class _Alloc> class ctype< __cxx11::basic_string< _CharT, _Traits, _Alloc> > ; 
# 689 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 694
public: typedef char char_type; 
# 698
protected: __c_locale _M_c_locale_ctype; 
# 699
bool _M_del; 
# 700
__to_type _M_toupper; 
# 701
__to_type _M_tolower; 
# 702
const mask *_M_table; 
# 703
mutable char _M_widen_ok; 
# 704
mutable char _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 705
mutable char _M_narrow[1 + (static_cast< unsigned char>(-1))]; 
# 706
mutable char _M_narrow_ok; 
# 711
public: static locale::id id; 
# 713
static const size_t table_size = (1 + (static_cast< unsigned char>(-1))); 
# 726 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
explicit ctype(const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 739 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 752 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
inline bool is(mask __m, char __c) const; 
# 767 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
inline const char *is(const char * __lo, const char * __hi, mask * __vec) const; 
# 781 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
inline const char *scan_is(mask __m, const char * __lo, const char * __hi) const; 
# 795 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
inline const char *scan_not(mask __m, const char * __lo, const char * __hi) const; 
# 810 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 811
{ return this->do_toupper(__c); } 
# 827 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 828
{ return this->do_toupper(__lo, __hi); } 
# 843 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 844
{ return this->do_tolower(__c); } 
# 860 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 861
{ return this->do_tolower(__lo, __hi); } 
# 880 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 881
{ 
# 882
if (_M_widen_ok) { 
# 883
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 884
this->_M_widen_init(); 
# 885
return this->do_widen(__c); 
# 886
} 
# 907 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 908
{ 
# 909
if ((_M_widen_ok) == 1) 
# 910
{ 
# 911
if (__builtin_expect(__hi != __lo, true)) { 
# 912
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 913
return __hi; 
# 914
}  
# 915
if (!(_M_widen_ok)) { 
# 916
this->_M_widen_init(); }  
# 917
return this->do_widen(__lo, __hi, __to); 
# 918
} 
# 939 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 940
{ 
# 941
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 942
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 943
const char __t = this->do_narrow(__c, __dfault); 
# 944
if (__t != __dfault) { 
# 945
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 946
return __t; 
# 947
} 
# 972 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 973
__dfault, char *__to) const 
# 974
{ 
# 975
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 976
{ 
# 977
if (__builtin_expect(__hi != __lo, true)) { 
# 978
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 979
return __hi; 
# 980
}  
# 981
if (!(_M_narrow_ok)) { 
# 982
this->_M_narrow_init(); }  
# 983
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 984
} 
# 991
const mask *table() const throw() 
# 992
{ return _M_table; } 
# 996
static const mask *classic_table() throw(); 
# 1006
protected: virtual ~ctype(); 
# 1022 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1039 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1055 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1072 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1092 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const 
# 1093
{ return __c; } 
# 1115 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__to) const 
# 1116
{ 
# 1117
if (__builtin_expect(__hi != __lo, true)) { 
# 1118
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 1119
return __hi; 
# 1120
} 
# 1142 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault __attribute((__unused__))) const 
# 1143
{ return __c; } 
# 1168 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char 
# 1169
__dfault __attribute((__unused__)), char *__to) const 
# 1170
{ 
# 1171
if (__builtin_expect(__hi != __lo, true)) { 
# 1172
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 1173
return __hi; 
# 1174
} 
# 1177
private: void _M_narrow_init() const; 
# 1178
void _M_widen_init() const; 
# 1179
}; 
# 1194 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1199
public: typedef wchar_t char_type; 
# 1200
typedef wctype_t __wmask_type; 
# 1203
protected: __c_locale _M_c_locale_ctype; 
# 1206
bool _M_narrow_ok; 
# 1207
char _M_narrow[128]; 
# 1208
wint_t _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 1211
mask _M_bit[16]; 
# 1212
__wmask_type _M_wmask[16]; 
# 1217
public: static locale::id id; 
# 1227 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
explicit ctype(size_t __refs = 0); 
# 1238 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, size_t __refs = 0); 
# 1242
protected: __wmask_type _M_convert_to_wmask(const mask __m) const throw(); 
# 1246
virtual ~ctype(); 
# 1262 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const; 
# 1281 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 1299 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1317 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1334 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1351 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1367 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1384 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1404 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const; 
# 1426 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const; 
# 1449 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const; 
# 1475 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 1480
void _M_initialize_ctype() throw(); 
# 1481
}; 
# 1485
template< class _CharT> 
# 1486
class ctype_byname : public ctype< _CharT>  { 
# 1489
public: typedef typename ctype< _CharT> ::mask mask; 
# 1492
explicit ctype_byname(const char * __s, std::size_t __refs = 0); 
# 1496
explicit ctype_byname(const std::string &__s, std::size_t __refs = 0) : ctype_byname(__s.c_str(), __refs) 
# 1497
{ } 
# 1502
protected: virtual ~ctype_byname() { } 
# 1503
}; 
# 1507
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1511
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1515
explicit ctype_byname(const string & __s, size_t __refs = 0); 
# 1520
protected: virtual ~ctype_byname(); 
# 1521
}; 
# 1525
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1529
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1533
explicit ctype_byname(const string & __s, size_t __refs = 0); 
# 1538
protected: virtual ~ctype_byname(); 
# 1539
}; 
# 1543
}
# 37 "/usr/include/c++/12.2.1/x86_64-pc-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
inline bool ctype< char> ::is(mask __m, char __c) const 
# 44
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 48
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 49
{ 
# 50
while (__low < __high) { 
# 51
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>(*(__low++))]); }  
# 52
return __high; 
# 53
} 
# 57
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 58
{ 
# 59
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>(*__low)]) & __m))) { 
# 61
++__low; }  
# 62
return __low; 
# 63
} 
# 67
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 68
{ 
# 69
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>(*__low)]) & __m) != 0)) { 
# 71
++__low; }  
# 72
return __low; 
# 73
} 
# 76
}
# 1548 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1553
class __num_base { 
# 1559
public: enum { 
# 1560
_S_ominus, 
# 1561
_S_oplus, 
# 1562
_S_ox, 
# 1563
_S_oX, 
# 1564
_S_odigits, 
# 1565
_S_odigits_end = (_S_odigits + 16), 
# 1566
_S_oudigits = _S_odigits_end, 
# 1567
_S_oudigits_end = (_S_oudigits + 16), 
# 1568
_S_oe = (_S_odigits + 14), 
# 1569
_S_oE = (_S_oudigits + 14), 
# 1570
_S_oend = _S_oudigits_end
# 1571
}; 
# 1578
static const char *_S_atoms_out; 
# 1582
static const char *_S_atoms_in; 
# 1585
enum { 
# 1586
_S_iminus, 
# 1587
_S_iplus, 
# 1588
_S_ix, 
# 1589
_S_iX, 
# 1590
_S_izero, 
# 1591
_S_ie = (_S_izero + 14), 
# 1592
_S_iE = (_S_izero + 20), 
# 1593
_S_iend = 26
# 1594
}; 
# 1599
static void _S_format_float(const ios_base & __io, char * __fptr, char __mod) throw(); 
# 1600
}; 
# 1602
template< class _CharT> 
# 1603
struct __numpunct_cache : public locale::facet { 
# 1605
const char *_M_grouping; 
# 1606
size_t _M_grouping_size; 
# 1607
bool _M_use_grouping; 
# 1608
const _CharT *_M_truename; 
# 1609
size_t _M_truename_size; 
# 1610
const _CharT *_M_falsename; 
# 1611
size_t _M_falsename_size; 
# 1612
_CharT _M_decimal_point; 
# 1613
_CharT _M_thousands_sep; 
# 1619
_CharT _M_atoms_out[__num_base::_S_oend]; 
# 1625
_CharT _M_atoms_in[__num_base::_S_iend]; 
# 1627
bool _M_allocated; 
# 1629
__numpunct_cache(size_t __refs = 0) : locale::facet(__refs), _M_grouping((0)), _M_grouping_size((0)), _M_use_grouping(false), _M_truename((0)), _M_truename_size((0)), _M_falsename((0)), _M_falsename_size((0)), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false) 
# 1635
{ } 
# 1637
virtual ~__numpunct_cache(); 
# 1640
void _M_cache(const locale & __loc); 
# 1644
private: __numpunct_cache &operator=(const __numpunct_cache &); 
# 1647
explicit __numpunct_cache(const __numpunct_cache &); 
# 1648
}; 
# 1650
template< class _CharT> 
# 1651
__numpunct_cache< _CharT> ::~__numpunct_cache() 
# 1652
{ 
# 1653
if (_M_allocated) 
# 1654
{ 
# 1655
delete [] (_M_grouping); 
# 1656
delete [] (_M_truename); 
# 1657
delete [] (_M_falsename); 
# 1658
}  
# 1659
} 
# 1661
inline namespace __cxx11 { 
# 1677 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
template< class _CharT> 
# 1678
class numpunct : public locale::facet { 
# 1684
public: typedef _CharT char_type; 
# 1685
typedef basic_string< _CharT>  string_type; 
# 1687
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1690
protected: __cache_type *_M_data; 
# 1694
public: static locale::id id; 
# 1702
explicit numpunct(size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1704
{ _M_initialize_numpunct(); } 
# 1716 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
explicit numpunct(__cache_type *__cache, size_t __refs = 0) : locale::facet(__refs), _M_data(__cache) 
# 1718
{ _M_initialize_numpunct(); } 
# 1730 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
explicit numpunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1732
{ _M_initialize_numpunct(__cloc); } 
# 1744 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char_type decimal_point() const 
# 1745
{ return do_decimal_point(); } 
# 1757 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
char_type thousands_sep() const 
# 1758
{ return do_thousands_sep(); } 
# 1788 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
string grouping() const 
# 1789
{ return do_grouping(); } 
# 1801 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
string_type truename() const 
# 1802
{ return do_truename(); } 
# 1814 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
string_type falsename() const 
# 1815
{ return do_falsename(); } 
# 1820
protected: virtual ~numpunct(); 
# 1831 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_decimal_point() const 
# 1832
{ return (_M_data)->_M_decimal_point; } 
# 1843 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual char_type do_thousands_sep() const 
# 1844
{ return (_M_data)->_M_thousands_sep; } 
# 1856 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual string do_grouping() const 
# 1857
{ return (_M_data)->_M_grouping; } 
# 1869 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual string_type do_truename() const 
# 1870
{ return (_M_data)->_M_truename; } 
# 1882 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual string_type do_falsename() const 
# 1883
{ return (_M_data)->_M_falsename; } 
# 1887
void _M_initialize_numpunct(__c_locale __cloc = 0); 
# 1888
}; 
# 1890
template< class _CharT> locale::id 
# 1891
numpunct< _CharT> ::id; 
# 1894
template<> numpunct< char> ::~numpunct(); 
# 1898
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1902
template<> numpunct< wchar_t> ::~numpunct(); 
# 1906
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1910
template< class _CharT> 
# 1911
class numpunct_byname : public numpunct< _CharT>  { 
# 1914
public: typedef _CharT char_type; 
# 1915
typedef basic_string< _CharT>  string_type; 
# 1918
explicit numpunct_byname(const char *__s, std::size_t __refs = 0) : numpunct< _CharT> (__refs) 
# 1920
{ 
# 1921
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 1923
{ 
# 1924
std::__c_locale __tmp; 
# 1925
this->_S_create_c_locale(__tmp, __s); 
# 1926
this->_M_initialize_numpunct(__tmp); 
# 1927
this->_S_destroy_c_locale(__tmp); 
# 1928
}  
# 1929
} 
# 1933
explicit numpunct_byname(const std::string &__s, std::size_t __refs = 0) : numpunct_byname(__s.c_str(), __refs) 
# 1934
{ } 
# 1939
protected: virtual ~numpunct_byname() { } 
# 1940
}; 
# 1942
}
# 1959 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
template< class _CharT, class _InIter> 
# 1960
class num_get : public locale::facet { 
# 1966
public: typedef _CharT char_type; 
# 1967
typedef _InIter iter_type; 
# 1971
static locale::id id; 
# 1981 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
explicit num_get(size_t __refs = 0) : locale::facet(__refs) { } 
# 2007 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2008
__err, bool &__v) const 
# 2009
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2044 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2045
__err, long &__v) const 
# 2046
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2049
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2050
__err, unsigned short &__v) const 
# 2051
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2054
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2055
__err, unsigned &__v) const 
# 2056
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2059
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2060
__err, unsigned long &__v) const 
# 2061
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2065
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2066
__err, long long &__v) const 
# 2067
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2070
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2071
__err, unsigned long long &__v) const 
# 2072
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2104 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2105
__err, float &__v) const 
# 2106
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2109
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2110
__err, double &__v) const 
# 2111
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2114
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2115
__err, long double &__v) const 
# 2116
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2147 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2148
__err, void *&__v) const 
# 2149
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2153
protected: virtual ~num_get() { } 
# 2155
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2157
_M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, string &) const; 
# 2160
template< class _ValueT> 
# 2161
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2160
_M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT &) const; 
# 2166
template< class _CharT2> typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, int> ::__type 
# 2168
_M_find(const _CharT2 *, size_t __len, _CharT2 __c) const 
# 2169
{ 
# 2170
int __ret = (-1); 
# 2171
if (__len <= (10)) 
# 2172
{ 
# 2173
if ((__c >= ((_CharT2)'0')) && (__c < ((_CharT2)(((_CharT2)'0') + __len)))) { 
# 2174
__ret = (__c - ((_CharT2)'0')); }  
# 2175
} else 
# 2177
{ 
# 2178
if ((__c >= ((_CharT2)'0')) && (__c <= ((_CharT2)'9'))) { 
# 2179
__ret = (__c - ((_CharT2)'0')); } else { 
# 2180
if ((__c >= ((_CharT2)'a')) && (__c <= ((_CharT2)'f'))) { 
# 2181
__ret = (10 + (__c - ((_CharT2)'a'))); } else { 
# 2182
if ((__c >= ((_CharT2)'A')) && (__c <= ((_CharT2)'F'))) { 
# 2183
__ret = (10 + (__c - ((_CharT2)'A'))); }  }  }  
# 2184
}  
# 2185
return __ret; 
# 2186
} 
# 2188
template< class _CharT2> typename __gnu_cxx::__enable_if< !__is_char< _CharT2> ::__value, int> ::__type 
# 2191
_M_find(const _CharT2 *__zero, size_t __len, _CharT2 __c) const 
# 2192
{ 
# 2193
int __ret = (-1); 
# 2194
const char_type *__q = char_traits< _CharT2> ::find(__zero, __len, __c); 
# 2195
if (__q) 
# 2196
{ 
# 2197
__ret = (__q - __zero); 
# 2198
if (__ret > 15) { 
# 2199
__ret -= 6; }  
# 2200
}  
# 2201
return __ret; 
# 2202
} 
# 2220 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const; 
# 2223
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2224
__err, long &__v) const 
# 2225
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2228
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2229
__err, unsigned short &__v) const 
# 2230
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2233
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2234
__err, unsigned &__v) const 
# 2235
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2238
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2239
__err, unsigned long &__v) const 
# 2240
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2244
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2245
__err, long long &__v) const 
# 2246
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2249
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2250
__err, unsigned long long &__v) const 
# 2251
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2255
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, float &) const; 
# 2258
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const; 
# 2272 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long double &) const; 
# 2277
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, void *&) const; 
# 2299 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
}; 
# 2301
template< class _CharT, class _InIter> locale::id 
# 2302
num_get< _CharT, _InIter> ::id; 
# 2317 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> 
# 2318
class num_put : public locale::facet { 
# 2324
public: typedef _CharT char_type; 
# 2325
typedef _OutIter iter_type; 
# 2329
static locale::id id; 
# 2339 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
explicit num_put(size_t __refs = 0) : locale::facet(__refs) { } 
# 2357 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 2358
{ return this->do_put(__s, __io, __fill, __v); } 
# 2399 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2400
{ return this->do_put(__s, __io, __fill, __v); } 
# 2403
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2404
__v) const 
# 2405
{ return this->do_put(__s, __io, __fill, __v); } 
# 2409
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long long __v) const 
# 2410
{ return this->do_put(__s, __io, __fill, __v); } 
# 2413
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2414
__v) const 
# 2415
{ return this->do_put(__s, __io, __fill, __v); } 
# 2462 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 2463
{ return this->do_put(__s, __io, __fill, __v); } 
# 2466
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 2467
__v) const 
# 2468
{ return this->do_put(__s, __io, __fill, __v); } 
# 2487 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 2488
__v) const 
# 2489
{ return this->do_put(__s, __io, __fill, __v); } 
# 2492
protected: template< class _ValueT> iter_type _M_insert_float(iter_type, ios_base & __io, char_type __fill, char __mod, _ValueT __v) const; 
# 2498
void _M_group_float(const char * __grouping, size_t __grouping_size, char_type __sep, const char_type * __p, char_type * __new, char_type * __cs, int & __len) const; 
# 2502
template< class _ValueT> iter_type _M_insert_int(iter_type, ios_base & __io, char_type __fill, _ValueT __v) const; 
# 2508
void _M_group_int(const char * __grouping, size_t __grouping_size, char_type __sep, ios_base & __io, char_type * __new, char_type * __cs, int & __len) const; 
# 2513
void _M_pad(char_type __fill, streamsize __w, ios_base & __io, char_type * __new, const char_type * __cs, int & __len) const; 
# 2518
virtual ~num_put() { } 
# 2535 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const; 
# 2538
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2539
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2542
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2543
__v) const 
# 2544
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2548
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long long 
# 2549
__v) const 
# 2550
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2553
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2554
__v) const 
# 2555
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2559
virtual iter_type do_put(iter_type, ios_base &, char_type, double) const; 
# 2567
virtual iter_type do_put(iter_type, ios_base &, char_type, long double) const; 
# 2571
virtual iter_type do_put(iter_type, ios_base &, char_type, const void *) const; 
# 2586 "/usr/include/c++/12.2.1/bits/locale_facets.h" 3
}; 
# 2588
template< class _CharT, class _OutIter> locale::id 
# 2589
num_put< _CharT, _OutIter> ::id; 
# 2599
template< class _CharT> inline bool 
# 2601
isspace(_CharT __c, const locale &__loc) 
# 2602
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::space, __c); } 
# 2605
template< class _CharT> inline bool 
# 2607
isprint(_CharT __c, const locale &__loc) 
# 2608
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::print, __c); } 
# 2611
template< class _CharT> inline bool 
# 2613
iscntrl(_CharT __c, const locale &__loc) 
# 2614
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::cntrl, __c); } 
# 2617
template< class _CharT> inline bool 
# 2619
isupper(_CharT __c, const locale &__loc) 
# 2620
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::upper, __c); } 
# 2623
template< class _CharT> inline bool 
# 2625
islower(_CharT __c, const locale &__loc) 
# 2626
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::lower, __c); } 
# 2629
template< class _CharT> inline bool 
# 2631
isalpha(_CharT __c, const locale &__loc) 
# 2632
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::alpha, __c); } 
# 2635
template< class _CharT> inline bool 
# 2637
isdigit(_CharT __c, const locale &__loc) 
# 2638
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::digit, __c); } 
# 2641
template< class _CharT> inline bool 
# 2643
ispunct(_CharT __c, const locale &__loc) 
# 2644
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::punct, __c); } 
# 2647
template< class _CharT> inline bool 
# 2649
isxdigit(_CharT __c, const locale &__loc) 
# 2650
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::xdigit, __c); } 
# 2653
template< class _CharT> inline bool 
# 2655
isalnum(_CharT __c, const locale &__loc) 
# 2656
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::alnum, __c); } 
# 2659
template< class _CharT> inline bool 
# 2661
isgraph(_CharT __c, const locale &__loc) 
# 2662
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::graph, __c); } 
# 2666
template< class _CharT> inline bool 
# 2668
isblank(_CharT __c, const locale &__loc) 
# 2669
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::blank, __c); } 
# 2673
template< class _CharT> inline _CharT 
# 2675
toupper(_CharT __c, const locale &__loc) 
# 2676
{ return use_facet< ctype< _CharT> > (__loc).toupper(__c); } 
# 2679
template< class _CharT> inline _CharT 
# 2681
tolower(_CharT __c, const locale &__loc) 
# 2682
{ return use_facet< ctype< _CharT> > (__loc).tolower(__c); } 
# 2685
}
# 35 "/usr/include/c++/12.2.1/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & __loc) const; 
# 46
}; 
# 49
template< class _CharT> 
# 50
struct __use_cache< __numpunct_cache< _CharT> >  { 
# 53
const __numpunct_cache< _CharT>  *operator()(const locale &__loc) const 
# 54
{ 
# 55
const size_t __i = (numpunct< _CharT> ::id._M_id)(); 
# 56
const locale::facet **__caches = (__loc._M_impl)->_M_caches; 
# 57
if (!(__caches[__i])) 
# 58
{ 
# 59
__numpunct_cache< _CharT>  *__tmp = (0); 
# 60
try 
# 61
{ 
# 62
__tmp = (new __numpunct_cache< _CharT> ); 
# 63
__tmp->_M_cache(__loc); 
# 64
} 
# 65
catch (...) 
# 66
{ 
# 67
delete __tmp; 
# 68
throw; 
# 69
}  
# 70
(__loc._M_impl)->_M_install_cache(__tmp, __i); 
# 71
}  
# 72
return static_cast< const __numpunct_cache< _CharT>  *>(__caches[__i]); 
# 73
} 
# 74
}; 
# 76
template< class _CharT> void 
# 78
__numpunct_cache< _CharT> ::_M_cache(const locale &__loc) 
# 79
{ 
# 80
const __cxx11::numpunct< _CharT>  &__np = use_facet< __cxx11::numpunct< _CharT> > (__loc); 
# 82
char *__grouping = (0); 
# 83
_CharT *__truename = (0); 
# 84
_CharT *__falsename = (0); 
# 85
try 
# 86
{ 
# 87
const string &__g = __np.grouping(); 
# 88
(_M_grouping_size) = __g.size(); 
# 89
__grouping = (new char [_M_grouping_size]); 
# 90
__g.copy(__grouping, _M_grouping_size); 
# 91
(_M_use_grouping) = ((_M_grouping_size) && ((static_cast< signed char>(__grouping[0])) > 0) && ((__grouping[0]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)); 
# 96
const __cxx11::basic_string< _CharT>  &__tn = __np.truename(); 
# 97
(_M_truename_size) = __tn.size(); 
# 98
__truename = (new _CharT [_M_truename_size]); 
# 99
__tn.copy(__truename, _M_truename_size); 
# 101
const __cxx11::basic_string< _CharT>  &__fn = __np.falsename(); 
# 102
(_M_falsename_size) = __fn.size(); 
# 103
__falsename = (new _CharT [_M_falsename_size]); 
# 104
__fn.copy(__falsename, _M_falsename_size); 
# 106
(_M_decimal_point) = __np.decimal_point(); 
# 107
(_M_thousands_sep) = __np.thousands_sep(); 
# 109
const ctype< _CharT>  &__ct = use_facet< ctype< _CharT> > (__loc); 
# 110
__ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out); 
# 113
__ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in); 
# 117
(_M_grouping) = __grouping; 
# 118
(_M_truename) = __truename; 
# 119
(_M_falsename) = __falsename; 
# 120
(_M_allocated) = true; 
# 121
} 
# 122
catch (...) 
# 123
{ 
# 124
delete [] __grouping; 
# 125
delete [] __truename; 
# 126
delete [] __falsename; 
# 127
throw; 
# 128
}  
# 129
} 
# 139 "/usr/include/c++/12.2.1/bits/locale_facets.tcc" 3
__attribute((__pure__)) bool 
# 140
__verify_grouping(const char * __grouping, size_t __grouping_size, const string & __grouping_tmp) throw(); 
# 145
template< class _CharT, class _InIter> 
# 146
__attribute((__abi_tag__("cxx11"))) _InIter 
# 149
num_get< _CharT, _InIter> ::_M_extract_float(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 150
__err, string &__xtrc) const 
# 151
{ 
# 152
typedef char_traits< _CharT>  __traits_type; 
# 153
typedef __numpunct_cache< _CharT>  __cache_type; 
# 154
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 155
const locale &__loc = __io._M_getloc(); 
# 156
const __cache_type *__lc = __uc(__loc); 
# 157
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 158
char_type __c = char_type(); 
# 161
bool __testeof = __beg == __end; 
# 164
if (!__testeof) 
# 165
{ 
# 166
__c = (*__beg); 
# 167
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 168
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 171
{ 
# 172
(__xtrc += (__plus ? '+' : '-')); 
# 173
if ((++__beg) != __end) { 
# 174
__c = (*__beg); } else { 
# 176
__testeof = true; }  
# 177
}  
# 178
}  
# 181
bool __found_mantissa = false; 
# 182
int __sep_pos = 0; 
# 183
while (!__testeof) 
# 184
{ 
# 185
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 187
break; } else { 
# 188
if (__c == (__lit[__num_base::_S_izero])) 
# 189
{ 
# 190
if (!__found_mantissa) 
# 191
{ 
# 192
(__xtrc += ('0')); 
# 193
__found_mantissa = true; 
# 194
}  
# 195
++__sep_pos; 
# 197
if ((++__beg) != __end) { 
# 198
__c = (*__beg); } else { 
# 200
__testeof = true; }  
# 201
} else { 
# 203
break; }  }  
# 204
}  
# 207
bool __found_dec = false; 
# 208
bool __found_sci = false; 
# 209
string __found_grouping; 
# 210
if (__lc->_M_use_grouping) { 
# 211
__found_grouping.reserve(32); }  
# 212
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 214
if (!(__lc->_M_allocated)) { 
# 216
while (!__testeof) 
# 217
{ 
# 218
const int __digit = _M_find(__lit_zero, 10, __c); 
# 219
if (__digit != (-1)) 
# 220
{ 
# 221
(__xtrc += (('0') + __digit)); 
# 222
__found_mantissa = true; 
# 223
} else { 
# 224
if ((__c == (__lc->_M_decimal_point)) && (!__found_dec) && (!__found_sci)) 
# 226
{ 
# 227
(__xtrc += ('.')); 
# 228
__found_dec = true; 
# 229
} else { 
# 230
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 233
{ 
# 235
(__xtrc += ('e')); 
# 236
__found_sci = true; 
# 239
if ((++__beg) != __end) 
# 240
{ 
# 241
__c = (*__beg); 
# 242
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 243
if (__plus || (__c == (__lit[__num_base::_S_iminus]))) { 
# 244
(__xtrc += (__plus ? '+' : '-')); } else { 
# 246
continue; }  
# 247
} else 
# 249
{ 
# 250
__testeof = true; 
# 251
break; 
# 252
}  
# 253
} else { 
# 255
break; }  }  }  
# 257
if ((++__beg) != __end) { 
# 258
__c = (*__beg); } else { 
# 260
__testeof = true; }  
# 261
}   } else { 
# 263
while (!__testeof) 
# 264
{ 
# 267
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 268
{ 
# 269
if ((!__found_dec) && (!__found_sci)) 
# 270
{ 
# 273
if (__sep_pos) 
# 274
{ 
# 275
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 276
__sep_pos = 0; 
# 277
} else 
# 279
{ 
# 282
__xtrc.clear(); 
# 283
break; 
# 284
}  
# 285
} else { 
# 287
break; }  
# 288
} else { 
# 289
if (__c == (__lc->_M_decimal_point)) 
# 290
{ 
# 291
if ((!__found_dec) && (!__found_sci)) 
# 292
{ 
# 296
if (__found_grouping.size()) { 
# 297
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 298
(__xtrc += ('.')); 
# 299
__found_dec = true; 
# 300
} else { 
# 302
break; }  
# 303
} else 
# 305
{ 
# 306
const char_type *__q = __traits_type::find(__lit_zero, 10, __c); 
# 308
if (__q) 
# 309
{ 
# 310
__xtrc += ('0' + (__q - __lit_zero)); 
# 311
__found_mantissa = true; 
# 312
++__sep_pos; 
# 313
} else { 
# 314
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 317
{ 
# 319
if ((__found_grouping.size()) && (!__found_dec)) { 
# 320
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 321
(__xtrc += ('e')); 
# 322
__found_sci = true; 
# 325
if ((++__beg) != __end) 
# 326
{ 
# 327
__c = (*__beg); 
# 328
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 329
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) { 
# 333
(__xtrc += (__plus ? '+' : '-')); } else { 
# 335
continue; }  
# 336
} else 
# 338
{ 
# 339
__testeof = true; 
# 340
break; 
# 341
}  
# 342
} else { 
# 344
break; }  }  
# 345
}  }  
# 347
if ((++__beg) != __end) { 
# 348
__c = (*__beg); } else { 
# 350
__testeof = true; }  
# 351
}   }  
# 355
if (__found_grouping.size()) 
# 356
{ 
# 358
if ((!__found_dec) && (!__found_sci)) { 
# 359
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 361
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 364
__err = ios_base::failbit; }  
# 365
}  
# 367
return __beg; 
# 368
} 
# 370
template< class _CharT, class _InIter> 
# 371
template< class _ValueT> 
# 372
__attribute((__abi_tag__("cxx11"))) _InIter 
# 375
num_get< _CharT, _InIter> ::_M_extract_int(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 376
__err, _ValueT &__v) const 
# 377
{ 
# 378
typedef char_traits< _CharT>  __traits_type; 
# 379
using __gnu_cxx::__add_unsigned;
# 380
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 381
typedef __numpunct_cache< _CharT>  __cache_type; 
# 382
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 383
const locale &__loc = __io._M_getloc(); 
# 384
const __cache_type *__lc = __uc(__loc); 
# 385
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 386
char_type __c = char_type(); 
# 389
const ios_base::fmtflags __basefield = ((__io.flags()) & ios_base::basefield); 
# 391
const bool __oct = __basefield == ios_base::oct; 
# 392
int __base = __oct ? 8 : ((__basefield == ios_base::hex) ? 16 : 10); 
# 395
bool __testeof = __beg == __end; 
# 398
bool __negative = false; 
# 399
if (!__testeof) 
# 400
{ 
# 401
__c = (*__beg); 
# 402
__negative = (__c == (__lit[__num_base::_S_iminus])); 
# 403
if ((__negative || (__c == (__lit[__num_base::_S_iplus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 406
{ 
# 407
if ((++__beg) != __end) { 
# 408
__c = (*__beg); } else { 
# 410
__testeof = true; }  
# 411
}  
# 412
}  
# 416
bool __found_zero = false; 
# 417
int __sep_pos = 0; 
# 418
while (!__testeof) 
# 419
{ 
# 420
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 422
break; } else { 
# 423
if ((__c == (__lit[__num_base::_S_izero])) && ((!__found_zero) || (__base == 10))) 
# 425
{ 
# 426
__found_zero = true; 
# 427
++__sep_pos; 
# 428
if (__basefield == 0) { 
# 429
__base = 8; }  
# 430
if (__base == 8) { 
# 431
__sep_pos = 0; }  
# 432
} else { 
# 433
if (__found_zero && ((__c == (__lit[__num_base::_S_ix])) || (__c == (__lit[__num_base::_S_iX])))) 
# 436
{ 
# 437
if (__basefield == 0) { 
# 438
__base = 16; }  
# 439
if (__base == 16) 
# 440
{ 
# 441
__found_zero = false; 
# 442
__sep_pos = 0; 
# 443
} else { 
# 445
break; }  
# 446
} else { 
# 448
break; }  }  }  
# 450
if ((++__beg) != __end) 
# 451
{ 
# 452
__c = (*__beg); 
# 453
if (!__found_zero) { 
# 454
break; }  
# 455
} else { 
# 457
__testeof = true; }  
# 458
}  
# 462
const size_t __len = (__base == 16) ? (__num_base::_S_iend) - (__num_base::_S_izero) : __base; 
# 466
typedef __gnu_cxx::__numeric_traits< _ValueT>  __num_traits; 
# 467
string __found_grouping; 
# 468
if (__lc->_M_use_grouping) { 
# 469
__found_grouping.reserve(32); }  
# 470
bool __testfail = false; 
# 471
bool __testoverflow = false; 
# 472
const __unsigned_type __max = (__negative && __num_traits::__is_signed) ? -(static_cast< __unsigned_type>(__num_traits::__min)) : __num_traits::__max; 
# 476
const __unsigned_type __smax = __max / __base; 
# 477
__unsigned_type __result = (0); 
# 478
int __digit = 0; 
# 479
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 481
if (!(__lc->_M_allocated)) { 
# 483
while (!__testeof) 
# 484
{ 
# 485
__digit = _M_find(__lit_zero, __len, __c); 
# 486
if (__digit == (-1)) { 
# 487
break; }  
# 489
if (__result > __smax) { 
# 490
__testoverflow = true; } else 
# 492
{ 
# 493
__result *= __base; 
# 494
__testoverflow |= (__result > (__max - __digit)); 
# 495
__result += __digit; 
# 496
++__sep_pos; 
# 497
}  
# 499
if ((++__beg) != __end) { 
# 500
__c = (*__beg); } else { 
# 502
__testeof = true; }  
# 503
}  } else { 
# 505
while (!__testeof) 
# 506
{ 
# 509
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 510
{ 
# 513
if (__sep_pos) 
# 514
{ 
# 515
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 516
__sep_pos = 0; 
# 517
} else 
# 519
{ 
# 520
__testfail = true; 
# 521
break; 
# 522
}  
# 523
} else { 
# 524
if (__c == (__lc->_M_decimal_point)) { 
# 525
break; } else 
# 527
{ 
# 528
const char_type *__q = __traits_type::find(__lit_zero, __len, __c); 
# 530
if (!__q) { 
# 531
break; }  
# 533
__digit = (__q - __lit_zero); 
# 534
if (__digit > 15) { 
# 535
__digit -= 6; }  
# 536
if (__result > __smax) { 
# 537
__testoverflow = true; } else 
# 539
{ 
# 540
__result *= __base; 
# 541
__testoverflow |= (__result > (__max - __digit)); 
# 542
__result += __digit; 
# 543
++__sep_pos; 
# 544
}  
# 545
}  }  
# 547
if ((++__beg) != __end) { 
# 548
__c = (*__beg); } else { 
# 550
__testeof = true; }  
# 551
}  }  
# 555
if (__found_grouping.size()) 
# 556
{ 
# 558
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 560
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 563
__err = ios_base::failbit; }  
# 564
}  
# 568
if (((!__sep_pos) && (!__found_zero) && (!(__found_grouping.size()))) || __testfail) 
# 570
{ 
# 571
__v = 0; 
# 572
__err = ios_base::failbit; 
# 573
} else { 
# 574
if (__testoverflow) 
# 575
{ 
# 576
if (__negative && __num_traits::__is_signed) { 
# 577
__v = __num_traits::__min; } else { 
# 579
__v = __num_traits::__max; }  
# 580
__err = ios_base::failbit; 
# 581
} else { 
# 583
__v = (__negative ? -__result : __result); }  }  
# 585
if (__testeof) { 
# 586
(__err |= ios_base::eofbit); }  
# 587
return __beg; 
# 588
} 
# 592
template< class _CharT, class _InIter> _InIter 
# 595
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 596
__err, bool &__v) const 
# 597
{ 
# 598
if (!(((__io.flags()) & ios_base::boolalpha))) 
# 599
{ 
# 603
long __l = (-1); 
# 604
__beg = _M_extract_int(__beg, __end, __io, __err, __l); 
# 605
if ((__l == (0)) || (__l == (1))) { 
# 606
__v = ((bool)__l); } else 
# 608
{ 
# 611
__v = true; 
# 612
__err = ios_base::failbit; 
# 613
if (__beg == __end) { 
# 614
(__err |= ios_base::eofbit); }  
# 615
}  
# 616
} else 
# 618
{ 
# 620
typedef __numpunct_cache< _CharT>  __cache_type; 
# 621
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 622
const locale &__loc = __io._M_getloc(); 
# 623
const __cache_type *__lc = __uc(__loc); 
# 625
bool __testf = true; 
# 626
bool __testt = true; 
# 627
bool __donef = (__lc->_M_falsename_size) == 0; 
# 628
bool __donet = (__lc->_M_truename_size) == 0; 
# 629
bool __testeof = false; 
# 630
size_t __n = (0); 
# 631
while ((!__donef) || (!__donet)) 
# 632
{ 
# 633
if (__beg == __end) 
# 634
{ 
# 635
__testeof = true; 
# 636
break; 
# 637
}  
# 639
const char_type __c = (*__beg); 
# 641
if (!__donef) { 
# 642
__testf = (__c == ((__lc->_M_falsename)[__n])); }  
# 644
if ((!__testf) && __donet) { 
# 645
break; }  
# 647
if (!__donet) { 
# 648
__testt = (__c == ((__lc->_M_truename)[__n])); }  
# 650
if ((!__testt) && __donef) { 
# 651
break; }  
# 653
if ((!__testt) && (!__testf)) { 
# 654
break; }  
# 656
++__n; 
# 657
++__beg; 
# 659
__donef = ((!__testf) || (__n >= (__lc->_M_falsename_size))); 
# 660
__donet = ((!__testt) || (__n >= (__lc->_M_truename_size))); 
# 661
}  
# 662
if (__testf && (__n == (__lc->_M_falsename_size)) && __n) 
# 663
{ 
# 664
__v = false; 
# 665
if (__testt && (__n == (__lc->_M_truename_size))) { 
# 666
__err = ios_base::failbit; } else { 
# 668
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); }  
# 669
} else { 
# 670
if (__testt && (__n == (__lc->_M_truename_size)) && __n) 
# 671
{ 
# 672
__v = true; 
# 673
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); 
# 674
} else 
# 676
{ 
# 679
__v = false; 
# 680
__err = ios_base::failbit; 
# 681
if (__testeof) { 
# 682
(__err |= ios_base::eofbit); }  
# 683
}  }  
# 684
}  
# 685
return __beg; 
# 686
} 
# 688
template< class _CharT, class _InIter> _InIter 
# 691
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 692
__err, float &__v) const 
# 693
{ 
# 694
string __xtrc; 
# 695
__xtrc.reserve(32); 
# 696
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 697
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 698
if (__beg == __end) { 
# 699
(__err |= ios_base::eofbit); }  
# 700
return __beg; 
# 701
} 
# 703
template< class _CharT, class _InIter> _InIter 
# 706
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 707
__err, double &__v) const 
# 708
{ 
# 709
string __xtrc; 
# 710
__xtrc.reserve(32); 
# 711
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 712
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 713
if (__beg == __end) { 
# 714
(__err |= ios_base::eofbit); }  
# 715
return __beg; 
# 716
} 
# 735 "/usr/include/c++/12.2.1/bits/locale_facets.tcc" 3
template< class _CharT, class _InIter> _InIter 
# 738
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 739
__err, long double &__v) const 
# 740
{ 
# 741
string __xtrc; 
# 742
__xtrc.reserve(32); 
# 743
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 744
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 745
if (__beg == __end) { 
# 746
(__err |= ios_base::eofbit); }  
# 747
return __beg; 
# 748
} 
# 750
template< class _CharT, class _InIter> _InIter 
# 753
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 754
__err, void *&__v) const 
# 755
{ 
# 757
typedef ios_base::fmtflags fmtflags; 
# 758
const fmtflags __fmt = __io.flags(); 
# 759
__io.flags((((__fmt & ((~ios_base::basefield)))) | ios_base::hex)); 
# 763
typedef __gnu_cxx::__conditional_type< sizeof(void *) <= sizeof(unsigned long), unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 765
_UIntPtrType __ul; 
# 766
__beg = _M_extract_int(__beg, __end, __io, __err, __ul); 
# 769
__io.flags(__fmt); 
# 771
__v = (reinterpret_cast< void *>(__ul)); 
# 772
return __beg; 
# 773
} 
# 795 "/usr/include/c++/12.2.1/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> void 
# 798
num_put< _CharT, _OutIter> ::_M_pad(_CharT __fill, streamsize __w, ios_base &__io, _CharT *
# 799
__new, const _CharT *__cs, int &__len) const 
# 800
{ 
# 803
__pad< _CharT, char_traits< _CharT> > ::_S_pad(__io, __fill, __new, __cs, __w, __len); 
# 805
__len = (static_cast< int>(__w)); 
# 806
} 
# 810
template< class _CharT, class _ValueT> int 
# 812
__int_to_char(_CharT *__bufend, _ValueT __v, const _CharT *__lit, ios_base::fmtflags 
# 813
__flags, bool __dec) 
# 814
{ 
# 815
_CharT *__buf = __bufend; 
# 816
if (__builtin_expect(__dec, true)) 
# 817
{ 
# 819
do 
# 820
{ 
# 821
(*(--__buf)) = (__lit[(__v % 10) + __num_base::_S_odigits]); 
# 822
__v /= 10; 
# 823
} 
# 824
while (__v != 0); 
# 825
} else { 
# 826
if (((__flags & ios_base::basefield)) == ios_base::oct) 
# 827
{ 
# 829
do 
# 830
{ 
# 831
(*(--__buf)) = (__lit[(__v & 7) + __num_base::_S_odigits]); 
# 832
__v >>= 3; 
# 833
} 
# 834
while (__v != 0); 
# 835
} else 
# 837
{ 
# 839
const bool __uppercase = (__flags & ios_base::uppercase); 
# 840
const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits; 
# 842
do 
# 843
{ 
# 844
(*(--__buf)) = (__lit[(__v & 15) + __case_offset]); 
# 845
__v >>= 4; 
# 846
} 
# 847
while (__v != 0); 
# 848
}  }  
# 849
return __bufend - __buf; 
# 850
} 
# 854
template< class _CharT, class _OutIter> void 
# 857
num_put< _CharT, _OutIter> ::_M_group_int(const char *__grouping, size_t __grouping_size, _CharT __sep, ios_base &, _CharT *
# 858
__new, _CharT *__cs, int &__len) const 
# 859
{ 
# 860
_CharT *__p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len); 
# 862
__len = (__p - __new); 
# 863
} 
# 865
template< class _CharT, class _OutIter> 
# 866
template< class _ValueT> _OutIter 
# 869
num_put< _CharT, _OutIter> ::_M_insert_int(_OutIter __s, ios_base &__io, _CharT __fill, _ValueT 
# 870
__v) const 
# 871
{ 
# 872
using __gnu_cxx::__add_unsigned;
# 873
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 874
typedef __numpunct_cache< _CharT>  __cache_type; 
# 875
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 876
const locale &__loc = __io._M_getloc(); 
# 877
const __cache_type *__lc = __uc(__loc); 
# 878
const _CharT *__lit = ((__lc->_M_atoms_out)); 
# 879
const ios_base::fmtflags __flags = __io.flags(); 
# 882
const int __ilen = ((5) * sizeof(_ValueT)); 
# 883
_CharT *__cs = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __ilen)); 
# 888
const ios_base::fmtflags __basefield = (__flags & ios_base::basefield); 
# 889
const bool __dec = (__basefield != ios_base::oct) && (__basefield != ios_base::hex); 
# 891
const __unsigned_type __u = ((__v > 0) || (!__dec)) ? (__unsigned_type)__v : (-((__unsigned_type)__v)); 
# 894
int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec); 
# 895
__cs += (__ilen - __len); 
# 898
if (__lc->_M_use_grouping) 
# 899
{ 
# 902
_CharT *__cs2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * (__len + 1)) * (2))); 
# 905
_M_group_int((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __io, __cs2 + 2, __cs, __len); 
# 907
__cs = (__cs2 + 2); 
# 908
}  
# 911
if (__builtin_expect(__dec, true)) 
# 912
{ 
# 914
if (__v >= 0) 
# 915
{ 
# 916
if (((bool)(__flags & ios_base::showpos)) && __gnu_cxx::template __numeric_traits< _ValueT> ::__is_signed) { 
# 918
((*(--__cs)) = (__lit[__num_base::_S_oplus])), (++__len); }  
# 919
} else { 
# 921
((*(--__cs)) = (__lit[__num_base::_S_ominus])), (++__len); }  
# 922
} else { 
# 923
if (((bool)(__flags & ios_base::showbase)) && __v) 
# 924
{ 
# 925
if (__basefield == ios_base::oct) { 
# 926
((*(--__cs)) = (__lit[__num_base::_S_odigits])), (++__len); } else 
# 928
{ 
# 930
const bool __uppercase = (__flags & ios_base::uppercase); 
# 931
(*(--__cs)) = (__lit[(__num_base::_S_ox) + __uppercase]); 
# 933
(*(--__cs)) = (__lit[__num_base::_S_odigits]); 
# 934
__len += 2; 
# 935
}  
# 936
}  }  
# 939
const streamsize __w = __io.width(); 
# 940
if (__w > (static_cast< streamsize>(__len))) 
# 941
{ 
# 942
_CharT *__cs3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 944
_M_pad(__fill, __w, __io, __cs3, __cs, __len); 
# 945
__cs = __cs3; 
# 946
}  
# 947
__io.width(0); 
# 951
return std::__write(__s, __cs, __len); 
# 952
} 
# 954
template< class _CharT, class _OutIter> void 
# 957
num_put< _CharT, _OutIter> ::_M_group_float(const char *__grouping, size_t __grouping_size, _CharT 
# 958
__sep, const _CharT *__p, _CharT *__new, _CharT *
# 959
__cs, int &__len) const 
# 960
{ 
# 964
const int __declen = (__p) ? __p - __cs : __len; 
# 965
_CharT *__p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen); 
# 970
int __newlen = __p2 - __new; 
# 971
if (__p) 
# 972
{ 
# 973
char_traits< _CharT> ::copy(__p2, __p, __len - __declen); 
# 974
__newlen += (__len - __declen); 
# 975
}  
# 976
__len = __newlen; 
# 977
} 
# 989 "/usr/include/c++/12.2.1/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> 
# 990
template< class _ValueT> _OutIter 
# 993
num_put< _CharT, _OutIter> ::_M_insert_float(_OutIter __s, ios_base &__io, _CharT __fill, char __mod, _ValueT 
# 994
__v) const 
# 995
{ 
# 996
typedef __numpunct_cache< _CharT>  __cache_type; 
# 997
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 998
const locale &__loc = __io._M_getloc(); 
# 999
const __cache_type *__lc = __uc(__loc); 
# 1002
const streamsize __prec = (__io.precision() < (0)) ? 6 : __io.precision(); 
# 1004
const int __max_digits = (__gnu_cxx::template __numeric_traits< _ValueT> ::__digits10); 
# 1008
int __len; 
# 1010
char __fbuf[16]; 
# 1011
__num_base::_S_format_float(__io, __fbuf, __mod); 
# 1015
const bool __use_prec = (((__io.flags()) & ios_base::floatfield)) != ios_base::floatfield; 
# 1020
int __cs_size = (__max_digits * 3); 
# 1021
char *__cs = static_cast< char *>(__builtin_alloca(__cs_size)); 
# 1022
if (__use_prec) { 
# 1023
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1026
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1030
if (__len >= __cs_size) 
# 1031
{ 
# 1032
__cs_size = (__len + 1); 
# 1033
__cs = (static_cast< char *>(__builtin_alloca(__cs_size))); 
# 1034
if (__use_prec) { 
# 1035
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1038
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1040
}  
# 1062 "/usr/include/c++/12.2.1/bits/locale_facets.tcc" 3
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1064
_CharT *__ws = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)); 
# 1066
__ctype.widen(__cs, __cs + __len, __ws); 
# 1069
_CharT *__wp = (0); 
# 1070
const char *__p = char_traits< char> ::find(__cs, __len, '.'); 
# 1071
if (__p) 
# 1072
{ 
# 1073
__wp = (__ws + (__p - __cs)); 
# 1074
(*__wp) = (__lc->_M_decimal_point); 
# 1075
}  
# 1080
if ((__lc->_M_use_grouping) && ((__wp || (__len < 3)) || (((__cs[1]) <= ('9')) && ((__cs[2]) <= ('9')) && ((__cs[1]) >= ('0')) && ((__cs[2]) >= ('0'))))) 
# 1083
{ 
# 1086
_CharT *__ws2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))); 
# 1089
streamsize __off = (0); 
# 1090
if (((__cs[0]) == ('-')) || ((__cs[0]) == ('+'))) 
# 1091
{ 
# 1092
__off = (1); 
# 1093
(__ws2[0]) = (__ws[0]); 
# 1094
__len -= 1; 
# 1095
}  
# 1097
_M_group_float((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __wp, __ws2 + __off, __ws + __off, __len); 
# 1100
__len += __off; 
# 1102
__ws = __ws2; 
# 1103
}  
# 1106
const streamsize __w = __io.width(); 
# 1107
if (__w > (static_cast< streamsize>(__len))) 
# 1108
{ 
# 1109
_CharT *__ws3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 1111
_M_pad(__fill, __w, __io, __ws3, __ws, __len); 
# 1112
__ws = __ws3; 
# 1113
}  
# 1114
__io.width(0); 
# 1118
return std::__write(__s, __ws, __len); 
# 1119
} 
# 1121
template< class _CharT, class _OutIter> _OutIter 
# 1124
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 1125
{ 
# 1126
const ios_base::fmtflags __flags = __io.flags(); 
# 1127
if (((__flags & ios_base::boolalpha)) == 0) 
# 1128
{ 
# 1129
const long __l = __v; 
# 1130
__s = _M_insert_int(__s, __io, __fill, __l); 
# 1131
} else 
# 1133
{ 
# 1134
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1135
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 1136
const locale &__loc = __io._M_getloc(); 
# 1137
const __cache_type *__lc = __uc(__loc); 
# 1139
const _CharT *__name = __v ? __lc->_M_truename : (__lc->_M_falsename); 
# 1141
int __len = __v ? __lc->_M_truename_size : (__lc->_M_falsename_size); 
# 1144
const streamsize __w = __io.width(); 
# 1145
if (__w > (static_cast< streamsize>(__len))) 
# 1146
{ 
# 1147
const streamsize __plen = __w - __len; 
# 1148
_CharT *__ps = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __plen)); 
# 1152
char_traits< _CharT> ::assign(__ps, __plen, __fill); 
# 1153
__io.width(0); 
# 1155
if (((__flags & ios_base::adjustfield)) == ios_base::left) 
# 1156
{ 
# 1157
__s = std::__write(__s, __name, __len); 
# 1158
__s = std::__write(__s, __ps, __plen); 
# 1159
} else 
# 1161
{ 
# 1162
__s = std::__write(__s, __ps, __plen); 
# 1163
__s = std::__write(__s, __name, __len); 
# 1164
}  
# 1165
return __s; 
# 1166
}  
# 1167
__io.width(0); 
# 1168
__s = std::__write(__s, __name, __len); 
# 1169
}  
# 1170
return __s; 
# 1171
} 
# 1173
template< class _CharT, class _OutIter> _OutIter 
# 1176
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 1177
{ return _M_insert_float(__s, __io, __fill, ((char)0), __v); } 
# 1187 "/usr/include/c++/12.2.1/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> _OutIter 
# 1190
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 1191
__v) const 
# 1192
{ return _M_insert_float(__s, __io, __fill, 'L', __v); } 
# 1194
template< class _CharT, class _OutIter> _OutIter 
# 1197
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 1198
__v) const 
# 1199
{ 
# 1200
const ios_base::fmtflags __flags = __io.flags(); 
# 1201
const ios_base::fmtflags __fmt = (~((ios_base::basefield | ios_base::uppercase))); 
# 1203
__io.flags((((__flags & __fmt)) | ((ios_base::hex | ios_base::showbase)))); 
# 1207
typedef __gnu_cxx::__conditional_type< sizeof(void *) <= sizeof(unsigned long), unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 1209
__s = _M_insert_int(__s, __io, __fill, reinterpret_cast< _UIntPtrType>(__v)); 
# 1211
__io.flags(__flags); 
# 1212
return __s; 
# 1213
} 
# 1233 "/usr/include/c++/12.2.1/bits/locale_facets.tcc" 3
template< class _CharT, class _Traits> void 
# 1235
__pad< _CharT, _Traits> ::_S_pad(ios_base &__io, _CharT __fill, _CharT *
# 1236
__news, const _CharT *__olds, streamsize 
# 1237
__newlen, streamsize __oldlen) 
# 1238
{ 
# 1239
const size_t __plen = static_cast< size_t>(__newlen - __oldlen); 
# 1240
const ios_base::fmtflags __adjust = ((__io.flags()) & ios_base::adjustfield); 
# 1243
if (__adjust == ios_base::left) 
# 1244
{ 
# 1245
_Traits::copy(__news, __olds, __oldlen); 
# 1246
_Traits::assign(__news + __oldlen, __plen, __fill); 
# 1247
return; 
# 1248
}  
# 1250
size_t __mod = (0); 
# 1251
if (__adjust == ios_base::internal) 
# 1252
{ 
# 1256
const locale &__loc = __io._M_getloc(); 
# 1257
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1259
if ((__ctype.widen('-') == (__olds[0])) || (__ctype.widen('+') == (__olds[0]))) 
# 1261
{ 
# 1262
(__news[0]) = (__olds[0]); 
# 1263
__mod = (1); 
# 1264
++__news; 
# 1265
} else { 
# 1266
if ((__ctype.widen('0') == (__olds[0])) && (__oldlen > (1)) && ((__ctype.widen('x') == (__olds[1])) || (__ctype.widen('X') == (__olds[1])))) 
# 1270
{ 
# 1271
(__news[0]) = (__olds[0]); 
# 1272
(__news[1]) = (__olds[1]); 
# 1273
__mod = (2); 
# 1274
__news += 2; 
# 1275
}  }  
# 1277
}  
# 1278
_Traits::assign(__news, __plen, __fill); 
# 1279
_Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod); 
# 1280
} 
# 1282
template< class _CharT> _CharT *
# 1284
__add_grouping(_CharT *__s, _CharT __sep, const char *
# 1285
__gbeg, size_t __gsize, const _CharT *
# 1286
__first, const _CharT *__last) 
# 1287
{ 
# 1288
size_t __idx = (0); 
# 1289
size_t __ctr = (0); 
# 1291
while (((__last - __first) > (__gbeg[__idx])) && ((static_cast< signed char>(__gbeg[__idx])) > 0) && ((__gbeg[__idx]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)) 
# 1294
{ 
# 1295
__last -= (__gbeg[__idx]); 
# 1296
(__idx < (__gsize - (1))) ? ++__idx : (++__ctr); 
# 1297
}  
# 1299
while (__first != __last) { 
# 1300
(*(__s++)) = (*(__first++)); }  
# 1302
while (__ctr--) 
# 1303
{ 
# 1304
(*(__s++)) = __sep; 
# 1305
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1306
(*(__s++)) = (*(__first++)); }  
# 1307
}  
# 1309
while (__idx--) 
# 1310
{ 
# 1311
(*(__s++)) = __sep; 
# 1312
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1313
(*(__s++)) = (*(__first++)); }  
# 1314
}  
# 1316
return __s; 
# 1317
} 
# 1322
extern template class __cxx11::numpunct< char> ;
# 1323
extern template class __cxx11::numpunct_byname< char> ;
# 1324
extern template class num_get< char> ;
# 1325
extern template class num_put< char> ;
# 1328
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1332
extern template const __cxx11::numpunct< char>  &use_facet< __cxx11::numpunct< char> > (const locale &);
# 1336
extern template const num_put< char>  &use_facet< num_put< char> > (const locale &);
# 1340
extern template const num_get< char>  &use_facet< num_get< char> > (const locale &);
# 1344
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1348
extern template bool has_facet< __cxx11::numpunct< char> > (const locale &) throw();
# 1352
extern template bool has_facet< num_put< char> > (const locale &) throw();
# 1356
extern template bool has_facet< num_get< char> > (const locale &) throw();
# 1361
extern template class __cxx11::numpunct< wchar_t> ;
# 1362
extern template class __cxx11::numpunct_byname< wchar_t> ;
# 1363
extern template class num_get< wchar_t> ;
# 1364
extern template class num_put< wchar_t> ;
# 1367
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1371
extern template const __cxx11::numpunct< wchar_t>  &use_facet< __cxx11::numpunct< wchar_t> > (const locale &);
# 1375
extern template const num_put< wchar_t>  &use_facet< num_put< wchar_t> > (const locale &);
# 1379
extern template const num_get< wchar_t>  &use_facet< num_get< wchar_t> > (const locale &);
# 1383
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1387
extern template bool has_facet< __cxx11::numpunct< wchar_t> > (const locale &) throw();
# 1391
extern template bool has_facet< num_put< wchar_t> > (const locale &) throw();
# 1395
extern template bool has_facet< num_get< wchar_t> > (const locale &) throw();
# 1402
}
# 41 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Facet> inline const _Facet &
# 47
__check_facet(const _Facet *__f) 
# 48
{ 
# 49
if (!__f) { 
# 50
__throw_bad_cast(); }  
# 51
return *__f; 
# 52
} 
# 66 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
template< class _CharT, class _Traits> 
# 67
class basic_ios : public ios_base { 
# 76
public: typedef _CharT char_type; 
# 77
typedef typename _Traits::int_type int_type; 
# 78
typedef typename _Traits::pos_type pos_type; 
# 79
typedef typename _Traits::off_type off_type; 
# 80
typedef _Traits traits_type; 
# 87
typedef ctype< _CharT>  __ctype_type; 
# 89
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 91
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 96
protected: basic_ostream< _CharT, _Traits>  *_M_tie; 
# 97
mutable char_type _M_fill; 
# 98
mutable bool _M_fill_init; 
# 99
basic_streambuf< _CharT, _Traits>  *_M_streambuf; 
# 102
const __ctype_type *_M_ctype; 
# 104
const __num_put_type *_M_num_put; 
# 106
const __num_get_type *_M_num_get; 
# 117 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
public: explicit operator bool() const 
# 118
{ return !fail(); } 
# 125
bool operator!() const 
# 126
{ return fail(); } 
# 137 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
iostate rdstate() const 
# 138
{ return _M_streambuf_state; } 
# 148 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
void clear(iostate __state = goodbit); 
# 157
void setstate(iostate __state) 
# 158
{ clear(((rdstate()) | __state)); } 
# 164
void _M_setstate(iostate __state) 
# 165
{ 
# 168
((_M_streambuf_state) |= __state); 
# 169
if (((exceptions()) & __state)) { 
# 170
throw; }  
# 171
} 
# 180
bool good() const 
# 181
{ return (rdstate()) == 0; } 
# 190
bool eof() const 
# 191
{ return (((rdstate()) & eofbit)) != 0; } 
# 201 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
bool fail() const 
# 202
{ return (((rdstate()) & ((badbit | failbit)))) != 0; } 
# 211
bool bad() const 
# 212
{ return (((rdstate()) & badbit)) != 0; } 
# 222 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
iostate exceptions() const 
# 223
{ return _M_exception; } 
# 257 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
void exceptions(iostate __except) 
# 258
{ 
# 259
(_M_exception) = __except; 
# 260
clear(_M_streambuf_state); 
# 261
} 
# 270
explicit basic_ios(basic_streambuf< _CharT, _Traits>  *__sb) : ios_base(), _M_tie((0)), _M_fill(), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 273
{ init(__sb); } 
# 282
virtual ~basic_ios() { } 
# 295 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie() const 
# 296
{ return _M_tie; } 
# 307 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie(basic_ostream< _CharT, _Traits>  *__tiestr) 
# 308
{ 
# 309
basic_ostream< _CharT, _Traits>  *__old = _M_tie; 
# 310
(_M_tie) = __tiestr; 
# 311
return __old; 
# 312
} 
# 321
basic_streambuf< _CharT, _Traits>  *rdbuf() const 
# 322
{ return _M_streambuf; } 
# 347 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits>  *rdbuf(basic_streambuf< _CharT, _Traits>  * __sb); 
# 361 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
basic_ios &copyfmt(const basic_ios & __rhs); 
# 370
char_type fill() const 
# 371
{ 
# 372
if (!(_M_fill_init)) 
# 373
{ 
# 374
(_M_fill) = widen(' '); 
# 375
(_M_fill_init) = true; 
# 376
}  
# 377
return _M_fill; 
# 378
} 
# 390 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
char_type fill(char_type __ch) 
# 391
{ 
# 392
char_type __old = this->fill(); 
# 393
(_M_fill) = __ch; 
# 394
return __old; 
# 395
} 
# 410 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
locale imbue(const locale & __loc); 
# 430 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
char narrow(char_type __c, char __dfault) const 
# 431
{ return __check_facet(_M_ctype).narrow(__c, __dfault); } 
# 449 "/usr/include/c++/12.2.1/bits/basic_ios.h" 3
char_type widen(char __c) const 
# 450
{ return __check_facet(_M_ctype).widen(__c); } 
# 460
protected: basic_ios() : ios_base(), _M_tie((0)), _M_fill(char_type()), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 463
{ } 
# 472
void init(basic_streambuf< _CharT, _Traits>  * __sb); 
# 475
basic_ios(const basic_ios &) = delete;
# 476
basic_ios &operator=(const basic_ios &) = delete;
# 479
void move(basic_ios &__rhs) 
# 480
{ 
# 481
this->ios_base::_M_move(__rhs); 
# 482
_M_cache_locale(_M_ios_locale); 
# 483
this->tie(__rhs.tie(nullptr)); 
# 484
(_M_fill) = (__rhs._M_fill); 
# 485
(_M_fill_init) = (__rhs._M_fill_init); 
# 486
(_M_streambuf) = nullptr; 
# 487
} 
# 490
void move(basic_ios &&__rhs) 
# 491
{ this->move(__rhs); } 
# 494
void swap(basic_ios &__rhs) noexcept 
# 495
{ 
# 496
this->ios_base::_M_swap(__rhs); 
# 497
_M_cache_locale(_M_ios_locale); 
# 498
__rhs._M_cache_locale(__rhs._M_ios_locale); 
# 499
std::swap(_M_tie, __rhs._M_tie); 
# 500
std::swap(_M_fill, __rhs._M_fill); 
# 501
std::swap(_M_fill_init, __rhs._M_fill_init); 
# 502
} 
# 505
void set_rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 506
{ (_M_streambuf) = __sb; } 
# 510
void _M_cache_locale(const locale & __loc); 
# 511
}; 
# 514
}
# 35 "/usr/include/c++/12.2.1/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
template< class _CharT, class _Traits> void 
# 41
basic_ios< _CharT, _Traits> ::clear(iostate __state) 
# 42
{ 
# 43
if (this->rdbuf()) { 
# 44
(_M_streambuf_state) = __state; } else { 
# 46
(_M_streambuf_state) = (__state | badbit); }  
# 47
if (((exceptions()) & (rdstate()))) { 
# 48
__throw_ios_failure("basic_ios::clear"); }  
# 49
} 
# 51
template< class _CharT, class _Traits> basic_streambuf< _CharT, _Traits>  *
# 53
basic_ios< _CharT, _Traits> ::rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 54
{ 
# 55
basic_streambuf< _CharT, _Traits>  *__old = _M_streambuf; 
# 56
(_M_streambuf) = __sb; 
# 57
clear(); 
# 58
return __old; 
# 59
} 
# 61
template< class _CharT, class _Traits> basic_ios< _CharT, _Traits>  &
# 63
basic_ios< _CharT, _Traits> ::copyfmt(const basic_ios &__rhs) 
# 64
{ 
# 67
if (this != std::__addressof(__rhs)) 
# 68
{ 
# 73
_Words *__words = ((__rhs._M_word_size) <= (_S_local_word_size)) ? _M_local_word : (new _Words [__rhs._M_word_size]); 
# 77
_Callback_list *__cb = __rhs._M_callbacks; 
# 78
if (__cb) { 
# 79
__cb->_M_add_reference(); }  
# 80
this->ios_base::_M_call_callbacks(erase_event); 
# 81
if ((_M_word) != (_M_local_word)) 
# 82
{ 
# 83
delete [] (_M_word); 
# 84
(_M_word) = (0); 
# 85
}  
# 86
this->ios_base::_M_dispose_callbacks(); 
# 89
(_M_callbacks) = __cb; 
# 90
for (int __i = 0; __i < (__rhs._M_word_size); ++__i) { 
# 91
(__words[__i]) = ((__rhs._M_word)[__i]); }  
# 92
(_M_word) = __words; 
# 93
(_M_word_size) = (__rhs._M_word_size); 
# 95
this->flags(__rhs.flags()); 
# 96
this->width(__rhs.width()); 
# 97
this->precision(__rhs.precision()); 
# 98
this->tie(__rhs.tie()); 
# 99
this->fill(__rhs.fill()); 
# 100
((_M_ios_locale) = (__rhs.getloc())); 
# 101
_M_cache_locale(_M_ios_locale); 
# 103
this->ios_base::_M_call_callbacks(copyfmt_event); 
# 106
exceptions(__rhs.exceptions()); 
# 107
}  
# 108
return *this; 
# 109
} 
# 112
template< class _CharT, class _Traits> locale 
# 114
basic_ios< _CharT, _Traits> ::imbue(const locale &__loc) 
# 115
{ 
# 116
locale __old(this->getloc()); 
# 117
this->ios_base::imbue(__loc); 
# 118
_M_cache_locale(__loc); 
# 119
if (this->rdbuf() != 0) { 
# 120
this->rdbuf()->pubimbue(__loc); }  
# 121
return __old; 
# 122
} 
# 124
template< class _CharT, class _Traits> void 
# 126
basic_ios< _CharT, _Traits> ::init(basic_streambuf< _CharT, _Traits>  *__sb) 
# 127
{ 
# 129
this->ios_base::_M_init(); 
# 132
_M_cache_locale(_M_ios_locale); 
# 146 "/usr/include/c++/12.2.1/bits/basic_ios.tcc" 3
(_M_fill) = _CharT(); 
# 147
(_M_fill_init) = false; 
# 149
(_M_tie) = 0; 
# 150
(_M_exception) = goodbit; 
# 151
(_M_streambuf) = __sb; 
# 152
(_M_streambuf_state) = ((__sb) ? goodbit : badbit); 
# 153
} 
# 155
template< class _CharT, class _Traits> void 
# 157
basic_ios< _CharT, _Traits> ::_M_cache_locale(const locale &__loc) 
# 158
{ 
# 159
if (__builtin_expect(has_facet< __ctype_type> (__loc), true)) { 
# 160
(_M_ctype) = std::__addressof(use_facet< __ctype_type> (__loc)); } else { 
# 162
(_M_ctype) = 0; }  
# 164
if (__builtin_expect(has_facet< __num_put_type> (__loc), true)) { 
# 165
(_M_num_put) = std::__addressof(use_facet< __num_put_type> (__loc)); } else { 
# 167
(_M_num_put) = 0; }  
# 169
if (__builtin_expect(has_facet< __num_get_type> (__loc), true)) { 
# 170
(_M_num_get) = std::__addressof(use_facet< __num_get_type> (__loc)); } else { 
# 172
(_M_num_get) = 0; }  
# 173
} 
# 178
extern template class basic_ios< char> ;
# 181
extern template class basic_ios< wchar_t> ;
# 186
}
# 41 "/usr/include/c++/12.2.1/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/12.2.1/ostream" 3
template< class _CharT, class _Traits> 
# 58
class basic_ostream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_ostream __ostream_type; 
# 73
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 84 "/usr/include/c++/12.2.1/ostream" 3
explicit basic_ostream(__streambuf_type *__sb) 
# 85
{ this->init(__sb); } 
# 93
virtual ~basic_ostream() { } 
# 96
class sentry; 
# 97
friend class sentry; 
# 108 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &operator<<(__ostream_type &(*__pf)(__ostream_type &)) 
# 109
{ 
# 113
return __pf(*this); 
# 114
} 
# 117
__ostream_type &operator<<(__ios_type &(*__pf)(__ios_type &)) 
# 118
{ 
# 122
__pf(*this); 
# 123
return *this; 
# 124
} 
# 127
__ostream_type &operator<<(std::ios_base &(*__pf)(std::ios_base &)) 
# 128
{ 
# 132
__pf(*this); 
# 133
return *this; 
# 134
} 
# 166 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &operator<<(long __n) 
# 167
{ return _M_insert(__n); } 
# 170
__ostream_type &operator<<(unsigned long __n) 
# 171
{ return _M_insert(__n); } 
# 174
__ostream_type &operator<<(bool __n) 
# 175
{ return _M_insert(__n); } 
# 178
__ostream_type &operator<<(short __n); 
# 181
__ostream_type &operator<<(unsigned short __n) 
# 182
{ 
# 185
return _M_insert(static_cast< unsigned long>(__n)); 
# 186
} 
# 189
__ostream_type &operator<<(int __n); 
# 192
__ostream_type &operator<<(unsigned __n) 
# 193
{ 
# 196
return _M_insert(static_cast< unsigned long>(__n)); 
# 197
} 
# 201
__ostream_type &operator<<(long long __n) 
# 202
{ return _M_insert(__n); } 
# 205
__ostream_type &operator<<(unsigned long long __n) 
# 206
{ return _M_insert(__n); } 
# 220 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &operator<<(double __f) 
# 221
{ return _M_insert(__f); } 
# 224
__ostream_type &operator<<(float __f) 
# 225
{ 
# 228
return _M_insert(static_cast< double>(__f)); 
# 229
} 
# 232
__ostream_type &operator<<(long double __f) 
# 233
{ return _M_insert(__f); } 
# 245 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &operator<<(const void *__p) 
# 246
{ return _M_insert(__p); } 
# 250
__ostream_type &operator<<(std::nullptr_t) 
# 251
{ return (*this) << "nullptr"; } 
# 283 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &operator<<(__streambuf_type * __sb); 
# 316 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &put(char_type __c); 
# 335 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &write(const char_type * __s, std::streamsize __n); 
# 348 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &flush(); 
# 358 "/usr/include/c++/12.2.1/ostream" 3
pos_type tellp(); 
# 369 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &seekp(pos_type); 
# 381 "/usr/include/c++/12.2.1/ostream" 3
__ostream_type &seekp(off_type, std::ios_base::seekdir); 
# 384
protected: basic_ostream() 
# 385
{ this->init(0); } 
# 389
basic_ostream(basic_iostream< _CharT, _Traits>  &) { } 
# 391
basic_ostream(const basic_ostream &) = delete;
# 393
basic_ostream(basic_ostream &&__rhs) : __ios_type() 
# 395
{ __ios_type::move(__rhs); } 
# 399
basic_ostream &operator=(const basic_ostream &) = delete;
# 402
basic_ostream &operator=(basic_ostream &&__rhs) 
# 403
{ 
# 404
swap(__rhs); 
# 405
return *this; 
# 406
} 
# 409
void swap(basic_ostream &__rhs) 
# 410
{ __ios_type::swap(__rhs); } 
# 413
template< class _ValueT> __ostream_type &_M_insert(_ValueT __v); 
# 420
private: void _M_write(const char_type *__s, std::streamsize __n) 
# 421
{ std::__ostream_insert(*this, __s, __n); } 
# 423
}; 
# 432 "/usr/include/c++/12.2.1/ostream" 3
template< class _CharT, class _Traits> 
# 433
class basic_ostream< _CharT, _Traits> ::sentry { 
# 436
bool _M_ok; 
# 437
basic_ostream &_M_os; 
# 452 "/usr/include/c++/12.2.1/ostream" 3
public: explicit sentry(basic_ostream & __os); 
# 454
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 463
~sentry() 
# 464
{ 
# 466
if (((bool)((_M_os).flags() & ios_base::unitbuf)) && (!uncaught_exception())) 
# 467
{ 
# 469
if ((_M_os).rdbuf() && ((_M_os).rdbuf()->pubsync() == (-1))) { 
# 470
(_M_os).setstate(ios_base::badbit); }  
# 471
}  
# 472
} 
#pragma GCC diagnostic pop
# 485 "/usr/include/c++/12.2.1/ostream" 3
explicit operator bool() const 
# 486
{ return _M_ok; } 
# 487
}; 
# 505 "/usr/include/c++/12.2.1/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 507
operator<<(basic_ostream< _CharT, _Traits>  &__out, _CharT __c) 
# 508
{ 
# 509
if (__out.width() != 0) { 
# 510
return __ostream_insert(__out, &__c, 1); }  
# 511
__out.put(__c); 
# 512
return __out; 
# 513
} 
# 515
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 517
operator<<(basic_ostream< _CharT, _Traits>  &__out, char __c) 
# 518
{ return (__out << __out.widen(__c)); } 
# 521
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 523
operator<<(basic_ostream< char, _Traits>  &__out, char __c) 
# 524
{ 
# 525
if (__out.width() != 0) { 
# 526
return __ostream_insert(__out, &__c, 1); }  
# 527
__out.put(__c); 
# 528
return __out; 
# 529
} 
# 532
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 534
operator<<(basic_ostream< char, _Traits>  &__out, signed char __c) 
# 535
{ return (__out << (static_cast< char>(__c))); } 
# 537
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 539
operator<<(basic_ostream< char, _Traits>  &__out, unsigned char __c) 
# 540
{ return (__out << (static_cast< char>(__c))); } 
# 596 "/usr/include/c++/12.2.1/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 598
operator<<(basic_ostream< _CharT, _Traits>  &__out, const _CharT *__s) 
# 599
{ 
# 600
if (!__s) { 
# 601
__out.setstate(ios_base::badbit); } else { 
# 603
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 605
return __out; 
# 606
} 
# 608
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __out, const char * __s); 
# 613
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 615
operator<<(basic_ostream< char, _Traits>  &__out, const char *__s) 
# 616
{ 
# 617
if (!__s) { 
# 618
__out.setstate(ios_base::badbit); } else { 
# 620
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 622
return __out; 
# 623
} 
# 626
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 628
operator<<(basic_ostream< char, _Traits>  &__out, const signed char *__s) 
# 629
{ return (__out << (reinterpret_cast< const char *>(__s))); } 
# 631
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 633
operator<<(basic_ostream< char, _Traits>  &__out, const unsigned char *__s) 
# 634
{ return (__out << (reinterpret_cast< const char *>(__s))); } 
# 686 "/usr/include/c++/12.2.1/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 688
endl(basic_ostream< _CharT, _Traits>  &__os) 
# 689
{ return flush(__os.put(__os.widen('\n'))); } 
# 698 "/usr/include/c++/12.2.1/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 700
ends(basic_ostream< _CharT, _Traits>  &__os) 
# 701
{ return __os.put(_CharT()); } 
# 708
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 710
flush(basic_ostream< _CharT, _Traits>  &__os) 
# 711
{ return __os.flush(); } 
# 730 "/usr/include/c++/12.2.1/ostream" 3
template< class _Tp> using _Require_derived_from_ios_base = _Require< is_class< _Tp> , __not_< is_same< _Tp, ios_base> > , is_convertible< typename add_pointer< _Tp> ::type, ios_base *> > ; 
# 735
template< class _Os, class _Tp, class 
# 736
 = _Require_derived_from_ios_base< _Os> , class 
# 738
 = __decltype((std::declval< _Os &> () << std::declval< const _Tp &> ()))> using __rvalue_stream_insertion_t = _Os &&; 
# 752 "/usr/include/c++/12.2.1/ostream" 3
template< class _Ostream, class _Tp> inline __rvalue_stream_insertion_t< _Ostream, _Tp>  
# 754
operator<<(_Ostream &&__os, const _Tp &__x) 
# 755
{ 
# 756
__os << __x; 
# 757
return std::move(__os); 
# 758
} 
# 831 "/usr/include/c++/12.2.1/ostream" 3
}
# 41 "/usr/include/c++/12.2.1/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_ostream< _CharT, _Traits> ::sentry::sentry(basic_ostream &__os) : _M_ok(false), _M_os(__os) 
# 49
{ 
# 51
if (__os.tie() && __os.good()) { 
# 52
__os.tie()->flush(); }  
# 54
if (__os.good()) { 
# 55
(_M_ok) = true; } else { 
# 56
if (__os.bad()) { 
# 57
__os.setstate(ios_base::failbit); }  }  
# 58
} 
# 60
template< class _CharT, class _Traits> 
# 61
template< class _ValueT> basic_ostream< _CharT, _Traits>  &
# 64
basic_ostream< _CharT, _Traits> ::_M_insert(_ValueT __v) 
# 65
{ 
# 66
sentry __cerb(*this); 
# 67
if (__cerb) 
# 68
{ 
# 69
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 70
try 
# 71
{ 
# 72
const __num_put_type &__np = __check_facet((this->_M_num_put)); 
# 73
if (__np.put(*this, *this, this->fill(), __v).failed()) { 
# 74
(__err |= std::ios_base::badbit); }  
# 75
} 
# 76
catch (__cxxabiv1::__forced_unwind &) 
# 77
{ 
# 78
this->_M_setstate(ios_base::badbit); 
# 79
throw; 
# 80
} 
# 81
catch (...) 
# 82
{ this->_M_setstate(ios_base::badbit); }  
# 83
if (__err) { 
# 84
this->setstate(__err); }  
# 85
}  
# 86
return *this; 
# 87
} 
# 89
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 92
basic_ostream< _CharT, _Traits> ::operator<<(short __n) 
# 93
{ 
# 96
const std::ios_base::fmtflags __fmt = this->flags() & ios_base::basefield; 
# 97
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 98
return _M_insert(static_cast< long>(static_cast< unsigned short>(__n))); } else { 
# 100
return _M_insert(static_cast< long>(__n)); }  
# 101
} 
# 103
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 106
basic_ostream< _CharT, _Traits> ::operator<<(int __n) 
# 107
{ 
# 110
const std::ios_base::fmtflags __fmt = this->flags() & ios_base::basefield; 
# 111
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 112
return _M_insert(static_cast< long>(static_cast< unsigned>(__n))); } else { 
# 114
return _M_insert(static_cast< long>(__n)); }  
# 115
} 
# 117
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 120
basic_ostream< _CharT, _Traits> ::operator<<(__streambuf_type *__sbin) 
# 121
{ 
# 122
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 123
sentry __cerb(*this); 
# 124
if (__cerb && __sbin) 
# 125
{ 
# 126
try 
# 127
{ 
# 128
if (!__copy_streambufs(__sbin, this->rdbuf())) { 
# 129
(__err |= std::ios_base::failbit); }  
# 130
} 
# 131
catch (__cxxabiv1::__forced_unwind &) 
# 132
{ 
# 133
this->_M_setstate(ios_base::badbit); 
# 134
throw; 
# 135
} 
# 136
catch (...) 
# 137
{ this->_M_setstate(ios_base::failbit); }  
# 138
} else { 
# 139
if (!__sbin) { 
# 140
(__err |= std::ios_base::badbit); }  }  
# 141
if (__err) { 
# 142
this->setstate(__err); }  
# 143
return *this; 
# 144
} 
# 146
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 149
basic_ostream< _CharT, _Traits> ::put(char_type __c) 
# 150
{ 
# 157
sentry __cerb(*this); 
# 158
if (__cerb) 
# 159
{ 
# 160
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 161
try 
# 162
{ 
# 163
const int_type __put = this->rdbuf()->sputc(__c); 
# 164
if (traits_type::eq_int_type(__put, traits_type::eof())) { 
# 165
(__err |= std::ios_base::badbit); }  
# 166
} 
# 167
catch (__cxxabiv1::__forced_unwind &) 
# 168
{ 
# 169
this->_M_setstate(ios_base::badbit); 
# 170
throw; 
# 171
} 
# 172
catch (...) 
# 173
{ this->_M_setstate(ios_base::badbit); }  
# 174
if (__err) { 
# 175
this->setstate(__err); }  
# 176
}  
# 177
return *this; 
# 178
} 
# 180
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 183
basic_ostream< _CharT, _Traits> ::write(const _CharT *__s, std::streamsize __n) 
# 184
{ 
# 192
sentry __cerb(*this); 
# 193
if (__cerb) 
# 194
{ 
# 195
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 196
try 
# 197
{ 
# 198
if (this->rdbuf()->sputn(__s, __n) != __n) { 
# 199
__err = std::ios_base::badbit; }  
# 200
} 
# 201
catch (__cxxabiv1::__forced_unwind &) 
# 202
{ 
# 203
this->_M_setstate(ios_base::badbit); 
# 204
throw; 
# 205
} 
# 206
catch (...) 
# 207
{ this->_M_setstate(ios_base::badbit); }  
# 208
if (__err) { 
# 209
this->setstate(ios_base::badbit); }  
# 210
}  
# 211
return *this; 
# 212
} 
# 214
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 217
basic_ostream< _CharT, _Traits> ::flush() 
# 218
{ 
# 224
if (__streambuf_type *__buf = this->rdbuf()) 
# 225
{ 
# 226
sentry __cerb(*this); 
# 227
if (__cerb) 
# 228
{ 
# 229
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 230
try 
# 231
{ 
# 232
if (this->rdbuf()->pubsync() == (-1)) { 
# 233
(__err |= std::ios_base::badbit); }  
# 234
} 
# 235
catch (__cxxabiv1::__forced_unwind &) 
# 236
{ 
# 237
this->_M_setstate(ios_base::badbit); 
# 238
throw; 
# 239
} 
# 240
catch (...) 
# 241
{ this->_M_setstate(ios_base::badbit); }  
# 242
if (__err) { 
# 243
this->setstate(__err); }  
# 244
}  
# 245
}  
# 246
return *this; 
# 247
} 
# 249
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::pos_type 
# 252
basic_ostream< _CharT, _Traits> ::tellp() 
# 253
{ 
# 254
sentry __cerb(*this); 
# 255
pos_type __ret = ((pos_type)(-1)); 
# 256
if (!this->fail()) { 
# 257
__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out); }  
# 258
return __ret; 
# 259
} 
# 261
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 264
basic_ostream< _CharT, _Traits> ::seekp(pos_type __pos) 
# 265
{ 
# 266
sentry __cerb(*this); 
# 267
if (!this->fail()) 
# 268
{ 
# 271
const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out); 
# 274
if (__p == ((pos_type)((off_type)(-1)))) { 
# 275
this->setstate(ios_base::failbit); }  
# 276
}  
# 277
return *this; 
# 278
} 
# 280
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 283
basic_ostream< _CharT, _Traits> ::seekp(off_type __off, std::ios_base::seekdir __dir) 
# 284
{ 
# 285
sentry __cerb(*this); 
# 286
if (!this->fail()) 
# 287
{ 
# 290
const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::out); 
# 294
if (__p == ((pos_type)((off_type)(-1)))) { 
# 295
this->setstate(ios_base::failbit); }  
# 296
}  
# 297
return *this; 
# 298
} 
# 300
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 302
operator<<(basic_ostream< _CharT, _Traits>  &__out, const char *__s) 
# 303
{ 
# 304
if (!__s) { 
# 305
__out.setstate(ios_base::badbit); } else 
# 307
{ 
# 310
const size_t __clen = char_traits< char> ::length(__s); 
# 311
try 
# 312
{ 
# 313
struct __ptr_guard { 
# 315
_CharT *__p; 
# 316
__ptr_guard(_CharT *__ip) : __p(__ip) { } 
# 317
~__ptr_guard() { delete [] (__p); } 
# 318
_CharT *__get() { return __p; } 
# 319
} __pg(new _CharT [__clen]); 
# 321
_CharT *__ws = __pg.__get(); 
# 322
for (size_t __i = (0); __i < __clen; ++__i) { 
# 323
(__ws[__i]) = __out.widen(__s[__i]); }  
# 324
__ostream_insert(__out, __ws, __clen); 
# 325
} 
# 326
catch (__cxxabiv1::__forced_unwind &) 
# 327
{ 
# 328
__out._M_setstate(ios_base::badbit); 
# 329
throw; 
# 330
} 
# 331
catch (...) 
# 332
{ __out._M_setstate(ios_base::badbit); }  
# 333
}  
# 334
return __out; 
# 335
} 
# 340
extern template class basic_ostream< char> ;
# 341
extern template basic_ostream< char>  &endl(basic_ostream< char>  & __os);
# 342
extern template basic_ostream< char>  &ends(basic_ostream< char>  & __os);
# 343
extern template basic_ostream< char>  &flush(basic_ostream< char>  & __os);
# 344
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, char __c);
# 345
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, unsigned char __c);
# 346
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, signed char __c);
# 347
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const char * __s);
# 348
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const unsigned char * __s);
# 349
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const signed char * __s);
# 351
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long __v);
# 352
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(unsigned long __v);
# 353
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(bool __v);
# 355
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long long __v);
# 356
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(unsigned long long __v);
# 358
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(double __v);
# 359
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long double __v);
# 360
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(const void * __v);
# 363
extern template class basic_ostream< wchar_t> ;
# 364
extern template basic_ostream< wchar_t>  &endl(basic_ostream< wchar_t>  & __os);
# 365
extern template basic_ostream< wchar_t>  &ends(basic_ostream< wchar_t>  & __os);
# 366
extern template basic_ostream< wchar_t>  &flush(basic_ostream< wchar_t>  & __os);
# 367
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, wchar_t __c);
# 368
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, char __c);
# 369
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, const wchar_t * __s);
# 370
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, const char * __s);
# 372
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long __v);
# 373
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(unsigned long __v);
# 374
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(bool __v);
# 376
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long long __v);
# 377
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(unsigned long long __v);
# 379
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(double __v);
# 380
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long double __v);
# 381
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(const void * __v);
# 386
}
# 41 "/usr/include/c++/12.2.1/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/12.2.1/istream" 3
template< class _CharT, class _Traits> 
# 58
class basic_istream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_istream __istream_type; 
# 73
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 82
protected: std::streamsize _M_gcount; 
# 93
public: explicit basic_istream(__streambuf_type *__sb) : _M_gcount(((std::streamsize)0)) 
# 95
{ this->init(__sb); } 
# 103
virtual ~basic_istream() 
# 104
{ (_M_gcount) = ((std::streamsize)0); } 
# 107
class sentry; 
# 108
friend class sentry; 
# 120 "/usr/include/c++/12.2.1/istream" 3
__istream_type &operator>>(__istream_type &(*__pf)(__istream_type &)) 
# 121
{ return __pf(*this); } 
# 124
__istream_type &operator>>(__ios_type &(*__pf)(__ios_type &)) 
# 125
{ 
# 126
__pf(*this); 
# 127
return *this; 
# 128
} 
# 131
__istream_type &operator>>(std::ios_base &(*__pf)(std::ios_base &)) 
# 132
{ 
# 133
__pf(*this); 
# 134
return *this; 
# 135
} 
# 168 "/usr/include/c++/12.2.1/istream" 3
__istream_type &operator>>(bool &__n) 
# 169
{ return _M_extract(__n); } 
# 172
__istream_type &operator>>(short & __n); 
# 175
__istream_type &operator>>(unsigned short &__n) 
# 176
{ return _M_extract(__n); } 
# 179
__istream_type &operator>>(int & __n); 
# 182
__istream_type &operator>>(unsigned &__n) 
# 183
{ return _M_extract(__n); } 
# 186
__istream_type &operator>>(long &__n) 
# 187
{ return _M_extract(__n); } 
# 190
__istream_type &operator>>(unsigned long &__n) 
# 191
{ return _M_extract(__n); } 
# 195
__istream_type &operator>>(long long &__n) 
# 196
{ return _M_extract(__n); } 
# 199
__istream_type &operator>>(unsigned long long &__n) 
# 200
{ return _M_extract(__n); } 
# 214 "/usr/include/c++/12.2.1/istream" 3
__istream_type &operator>>(float &__f) 
# 215
{ return _M_extract(__f); } 
# 218
__istream_type &operator>>(double &__f) 
# 219
{ return _M_extract(__f); } 
# 222
__istream_type &operator>>(long double &__f) 
# 223
{ return _M_extract(__f); } 
# 235 "/usr/include/c++/12.2.1/istream" 3
__istream_type &operator>>(void *&__p) 
# 236
{ return _M_extract(__p); } 
# 259 "/usr/include/c++/12.2.1/istream" 3
__istream_type &operator>>(__streambuf_type * __sb); 
# 269 "/usr/include/c++/12.2.1/istream" 3
std::streamsize gcount() const 
# 270
{ return _M_gcount; } 
# 302 "/usr/include/c++/12.2.1/istream" 3
int_type get(); 
# 316 "/usr/include/c++/12.2.1/istream" 3
__istream_type &get(char_type & __c); 
# 343 "/usr/include/c++/12.2.1/istream" 3
__istream_type &get(char_type * __s, std::streamsize __n, char_type __delim); 
# 354 "/usr/include/c++/12.2.1/istream" 3
__istream_type &get(char_type *__s, std::streamsize __n) 
# 355
{ return this->get(__s, __n, this->widen('\n')); } 
# 377 "/usr/include/c++/12.2.1/istream" 3
__istream_type &get(__streambuf_type & __sb, char_type __delim); 
# 387 "/usr/include/c++/12.2.1/istream" 3
__istream_type &get(__streambuf_type &__sb) 
# 388
{ return this->get(__sb, this->widen('\n')); } 
# 416 "/usr/include/c++/12.2.1/istream" 3
__istream_type &getline(char_type * __s, std::streamsize __n, char_type __delim); 
# 427 "/usr/include/c++/12.2.1/istream" 3
__istream_type &getline(char_type *__s, std::streamsize __n) 
# 428
{ return this->getline(__s, __n, this->widen('\n')); } 
# 451 "/usr/include/c++/12.2.1/istream" 3
__istream_type &ignore(std::streamsize __n, int_type __delim); 
# 454
__istream_type &ignore(std::streamsize __n); 
# 457
__istream_type &ignore(); 
# 468 "/usr/include/c++/12.2.1/istream" 3
int_type peek(); 
# 486 "/usr/include/c++/12.2.1/istream" 3
__istream_type &read(char_type * __s, std::streamsize __n); 
# 505 "/usr/include/c++/12.2.1/istream" 3
std::streamsize readsome(char_type * __s, std::streamsize __n); 
# 522 "/usr/include/c++/12.2.1/istream" 3
__istream_type &putback(char_type __c); 
# 538 "/usr/include/c++/12.2.1/istream" 3
__istream_type &unget(); 
# 556 "/usr/include/c++/12.2.1/istream" 3
int sync(); 
# 571 "/usr/include/c++/12.2.1/istream" 3
pos_type tellg(); 
# 586 "/usr/include/c++/12.2.1/istream" 3
__istream_type &seekg(pos_type); 
# 602 "/usr/include/c++/12.2.1/istream" 3
__istream_type &seekg(off_type, std::ios_base::seekdir); 
# 606
protected: basic_istream() : _M_gcount(((std::streamsize)0)) 
# 608
{ this->init(0); } 
# 611
basic_istream(const basic_istream &) = delete;
# 613
basic_istream(basic_istream &&__rhs) : __ios_type(), _M_gcount(__rhs._M_gcount) 
# 615
{ 
# 616
__ios_type::move(__rhs); 
# 617
(__rhs._M_gcount) = (0); 
# 618
} 
# 622
basic_istream &operator=(const basic_istream &) = delete;
# 625
basic_istream &operator=(basic_istream &&__rhs) 
# 626
{ 
# 627
swap(__rhs); 
# 628
return *this; 
# 629
} 
# 632
void swap(basic_istream &__rhs) 
# 633
{ 
# 634
__ios_type::swap(__rhs); 
# 635
std::swap(_M_gcount, __rhs._M_gcount); 
# 636
} 
# 639
template< class _ValueT> __istream_type &_M_extract(_ValueT & __v); 
# 642
}; 
# 648
template<> basic_istream< char>  &basic_istream< char> ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 653
template<> basic_istream< char>  &basic_istream< char> ::ignore(streamsize __n); 
# 658
template<> basic_istream< char>  &basic_istream< char> ::ignore(streamsize __n, int_type __delim); 
# 664
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 669
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::ignore(streamsize __n); 
# 674
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::ignore(streamsize __n, int_type __delim); 
# 685 "/usr/include/c++/12.2.1/istream" 3
template< class _CharT, class _Traits> 
# 686
class basic_istream< _CharT, _Traits> ::sentry { 
# 689
bool _M_ok; 
# 693
public: typedef _Traits traits_type; 
# 694
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 695
typedef basic_istream __istream_type; 
# 696
typedef typename basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type; 
# 697
typedef typename _Traits::int_type __int_type; 
# 722 "/usr/include/c++/12.2.1/istream" 3
explicit sentry(basic_istream & __is, bool __noskipws = false); 
# 734 "/usr/include/c++/12.2.1/istream" 3
explicit operator bool() const 
# 735
{ return _M_ok; } 
# 736
}; 
# 750 "/usr/include/c++/12.2.1/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT & __c); 
# 754
template< class _Traits> inline basic_istream< char, _Traits>  &
# 756
operator>>(basic_istream< char, _Traits>  &__in, unsigned char &__c) 
# 757
{ return (__in >> (reinterpret_cast< char &>(__c))); } 
# 759
template< class _Traits> inline basic_istream< char, _Traits>  &
# 761
operator>>(basic_istream< char, _Traits>  &__in, signed char &__c) 
# 762
{ return (__in >> (reinterpret_cast< char &>(__c))); } 
# 766
template< class _CharT, class _Traits> void __istream_extract(basic_istream< _CharT, _Traits>  &, _CharT *, streamsize); 
# 770
void __istream_extract(istream &, char *, streamsize); 
# 800 "/usr/include/c++/12.2.1/istream" 3
template< class _CharT, class _Traits> 
# 801
__attribute((__nonnull__(2), __access__(__write_only__ , 2 ))) inline basic_istream< _CharT, _Traits>  &
# 803
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT *__s) 
# 804
{ 
# 834 "/usr/include/c++/12.2.1/istream" 3
{ 
# 836
streamsize __n = __gnu_cxx::__numeric_traits_integer< long> ::__max; 
# 837
__n /= sizeof(_CharT); 
# 838
std::__istream_extract(__in, __s, __n); 
# 839
} 
# 840
return __in; 
# 841
} 
# 843
template< class _Traits> 
# 844
__attribute((__nonnull__(2), __access__(__write_only__ , 2 ))) inline basic_istream< char, _Traits>  &
# 846
operator>>(basic_istream< char, _Traits>  &__in, unsigned char *__s) 
# 847
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 849
template< class _Traits> 
# 850
__attribute((__nonnull__(2), __access__(__write_only__ , 2 ))) inline basic_istream< char, _Traits>  &
# 852
operator>>(basic_istream< char, _Traits>  &__in, signed char *__s) 
# 853
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 889 "/usr/include/c++/12.2.1/istream" 3
template< class _CharT, class _Traits> 
# 890
class basic_iostream : public basic_istream< _CharT, _Traits> , public basic_ostream< _CharT, _Traits>  { 
# 898
public: typedef _CharT char_type; 
# 899
typedef typename _Traits::int_type int_type; 
# 900
typedef typename _Traits::pos_type pos_type; 
# 901
typedef typename _Traits::off_type off_type; 
# 902
typedef _Traits traits_type; 
# 905
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 906
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 915
explicit basic_iostream(basic_streambuf< _CharT, _Traits>  *__sb) : __istream_type(__sb), __ostream_type(__sb) 
# 916
{ } 
# 922
virtual ~basic_iostream() { } 
# 925
protected: basic_iostream() : __istream_type(), __ostream_type() 
# 926
{ } 
# 929
basic_iostream(const basic_iostream &) = delete;
# 931
basic_iostream(basic_iostream &&__rhs) : __istream_type(std::move(__rhs)), __ostream_type(*this) 
# 933
{ } 
# 937
basic_iostream &operator=(const basic_iostream &) = delete;
# 940
basic_iostream &operator=(basic_iostream &&__rhs) 
# 941
{ 
# 942
swap(__rhs); 
# 943
return *this; 
# 944
} 
# 947
void swap(basic_iostream &__rhs) 
# 948
{ __istream_type::swap(__rhs); } 
# 950
}; 
# 972 "/usr/include/c++/12.2.1/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &ws(basic_istream< _CharT, _Traits>  & __is); 
# 988 "/usr/include/c++/12.2.1/istream" 3
template< class _Is, class _Tp, class 
# 989
 = _Require_derived_from_ios_base< _Is> , class 
# 990
 = __decltype((std::declval< _Is &> () >> std::declval< _Tp> ()))> using __rvalue_stream_extraction_t = _Is &&; 
# 1004 "/usr/include/c++/12.2.1/istream" 3
template< class _Istream, class _Tp> inline __rvalue_stream_extraction_t< _Istream, _Tp>  
# 1006
operator>>(_Istream &&__is, _Tp &&__x) 
# 1007
{ 
# 1008
__is >> std::forward< _Tp> (__x); 
# 1009
return std::move(__is); 
# 1010
} 
# 1014
}
# 41 "/usr/include/c++/12.2.1/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_istream< _CharT, _Traits> ::sentry::sentry(basic_istream &__in, bool __noskip) : _M_ok(false) 
# 48
{ 
# 49
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 50
if (__in.good()) 
# 51
{ 
# 52
try 
# 53
{ 
# 54
if (__in.tie()) { 
# 55
__in.tie()->flush(); }  
# 56
if ((!__noskip) && ((bool)(__in.flags() & ios_base::skipws))) 
# 57
{ 
# 58
const __int_type __eof = traits_type::eof(); 
# 59
__streambuf_type *__sb = __in.rdbuf(); 
# 60
__int_type __c = __sb->sgetc(); 
# 62
const __ctype_type &__ct = __check_facet((__in._M_ctype)); 
# 63
while ((!traits_type::eq_int_type(__c, __eof)) && __ct.is(ctype_base::space, traits_type::to_char_type(__c))) { 
# 66
__c = __sb->snextc(); }  
# 71
if (traits_type::eq_int_type(__c, __eof)) { 
# 72
(__err |= std::ios_base::eofbit); }  
# 73
}  
# 74
} 
# 75
catch (__cxxabiv1::__forced_unwind &) 
# 76
{ 
# 77
__in._M_setstate(ios_base::badbit); 
# 78
throw; 
# 79
} 
# 80
catch (...) 
# 81
{ __in._M_setstate(ios_base::badbit); }  
# 82
}  
# 84
if (__in.good() && (__err == std::ios_base::goodbit)) { 
# 85
(_M_ok) = true; } else 
# 87
{ 
# 88
(__err |= std::ios_base::failbit); 
# 89
__in.setstate(__err); 
# 90
}  
# 91
} 
# 93
template< class _CharT, class _Traits> 
# 94
template< class _ValueT> basic_istream< _CharT, _Traits>  &
# 97
basic_istream< _CharT, _Traits> ::_M_extract(_ValueT &__v) 
# 98
{ 
# 99
sentry __cerb(*this, false); 
# 100
if (__cerb) 
# 101
{ 
# 102
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 103
try 
# 104
{ 
# 105
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 106
__ng.get(*this, 0, *this, __err, __v); 
# 107
} 
# 108
catch (__cxxabiv1::__forced_unwind &) 
# 109
{ 
# 110
this->_M_setstate(ios_base::badbit); 
# 111
throw; 
# 112
} 
# 113
catch (...) 
# 114
{ this->_M_setstate(ios_base::badbit); }  
# 115
if (__err) { 
# 116
this->setstate(__err); }  
# 117
}  
# 118
return *this; 
# 119
} 
# 121
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 124
basic_istream< _CharT, _Traits> ::operator>>(short &__n) 
# 125
{ 
# 128
sentry __cerb(*this, false); 
# 129
if (__cerb) 
# 130
{ 
# 131
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 132
try 
# 133
{ 
# 134
long __l; 
# 135
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 136
__ng.get(*this, 0, *this, __err, __l); 
# 140
if (__l < __gnu_cxx::__numeric_traits_integer< short> ::__min) 
# 141
{ 
# 142
(__err |= std::ios_base::failbit); 
# 143
__n = __gnu_cxx::__numeric_traits_integer< short> ::__min; 
# 144
} else { 
# 145
if (__l > __gnu_cxx::__numeric_traits_integer< short> ::__max) 
# 146
{ 
# 147
(__err |= std::ios_base::failbit); 
# 148
__n = __gnu_cxx::__numeric_traits_integer< short> ::__max; 
# 149
} else { 
# 151
__n = ((short)__l); }  }  
# 152
} 
# 153
catch (__cxxabiv1::__forced_unwind &) 
# 154
{ 
# 155
this->_M_setstate(ios_base::badbit); 
# 156
throw; 
# 157
} 
# 158
catch (...) 
# 159
{ this->_M_setstate(ios_base::badbit); }  
# 160
if (__err) { 
# 161
this->setstate(__err); }  
# 162
}  
# 163
return *this; 
# 164
} 
# 166
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 169
basic_istream< _CharT, _Traits> ::operator>>(int &__n) 
# 170
{ 
# 173
sentry __cerb(*this, false); 
# 174
if (__cerb) 
# 175
{ 
# 176
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 177
try 
# 178
{ 
# 179
long __l; 
# 180
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 181
__ng.get(*this, 0, *this, __err, __l); 
# 185
if (__l < __gnu_cxx::__numeric_traits_integer< int> ::__min) 
# 186
{ 
# 187
(__err |= std::ios_base::failbit); 
# 188
__n = __gnu_cxx::__numeric_traits_integer< int> ::__min; 
# 189
} else { 
# 190
if (__l > __gnu_cxx::__numeric_traits_integer< int> ::__max) 
# 191
{ 
# 192
(__err |= std::ios_base::failbit); 
# 193
__n = __gnu_cxx::__numeric_traits_integer< int> ::__max; 
# 194
} else { 
# 196
__n = ((int)__l); }  }  
# 197
} 
# 198
catch (__cxxabiv1::__forced_unwind &) 
# 199
{ 
# 200
this->_M_setstate(ios_base::badbit); 
# 201
throw; 
# 202
} 
# 203
catch (...) 
# 204
{ this->_M_setstate(ios_base::badbit); }  
# 205
if (__err) { 
# 206
this->setstate(__err); }  
# 207
}  
# 208
return *this; 
# 209
} 
# 211
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 214
basic_istream< _CharT, _Traits> ::operator>>(__streambuf_type *__sbout) 
# 215
{ 
# 216
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 217
sentry __cerb(*this, false); 
# 218
if (__cerb && __sbout) 
# 219
{ 
# 220
try 
# 221
{ 
# 222
bool __ineof; 
# 223
if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof)) { 
# 224
(__err |= std::ios_base::failbit); }  
# 225
if (__ineof) { 
# 226
(__err |= std::ios_base::eofbit); }  
# 227
} 
# 228
catch (__cxxabiv1::__forced_unwind &) 
# 229
{ 
# 230
this->_M_setstate(ios_base::failbit); 
# 231
throw; 
# 232
} 
# 233
catch (...) 
# 234
{ this->_M_setstate(ios_base::failbit); }  
# 235
} else { 
# 236
if (!__sbout) { 
# 237
(__err |= std::ios_base::failbit); }  }  
# 238
if (__err) { 
# 239
this->setstate(__err); }  
# 240
return *this; 
# 241
} 
# 243
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 246
basic_istream< _CharT, _Traits> ::get() 
# 247
{ 
# 248
const int_type __eof = traits_type::eof(); 
# 249
int_type __c = __eof; 
# 250
(_M_gcount) = (0); 
# 251
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 252
sentry __cerb(*this, true); 
# 253
if (__cerb) 
# 254
{ 
# 255
try 
# 256
{ 
# 257
__c = this->rdbuf()->sbumpc(); 
# 259
if (!traits_type::eq_int_type(__c, __eof)) { 
# 260
(_M_gcount) = (1); } else { 
# 262
(__err |= std::ios_base::eofbit); }  
# 263
} 
# 264
catch (__cxxabiv1::__forced_unwind &) 
# 265
{ 
# 266
this->_M_setstate(ios_base::badbit); 
# 267
throw; 
# 268
} 
# 269
catch (...) 
# 270
{ this->_M_setstate(ios_base::badbit); }  
# 271
}  
# 272
if (!(_M_gcount)) { 
# 273
(__err |= std::ios_base::failbit); }  
# 274
if (__err) { 
# 275
this->setstate(__err); }  
# 276
return __c; 
# 277
} 
# 279
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 282
basic_istream< _CharT, _Traits> ::get(char_type &__c) 
# 283
{ 
# 284
(_M_gcount) = (0); 
# 285
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 286
sentry __cerb(*this, true); 
# 287
if (__cerb) 
# 288
{ 
# 289
try 
# 290
{ 
# 291
const int_type __cb = this->rdbuf()->sbumpc(); 
# 293
if (!traits_type::eq_int_type(__cb, traits_type::eof())) 
# 294
{ 
# 295
(_M_gcount) = (1); 
# 296
__c = traits_type::to_char_type(__cb); 
# 297
} else { 
# 299
(__err |= std::ios_base::eofbit); }  
# 300
} 
# 301
catch (__cxxabiv1::__forced_unwind &) 
# 302
{ 
# 303
this->_M_setstate(ios_base::badbit); 
# 304
throw; 
# 305
} 
# 306
catch (...) 
# 307
{ this->_M_setstate(ios_base::badbit); }  
# 308
}  
# 309
if (!(_M_gcount)) { 
# 310
(__err |= std::ios_base::failbit); }  
# 311
if (__err) { 
# 312
this->setstate(__err); }  
# 313
return *this; 
# 314
} 
# 316
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 319
basic_istream< _CharT, _Traits> ::get(char_type *__s, std::streamsize __n, char_type __delim) 
# 320
{ 
# 321
(_M_gcount) = (0); 
# 322
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 323
sentry __cerb(*this, true); 
# 324
if (__cerb) 
# 325
{ 
# 326
try 
# 327
{ 
# 328
const int_type __idelim = traits_type::to_int_type(__delim); 
# 329
const int_type __eof = traits_type::eof(); 
# 330
__streambuf_type *__sb = this->rdbuf(); 
# 331
int_type __c = __sb->sgetc(); 
# 333
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 336
{ 
# 337
(*(__s++)) = traits_type::to_char_type(__c); 
# 338
++(_M_gcount); 
# 339
__c = __sb->snextc(); 
# 340
}  
# 341
if (traits_type::eq_int_type(__c, __eof)) { 
# 342
(__err |= std::ios_base::eofbit); }  
# 343
} 
# 344
catch (__cxxabiv1::__forced_unwind &) 
# 345
{ 
# 346
this->_M_setstate(ios_base::badbit); 
# 347
throw; 
# 348
} 
# 349
catch (...) 
# 350
{ this->_M_setstate(ios_base::badbit); }  
# 351
}  
# 354
if (__n > (0)) { 
# 355
(*__s) = char_type(); }  
# 356
if (!(_M_gcount)) { 
# 357
(__err |= std::ios_base::failbit); }  
# 358
if (__err) { 
# 359
this->setstate(__err); }  
# 360
return *this; 
# 361
} 
# 363
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 366
basic_istream< _CharT, _Traits> ::get(__streambuf_type &__sb, char_type __delim) 
# 367
{ 
# 368
(_M_gcount) = (0); 
# 369
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 370
sentry __cerb(*this, true); 
# 371
if (__cerb) 
# 372
{ 
# 373
try 
# 374
{ 
# 375
const int_type __idelim = traits_type::to_int_type(__delim); 
# 376
const int_type __eof = traits_type::eof(); 
# 377
__streambuf_type *__this_sb = this->rdbuf(); 
# 378
int_type __c = __this_sb->sgetc(); 
# 379
char_type __c2 = traits_type::to_char_type(__c); 
# 380
unsigned long long __gcount = (0); 
# 382
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim)) && (!traits_type::eq_int_type(__sb.sputc(__c2), __eof))) 
# 385
{ 
# 386
++__gcount; 
# 387
__c = __this_sb->snextc(); 
# 388
__c2 = traits_type::to_char_type(__c); 
# 389
}  
# 390
if (traits_type::eq_int_type(__c, __eof)) { 
# 391
(__err |= std::ios_base::eofbit); }  
# 394
if (__gcount <= __gnu_cxx::__numeric_traits_integer< long> ::__max) { 
# 395
(_M_gcount) = __gcount; } else { 
# 397
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 398
} 
# 399
catch (__cxxabiv1::__forced_unwind &) 
# 400
{ 
# 401
this->_M_setstate(ios_base::badbit); 
# 402
throw; 
# 403
} 
# 404
catch (...) 
# 405
{ this->_M_setstate(ios_base::badbit); }  
# 406
}  
# 407
if (!(_M_gcount)) { 
# 408
(__err |= std::ios_base::failbit); }  
# 409
if (__err) { 
# 410
this->setstate(__err); }  
# 411
return *this; 
# 412
} 
# 414
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 417
basic_istream< _CharT, _Traits> ::getline(char_type *__s, std::streamsize __n, char_type __delim) 
# 418
{ 
# 419
(_M_gcount) = (0); 
# 420
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 421
sentry __cerb(*this, true); 
# 422
if (__cerb) 
# 423
{ 
# 424
try 
# 425
{ 
# 426
const int_type __idelim = traits_type::to_int_type(__delim); 
# 427
const int_type __eof = traits_type::eof(); 
# 428
__streambuf_type *__sb = this->rdbuf(); 
# 429
int_type __c = __sb->sgetc(); 
# 431
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 434
{ 
# 435
(*(__s++)) = traits_type::to_char_type(__c); 
# 436
__c = __sb->snextc(); 
# 437
++(_M_gcount); 
# 438
}  
# 439
if (traits_type::eq_int_type(__c, __eof)) { 
# 440
(__err |= std::ios_base::eofbit); } else 
# 442
{ 
# 443
if (traits_type::eq_int_type(__c, __idelim)) 
# 444
{ 
# 445
__sb->sbumpc(); 
# 446
++(_M_gcount); 
# 447
} else { 
# 449
(__err |= std::ios_base::failbit); }  
# 450
}  
# 451
} 
# 452
catch (__cxxabiv1::__forced_unwind &) 
# 453
{ 
# 454
this->_M_setstate(ios_base::badbit); 
# 455
throw; 
# 456
} 
# 457
catch (...) 
# 458
{ this->_M_setstate(ios_base::badbit); }  
# 459
}  
# 462
if (__n > (0)) { 
# 463
(*__s) = char_type(); }  
# 464
if (!(_M_gcount)) { 
# 465
(__err |= std::ios_base::failbit); }  
# 466
if (__err) { 
# 467
this->setstate(__err); }  
# 468
return *this; 
# 469
} 
# 474
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 477
basic_istream< _CharT, _Traits> ::ignore() 
# 478
{ 
# 479
(_M_gcount) = (0); 
# 480
sentry __cerb(*this, true); 
# 481
if (__cerb) 
# 482
{ 
# 483
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 484
try 
# 485
{ 
# 486
const int_type __eof = traits_type::eof(); 
# 487
__streambuf_type *__sb = this->rdbuf(); 
# 489
if (traits_type::eq_int_type(__sb->sbumpc(), __eof)) { 
# 490
(__err |= std::ios_base::eofbit); } else { 
# 492
(_M_gcount) = (1); }  
# 493
} 
# 494
catch (__cxxabiv1::__forced_unwind &) 
# 495
{ 
# 496
this->_M_setstate(ios_base::badbit); 
# 497
throw; 
# 498
} 
# 499
catch (...) 
# 500
{ this->_M_setstate(ios_base::badbit); }  
# 501
if (__err) { 
# 502
this->setstate(__err); }  
# 503
}  
# 504
return *this; 
# 505
} 
# 507
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 510
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n) 
# 511
{ 
# 512
(_M_gcount) = (0); 
# 513
sentry __cerb(*this, true); 
# 514
if (__cerb && (__n > (0))) 
# 515
{ 
# 516
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 517
try 
# 518
{ 
# 519
const int_type __eof = traits_type::eof(); 
# 520
__streambuf_type *__sb = this->rdbuf(); 
# 521
int_type __c = __sb->sgetc(); 
# 530 "/usr/include/c++/12.2.1/bits/istream.tcc" 3
bool __large_ignore = false; 
# 531
while (true) 
# 532
{ 
# 533
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof))) 
# 535
{ 
# 536
++(_M_gcount); 
# 537
__c = __sb->snextc(); 
# 538
}  
# 539
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof))) 
# 541
{ 
# 542
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 544
__large_ignore = true; 
# 545
} else { 
# 547
break; }  
# 548
}  
# 550
if (__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) 
# 551
{ 
# 552
if (__large_ignore) { 
# 553
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 555
if (traits_type::eq_int_type(__c, __eof)) { 
# 556
(__err |= std::ios_base::eofbit); }  
# 557
} else { 
# 558
if ((_M_gcount) < __n) 
# 559
{ 
# 560
if (traits_type::eq_int_type(__c, __eof)) { 
# 561
(__err |= std::ios_base::eofbit); }  
# 562
}  }  
# 563
} 
# 564
catch (__cxxabiv1::__forced_unwind &) 
# 565
{ 
# 566
this->_M_setstate(ios_base::badbit); 
# 567
throw; 
# 568
} 
# 569
catch (...) 
# 570
{ this->_M_setstate(ios_base::badbit); }  
# 571
if (__err) { 
# 572
this->setstate(__err); }  
# 573
}  
# 574
return *this; 
# 575
} 
# 577
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 580
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n, int_type __delim) 
# 581
{ 
# 582
(_M_gcount) = (0); 
# 583
sentry __cerb(*this, true); 
# 584
if (__cerb && (__n > (0))) 
# 585
{ 
# 586
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 587
try 
# 588
{ 
# 589
const int_type __eof = traits_type::eof(); 
# 590
__streambuf_type *__sb = this->rdbuf(); 
# 591
int_type __c = __sb->sgetc(); 
# 594
bool __large_ignore = false; 
# 595
while (true) 
# 596
{ 
# 597
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 600
{ 
# 601
++(_M_gcount); 
# 602
__c = __sb->snextc(); 
# 603
}  
# 604
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 607
{ 
# 608
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 610
__large_ignore = true; 
# 611
} else { 
# 613
break; }  
# 614
}  
# 616
if (__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) 
# 617
{ 
# 618
if (__large_ignore) { 
# 619
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 621
if (traits_type::eq_int_type(__c, __eof)) { 
# 622
(__err |= std::ios_base::eofbit); } else 
# 624
{ 
# 625
if ((_M_gcount) != __n) { 
# 626
++(_M_gcount); }  
# 627
__sb->sbumpc(); 
# 628
}  
# 629
} else { 
# 630
if ((_M_gcount) < __n) 
# 631
{ 
# 632
if (traits_type::eq_int_type(__c, __eof)) { 
# 633
(__err |= std::ios_base::eofbit); } else 
# 635
{ 
# 636
++(_M_gcount); 
# 637
__sb->sbumpc(); 
# 638
}  
# 639
}  }  
# 640
} 
# 641
catch (__cxxabiv1::__forced_unwind &) 
# 642
{ 
# 643
this->_M_setstate(ios_base::badbit); 
# 644
throw; 
# 645
} 
# 646
catch (...) 
# 647
{ this->_M_setstate(ios_base::badbit); }  
# 648
if (__err) { 
# 649
this->setstate(__err); }  
# 650
}  
# 651
return *this; 
# 652
} 
# 654
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 657
basic_istream< _CharT, _Traits> ::peek() 
# 658
{ 
# 659
int_type __c = traits_type::eof(); 
# 660
(_M_gcount) = (0); 
# 661
sentry __cerb(*this, true); 
# 662
if (__cerb) 
# 663
{ 
# 664
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 665
try 
# 666
{ 
# 667
__c = this->rdbuf()->sgetc(); 
# 668
if (traits_type::eq_int_type(__c, traits_type::eof())) { 
# 669
(__err |= std::ios_base::eofbit); }  
# 670
} 
# 671
catch (__cxxabiv1::__forced_unwind &) 
# 672
{ 
# 673
this->_M_setstate(ios_base::badbit); 
# 674
throw; 
# 675
} 
# 676
catch (...) 
# 677
{ this->_M_setstate(ios_base::badbit); }  
# 678
if (__err) { 
# 679
this->setstate(__err); }  
# 680
}  
# 681
return __c; 
# 682
} 
# 684
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 687
basic_istream< _CharT, _Traits> ::read(char_type *__s, std::streamsize __n) 
# 688
{ 
# 689
(_M_gcount) = (0); 
# 690
sentry __cerb(*this, true); 
# 691
if (__cerb) 
# 692
{ 
# 693
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 694
try 
# 695
{ 
# 696
(_M_gcount) = this->rdbuf()->sgetn(__s, __n); 
# 697
if ((_M_gcount) != __n) { 
# 698
(__err |= ((std::ios_base::eofbit | std::ios_base::failbit))); }  
# 699
} 
# 700
catch (__cxxabiv1::__forced_unwind &) 
# 701
{ 
# 702
this->_M_setstate(ios_base::badbit); 
# 703
throw; 
# 704
} 
# 705
catch (...) 
# 706
{ this->_M_setstate(ios_base::badbit); }  
# 707
if (__err) { 
# 708
this->setstate(__err); }  
# 709
}  
# 710
return *this; 
# 711
} 
# 713
template< class _CharT, class _Traits> streamsize 
# 716
basic_istream< _CharT, _Traits> ::readsome(char_type *__s, std::streamsize __n) 
# 717
{ 
# 718
(_M_gcount) = (0); 
# 719
sentry __cerb(*this, true); 
# 720
if (__cerb) 
# 721
{ 
# 722
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 723
try 
# 724
{ 
# 726
const std::streamsize __num = this->rdbuf()->in_avail(); 
# 727
if (__num > (0)) { 
# 728
(_M_gcount) = this->rdbuf()->sgetn(__s, std::min(__num, __n)); } else { 
# 729
if (__num == (-1)) { 
# 730
(__err |= std::ios_base::eofbit); }  }  
# 731
} 
# 732
catch (__cxxabiv1::__forced_unwind &) 
# 733
{ 
# 734
this->_M_setstate(ios_base::badbit); 
# 735
throw; 
# 736
} 
# 737
catch (...) 
# 738
{ this->_M_setstate(ios_base::badbit); }  
# 739
if (__err) { 
# 740
this->setstate(__err); }  
# 741
}  
# 742
return _M_gcount; 
# 743
} 
# 745
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 748
basic_istream< _CharT, _Traits> ::putback(char_type __c) 
# 749
{ 
# 752
(_M_gcount) = (0); 
# 754
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 755
sentry __cerb(*this, true); 
# 756
if (__cerb) 
# 757
{ 
# 758
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 759
try 
# 760
{ 
# 761
const int_type __eof = traits_type::eof(); 
# 762
__streambuf_type *__sb = this->rdbuf(); 
# 763
if ((!__sb) || traits_type::eq_int_type(__sb->sputbackc(__c), __eof)) { 
# 765
(__err |= std::ios_base::badbit); }  
# 766
} 
# 767
catch (__cxxabiv1::__forced_unwind &) 
# 768
{ 
# 769
this->_M_setstate(ios_base::badbit); 
# 770
throw; 
# 771
} 
# 772
catch (...) 
# 773
{ this->_M_setstate(ios_base::badbit); }  
# 774
if (__err) { 
# 775
this->setstate(__err); }  
# 776
}  
# 777
return *this; 
# 778
} 
# 780
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 783
basic_istream< _CharT, _Traits> ::unget() 
# 784
{ 
# 787
(_M_gcount) = (0); 
# 789
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 790
sentry __cerb(*this, true); 
# 791
if (__cerb) 
# 792
{ 
# 793
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 794
try 
# 795
{ 
# 796
const int_type __eof = traits_type::eof(); 
# 797
__streambuf_type *__sb = this->rdbuf(); 
# 798
if ((!__sb) || traits_type::eq_int_type(__sb->sungetc(), __eof)) { 
# 800
(__err |= std::ios_base::badbit); }  
# 801
} 
# 802
catch (__cxxabiv1::__forced_unwind &) 
# 803
{ 
# 804
this->_M_setstate(ios_base::badbit); 
# 805
throw; 
# 806
} 
# 807
catch (...) 
# 808
{ this->_M_setstate(ios_base::badbit); }  
# 809
if (__err) { 
# 810
this->setstate(__err); }  
# 811
}  
# 812
return *this; 
# 813
} 
# 815
template< class _CharT, class _Traits> int 
# 818
basic_istream< _CharT, _Traits> ::sync() 
# 819
{ 
# 822
int __ret = (-1); 
# 823
sentry __cerb(*this, true); 
# 824
if (__cerb) 
# 825
{ 
# 826
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 827
try 
# 828
{ 
# 829
__streambuf_type *__sb = this->rdbuf(); 
# 830
if (__sb) 
# 831
{ 
# 832
if (__sb->pubsync() == (-1)) { 
# 833
(__err |= std::ios_base::badbit); } else { 
# 835
__ret = 0; }  
# 836
}  
# 837
} 
# 838
catch (__cxxabiv1::__forced_unwind &) 
# 839
{ 
# 840
this->_M_setstate(ios_base::badbit); 
# 841
throw; 
# 842
} 
# 843
catch (...) 
# 844
{ this->_M_setstate(ios_base::badbit); }  
# 845
if (__err) { 
# 846
this->setstate(__err); }  
# 847
}  
# 848
return __ret; 
# 849
} 
# 851
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::pos_type 
# 854
basic_istream< _CharT, _Traits> ::tellg() 
# 855
{ 
# 858
pos_type __ret = ((pos_type)(-1)); 
# 859
sentry __cerb(*this, true); 
# 860
if (__cerb) 
# 861
{ 
# 862
try 
# 863
{ 
# 864
if (!this->fail()) { 
# 865
__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in); }  
# 867
} 
# 868
catch (__cxxabiv1::__forced_unwind &) 
# 869
{ 
# 870
this->_M_setstate(ios_base::badbit); 
# 871
throw; 
# 872
} 
# 873
catch (...) 
# 874
{ this->_M_setstate(ios_base::badbit); }  
# 875
}  
# 876
return __ret; 
# 877
} 
# 879
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 882
basic_istream< _CharT, _Traits> ::seekg(pos_type __pos) 
# 883
{ 
# 887
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 888
sentry __cerb(*this, true); 
# 889
if (__cerb) 
# 890
{ 
# 891
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 892
try 
# 893
{ 
# 894
if (!this->fail()) 
# 895
{ 
# 897
const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::in); 
# 901
if (__p == ((pos_type)((off_type)(-1)))) { 
# 902
(__err |= std::ios_base::failbit); }  
# 903
}  
# 904
} 
# 905
catch (__cxxabiv1::__forced_unwind &) 
# 906
{ 
# 907
this->_M_setstate(ios_base::badbit); 
# 908
throw; 
# 909
} 
# 910
catch (...) 
# 911
{ this->_M_setstate(ios_base::badbit); }  
# 912
if (__err) { 
# 913
this->setstate(__err); }  
# 914
}  
# 915
return *this; 
# 916
} 
# 918
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 921
basic_istream< _CharT, _Traits> ::seekg(off_type __off, std::ios_base::seekdir __dir) 
# 922
{ 
# 926
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 927
sentry __cerb(*this, true); 
# 928
if (__cerb) 
# 929
{ 
# 930
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 931
try 
# 932
{ 
# 933
if (!this->fail()) 
# 934
{ 
# 936
const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::in); 
# 940
if (__p == ((pos_type)((off_type)(-1)))) { 
# 941
(__err |= std::ios_base::failbit); }  
# 942
}  
# 943
} 
# 944
catch (__cxxabiv1::__forced_unwind &) 
# 945
{ 
# 946
this->_M_setstate(ios_base::badbit); 
# 947
throw; 
# 948
} 
# 949
catch (...) 
# 950
{ this->_M_setstate(ios_base::badbit); }  
# 951
if (__err) { 
# 952
this->setstate(__err); }  
# 953
}  
# 954
return *this; 
# 955
} 
# 958
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 960
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT &__c) 
# 961
{ 
# 962
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 963
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 965
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 966
if (__cerb) 
# 967
{ 
# 968
ios_base::iostate __err = ios_base::goodbit; 
# 969
try 
# 970
{ 
# 971
const __int_type __cb = __in.rdbuf()->sbumpc(); 
# 972
if (!_Traits::eq_int_type(__cb, _Traits::eof())) { 
# 973
__c = _Traits::to_char_type(__cb); } else { 
# 975
(__err |= ((ios_base::eofbit | ios_base::failbit))); }  
# 976
} 
# 977
catch (__cxxabiv1::__forced_unwind &) 
# 978
{ 
# 979
__in._M_setstate(ios_base::badbit); 
# 980
throw; 
# 981
} 
# 982
catch (...) 
# 983
{ __in._M_setstate(ios_base::badbit); }  
# 984
if (__err) { 
# 985
__in.setstate(__err); }  
# 986
}  
# 987
return __in; 
# 988
} 
# 990
template< class _CharT, class _Traits> void 
# 992
__istream_extract(basic_istream< _CharT, _Traits>  &__in, _CharT *__s, streamsize 
# 993
__num) 
# 994
{ 
# 995
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 996
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 997
typedef typename _Traits::int_type int_type; 
# 998
typedef _CharT char_type; 
# 999
typedef ctype< _CharT>  __ctype_type; 
# 1001
streamsize __extracted = (0); 
# 1002
ios_base::iostate __err = ios_base::goodbit; 
# 1003
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1004
if (__cerb) 
# 1005
{ 
# 1006
try 
# 1007
{ 
# 1009
streamsize __width = __in.width(); 
# 1010
if (((0) < __width) && (__width < __num)) { 
# 1011
__num = __width; }  
# 1013
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1015
const int_type __eof = _Traits::eof(); 
# 1016
__streambuf_type *__sb = __in.rdbuf(); 
# 1017
int_type __c = __sb->sgetc(); 
# 1019
while ((__extracted < (__num - (1))) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(ctype_base::space, _Traits::to_char_type(__c)))) 
# 1023
{ 
# 1024
(*(__s++)) = _Traits::to_char_type(__c); 
# 1025
++__extracted; 
# 1026
__c = __sb->snextc(); 
# 1027
}  
# 1029
if ((__extracted < (__num - (1))) && _Traits::eq_int_type(__c, __eof)) { 
# 1031
(__err |= ios_base::eofbit); }  
# 1035
(*__s) = char_type(); 
# 1036
__in.width(0); 
# 1037
} 
# 1038
catch (__cxxabiv1::__forced_unwind &) 
# 1039
{ 
# 1040
__in._M_setstate(ios_base::badbit); 
# 1041
throw; 
# 1042
} 
# 1043
catch (...) 
# 1044
{ __in._M_setstate(ios_base::badbit); }  
# 1045
}  
# 1046
if (!__extracted) { 
# 1047
(__err |= ios_base::failbit); }  
# 1048
if (__err) { 
# 1049
__in.setstate(__err); }  
# 1050
} 
# 1053
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1055
ws(basic_istream< _CharT, _Traits>  &__in) 
# 1056
{ 
# 1057
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1058
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 1059
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1060
typedef ctype< _CharT>  __ctype_type; 
# 1064
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1065
if (__cerb) 
# 1066
{ 
# 1067
ios_base::iostate __err = ios_base::goodbit; 
# 1068
try 
# 1069
{ 
# 1070
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1071
const __int_type __eof = _Traits::eof(); 
# 1072
__streambuf_type *__sb = __in.rdbuf(); 
# 1073
__int_type __c = __sb->sgetc(); 
# 1075
while (true) 
# 1076
{ 
# 1077
if (_Traits::eq_int_type(__c, __eof)) 
# 1078
{ 
# 1079
__err = ios_base::eofbit; 
# 1080
break; 
# 1081
}  
# 1082
if (!__ct.is(ctype_base::space, _Traits::to_char_type(__c))) { 
# 1083
break; }  
# 1084
__c = __sb->snextc(); 
# 1085
}  
# 1086
} 
# 1087
catch (const __cxxabiv1::__forced_unwind &) 
# 1088
{ 
# 1089
__in._M_setstate(ios_base::badbit); 
# 1090
throw; 
# 1091
} 
# 1092
catch (...) 
# 1093
{ 
# 1094
__in._M_setstate(ios_base::badbit); 
# 1095
}  
# 1096
if (__err) { 
# 1097
__in.setstate(__err); }  
# 1098
}  
# 1099
return __in; 
# 1100
} 
# 1105
extern template class basic_istream< char> ;
# 1106
extern template basic_istream< char>  &ws(basic_istream< char>  & __is);
# 1107
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, char & __c);
# 1108
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, unsigned char & __c);
# 1109
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, signed char & __c);
# 1111
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned short & __v);
# 1112
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned & __v);
# 1113
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long & __v);
# 1114
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned long & __v);
# 1115
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(bool & __v);
# 1117
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long long & __v);
# 1118
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned long long & __v);
# 1120
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(float & __v);
# 1121
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(double & __v);
# 1122
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long double & __v);
# 1123
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(void *& __v);
# 1125
extern template class basic_iostream< char> ;
# 1128
extern template class basic_istream< wchar_t> ;
# 1129
extern template basic_istream< wchar_t>  &ws(basic_istream< wchar_t>  & __is);
# 1130
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __in, wchar_t & __c);
# 1131
extern template void __istream_extract(basic_istream< wchar_t>  &, wchar_t *, streamsize);
# 1133
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned short & __v);
# 1134
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned & __v);
# 1135
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long & __v);
# 1136
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned long & __v);
# 1137
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(bool & __v);
# 1139
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long long & __v);
# 1140
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned long long & __v);
# 1142
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(float & __v);
# 1143
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(double & __v);
# 1144
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long double & __v);
# 1145
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(void *& __v);
# 1147
extern template class basic_iostream< wchar_t> ;
# 1152
}
# 42 "/usr/include/c++/12.2.1/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/12.2.1/iostream" 3
extern istream cin; 
# 61
extern ostream cout; 
# 62
extern ostream cerr; 
# 63
extern ostream clog; 
# 66
extern wistream wcin; 
# 67
extern wostream wcout; 
# 68
extern wostream wcerr; 
# 69
extern wostream wclog; 
# 74
static ios_base::Init __ioinit; 
# 77
}
# 313 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
enum { 
# 314
STBI_default, 
# 316
STBI_grey, 
# 317
STBI_grey_alpha, 
# 318
STBI_rgb, 
# 319
STBI_rgb_alpha
# 320
}; 
# 322
typedef unsigned char stbi_uc; 
# 323
typedef unsigned short stbi_us; 
# 326
extern "C" {
# 349 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
typedef 
# 345
struct { 
# 346
int (*read)(void * user, char * data, int size); 
# 347
void (*skip)(void * user, int n); 
# 348
int (*eof)(void * user); 
# 349
} stbi_io_callbacks; 
# 356
extern stbi_uc *stbi_load_from_memory(const stbi_uc * buffer, int len, int * x, int * y, int * channels_in_file, int desired_channels); 
# 357
extern stbi_uc *stbi_load_from_callbacks(const stbi_io_callbacks * clbk, void * user, int * x, int * y, int * channels_in_file, int desired_channels); 
# 359
extern stbi_uc *stbi_load_gif_from_memory(const stbi_uc * buffer, int len, int ** delays, int * x, int * y, int * z, int * comp, int req_comp); 
# 364
extern stbi_uc *stbi_load(const char * filename, int * x, int * y, int * channels_in_file, int desired_channels); 
# 365
extern stbi_uc *stbi_load_from_file(FILE * f, int * x, int * y, int * channels_in_file, int desired_channels); 
# 374 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
extern stbi_us *stbi_load_16_from_memory(const stbi_uc * buffer, int len, int * x, int * y, int * channels_in_file, int desired_channels); 
# 375
extern stbi_us *stbi_load_16_from_callbacks(const stbi_io_callbacks * clbk, void * user, int * x, int * y, int * channels_in_file, int desired_channels); 
# 378
extern stbi_us *stbi_load_16(const char * filename, int * x, int * y, int * channels_in_file, int desired_channels); 
# 379
extern stbi_us *stbi_load_from_file_16(FILE * f, int * x, int * y, int * channels_in_file, int desired_channels); 
# 387
extern float *stbi_loadf_from_memory(const stbi_uc * buffer, int len, int * x, int * y, int * channels_in_file, int desired_channels); 
# 388
extern float *stbi_loadf_from_callbacks(const stbi_io_callbacks * clbk, void * user, int * x, int * y, int * channels_in_file, int desired_channels); 
# 391
extern float *stbi_loadf(const char * filename, int * x, int * y, int * channels_in_file, int desired_channels); 
# 392
extern float *stbi_loadf_from_file(FILE * f, int * x, int * y, int * channels_in_file, int desired_channels); 
# 397
extern void stbi_hdr_to_ldr_gamma(float gamma); 
# 398
extern void stbi_hdr_to_ldr_scale(float scale); 
# 402
extern void stbi_ldr_to_hdr_gamma(float gamma); 
# 403
extern void stbi_ldr_to_hdr_scale(float scale); 
# 407
extern int stbi_is_hdr_from_callbacks(const stbi_io_callbacks * clbk, void * user); 
# 408
extern int stbi_is_hdr_from_memory(const stbi_uc * buffer, int len); 
# 410
extern int stbi_is_hdr(const char * filename); 
# 411
extern int stbi_is_hdr_from_file(FILE * f); 
# 417
extern const char *stbi_failure_reason(); 
# 420
extern void stbi_image_free(void * retval_from_stbi_load); 
# 423
extern int stbi_info_from_memory(const stbi_uc * buffer, int len, int * x, int * y, int * comp); 
# 424
extern int stbi_info_from_callbacks(const stbi_io_callbacks * clbk, void * user, int * x, int * y, int * comp); 
# 425
extern int stbi_is_16_bit_from_memory(const stbi_uc * buffer, int len); 
# 426
extern int stbi_is_16_bit_from_callbacks(const stbi_io_callbacks * clbk, void * user); 
# 429
extern int stbi_info(const char * filename, int * x, int * y, int * comp); 
# 430
extern int stbi_info_from_file(FILE * f, int * x, int * y, int * comp); 
# 431
extern int stbi_is_16_bit(const char * filename); 
# 432
extern int stbi_is_16_bit_from_file(FILE * f); 
# 440
extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply); 
# 444
extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert); 
# 447
extern void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip); 
# 451
extern char *stbi_zlib_decode_malloc_guesssize(const char * buffer, int len, int initial_size, int * outlen); 
# 452
extern char *stbi_zlib_decode_malloc_guesssize_headerflag(const char * buffer, int len, int initial_size, int * outlen, int parse_header); 
# 453
extern char *stbi_zlib_decode_malloc(const char * buffer, int len, int * outlen); 
# 454
extern int stbi_zlib_decode_buffer(char * obuffer, int olen, const char * ibuffer, int ilen); 
# 456
extern char *stbi_zlib_decode_noheader_malloc(const char * buffer, int len, int * outlen); 
# 457
extern int stbi_zlib_decode_noheader_buffer(char * obuffer, int olen, const char * ibuffer, int ilen); 
# 461
}
# 64 "/usr/include/assert.h" 3
extern "C" {
# 67
extern void __assert_fail(const char * __assertion, const char * __file, unsigned __line, const char * __function) noexcept(true)
# 69
 __attribute((__noreturn__)); 
# 72
extern void __assert_perror_fail(int __errnum, const char * __file, unsigned __line, const char * __function) noexcept(true)
# 74
 __attribute((__noreturn__)); 
# 79
extern void __assert(const char * __assertion, const char * __file, int __line) noexcept(true)
# 80
 __attribute((__noreturn__)); 
# 83
}
# 547 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
typedef uint16_t stbi__uint16; 
# 548
typedef int16_t stbi__int16; 
# 549
typedef uint32_t stbi__uint32; 
# 550
typedef int32_t stbi__int32; 
# 554
typedef unsigned char validate_uint32[(sizeof(stbi__uint32) == (4)) ? 1 : (-1)]; 
# 44 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/mmintrin.h" 3
typedef int __m64 __attribute((__vector_size__(8), __may_alias__)); 
# 45
typedef int __m32 __attribute((__vector_size__(4), __may_alias__)); 
# 46
typedef short __m16 __attribute((__vector_size__(2), __may_alias__)); 
# 49
typedef int __m64_u __attribute((__vector_size__(8), __may_alias__, __aligned__(1))); 
# 50
typedef int __m32_u __attribute((__vector_size__(4), __may_alias__, __aligned__(1))); 
# 52
typedef short __m16_u __attribute((__vector_size__(2), __may_alias__, __aligned__(1))); 
# 56
typedef int __v2si __attribute((__vector_size__(8))); 
# 57
typedef short __v4hi __attribute((__vector_size__(8))); 
# 58
typedef char __v8qi __attribute((__vector_size__(8))); 
# 59
typedef long long __v1di __attribute((__vector_size__(8))); 
# 60
typedef float __v2sf __attribute((__vector_size__(8))); 
# 63
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 64
_mm_empty() 
# 65
{ 
# 66
__builtin_ia32_emms(); 
# 67
} 
# 69
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 70
_m_empty() 
# 71
{ 
# 72
_mm_empty(); 
# 73
} 
# 76
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 77
_mm_cvtsi32_si64(int __i) 
# 78
{ 
# 79
return (__m64)__builtin_ia32_vec_init_v2si(__i, 0); 
# 80
} 
# 82
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 83
_m_from_int(int __i) 
# 84
{ 
# 85
return _mm_cvtsi32_si64(__i); 
# 86
} 
# 92
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 93
_m_from_int64(long long __i) 
# 94
{ 
# 95
return (__m64)__i; 
# 96
} 
# 98
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 99
_mm_cvtsi64_m64(long long __i) 
# 100
{ 
# 101
return (__m64)__i; 
# 102
} 
# 105
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 106
_mm_cvtsi64x_si64(long long __i) 
# 107
{ 
# 108
return (__m64)__i; 
# 109
} 
# 111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 112
_mm_set_pi64x(long long __i) 
# 113
{ 
# 114
return (__m64)__i; 
# 115
} 
# 119
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 120
_mm_cvtsi64_si32(__m64 __i) 
# 121
{ 
# 122
return __builtin_ia32_vec_ext_v2si((__v2si)__i, 0); 
# 123
} 
# 125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 126
_m_to_int(__m64 __i) 
# 127
{ 
# 128
return _mm_cvtsi64_si32(__i); 
# 129
} 
# 135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 136
_m_to_int64(__m64 __i) 
# 137
{ 
# 138
return (long long)__i; 
# 139
} 
# 141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 142
_mm_cvtm64_si64(__m64 __i) 
# 143
{ 
# 144
return (long long)__i; 
# 145
} 
# 148
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 149
_mm_cvtsi64_si64x(__m64 __i) 
# 150
{ 
# 151
return (long long)__i; 
# 152
} 
# 158
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 159
_mm_packs_pi16(__m64 __m1, __m64 __m2) 
# 160
{ 
# 161
return (__m64)__builtin_ia32_packsswb((__v4hi)__m1, (__v4hi)__m2); 
# 162
} 
# 164
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 165
_m_packsswb(__m64 __m1, __m64 __m2) 
# 166
{ 
# 167
return _mm_packs_pi16(__m1, __m2); 
# 168
} 
# 173
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 174
_mm_packs_pi32(__m64 __m1, __m64 __m2) 
# 175
{ 
# 176
return (__m64)__builtin_ia32_packssdw((__v2si)__m1, (__v2si)__m2); 
# 177
} 
# 179
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 180
_m_packssdw(__m64 __m1, __m64 __m2) 
# 181
{ 
# 182
return _mm_packs_pi32(__m1, __m2); 
# 183
} 
# 188
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 189
_mm_packs_pu16(__m64 __m1, __m64 __m2) 
# 190
{ 
# 191
return (__m64)__builtin_ia32_packuswb((__v4hi)__m1, (__v4hi)__m2); 
# 192
} 
# 194
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 195
_m_packuswb(__m64 __m1, __m64 __m2) 
# 196
{ 
# 197
return _mm_packs_pu16(__m1, __m2); 
# 198
} 
# 202
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 203
_mm_unpackhi_pi8(__m64 __m1, __m64 __m2) 
# 204
{ 
# 205
return (__m64)__builtin_ia32_punpckhbw((__v8qi)__m1, (__v8qi)__m2); 
# 206
} 
# 208
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 209
_m_punpckhbw(__m64 __m1, __m64 __m2) 
# 210
{ 
# 211
return _mm_unpackhi_pi8(__m1, __m2); 
# 212
} 
# 216
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 217
_mm_unpackhi_pi16(__m64 __m1, __m64 __m2) 
# 218
{ 
# 219
return (__m64)__builtin_ia32_punpckhwd((__v4hi)__m1, (__v4hi)__m2); 
# 220
} 
# 222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 223
_m_punpckhwd(__m64 __m1, __m64 __m2) 
# 224
{ 
# 225
return _mm_unpackhi_pi16(__m1, __m2); 
# 226
} 
# 230
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 231
_mm_unpackhi_pi32(__m64 __m1, __m64 __m2) 
# 232
{ 
# 233
return (__m64)__builtin_ia32_punpckhdq((__v2si)__m1, (__v2si)__m2); 
# 234
} 
# 236
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 237
_m_punpckhdq(__m64 __m1, __m64 __m2) 
# 238
{ 
# 239
return _mm_unpackhi_pi32(__m1, __m2); 
# 240
} 
# 244
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 245
_mm_unpacklo_pi8(__m64 __m1, __m64 __m2) 
# 246
{ 
# 247
return (__m64)__builtin_ia32_punpcklbw((__v8qi)__m1, (__v8qi)__m2); 
# 248
} 
# 250
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 251
_m_punpcklbw(__m64 __m1, __m64 __m2) 
# 252
{ 
# 253
return _mm_unpacklo_pi8(__m1, __m2); 
# 254
} 
# 258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 259
_mm_unpacklo_pi16(__m64 __m1, __m64 __m2) 
# 260
{ 
# 261
return (__m64)__builtin_ia32_punpcklwd((__v4hi)__m1, (__v4hi)__m2); 
# 262
} 
# 264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 265
_m_punpcklwd(__m64 __m1, __m64 __m2) 
# 266
{ 
# 267
return _mm_unpacklo_pi16(__m1, __m2); 
# 268
} 
# 272
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 273
_mm_unpacklo_pi32(__m64 __m1, __m64 __m2) 
# 274
{ 
# 275
return (__m64)__builtin_ia32_punpckldq((__v2si)__m1, (__v2si)__m2); 
# 276
} 
# 278
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 279
_m_punpckldq(__m64 __m1, __m64 __m2) 
# 280
{ 
# 281
return _mm_unpacklo_pi32(__m1, __m2); 
# 282
} 
# 285
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 286
_mm_add_pi8(__m64 __m1, __m64 __m2) 
# 287
{ 
# 288
return (__m64)__builtin_ia32_paddb((__v8qi)__m1, (__v8qi)__m2); 
# 289
} 
# 291
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 292
_m_paddb(__m64 __m1, __m64 __m2) 
# 293
{ 
# 294
return _mm_add_pi8(__m1, __m2); 
# 295
} 
# 298
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 299
_mm_add_pi16(__m64 __m1, __m64 __m2) 
# 300
{ 
# 301
return (__m64)__builtin_ia32_paddw((__v4hi)__m1, (__v4hi)__m2); 
# 302
} 
# 304
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 305
_m_paddw(__m64 __m1, __m64 __m2) 
# 306
{ 
# 307
return _mm_add_pi16(__m1, __m2); 
# 308
} 
# 311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 312
_mm_add_pi32(__m64 __m1, __m64 __m2) 
# 313
{ 
# 314
return (__m64)__builtin_ia32_paddd((__v2si)__m1, (__v2si)__m2); 
# 315
} 
# 317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 318
_m_paddd(__m64 __m1, __m64 __m2) 
# 319
{ 
# 320
return _mm_add_pi32(__m1, __m2); 
# 321
} 
# 334 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/mmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 335
_mm_add_si64(__m64 __m1, __m64 __m2) 
# 336
{ 
# 337
return (__m64)__builtin_ia32_paddq((__v1di)__m1, (__v1di)__m2); 
# 338
} 
# 346
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 347
_mm_adds_pi8(__m64 __m1, __m64 __m2) 
# 348
{ 
# 349
return (__m64)__builtin_ia32_paddsb((__v8qi)__m1, (__v8qi)__m2); 
# 350
} 
# 352
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 353
_m_paddsb(__m64 __m1, __m64 __m2) 
# 354
{ 
# 355
return _mm_adds_pi8(__m1, __m2); 
# 356
} 
# 360
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 361
_mm_adds_pi16(__m64 __m1, __m64 __m2) 
# 362
{ 
# 363
return (__m64)__builtin_ia32_paddsw((__v4hi)__m1, (__v4hi)__m2); 
# 364
} 
# 366
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 367
_m_paddsw(__m64 __m1, __m64 __m2) 
# 368
{ 
# 369
return _mm_adds_pi16(__m1, __m2); 
# 370
} 
# 374
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 375
_mm_adds_pu8(__m64 __m1, __m64 __m2) 
# 376
{ 
# 377
return (__m64)__builtin_ia32_paddusb((__v8qi)__m1, (__v8qi)__m2); 
# 378
} 
# 380
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 381
_m_paddusb(__m64 __m1, __m64 __m2) 
# 382
{ 
# 383
return _mm_adds_pu8(__m1, __m2); 
# 384
} 
# 388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 389
_mm_adds_pu16(__m64 __m1, __m64 __m2) 
# 390
{ 
# 391
return (__m64)__builtin_ia32_paddusw((__v4hi)__m1, (__v4hi)__m2); 
# 392
} 
# 394
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 395
_m_paddusw(__m64 __m1, __m64 __m2) 
# 396
{ 
# 397
return _mm_adds_pu16(__m1, __m2); 
# 398
} 
# 401
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 402
_mm_sub_pi8(__m64 __m1, __m64 __m2) 
# 403
{ 
# 404
return (__m64)__builtin_ia32_psubb((__v8qi)__m1, (__v8qi)__m2); 
# 405
} 
# 407
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 408
_m_psubb(__m64 __m1, __m64 __m2) 
# 409
{ 
# 410
return _mm_sub_pi8(__m1, __m2); 
# 411
} 
# 414
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 415
_mm_sub_pi16(__m64 __m1, __m64 __m2) 
# 416
{ 
# 417
return (__m64)__builtin_ia32_psubw((__v4hi)__m1, (__v4hi)__m2); 
# 418
} 
# 420
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 421
_m_psubw(__m64 __m1, __m64 __m2) 
# 422
{ 
# 423
return _mm_sub_pi16(__m1, __m2); 
# 424
} 
# 427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 428
_mm_sub_pi32(__m64 __m1, __m64 __m2) 
# 429
{ 
# 430
return (__m64)__builtin_ia32_psubd((__v2si)__m1, (__v2si)__m2); 
# 431
} 
# 433
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 434
_m_psubd(__m64 __m1, __m64 __m2) 
# 435
{ 
# 436
return _mm_sub_pi32(__m1, __m2); 
# 437
} 
# 450 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/mmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 451
_mm_sub_si64(__m64 __m1, __m64 __m2) 
# 452
{ 
# 453
return (__m64)__builtin_ia32_psubq((__v1di)__m1, (__v1di)__m2); 
# 454
} 
# 462
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 463
_mm_subs_pi8(__m64 __m1, __m64 __m2) 
# 464
{ 
# 465
return (__m64)__builtin_ia32_psubsb((__v8qi)__m1, (__v8qi)__m2); 
# 466
} 
# 468
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 469
_m_psubsb(__m64 __m1, __m64 __m2) 
# 470
{ 
# 471
return _mm_subs_pi8(__m1, __m2); 
# 472
} 
# 476
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 477
_mm_subs_pi16(__m64 __m1, __m64 __m2) 
# 478
{ 
# 479
return (__m64)__builtin_ia32_psubsw((__v4hi)__m1, (__v4hi)__m2); 
# 480
} 
# 482
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 483
_m_psubsw(__m64 __m1, __m64 __m2) 
# 484
{ 
# 485
return _mm_subs_pi16(__m1, __m2); 
# 486
} 
# 490
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 491
_mm_subs_pu8(__m64 __m1, __m64 __m2) 
# 492
{ 
# 493
return (__m64)__builtin_ia32_psubusb((__v8qi)__m1, (__v8qi)__m2); 
# 494
} 
# 496
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 497
_m_psubusb(__m64 __m1, __m64 __m2) 
# 498
{ 
# 499
return _mm_subs_pu8(__m1, __m2); 
# 500
} 
# 504
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 505
_mm_subs_pu16(__m64 __m1, __m64 __m2) 
# 506
{ 
# 507
return (__m64)__builtin_ia32_psubusw((__v4hi)__m1, (__v4hi)__m2); 
# 508
} 
# 510
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 511
_m_psubusw(__m64 __m1, __m64 __m2) 
# 512
{ 
# 513
return _mm_subs_pu16(__m1, __m2); 
# 514
} 
# 519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 520
_mm_madd_pi16(__m64 __m1, __m64 __m2) 
# 521
{ 
# 522
return (__m64)__builtin_ia32_pmaddwd((__v4hi)__m1, (__v4hi)__m2); 
# 523
} 
# 525
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 526
_m_pmaddwd(__m64 __m1, __m64 __m2) 
# 527
{ 
# 528
return _mm_madd_pi16(__m1, __m2); 
# 529
} 
# 533
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 534
_mm_mulhi_pi16(__m64 __m1, __m64 __m2) 
# 535
{ 
# 536
return (__m64)__builtin_ia32_pmulhw((__v4hi)__m1, (__v4hi)__m2); 
# 537
} 
# 539
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 540
_m_pmulhw(__m64 __m1, __m64 __m2) 
# 541
{ 
# 542
return _mm_mulhi_pi16(__m1, __m2); 
# 543
} 
# 547
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 548
_mm_mullo_pi16(__m64 __m1, __m64 __m2) 
# 549
{ 
# 550
return (__m64)__builtin_ia32_pmullw((__v4hi)__m1, (__v4hi)__m2); 
# 551
} 
# 553
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 554
_m_pmullw(__m64 __m1, __m64 __m2) 
# 555
{ 
# 556
return _mm_mullo_pi16(__m1, __m2); 
# 557
} 
# 560
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 561
_mm_sll_pi16(__m64 __m, __m64 __count) 
# 562
{ 
# 563
return (__m64)__builtin_ia32_psllw((__v4hi)__m, (__v4hi)__count); 
# 564
} 
# 566
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 567
_m_psllw(__m64 __m, __m64 __count) 
# 568
{ 
# 569
return _mm_sll_pi16(__m, __count); 
# 570
} 
# 572
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 573
_mm_slli_pi16(__m64 __m, int __count) 
# 574
{ 
# 575
return (__m64)__builtin_ia32_psllwi((__v4hi)__m, __count); 
# 576
} 
# 578
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 579
_m_psllwi(__m64 __m, int __count) 
# 580
{ 
# 581
return _mm_slli_pi16(__m, __count); 
# 582
} 
# 585
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 586
_mm_sll_pi32(__m64 __m, __m64 __count) 
# 587
{ 
# 588
return (__m64)__builtin_ia32_pslld((__v2si)__m, (__v2si)__count); 
# 589
} 
# 591
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 592
_m_pslld(__m64 __m, __m64 __count) 
# 593
{ 
# 594
return _mm_sll_pi32(__m, __count); 
# 595
} 
# 597
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 598
_mm_slli_pi32(__m64 __m, int __count) 
# 599
{ 
# 600
return (__m64)__builtin_ia32_pslldi((__v2si)__m, __count); 
# 601
} 
# 603
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 604
_m_pslldi(__m64 __m, int __count) 
# 605
{ 
# 606
return _mm_slli_pi32(__m, __count); 
# 607
} 
# 610
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 611
_mm_sll_si64(__m64 __m, __m64 __count) 
# 612
{ 
# 613
return (__m64)__builtin_ia32_psllq((__v1di)__m, (__v1di)__count); 
# 614
} 
# 616
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 617
_m_psllq(__m64 __m, __m64 __count) 
# 618
{ 
# 619
return _mm_sll_si64(__m, __count); 
# 620
} 
# 622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 623
_mm_slli_si64(__m64 __m, int __count) 
# 624
{ 
# 625
return (__m64)__builtin_ia32_psllqi((__v1di)__m, __count); 
# 626
} 
# 628
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 629
_m_psllqi(__m64 __m, int __count) 
# 630
{ 
# 631
return _mm_slli_si64(__m, __count); 
# 632
} 
# 635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 636
_mm_sra_pi16(__m64 __m, __m64 __count) 
# 637
{ 
# 638
return (__m64)__builtin_ia32_psraw((__v4hi)__m, (__v4hi)__count); 
# 639
} 
# 641
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 642
_m_psraw(__m64 __m, __m64 __count) 
# 643
{ 
# 644
return _mm_sra_pi16(__m, __count); 
# 645
} 
# 647
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 648
_mm_srai_pi16(__m64 __m, int __count) 
# 649
{ 
# 650
return (__m64)__builtin_ia32_psrawi((__v4hi)__m, __count); 
# 651
} 
# 653
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 654
_m_psrawi(__m64 __m, int __count) 
# 655
{ 
# 656
return _mm_srai_pi16(__m, __count); 
# 657
} 
# 660
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 661
_mm_sra_pi32(__m64 __m, __m64 __count) 
# 662
{ 
# 663
return (__m64)__builtin_ia32_psrad((__v2si)__m, (__v2si)__count); 
# 664
} 
# 666
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 667
_m_psrad(__m64 __m, __m64 __count) 
# 668
{ 
# 669
return _mm_sra_pi32(__m, __count); 
# 670
} 
# 672
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 673
_mm_srai_pi32(__m64 __m, int __count) 
# 674
{ 
# 675
return (__m64)__builtin_ia32_psradi((__v2si)__m, __count); 
# 676
} 
# 678
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 679
_m_psradi(__m64 __m, int __count) 
# 680
{ 
# 681
return _mm_srai_pi32(__m, __count); 
# 682
} 
# 685
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 686
_mm_srl_pi16(__m64 __m, __m64 __count) 
# 687
{ 
# 688
return (__m64)__builtin_ia32_psrlw((__v4hi)__m, (__v4hi)__count); 
# 689
} 
# 691
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 692
_m_psrlw(__m64 __m, __m64 __count) 
# 693
{ 
# 694
return _mm_srl_pi16(__m, __count); 
# 695
} 
# 697
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 698
_mm_srli_pi16(__m64 __m, int __count) 
# 699
{ 
# 700
return (__m64)__builtin_ia32_psrlwi((__v4hi)__m, __count); 
# 701
} 
# 703
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 704
_m_psrlwi(__m64 __m, int __count) 
# 705
{ 
# 706
return _mm_srli_pi16(__m, __count); 
# 707
} 
# 710
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 711
_mm_srl_pi32(__m64 __m, __m64 __count) 
# 712
{ 
# 713
return (__m64)__builtin_ia32_psrld((__v2si)__m, (__v2si)__count); 
# 714
} 
# 716
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 717
_m_psrld(__m64 __m, __m64 __count) 
# 718
{ 
# 719
return _mm_srl_pi32(__m, __count); 
# 720
} 
# 722
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 723
_mm_srli_pi32(__m64 __m, int __count) 
# 724
{ 
# 725
return (__m64)__builtin_ia32_psrldi((__v2si)__m, __count); 
# 726
} 
# 728
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 729
_m_psrldi(__m64 __m, int __count) 
# 730
{ 
# 731
return _mm_srli_pi32(__m, __count); 
# 732
} 
# 735
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 736
_mm_srl_si64(__m64 __m, __m64 __count) 
# 737
{ 
# 738
return (__m64)__builtin_ia32_psrlq((__v1di)__m, (__v1di)__count); 
# 739
} 
# 741
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 742
_m_psrlq(__m64 __m, __m64 __count) 
# 743
{ 
# 744
return _mm_srl_si64(__m, __count); 
# 745
} 
# 747
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 748
_mm_srli_si64(__m64 __m, int __count) 
# 749
{ 
# 750
return (__m64)__builtin_ia32_psrlqi((__v1di)__m, __count); 
# 751
} 
# 753
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 754
_m_psrlqi(__m64 __m, int __count) 
# 755
{ 
# 756
return _mm_srli_si64(__m, __count); 
# 757
} 
# 760
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 761
_mm_and_si64(__m64 __m1, __m64 __m2) 
# 762
{ 
# 763
return __builtin_ia32_pand(__m1, __m2); 
# 764
} 
# 766
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 767
_m_pand(__m64 __m1, __m64 __m2) 
# 768
{ 
# 769
return _mm_and_si64(__m1, __m2); 
# 770
} 
# 774
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 775
_mm_andnot_si64(__m64 __m1, __m64 __m2) 
# 776
{ 
# 777
return __builtin_ia32_pandn(__m1, __m2); 
# 778
} 
# 780
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 781
_m_pandn(__m64 __m1, __m64 __m2) 
# 782
{ 
# 783
return _mm_andnot_si64(__m1, __m2); 
# 784
} 
# 787
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 788
_mm_or_si64(__m64 __m1, __m64 __m2) 
# 789
{ 
# 790
return __builtin_ia32_por(__m1, __m2); 
# 791
} 
# 793
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 794
_m_por(__m64 __m1, __m64 __m2) 
# 795
{ 
# 796
return _mm_or_si64(__m1, __m2); 
# 797
} 
# 800
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 801
_mm_xor_si64(__m64 __m1, __m64 __m2) 
# 802
{ 
# 803
return __builtin_ia32_pxor(__m1, __m2); 
# 804
} 
# 806
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 807
_m_pxor(__m64 __m1, __m64 __m2) 
# 808
{ 
# 809
return _mm_xor_si64(__m1, __m2); 
# 810
} 
# 814
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 815
_mm_cmpeq_pi8(__m64 __m1, __m64 __m2) 
# 816
{ 
# 817
return (__m64)__builtin_ia32_pcmpeqb((__v8qi)__m1, (__v8qi)__m2); 
# 818
} 
# 820
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 821
_m_pcmpeqb(__m64 __m1, __m64 __m2) 
# 822
{ 
# 823
return _mm_cmpeq_pi8(__m1, __m2); 
# 824
} 
# 826
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 827
_mm_cmpgt_pi8(__m64 __m1, __m64 __m2) 
# 828
{ 
# 829
return (__m64)__builtin_ia32_pcmpgtb((__v8qi)__m1, (__v8qi)__m2); 
# 830
} 
# 832
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 833
_m_pcmpgtb(__m64 __m1, __m64 __m2) 
# 834
{ 
# 835
return _mm_cmpgt_pi8(__m1, __m2); 
# 836
} 
# 840
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 841
_mm_cmpeq_pi16(__m64 __m1, __m64 __m2) 
# 842
{ 
# 843
return (__m64)__builtin_ia32_pcmpeqw((__v4hi)__m1, (__v4hi)__m2); 
# 844
} 
# 846
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 847
_m_pcmpeqw(__m64 __m1, __m64 __m2) 
# 848
{ 
# 849
return _mm_cmpeq_pi16(__m1, __m2); 
# 850
} 
# 852
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 853
_mm_cmpgt_pi16(__m64 __m1, __m64 __m2) 
# 854
{ 
# 855
return (__m64)__builtin_ia32_pcmpgtw((__v4hi)__m1, (__v4hi)__m2); 
# 856
} 
# 858
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 859
_m_pcmpgtw(__m64 __m1, __m64 __m2) 
# 860
{ 
# 861
return _mm_cmpgt_pi16(__m1, __m2); 
# 862
} 
# 866
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 867
_mm_cmpeq_pi32(__m64 __m1, __m64 __m2) 
# 868
{ 
# 869
return (__m64)__builtin_ia32_pcmpeqd((__v2si)__m1, (__v2si)__m2); 
# 870
} 
# 872
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 873
_m_pcmpeqd(__m64 __m1, __m64 __m2) 
# 874
{ 
# 875
return _mm_cmpeq_pi32(__m1, __m2); 
# 876
} 
# 878
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 879
_mm_cmpgt_pi32(__m64 __m1, __m64 __m2) 
# 880
{ 
# 881
return (__m64)__builtin_ia32_pcmpgtd((__v2si)__m1, (__v2si)__m2); 
# 882
} 
# 884
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 885
_m_pcmpgtd(__m64 __m1, __m64 __m2) 
# 886
{ 
# 887
return _mm_cmpgt_pi32(__m1, __m2); 
# 888
} 
# 891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 892
_mm_setzero_si64() 
# 893
{ 
# 894
return (__m64)0LL; 
# 895
} 
# 898
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 899
_mm_set_pi32(int __i1, int __i0) 
# 900
{ 
# 901
return (__m64)__builtin_ia32_vec_init_v2si(__i0, __i1); 
# 902
} 
# 905
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 906
_mm_set_pi16(short __w3, short __w2, short __w1, short __w0) 
# 907
{ 
# 908
return (__m64)__builtin_ia32_vec_init_v4hi(__w0, __w1, __w2, __w3); 
# 909
} 
# 912
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 913
_mm_set_pi8(char __b7, char __b6, char __b5, char __b4, char 
# 914
__b3, char __b2, char __b1, char __b0) 
# 915
{ 
# 916
return (__m64)__builtin_ia32_vec_init_v8qi(__b0, __b1, __b2, __b3, __b4, __b5, __b6, __b7); 
# 918
} 
# 921
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 922
_mm_setr_pi32(int __i0, int __i1) 
# 923
{ 
# 924
return _mm_set_pi32(__i1, __i0); 
# 925
} 
# 927
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 928
_mm_setr_pi16(short __w0, short __w1, short __w2, short __w3) 
# 929
{ 
# 930
return _mm_set_pi16(__w3, __w2, __w1, __w0); 
# 931
} 
# 933
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 934
_mm_setr_pi8(char __b0, char __b1, char __b2, char __b3, char 
# 935
__b4, char __b5, char __b6, char __b7) 
# 936
{ 
# 937
return _mm_set_pi8(__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0); 
# 938
} 
# 941
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 942
_mm_set1_pi32(int __i) 
# 943
{ 
# 944
return _mm_set_pi32(__i, __i); 
# 945
} 
# 948
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 949
_mm_set1_pi16(short __w) 
# 950
{ 
# 951
return _mm_set_pi16(__w, __w, __w, __w); 
# 952
} 
# 955
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 956
_mm_set1_pi8(char __b) 
# 957
{ 
# 958
return _mm_set_pi8(__b, __b, __b, __b, __b, __b, __b, __b); 
# 959
} 
# 34 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/mm_malloc.h" 3
extern "C" int posix_memalign(void **, ::size_t, ::size_t) throw(); 
# 38
static inline void *_mm_malloc(::size_t __size, ::size_t __alignment) 
# 39
{ 
# 40
void *__ptr; 
# 41
if (__alignment == (1)) { 
# 42
return malloc(__size); }  
# 43
if ((__alignment == (2)) || ((sizeof(void *) == (8)) && (__alignment == (4)))) { 
# 44
__alignment = sizeof(void *); }  
# 45
if (posix_memalign(&__ptr, __alignment, __size) == 0) { 
# 46
return __ptr; } else { 
# 48
return __null; }  
# 49
} 
# 52
static inline void _mm_free(void *__ptr) 
# 53
{ 
# 54
free(__ptr); 
# 55
} 
# 37 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/xmmintrin.h" 3
enum _mm_hint { 
# 40
_MM_HINT_ET0 = 7, 
# 41
_MM_HINT_ET1 = 6, 
# 42
_MM_HINT_T0 = 3, 
# 43
_MM_HINT_T1 = 2, 
# 44
_MM_HINT_T2 = 1, 
# 45
_MM_HINT_NTA = 0
# 46
}; 
# 69 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/xmmintrin.h" 3
typedef float __m128 __attribute((__vector_size__(16), __may_alias__)); 
# 72
typedef float __m128_u __attribute((__vector_size__(16), __may_alias__, __aligned__(1))); 
# 75
typedef float __v4sf __attribute((__vector_size__(16))); 
# 109 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/xmmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 110
_mm_undefined_ps() 
# 111
{ 
# 112
__m128 __Y = __Y; 
# 113
return __Y; 
# 114
} 
# 117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 118
_mm_setzero_ps() 
# 119
{ 
# 120
return __extension__ ((__m128){(0.0F), (0.0F), (0.0F), (0.0F)}); 
# 121
} 
# 127
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 128
_mm_add_ss(__m128 __A, __m128 __B) 
# 129
{ 
# 130
return (__m128)__builtin_ia32_addss((__v4sf)__A, (__v4sf)__B); 
# 131
} 
# 133
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 134
_mm_sub_ss(__m128 __A, __m128 __B) 
# 135
{ 
# 136
return (__m128)__builtin_ia32_subss((__v4sf)__A, (__v4sf)__B); 
# 137
} 
# 139
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 140
_mm_mul_ss(__m128 __A, __m128 __B) 
# 141
{ 
# 142
return (__m128)__builtin_ia32_mulss((__v4sf)__A, (__v4sf)__B); 
# 143
} 
# 145
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 146
_mm_div_ss(__m128 __A, __m128 __B) 
# 147
{ 
# 148
return (__m128)__builtin_ia32_divss((__v4sf)__A, (__v4sf)__B); 
# 149
} 
# 151
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 152
_mm_sqrt_ss(__m128 __A) 
# 153
{ 
# 154
return (__m128)__builtin_ia32_sqrtss((__v4sf)__A); 
# 155
} 
# 157
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 158
_mm_rcp_ss(__m128 __A) 
# 159
{ 
# 160
return (__m128)__builtin_ia32_rcpss((__v4sf)__A); 
# 161
} 
# 163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 164
_mm_rsqrt_ss(__m128 __A) 
# 165
{ 
# 166
return (__m128)__builtin_ia32_rsqrtss((__v4sf)__A); 
# 167
} 
# 169
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 170
_mm_min_ss(__m128 __A, __m128 __B) 
# 171
{ 
# 172
return (__m128)__builtin_ia32_minss((__v4sf)__A, (__v4sf)__B); 
# 173
} 
# 175
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 176
_mm_max_ss(__m128 __A, __m128 __B) 
# 177
{ 
# 178
return (__m128)__builtin_ia32_maxss((__v4sf)__A, (__v4sf)__B); 
# 179
} 
# 183
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 184
_mm_add_ps(__m128 __A, __m128 __B) 
# 185
{ 
# 186
return (__m128)(((__v4sf)__A) + ((__v4sf)__B)); 
# 187
} 
# 189
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 190
_mm_sub_ps(__m128 __A, __m128 __B) 
# 191
{ 
# 192
return (__m128)(((__v4sf)__A) - ((__v4sf)__B)); 
# 193
} 
# 195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 196
_mm_mul_ps(__m128 __A, __m128 __B) 
# 197
{ 
# 198
return (__m128)(((__v4sf)__A) * ((__v4sf)__B)); 
# 199
} 
# 201
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 202
_mm_div_ps(__m128 __A, __m128 __B) 
# 203
{ 
# 204
return (__m128)(((__v4sf)__A) / ((__v4sf)__B)); 
# 205
} 
# 207
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 208
_mm_sqrt_ps(__m128 __A) 
# 209
{ 
# 210
return (__m128)__builtin_ia32_sqrtps((__v4sf)__A); 
# 211
} 
# 213
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 214
_mm_rcp_ps(__m128 __A) 
# 215
{ 
# 216
return (__m128)__builtin_ia32_rcpps((__v4sf)__A); 
# 217
} 
# 219
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 220
_mm_rsqrt_ps(__m128 __A) 
# 221
{ 
# 222
return (__m128)__builtin_ia32_rsqrtps((__v4sf)__A); 
# 223
} 
# 225
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 226
_mm_min_ps(__m128 __A, __m128 __B) 
# 227
{ 
# 228
return (__m128)__builtin_ia32_minps((__v4sf)__A, (__v4sf)__B); 
# 229
} 
# 231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 232
_mm_max_ps(__m128 __A, __m128 __B) 
# 233
{ 
# 234
return (__m128)__builtin_ia32_maxps((__v4sf)__A, (__v4sf)__B); 
# 235
} 
# 239
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 240
_mm_and_ps(__m128 __A, __m128 __B) 
# 241
{ 
# 242
return __builtin_ia32_andps(__A, __B); 
# 243
} 
# 245
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 246
_mm_andnot_ps(__m128 __A, __m128 __B) 
# 247
{ 
# 248
return __builtin_ia32_andnps(__A, __B); 
# 249
} 
# 251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 252
_mm_or_ps(__m128 __A, __m128 __B) 
# 253
{ 
# 254
return __builtin_ia32_orps(__A, __B); 
# 255
} 
# 257
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 258
_mm_xor_ps(__m128 __A, __m128 __B) 
# 259
{ 
# 260
return __builtin_ia32_xorps(__A, __B); 
# 261
} 
# 267
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 268
_mm_cmpeq_ss(__m128 __A, __m128 __B) 
# 269
{ 
# 270
return (__m128)__builtin_ia32_cmpeqss((__v4sf)__A, (__v4sf)__B); 
# 271
} 
# 273
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 274
_mm_cmplt_ss(__m128 __A, __m128 __B) 
# 275
{ 
# 276
return (__m128)__builtin_ia32_cmpltss((__v4sf)__A, (__v4sf)__B); 
# 277
} 
# 279
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 280
_mm_cmple_ss(__m128 __A, __m128 __B) 
# 281
{ 
# 282
return (__m128)__builtin_ia32_cmpless((__v4sf)__A, (__v4sf)__B); 
# 283
} 
# 285
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 286
_mm_cmpgt_ss(__m128 __A, __m128 __B) 
# 287
{ 
# 288
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_cmpltss((__v4sf)__B, (__v4sf)__A)); 
# 293
} 
# 295
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 296
_mm_cmpge_ss(__m128 __A, __m128 __B) 
# 297
{ 
# 298
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_cmpless((__v4sf)__B, (__v4sf)__A)); 
# 303
} 
# 305
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 306
_mm_cmpneq_ss(__m128 __A, __m128 __B) 
# 307
{ 
# 308
return (__m128)__builtin_ia32_cmpneqss((__v4sf)__A, (__v4sf)__B); 
# 309
} 
# 311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 312
_mm_cmpnlt_ss(__m128 __A, __m128 __B) 
# 313
{ 
# 314
return (__m128)__builtin_ia32_cmpnltss((__v4sf)__A, (__v4sf)__B); 
# 315
} 
# 317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 318
_mm_cmpnle_ss(__m128 __A, __m128 __B) 
# 319
{ 
# 320
return (__m128)__builtin_ia32_cmpnless((__v4sf)__A, (__v4sf)__B); 
# 321
} 
# 323
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 324
_mm_cmpngt_ss(__m128 __A, __m128 __B) 
# 325
{ 
# 326
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_cmpnltss((__v4sf)__B, (__v4sf)__A)); 
# 331
} 
# 333
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 334
_mm_cmpnge_ss(__m128 __A, __m128 __B) 
# 335
{ 
# 336
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_cmpnless((__v4sf)__B, (__v4sf)__A)); 
# 341
} 
# 343
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 344
_mm_cmpord_ss(__m128 __A, __m128 __B) 
# 345
{ 
# 346
return (__m128)__builtin_ia32_cmpordss((__v4sf)__A, (__v4sf)__B); 
# 347
} 
# 349
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 350
_mm_cmpunord_ss(__m128 __A, __m128 __B) 
# 351
{ 
# 352
return (__m128)__builtin_ia32_cmpunordss((__v4sf)__A, (__v4sf)__B); 
# 353
} 
# 359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 360
_mm_cmpeq_ps(__m128 __A, __m128 __B) 
# 361
{ 
# 362
return (__m128)__builtin_ia32_cmpeqps((__v4sf)__A, (__v4sf)__B); 
# 363
} 
# 365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 366
_mm_cmplt_ps(__m128 __A, __m128 __B) 
# 367
{ 
# 368
return (__m128)__builtin_ia32_cmpltps((__v4sf)__A, (__v4sf)__B); 
# 369
} 
# 371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 372
_mm_cmple_ps(__m128 __A, __m128 __B) 
# 373
{ 
# 374
return (__m128)__builtin_ia32_cmpleps((__v4sf)__A, (__v4sf)__B); 
# 375
} 
# 377
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 378
_mm_cmpgt_ps(__m128 __A, __m128 __B) 
# 379
{ 
# 380
return (__m128)__builtin_ia32_cmpgtps((__v4sf)__A, (__v4sf)__B); 
# 381
} 
# 383
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 384
_mm_cmpge_ps(__m128 __A, __m128 __B) 
# 385
{ 
# 386
return (__m128)__builtin_ia32_cmpgeps((__v4sf)__A, (__v4sf)__B); 
# 387
} 
# 389
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 390
_mm_cmpneq_ps(__m128 __A, __m128 __B) 
# 391
{ 
# 392
return (__m128)__builtin_ia32_cmpneqps((__v4sf)__A, (__v4sf)__B); 
# 393
} 
# 395
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 396
_mm_cmpnlt_ps(__m128 __A, __m128 __B) 
# 397
{ 
# 398
return (__m128)__builtin_ia32_cmpnltps((__v4sf)__A, (__v4sf)__B); 
# 399
} 
# 401
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 402
_mm_cmpnle_ps(__m128 __A, __m128 __B) 
# 403
{ 
# 404
return (__m128)__builtin_ia32_cmpnleps((__v4sf)__A, (__v4sf)__B); 
# 405
} 
# 407
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 408
_mm_cmpngt_ps(__m128 __A, __m128 __B) 
# 409
{ 
# 410
return (__m128)__builtin_ia32_cmpngtps((__v4sf)__A, (__v4sf)__B); 
# 411
} 
# 413
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 414
_mm_cmpnge_ps(__m128 __A, __m128 __B) 
# 415
{ 
# 416
return (__m128)__builtin_ia32_cmpngeps((__v4sf)__A, (__v4sf)__B); 
# 417
} 
# 419
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 420
_mm_cmpord_ps(__m128 __A, __m128 __B) 
# 421
{ 
# 422
return (__m128)__builtin_ia32_cmpordps((__v4sf)__A, (__v4sf)__B); 
# 423
} 
# 425
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 426
_mm_cmpunord_ps(__m128 __A, __m128 __B) 
# 427
{ 
# 428
return (__m128)__builtin_ia32_cmpunordps((__v4sf)__A, (__v4sf)__B); 
# 429
} 
# 434
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 435
_mm_comieq_ss(__m128 __A, __m128 __B) 
# 436
{ 
# 437
return __builtin_ia32_comieq((__v4sf)__A, (__v4sf)__B); 
# 438
} 
# 440
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 441
_mm_comilt_ss(__m128 __A, __m128 __B) 
# 442
{ 
# 443
return __builtin_ia32_comilt((__v4sf)__A, (__v4sf)__B); 
# 444
} 
# 446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 447
_mm_comile_ss(__m128 __A, __m128 __B) 
# 448
{ 
# 449
return __builtin_ia32_comile((__v4sf)__A, (__v4sf)__B); 
# 450
} 
# 452
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 453
_mm_comigt_ss(__m128 __A, __m128 __B) 
# 454
{ 
# 455
return __builtin_ia32_comigt((__v4sf)__A, (__v4sf)__B); 
# 456
} 
# 458
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 459
_mm_comige_ss(__m128 __A, __m128 __B) 
# 460
{ 
# 461
return __builtin_ia32_comige((__v4sf)__A, (__v4sf)__B); 
# 462
} 
# 464
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 465
_mm_comineq_ss(__m128 __A, __m128 __B) 
# 466
{ 
# 467
return __builtin_ia32_comineq((__v4sf)__A, (__v4sf)__B); 
# 468
} 
# 470
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 471
_mm_ucomieq_ss(__m128 __A, __m128 __B) 
# 472
{ 
# 473
return __builtin_ia32_ucomieq((__v4sf)__A, (__v4sf)__B); 
# 474
} 
# 476
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 477
_mm_ucomilt_ss(__m128 __A, __m128 __B) 
# 478
{ 
# 479
return __builtin_ia32_ucomilt((__v4sf)__A, (__v4sf)__B); 
# 480
} 
# 482
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 483
_mm_ucomile_ss(__m128 __A, __m128 __B) 
# 484
{ 
# 485
return __builtin_ia32_ucomile((__v4sf)__A, (__v4sf)__B); 
# 486
} 
# 488
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 489
_mm_ucomigt_ss(__m128 __A, __m128 __B) 
# 490
{ 
# 491
return __builtin_ia32_ucomigt((__v4sf)__A, (__v4sf)__B); 
# 492
} 
# 494
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 495
_mm_ucomige_ss(__m128 __A, __m128 __B) 
# 496
{ 
# 497
return __builtin_ia32_ucomige((__v4sf)__A, (__v4sf)__B); 
# 498
} 
# 500
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 501
_mm_ucomineq_ss(__m128 __A, __m128 __B) 
# 502
{ 
# 503
return __builtin_ia32_ucomineq((__v4sf)__A, (__v4sf)__B); 
# 504
} 
# 508
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 509
_mm_cvtss_si32(__m128 __A) 
# 510
{ 
# 511
return __builtin_ia32_cvtss2si((__v4sf)__A); 
# 512
} 
# 514
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 515
_mm_cvt_ss2si(__m128 __A) 
# 516
{ 
# 517
return _mm_cvtss_si32(__A); 
# 518
} 
# 525
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 526
_mm_cvtss_si64(__m128 __A) 
# 527
{ 
# 528
return __builtin_ia32_cvtss2si64((__v4sf)__A); 
# 529
} 
# 532
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 533
_mm_cvtss_si64x(__m128 __A) 
# 534
{ 
# 535
return __builtin_ia32_cvtss2si64((__v4sf)__A); 
# 536
} 
# 541
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 542
_mm_cvtps_pi32(__m128 __A) 
# 543
{ 
# 544
return (__m64)__builtin_ia32_cvtps2pi((__v4sf)__A); 
# 545
} 
# 547
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 548
_mm_cvt_ps2pi(__m128 __A) 
# 549
{ 
# 550
return _mm_cvtps_pi32(__A); 
# 551
} 
# 554
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 555
_mm_cvttss_si32(__m128 __A) 
# 556
{ 
# 557
return __builtin_ia32_cvttss2si((__v4sf)__A); 
# 558
} 
# 560
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 561
_mm_cvtt_ss2si(__m128 __A) 
# 562
{ 
# 563
return _mm_cvttss_si32(__A); 
# 564
} 
# 570
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 571
_mm_cvttss_si64(__m128 __A) 
# 572
{ 
# 573
return __builtin_ia32_cvttss2si64((__v4sf)__A); 
# 574
} 
# 577
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 578
_mm_cvttss_si64x(__m128 __A) 
# 579
{ 
# 580
return __builtin_ia32_cvttss2si64((__v4sf)__A); 
# 581
} 
# 586
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 587
_mm_cvttps_pi32(__m128 __A) 
# 588
{ 
# 589
return (__m64)__builtin_ia32_cvttps2pi((__v4sf)__A); 
# 590
} 
# 592
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 593
_mm_cvtt_ps2pi(__m128 __A) 
# 594
{ 
# 595
return _mm_cvttps_pi32(__A); 
# 596
} 
# 599
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 600
_mm_cvtsi32_ss(__m128 __A, int __B) 
# 601
{ 
# 602
return (__m128)__builtin_ia32_cvtsi2ss((__v4sf)__A, __B); 
# 603
} 
# 605
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 606
_mm_cvt_si2ss(__m128 __A, int __B) 
# 607
{ 
# 608
return _mm_cvtsi32_ss(__A, __B); 
# 609
} 
# 615
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 616
_mm_cvtsi64_ss(__m128 __A, long long __B) 
# 617
{ 
# 618
return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B); 
# 619
} 
# 622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 623
_mm_cvtsi64x_ss(__m128 __A, long long __B) 
# 624
{ 
# 625
return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B); 
# 626
} 
# 631
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 632
_mm_cvtpi32_ps(__m128 __A, __m64 __B) 
# 633
{ 
# 634
return (__m128)__builtin_ia32_cvtpi2ps((__v4sf)__A, (__v2si)__B); 
# 635
} 
# 637
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 638
_mm_cvt_pi2ps(__m128 __A, __m64 __B) 
# 639
{ 
# 640
return _mm_cvtpi32_ps(__A, __B); 
# 641
} 
# 644
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 645
_mm_cvtpi16_ps(__m64 __A) 
# 646
{ 
# 647
__v4hi __sign; 
# 648
__v2si __hisi, __losi; 
# 649
__v4sf __zero, __ra, __rb; 
# 654
__sign = __builtin_ia32_pcmpgtw((__v4hi)0LL, (__v4hi)__A); 
# 657
__losi = ((__v2si)__builtin_ia32_punpcklwd((__v4hi)__A, __sign)); 
# 658
__hisi = ((__v2si)__builtin_ia32_punpckhwd((__v4hi)__A, __sign)); 
# 661
__zero = ((__v4sf)_mm_setzero_ps()); 
# 662
__ra = __builtin_ia32_cvtpi2ps(__zero, __losi); 
# 663
__rb = __builtin_ia32_cvtpi2ps(__ra, __hisi); 
# 665
return (__m128)__builtin_ia32_movlhps(__ra, __rb); 
# 666
} 
# 669
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 670
_mm_cvtpu16_ps(__m64 __A) 
# 671
{ 
# 672
__v2si __hisi, __losi; 
# 673
__v4sf __zero, __ra, __rb; 
# 676
__losi = ((__v2si)__builtin_ia32_punpcklwd((__v4hi)__A, (__v4hi)0LL)); 
# 677
__hisi = ((__v2si)__builtin_ia32_punpckhwd((__v4hi)__A, (__v4hi)0LL)); 
# 680
__zero = ((__v4sf)_mm_setzero_ps()); 
# 681
__ra = __builtin_ia32_cvtpi2ps(__zero, __losi); 
# 682
__rb = __builtin_ia32_cvtpi2ps(__ra, __hisi); 
# 684
return (__m128)__builtin_ia32_movlhps(__ra, __rb); 
# 685
} 
# 688
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 689
_mm_cvtpi8_ps(__m64 __A) 
# 690
{ 
# 691
__v8qi __sign; 
# 696
__sign = __builtin_ia32_pcmpgtb((__v8qi)0LL, (__v8qi)__A); 
# 699
__A = ((__m64)__builtin_ia32_punpcklbw((__v8qi)__A, __sign)); 
# 701
return _mm_cvtpi16_ps(__A); 
# 702
} 
# 705
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 706
_mm_cvtpu8_ps(__m64 __A) 
# 707
{ 
# 708
__A = ((__m64)__builtin_ia32_punpcklbw((__v8qi)__A, (__v8qi)0LL)); 
# 709
return _mm_cvtpu16_ps(__A); 
# 710
} 
# 713
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 714
_mm_cvtpi32x2_ps(__m64 __A, __m64 __B) 
# 715
{ 
# 716
__v4sf __zero = (__v4sf)_mm_setzero_ps(); 
# 717
__v4sf __sfa = __builtin_ia32_cvtpi2ps(__zero, (__v2si)__A); 
# 718
__v4sf __sfb = __builtin_ia32_cvtpi2ps(__sfa, (__v2si)__B); 
# 719
return (__m128)__builtin_ia32_movlhps(__sfa, __sfb); 
# 720
} 
# 723
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 724
_mm_cvtps_pi16(__m128 __A) 
# 725
{ 
# 726
__v4sf __hisf = (__v4sf)__A; 
# 727
__v4sf __losf = __builtin_ia32_movhlps(__hisf, __hisf); 
# 728
__v2si __hisi = __builtin_ia32_cvtps2pi(__hisf); 
# 729
__v2si __losi = __builtin_ia32_cvtps2pi(__losf); 
# 730
return (__m64)__builtin_ia32_packssdw(__hisi, __losi); 
# 731
} 
# 734
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 735
_mm_cvtps_pi8(__m128 __A) 
# 736
{ 
# 737
__v4hi __tmp = (__v4hi)_mm_cvtps_pi16(__A); 
# 738
return (__m64)__builtin_ia32_packsswb(__tmp, (__v4hi)0LL); 
# 739
} 
# 755 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/xmmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 756
_mm_unpackhi_ps(__m128 __A, __m128 __B) 
# 757
{ 
# 758
return (__m128)__builtin_ia32_unpckhps((__v4sf)__A, (__v4sf)__B); 
# 759
} 
# 762
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 763
_mm_unpacklo_ps(__m128 __A, __m128 __B) 
# 764
{ 
# 765
return (__m128)__builtin_ia32_unpcklps((__v4sf)__A, (__v4sf)__B); 
# 766
} 
# 770
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 771
_mm_loadh_pi(__m128 __A, const __m64 *__P) 
# 772
{ 
# 773
return (__m128)__builtin_ia32_loadhps((__v4sf)__A, (const __v2sf *)__P); 
# 774
} 
# 777
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 778
_mm_storeh_pi(__m64 *__P, __m128 __A) 
# 779
{ 
# 780
__builtin_ia32_storehps((__v2sf *)__P, (__v4sf)__A); 
# 781
} 
# 784
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 785
_mm_movehl_ps(__m128 __A, __m128 __B) 
# 786
{ 
# 787
return (__m128)__builtin_ia32_movhlps((__v4sf)__A, (__v4sf)__B); 
# 788
} 
# 791
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 792
_mm_movelh_ps(__m128 __A, __m128 __B) 
# 793
{ 
# 794
return (__m128)__builtin_ia32_movlhps((__v4sf)__A, (__v4sf)__B); 
# 795
} 
# 799
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 800
_mm_loadl_pi(__m128 __A, const __m64 *__P) 
# 801
{ 
# 802
return (__m128)__builtin_ia32_loadlps((__v4sf)__A, (const __v2sf *)__P); 
# 803
} 
# 806
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 807
_mm_storel_pi(__m64 *__P, __m128 __A) 
# 808
{ 
# 809
__builtin_ia32_storelps((__v2sf *)__P, (__v4sf)__A); 
# 810
} 
# 813
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 814
_mm_movemask_ps(__m128 __A) 
# 815
{ 
# 816
return __builtin_ia32_movmskps((__v4sf)__A); 
# 817
} 
# 820
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 821
_mm_getcsr() 
# 822
{ 
# 823
return __builtin_ia32_stmxcsr(); 
# 824
} 
# 827
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 828
_MM_GET_EXCEPTION_STATE() 
# 829
{ 
# 830
return _mm_getcsr() & (63); 
# 831
} 
# 833
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 834
_MM_GET_EXCEPTION_MASK() 
# 835
{ 
# 836
return _mm_getcsr() & (8064); 
# 837
} 
# 839
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 840
_MM_GET_ROUNDING_MODE() 
# 841
{ 
# 842
return _mm_getcsr() & (24576); 
# 843
} 
# 845
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 846
_MM_GET_FLUSH_ZERO_MODE() 
# 847
{ 
# 848
return _mm_getcsr() & (32768); 
# 849
} 
# 852
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 853
_mm_setcsr(unsigned __I) 
# 854
{ 
# 855
__builtin_ia32_ldmxcsr(__I); 
# 856
} 
# 859
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 860
_MM_SET_EXCEPTION_STATE(unsigned __mask) 
# 861
{ 
# 862
_mm_setcsr((_mm_getcsr() & (~63)) | __mask); 
# 863
} 
# 865
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 866
_MM_SET_EXCEPTION_MASK(unsigned __mask) 
# 867
{ 
# 868
_mm_setcsr((_mm_getcsr() & (~8064)) | __mask); 
# 869
} 
# 871
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 872
_MM_SET_ROUNDING_MODE(unsigned __mode) 
# 873
{ 
# 874
_mm_setcsr((_mm_getcsr() & (~24576)) | __mode); 
# 875
} 
# 877
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 878
_MM_SET_FLUSH_ZERO_MODE(unsigned __mode) 
# 879
{ 
# 880
_mm_setcsr((_mm_getcsr() & (~32768)) | __mode); 
# 881
} 
# 884
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 885
_mm_set_ss(float __F) 
# 886
{ 
# 887
return __extension__ (__m128)(((__v4sf){__F, (0.0F), (0.0F), (0.0F)})); 
# 888
} 
# 891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 892
_mm_set1_ps(float __F) 
# 893
{ 
# 894
return __extension__ (__m128)(((__v4sf){__F, __F, __F, __F})); 
# 895
} 
# 897
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 898
_mm_set_ps1(float __F) 
# 899
{ 
# 900
return _mm_set1_ps(__F); 
# 901
} 
# 904
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 905
_mm_load_ss(const float *__P) 
# 906
{ 
# 907
return _mm_set_ss(*__P); 
# 908
} 
# 911
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 912
_mm_load1_ps(const float *__P) 
# 913
{ 
# 914
return _mm_set1_ps(*__P); 
# 915
} 
# 917
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 918
_mm_load_ps1(const float *__P) 
# 919
{ 
# 920
return _mm_load1_ps(__P); 
# 921
} 
# 924
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 925
_mm_load_ps(const float *__P) 
# 926
{ 
# 927
return *((__m128 *)__P); 
# 928
} 
# 931
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 932
_mm_loadu_ps(const float *__P) 
# 933
{ 
# 934
return *((__m128_u *)__P); 
# 935
} 
# 938
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 939
_mm_loadr_ps(const float *__P) 
# 940
{ 
# 941
__v4sf __tmp = *((__v4sf *)__P); 
# 942
return (__m128)__builtin_ia32_shufps(__tmp, __tmp, (((0 << 6) | (1 << 4)) | (2 << 2)) | 3); 
# 943
} 
# 946
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 947
_mm_set_ps(const float __Z, const float __Y, const float __X, const float __W) 
# 948
{ 
# 949
return __extension__ (__m128)(((__v4sf){__W, __X, __Y, __Z})); 
# 950
} 
# 953
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 954
_mm_setr_ps(float __Z, float __Y, float __X, float __W) 
# 955
{ 
# 956
return __extension__ (__m128)(((__v4sf){__Z, __Y, __X, __W})); 
# 957
} 
# 960
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 961
_mm_store_ss(float *__P, __m128 __A) 
# 962
{ 
# 963
(*__P) = (((__v4sf)__A)[0]); 
# 964
} 
# 966
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline float 
# 967
_mm_cvtss_f32(__m128 __A) 
# 968
{ 
# 969
return ((__v4sf)__A)[0]; 
# 970
} 
# 973
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 974
_mm_store_ps(float *__P, __m128 __A) 
# 975
{ 
# 976
(*((__m128 *)__P)) = __A; 
# 977
} 
# 980
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 981
_mm_storeu_ps(float *__P, __m128 __A) 
# 982
{ 
# 983
(*((__m128_u *)__P)) = __A; 
# 984
} 
# 987
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 988
_mm_store1_ps(float *__P, __m128 __A) 
# 989
{ 
# 990
__v4sf __va = (__v4sf)__A; 
# 991
__v4sf __tmp = __builtin_ia32_shufps(__va, __va, (((0 << 6) | (0 << 4)) | (0 << 2)) | 0); 
# 992
_mm_storeu_ps(__P, __tmp); 
# 993
} 
# 995
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 996
_mm_store_ps1(float *__P, __m128 __A) 
# 997
{ 
# 998
_mm_store1_ps(__P, __A); 
# 999
} 
# 1002
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1003
_mm_storer_ps(float *__P, __m128 __A) 
# 1004
{ 
# 1005
__v4sf __va = (__v4sf)__A; 
# 1006
__v4sf __tmp = __builtin_ia32_shufps(__va, __va, (((0 << 6) | (1 << 4)) | (2 << 2)) | 3); 
# 1007
_mm_store_ps(__P, __tmp); 
# 1008
} 
# 1011
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1012
_mm_move_ss(__m128 __A, __m128 __B) 
# 1013
{ 
# 1014
return (__m128)__builtin_shuffle((__v4sf)__A, (__v4sf)__B, __extension__ ((int 
# 1016
 __attribute((__vector_size__(16)))){4, 1, 2, 3})); 
# 1018
} 
# 1063 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/xmmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1064
_mm_max_pi16(__m64 __A, __m64 __B) 
# 1065
{ 
# 1066
return (__m64)__builtin_ia32_pmaxsw((__v4hi)__A, (__v4hi)__B); 
# 1067
} 
# 1069
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1070
_m_pmaxsw(__m64 __A, __m64 __B) 
# 1071
{ 
# 1072
return _mm_max_pi16(__A, __B); 
# 1073
} 
# 1076
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1077
_mm_max_pu8(__m64 __A, __m64 __B) 
# 1078
{ 
# 1079
return (__m64)__builtin_ia32_pmaxub((__v8qi)__A, (__v8qi)__B); 
# 1080
} 
# 1082
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1083
_m_pmaxub(__m64 __A, __m64 __B) 
# 1084
{ 
# 1085
return _mm_max_pu8(__A, __B); 
# 1086
} 
# 1089
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1090
_mm_min_pi16(__m64 __A, __m64 __B) 
# 1091
{ 
# 1092
return (__m64)__builtin_ia32_pminsw((__v4hi)__A, (__v4hi)__B); 
# 1093
} 
# 1095
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1096
_m_pminsw(__m64 __A, __m64 __B) 
# 1097
{ 
# 1098
return _mm_min_pi16(__A, __B); 
# 1099
} 
# 1102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1103
_mm_min_pu8(__m64 __A, __m64 __B) 
# 1104
{ 
# 1105
return (__m64)__builtin_ia32_pminub((__v8qi)__A, (__v8qi)__B); 
# 1106
} 
# 1108
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1109
_m_pminub(__m64 __A, __m64 __B) 
# 1110
{ 
# 1111
return _mm_min_pu8(__A, __B); 
# 1112
} 
# 1115
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1116
_mm_movemask_pi8(__m64 __A) 
# 1117
{ 
# 1118
return __builtin_ia32_pmovmskb((__v8qi)__A); 
# 1119
} 
# 1121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1122
_m_pmovmskb(__m64 __A) 
# 1123
{ 
# 1124
return _mm_movemask_pi8(__A); 
# 1125
} 
# 1129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1130
_mm_mulhi_pu16(__m64 __A, __m64 __B) 
# 1131
{ 
# 1132
return (__m64)__builtin_ia32_pmulhuw((__v4hi)__A, (__v4hi)__B); 
# 1133
} 
# 1135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1136
_m_pmulhuw(__m64 __A, __m64 __B) 
# 1137
{ 
# 1138
return _mm_mulhi_pu16(__A, __B); 
# 1139
} 
# 1165 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/xmmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1166
_mm_maskmove_si64(__m64 __A, __m64 __N, char *__P) 
# 1167
{ 
# 1171
typedef long long __v2di __attribute((__vector_size__(16))); 
# 1172
typedef char __v16qi __attribute((__vector_size__(16))); 
# 1174
__v2di __A128 = ((__v2di){((__v1di)__A)[0], (0)}); 
# 1175
__v2di __N128 = ((__v2di){((__v1di)__N)[0], (0)}); 
# 1178
unsigned long offset = ((unsigned long)__P) & (15); 
# 1179
if (offset) 
# 1180
{ 
# 1183
if (offset > (8)) { 
# 1184
offset = (8); }  
# 1185
__P = ((char *)(((unsigned long)__P) - offset)); 
# 1188
switch (offset) 
# 1189
{ 
# 1190
case 1:  
# 1191
__A128 = __builtin_ia32_pslldqi128(__A128, 8); 
# 1192
__N128 = __builtin_ia32_pslldqi128(__N128, 8); 
# 1193
break; 
# 1194
case 2:  
# 1195
__A128 = __builtin_ia32_pslldqi128(__A128, 2 * 8); 
# 1196
__N128 = __builtin_ia32_pslldqi128(__N128, 2 * 8); 
# 1197
break; 
# 1198
case 3:  
# 1199
__A128 = __builtin_ia32_pslldqi128(__A128, 3 * 8); 
# 1200
__N128 = __builtin_ia32_pslldqi128(__N128, 3 * 8); 
# 1201
break; 
# 1202
case 4:  
# 1203
__A128 = __builtin_ia32_pslldqi128(__A128, 4 * 8); 
# 1204
__N128 = __builtin_ia32_pslldqi128(__N128, 4 * 8); 
# 1205
break; 
# 1206
case 5:  
# 1207
__A128 = __builtin_ia32_pslldqi128(__A128, 5 * 8); 
# 1208
__N128 = __builtin_ia32_pslldqi128(__N128, 5 * 8); 
# 1209
break; 
# 1210
case 6:  
# 1211
__A128 = __builtin_ia32_pslldqi128(__A128, 6 * 8); 
# 1212
__N128 = __builtin_ia32_pslldqi128(__N128, 6 * 8); 
# 1213
break; 
# 1214
case 7:  
# 1215
__A128 = __builtin_ia32_pslldqi128(__A128, 7 * 8); 
# 1216
__N128 = __builtin_ia32_pslldqi128(__N128, 7 * 8); 
# 1217
break; 
# 1218
case 8:  
# 1219
__A128 = __builtin_ia32_pslldqi128(__A128, 8 * 8); 
# 1220
__N128 = __builtin_ia32_pslldqi128(__N128, 8 * 8); 
# 1221
break; 
# 1222
default:  
# 1223
break; 
# 1224
}  
# 1225
}  
# 1226
__builtin_ia32_maskmovdqu((__v16qi)__A128, (__v16qi)__N128, __P); 
# 1230
} 
# 1232
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1233
_m_maskmovq(__m64 __A, __m64 __N, char *__P) 
# 1234
{ 
# 1235
_mm_maskmove_si64(__A, __N, __P); 
# 1236
} 
# 1239
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1240
_mm_avg_pu8(__m64 __A, __m64 __B) 
# 1241
{ 
# 1242
return (__m64)__builtin_ia32_pavgb((__v8qi)__A, (__v8qi)__B); 
# 1243
} 
# 1245
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1246
_m_pavgb(__m64 __A, __m64 __B) 
# 1247
{ 
# 1248
return _mm_avg_pu8(__A, __B); 
# 1249
} 
# 1252
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1253
_mm_avg_pu16(__m64 __A, __m64 __B) 
# 1254
{ 
# 1255
return (__m64)__builtin_ia32_pavgw((__v4hi)__A, (__v4hi)__B); 
# 1256
} 
# 1258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1259
_m_pavgw(__m64 __A, __m64 __B) 
# 1260
{ 
# 1261
return _mm_avg_pu16(__A, __B); 
# 1262
} 
# 1267
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1268
_mm_sad_pu8(__m64 __A, __m64 __B) 
# 1269
{ 
# 1270
return (__m64)__builtin_ia32_psadbw((__v8qi)__A, (__v8qi)__B); 
# 1271
} 
# 1273
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1274
_m_psadbw(__m64 __A, __m64 __B) 
# 1275
{ 
# 1276
return _mm_sad_pu8(__A, __B); 
# 1277
} 
# 1280
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1281
_mm_stream_pi(__m64 *__P, __m64 __A) 
# 1282
{ 
# 1283
__builtin_ia32_movntq((unsigned long long *)__P, (unsigned long long)__A); 
# 1284
} 
# 1287
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1288
_mm_stream_ps(float *__P, __m128 __A) 
# 1289
{ 
# 1290
__builtin_ia32_movntps(__P, (__v4sf)__A); 
# 1291
} 
# 1295
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1296
_mm_sfence() 
# 1297
{ 
# 1298
__builtin_ia32_sfence(); 
# 1299
} 
# 1328 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/xmmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1329
_mm_pause() 
# 1330
{ 
# 1331
__builtin_ia32_pause(); 
# 1332
} 
# 40 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/emmintrin.h" 3
typedef double __v2df __attribute((__vector_size__(16))); 
# 41
typedef long long __v2di __attribute((__vector_size__(16))); 
# 42
typedef unsigned long long __v2du __attribute((__vector_size__(16))); 
# 43
typedef int __v4si __attribute((__vector_size__(16))); 
# 44
typedef unsigned __v4su __attribute((__vector_size__(16))); 
# 45
typedef short __v8hi __attribute((__vector_size__(16))); 
# 46
typedef unsigned short __v8hu __attribute((__vector_size__(16))); 
# 47
typedef char __v16qi __attribute((__vector_size__(16))); 
# 48
typedef signed char __v16qs __attribute((__vector_size__(16))); 
# 49
typedef unsigned char __v16qu __attribute((__vector_size__(16))); 
# 53
typedef long long __m128i __attribute((__vector_size__(16), __may_alias__)); 
# 54
typedef double __m128d __attribute((__vector_size__(16), __may_alias__)); 
# 57
typedef long long __m128i_u __attribute((__vector_size__(16), __may_alias__, __aligned__(1))); 
# 58
typedef double __m128d_u __attribute((__vector_size__(16), __may_alias__, __aligned__(1))); 
# 65
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 66
_mm_set_sd(double __F) 
# 67
{ 
# 68
return __extension__ ((__m128d){__F, (0.0)}); 
# 69
} 
# 72
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 73
_mm_set1_pd(double __F) 
# 74
{ 
# 75
return __extension__ ((__m128d){__F, __F}); 
# 76
} 
# 78
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 79
_mm_set_pd1(double __F) 
# 80
{ 
# 81
return _mm_set1_pd(__F); 
# 82
} 
# 85
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 86
_mm_set_pd(double __W, double __X) 
# 87
{ 
# 88
return __extension__ ((__m128d){__X, __W}); 
# 89
} 
# 92
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 93
_mm_setr_pd(double __W, double __X) 
# 94
{ 
# 95
return __extension__ ((__m128d){__W, __X}); 
# 96
} 
# 99
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 100
_mm_undefined_pd() 
# 101
{ 
# 102
__m128d __Y = __Y; 
# 103
return __Y; 
# 104
} 
# 107
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 108
_mm_setzero_pd() 
# 109
{ 
# 110
return __extension__ ((__m128d){(0.0), (0.0)}); 
# 111
} 
# 114
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 115
_mm_move_sd(__m128d __A, __m128d __B) 
# 116
{ 
# 117
return __extension__ (__m128d)__builtin_shuffle((__v2df)__A, (__v2df)__B, ((__v2di){(2), (1)})); 
# 118
} 
# 121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 122
_mm_load_pd(const double *__P) 
# 123
{ 
# 124
return *((__m128d *)__P); 
# 125
} 
# 128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 129
_mm_loadu_pd(const double *__P) 
# 130
{ 
# 131
return *((__m128d_u *)__P); 
# 132
} 
# 135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 136
_mm_load1_pd(const double *__P) 
# 137
{ 
# 138
return _mm_set1_pd(*__P); 
# 139
} 
# 142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 143
_mm_load_sd(const double *__P) 
# 144
{ 
# 145
return _mm_set_sd(*__P); 
# 146
} 
# 148
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 149
_mm_load_pd1(const double *__P) 
# 150
{ 
# 151
return _mm_load1_pd(__P); 
# 152
} 
# 155
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 156
_mm_loadr_pd(const double *__P) 
# 157
{ 
# 158
__m128d __tmp = _mm_load_pd(__P); 
# 159
return __builtin_ia32_shufpd(__tmp, __tmp, (0 << 1) | 1); 
# 160
} 
# 163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 164
_mm_store_pd(double *__P, __m128d __A) 
# 165
{ 
# 166
(*((__m128d *)__P)) = __A; 
# 167
} 
# 170
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 171
_mm_storeu_pd(double *__P, __m128d __A) 
# 172
{ 
# 173
(*((__m128d_u *)__P)) = __A; 
# 174
} 
# 177
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 178
_mm_store_sd(double *__P, __m128d __A) 
# 179
{ 
# 180
(*__P) = (((__v2df)__A)[0]); 
# 181
} 
# 183
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline double 
# 184
_mm_cvtsd_f64(__m128d __A) 
# 185
{ 
# 186
return ((__v2df)__A)[0]; 
# 187
} 
# 189
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 190
_mm_storel_pd(double *__P, __m128d __A) 
# 191
{ 
# 192
_mm_store_sd(__P, __A); 
# 193
} 
# 196
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 197
_mm_storeh_pd(double *__P, __m128d __A) 
# 198
{ 
# 199
(*__P) = (((__v2df)__A)[1]); 
# 200
} 
# 204
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 205
_mm_store1_pd(double *__P, __m128d __A) 
# 206
{ 
# 207
_mm_store_pd(__P, __builtin_ia32_shufpd(__A, __A, (0 << 1) | 0)); 
# 208
} 
# 210
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 211
_mm_store_pd1(double *__P, __m128d __A) 
# 212
{ 
# 213
_mm_store1_pd(__P, __A); 
# 214
} 
# 217
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 218
_mm_storer_pd(double *__P, __m128d __A) 
# 219
{ 
# 220
_mm_store_pd(__P, __builtin_ia32_shufpd(__A, __A, (0 << 1) | 1)); 
# 221
} 
# 223
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 224
_mm_cvtsi128_si32(__m128i __A) 
# 225
{ 
# 226
return __builtin_ia32_vec_ext_v4si((__v4si)__A, 0); 
# 227
} 
# 231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 232
_mm_cvtsi128_si64(__m128i __A) 
# 233
{ 
# 234
return ((__v2di)__A)[0]; 
# 235
} 
# 238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 239
_mm_cvtsi128_si64x(__m128i __A) 
# 240
{ 
# 241
return ((__v2di)__A)[0]; 
# 242
} 
# 245
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 246
_mm_add_pd(__m128d __A, __m128d __B) 
# 247
{ 
# 248
return (__m128d)(((__v2df)__A) + ((__v2df)__B)); 
# 249
} 
# 251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 252
_mm_add_sd(__m128d __A, __m128d __B) 
# 253
{ 
# 254
return (__m128d)__builtin_ia32_addsd((__v2df)__A, (__v2df)__B); 
# 255
} 
# 257
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 258
_mm_sub_pd(__m128d __A, __m128d __B) 
# 259
{ 
# 260
return (__m128d)(((__v2df)__A) - ((__v2df)__B)); 
# 261
} 
# 263
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 264
_mm_sub_sd(__m128d __A, __m128d __B) 
# 265
{ 
# 266
return (__m128d)__builtin_ia32_subsd((__v2df)__A, (__v2df)__B); 
# 267
} 
# 269
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 270
_mm_mul_pd(__m128d __A, __m128d __B) 
# 271
{ 
# 272
return (__m128d)(((__v2df)__A) * ((__v2df)__B)); 
# 273
} 
# 275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 276
_mm_mul_sd(__m128d __A, __m128d __B) 
# 277
{ 
# 278
return (__m128d)__builtin_ia32_mulsd((__v2df)__A, (__v2df)__B); 
# 279
} 
# 281
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 282
_mm_div_pd(__m128d __A, __m128d __B) 
# 283
{ 
# 284
return (__m128d)(((__v2df)__A) / ((__v2df)__B)); 
# 285
} 
# 287
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 288
_mm_div_sd(__m128d __A, __m128d __B) 
# 289
{ 
# 290
return (__m128d)__builtin_ia32_divsd((__v2df)__A, (__v2df)__B); 
# 291
} 
# 293
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 294
_mm_sqrt_pd(__m128d __A) 
# 295
{ 
# 296
return (__m128d)__builtin_ia32_sqrtpd((__v2df)__A); 
# 297
} 
# 300
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 301
_mm_sqrt_sd(__m128d __A, __m128d __B) 
# 302
{ 
# 303
__v2df __tmp = __builtin_ia32_movsd((__v2df)__A, (__v2df)__B); 
# 304
return (__m128d)__builtin_ia32_sqrtsd((__v2df)__tmp); 
# 305
} 
# 307
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 308
_mm_min_pd(__m128d __A, __m128d __B) 
# 309
{ 
# 310
return (__m128d)__builtin_ia32_minpd((__v2df)__A, (__v2df)__B); 
# 311
} 
# 313
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 314
_mm_min_sd(__m128d __A, __m128d __B) 
# 315
{ 
# 316
return (__m128d)__builtin_ia32_minsd((__v2df)__A, (__v2df)__B); 
# 317
} 
# 319
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 320
_mm_max_pd(__m128d __A, __m128d __B) 
# 321
{ 
# 322
return (__m128d)__builtin_ia32_maxpd((__v2df)__A, (__v2df)__B); 
# 323
} 
# 325
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 326
_mm_max_sd(__m128d __A, __m128d __B) 
# 327
{ 
# 328
return (__m128d)__builtin_ia32_maxsd((__v2df)__A, (__v2df)__B); 
# 329
} 
# 331
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 332
_mm_and_pd(__m128d __A, __m128d __B) 
# 333
{ 
# 334
return (__m128d)__builtin_ia32_andpd((__v2df)__A, (__v2df)__B); 
# 335
} 
# 337
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 338
_mm_andnot_pd(__m128d __A, __m128d __B) 
# 339
{ 
# 340
return (__m128d)__builtin_ia32_andnpd((__v2df)__A, (__v2df)__B); 
# 341
} 
# 343
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 344
_mm_or_pd(__m128d __A, __m128d __B) 
# 345
{ 
# 346
return (__m128d)__builtin_ia32_orpd((__v2df)__A, (__v2df)__B); 
# 347
} 
# 349
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 350
_mm_xor_pd(__m128d __A, __m128d __B) 
# 351
{ 
# 352
return (__m128d)__builtin_ia32_xorpd((__v2df)__A, (__v2df)__B); 
# 353
} 
# 355
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 356
_mm_cmpeq_pd(__m128d __A, __m128d __B) 
# 357
{ 
# 358
return (__m128d)__builtin_ia32_cmpeqpd((__v2df)__A, (__v2df)__B); 
# 359
} 
# 361
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 362
_mm_cmplt_pd(__m128d __A, __m128d __B) 
# 363
{ 
# 364
return (__m128d)__builtin_ia32_cmpltpd((__v2df)__A, (__v2df)__B); 
# 365
} 
# 367
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 368
_mm_cmple_pd(__m128d __A, __m128d __B) 
# 369
{ 
# 370
return (__m128d)__builtin_ia32_cmplepd((__v2df)__A, (__v2df)__B); 
# 371
} 
# 373
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 374
_mm_cmpgt_pd(__m128d __A, __m128d __B) 
# 375
{ 
# 376
return (__m128d)__builtin_ia32_cmpgtpd((__v2df)__A, (__v2df)__B); 
# 377
} 
# 379
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 380
_mm_cmpge_pd(__m128d __A, __m128d __B) 
# 381
{ 
# 382
return (__m128d)__builtin_ia32_cmpgepd((__v2df)__A, (__v2df)__B); 
# 383
} 
# 385
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 386
_mm_cmpneq_pd(__m128d __A, __m128d __B) 
# 387
{ 
# 388
return (__m128d)__builtin_ia32_cmpneqpd((__v2df)__A, (__v2df)__B); 
# 389
} 
# 391
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 392
_mm_cmpnlt_pd(__m128d __A, __m128d __B) 
# 393
{ 
# 394
return (__m128d)__builtin_ia32_cmpnltpd((__v2df)__A, (__v2df)__B); 
# 395
} 
# 397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 398
_mm_cmpnle_pd(__m128d __A, __m128d __B) 
# 399
{ 
# 400
return (__m128d)__builtin_ia32_cmpnlepd((__v2df)__A, (__v2df)__B); 
# 401
} 
# 403
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 404
_mm_cmpngt_pd(__m128d __A, __m128d __B) 
# 405
{ 
# 406
return (__m128d)__builtin_ia32_cmpngtpd((__v2df)__A, (__v2df)__B); 
# 407
} 
# 409
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 410
_mm_cmpnge_pd(__m128d __A, __m128d __B) 
# 411
{ 
# 412
return (__m128d)__builtin_ia32_cmpngepd((__v2df)__A, (__v2df)__B); 
# 413
} 
# 415
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 416
_mm_cmpord_pd(__m128d __A, __m128d __B) 
# 417
{ 
# 418
return (__m128d)__builtin_ia32_cmpordpd((__v2df)__A, (__v2df)__B); 
# 419
} 
# 421
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 422
_mm_cmpunord_pd(__m128d __A, __m128d __B) 
# 423
{ 
# 424
return (__m128d)__builtin_ia32_cmpunordpd((__v2df)__A, (__v2df)__B); 
# 425
} 
# 427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 428
_mm_cmpeq_sd(__m128d __A, __m128d __B) 
# 429
{ 
# 430
return (__m128d)__builtin_ia32_cmpeqsd((__v2df)__A, (__v2df)__B); 
# 431
} 
# 433
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 434
_mm_cmplt_sd(__m128d __A, __m128d __B) 
# 435
{ 
# 436
return (__m128d)__builtin_ia32_cmpltsd((__v2df)__A, (__v2df)__B); 
# 437
} 
# 439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 440
_mm_cmple_sd(__m128d __A, __m128d __B) 
# 441
{ 
# 442
return (__m128d)__builtin_ia32_cmplesd((__v2df)__A, (__v2df)__B); 
# 443
} 
# 445
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 446
_mm_cmpgt_sd(__m128d __A, __m128d __B) 
# 447
{ 
# 448
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_cmpltsd((__v2df)__B, (__v2df)__A)); 
# 453
} 
# 455
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 456
_mm_cmpge_sd(__m128d __A, __m128d __B) 
# 457
{ 
# 458
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_cmplesd((__v2df)__B, (__v2df)__A)); 
# 463
} 
# 465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 466
_mm_cmpneq_sd(__m128d __A, __m128d __B) 
# 467
{ 
# 468
return (__m128d)__builtin_ia32_cmpneqsd((__v2df)__A, (__v2df)__B); 
# 469
} 
# 471
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 472
_mm_cmpnlt_sd(__m128d __A, __m128d __B) 
# 473
{ 
# 474
return (__m128d)__builtin_ia32_cmpnltsd((__v2df)__A, (__v2df)__B); 
# 475
} 
# 477
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 478
_mm_cmpnle_sd(__m128d __A, __m128d __B) 
# 479
{ 
# 480
return (__m128d)__builtin_ia32_cmpnlesd((__v2df)__A, (__v2df)__B); 
# 481
} 
# 483
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 484
_mm_cmpngt_sd(__m128d __A, __m128d __B) 
# 485
{ 
# 486
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_cmpnltsd((__v2df)__B, (__v2df)__A)); 
# 491
} 
# 493
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 494
_mm_cmpnge_sd(__m128d __A, __m128d __B) 
# 495
{ 
# 496
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_cmpnlesd((__v2df)__B, (__v2df)__A)); 
# 501
} 
# 503
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 504
_mm_cmpord_sd(__m128d __A, __m128d __B) 
# 505
{ 
# 506
return (__m128d)__builtin_ia32_cmpordsd((__v2df)__A, (__v2df)__B); 
# 507
} 
# 509
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 510
_mm_cmpunord_sd(__m128d __A, __m128d __B) 
# 511
{ 
# 512
return (__m128d)__builtin_ia32_cmpunordsd((__v2df)__A, (__v2df)__B); 
# 513
} 
# 515
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 516
_mm_comieq_sd(__m128d __A, __m128d __B) 
# 517
{ 
# 518
return __builtin_ia32_comisdeq((__v2df)__A, (__v2df)__B); 
# 519
} 
# 521
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 522
_mm_comilt_sd(__m128d __A, __m128d __B) 
# 523
{ 
# 524
return __builtin_ia32_comisdlt((__v2df)__A, (__v2df)__B); 
# 525
} 
# 527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 528
_mm_comile_sd(__m128d __A, __m128d __B) 
# 529
{ 
# 530
return __builtin_ia32_comisdle((__v2df)__A, (__v2df)__B); 
# 531
} 
# 533
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 534
_mm_comigt_sd(__m128d __A, __m128d __B) 
# 535
{ 
# 536
return __builtin_ia32_comisdgt((__v2df)__A, (__v2df)__B); 
# 537
} 
# 539
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 540
_mm_comige_sd(__m128d __A, __m128d __B) 
# 541
{ 
# 542
return __builtin_ia32_comisdge((__v2df)__A, (__v2df)__B); 
# 543
} 
# 545
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 546
_mm_comineq_sd(__m128d __A, __m128d __B) 
# 547
{ 
# 548
return __builtin_ia32_comisdneq((__v2df)__A, (__v2df)__B); 
# 549
} 
# 551
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 552
_mm_ucomieq_sd(__m128d __A, __m128d __B) 
# 553
{ 
# 554
return __builtin_ia32_ucomisdeq((__v2df)__A, (__v2df)__B); 
# 555
} 
# 557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 558
_mm_ucomilt_sd(__m128d __A, __m128d __B) 
# 559
{ 
# 560
return __builtin_ia32_ucomisdlt((__v2df)__A, (__v2df)__B); 
# 561
} 
# 563
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 564
_mm_ucomile_sd(__m128d __A, __m128d __B) 
# 565
{ 
# 566
return __builtin_ia32_ucomisdle((__v2df)__A, (__v2df)__B); 
# 567
} 
# 569
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 570
_mm_ucomigt_sd(__m128d __A, __m128d __B) 
# 571
{ 
# 572
return __builtin_ia32_ucomisdgt((__v2df)__A, (__v2df)__B); 
# 573
} 
# 575
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 576
_mm_ucomige_sd(__m128d __A, __m128d __B) 
# 577
{ 
# 578
return __builtin_ia32_ucomisdge((__v2df)__A, (__v2df)__B); 
# 579
} 
# 581
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 582
_mm_ucomineq_sd(__m128d __A, __m128d __B) 
# 583
{ 
# 584
return __builtin_ia32_ucomisdneq((__v2df)__A, (__v2df)__B); 
# 585
} 
# 589
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 590
_mm_set_epi64x(long long __q1, long long __q0) 
# 591
{ 
# 592
return __extension__ (__m128i)(((__v2di){__q0, __q1})); 
# 593
} 
# 595
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 596
_mm_set_epi64(__m64 __q1, __m64 __q0) 
# 597
{ 
# 598
return _mm_set_epi64x((long long)__q1, (long long)__q0); 
# 599
} 
# 601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 602
_mm_set_epi32(int __q3, int __q2, int __q1, int __q0) 
# 603
{ 
# 604
return __extension__ (__m128i)(((__v4si){__q0, __q1, __q2, __q3})); 
# 605
} 
# 607
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 608
_mm_set_epi16(short __q7, short __q6, short __q5, short __q4, short 
# 609
__q3, short __q2, short __q1, short __q0) 
# 610
{ 
# 611
return __extension__ (__m128i)(((__v8hi){__q0, __q1, __q2, __q3, __q4, __q5, __q6, __q7})); 
# 613
} 
# 615
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 616
_mm_set_epi8(char __q15, char __q14, char __q13, char __q12, char 
# 617
__q11, char __q10, char __q09, char __q08, char 
# 618
__q07, char __q06, char __q05, char __q04, char 
# 619
__q03, char __q02, char __q01, char __q00) 
# 620
{ 
# 621
return __extension__ (__m128i)(((__v16qi){__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15})); 
# 625
} 
# 629
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 630
_mm_set1_epi64x(long long __A) 
# 631
{ 
# 632
return _mm_set_epi64x(__A, __A); 
# 633
} 
# 635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 636
_mm_set1_epi64(__m64 __A) 
# 637
{ 
# 638
return _mm_set_epi64(__A, __A); 
# 639
} 
# 641
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 642
_mm_set1_epi32(int __A) 
# 643
{ 
# 644
return _mm_set_epi32(__A, __A, __A, __A); 
# 645
} 
# 647
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 648
_mm_set1_epi16(short __A) 
# 649
{ 
# 650
return _mm_set_epi16(__A, __A, __A, __A, __A, __A, __A, __A); 
# 651
} 
# 653
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 654
_mm_set1_epi8(char __A) 
# 655
{ 
# 656
return _mm_set_epi8(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A); 
# 658
} 
# 663
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 664
_mm_setr_epi64(__m64 __q0, __m64 __q1) 
# 665
{ 
# 666
return _mm_set_epi64(__q1, __q0); 
# 667
} 
# 669
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 670
_mm_setr_epi32(int __q0, int __q1, int __q2, int __q3) 
# 671
{ 
# 672
return _mm_set_epi32(__q3, __q2, __q1, __q0); 
# 673
} 
# 675
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 676
_mm_setr_epi16(short __q0, short __q1, short __q2, short __q3, short 
# 677
__q4, short __q5, short __q6, short __q7) 
# 678
{ 
# 679
return _mm_set_epi16(__q7, __q6, __q5, __q4, __q3, __q2, __q1, __q0); 
# 680
} 
# 682
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 683
_mm_setr_epi8(char __q00, char __q01, char __q02, char __q03, char 
# 684
__q04, char __q05, char __q06, char __q07, char 
# 685
__q08, char __q09, char __q10, char __q11, char 
# 686
__q12, char __q13, char __q14, char __q15) 
# 687
{ 
# 688
return _mm_set_epi8(__q15, __q14, __q13, __q12, __q11, __q10, __q09, __q08, __q07, __q06, __q05, __q04, __q03, __q02, __q01, __q00); 
# 690
} 
# 694
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 695
_mm_load_si128(const __m128i *__P) 
# 696
{ 
# 697
return *__P; 
# 698
} 
# 700
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 701
_mm_loadu_si128(const __m128i_u *__P) 
# 702
{ 
# 703
return *__P; 
# 704
} 
# 706
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 707
_mm_loadl_epi64(const __m128i_u *__P) 
# 708
{ 
# 709
return _mm_set_epi64((__m64)0LL, *((__m64_u *)__P)); 
# 710
} 
# 712
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 713
_mm_loadu_si64(const void *__P) 
# 714
{ 
# 715
return _mm_loadl_epi64((__m128i_u *)__P); 
# 716
} 
# 718
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 719
_mm_loadu_si32(const void *__P) 
# 720
{ 
# 721
return _mm_set_epi32(0, 0, 0, (*((__m32_u *)__P))[0]); 
# 722
} 
# 724
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 725
_mm_loadu_si16(const void *__P) 
# 726
{ 
# 727
return _mm_set_epi16(0, 0, 0, 0, 0, 0, 0, (*((__m16_u *)__P))[0]); 
# 728
} 
# 730
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 731
_mm_store_si128(__m128i *__P, __m128i __B) 
# 732
{ 
# 733
(*__P) = __B; 
# 734
} 
# 736
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 737
_mm_storeu_si128(__m128i_u *__P, __m128i __B) 
# 738
{ 
# 739
(*__P) = __B; 
# 740
} 
# 742
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 743
_mm_storel_epi64(__m128i_u *__P, __m128i __B) 
# 744
{ 
# 745
(*((__m64_u *)__P)) = ((__m64)(((__v2di)__B)[0])); 
# 746
} 
# 748
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 749
_mm_storeu_si64(void *__P, __m128i __B) 
# 750
{ 
# 751
_mm_storel_epi64((__m128i_u *)__P, __B); 
# 752
} 
# 754
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 755
_mm_storeu_si32(void *__P, __m128i __B) 
# 756
{ 
# 757
(*((__m32_u *)__P)) = ((__m32)(((__v4si)__B)[0])); 
# 758
} 
# 760
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 761
_mm_storeu_si16(void *__P, __m128i __B) 
# 762
{ 
# 763
(*((__m16_u *)__P)) = ((__m16)(((__v8hi)__B)[0])); 
# 764
} 
# 766
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 767
_mm_movepi64_pi64(__m128i __B) 
# 768
{ 
# 769
return (__m64)(((__v2di)__B)[0]); 
# 770
} 
# 772
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 773
_mm_movpi64_epi64(__m64 __A) 
# 774
{ 
# 775
return _mm_set_epi64((__m64)0LL, __A); 
# 776
} 
# 778
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 779
_mm_move_epi64(__m128i __A) 
# 780
{ 
# 781
return (__m128i)__builtin_ia32_movq128((__v2di)__A); 
# 782
} 
# 785
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 786
_mm_undefined_si128() 
# 787
{ 
# 788
__m128i __Y = __Y; 
# 789
return __Y; 
# 790
} 
# 793
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 794
_mm_setzero_si128() 
# 795
{ 
# 796
return __extension__ (__m128i)(((__v4si){0, 0, 0, 0})); 
# 797
} 
# 799
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 800
_mm_cvtepi32_pd(__m128i __A) 
# 801
{ 
# 802
return (__m128d)__builtin_ia32_cvtdq2pd((__v4si)__A); 
# 803
} 
# 805
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 806
_mm_cvtepi32_ps(__m128i __A) 
# 807
{ 
# 808
return (__m128)__builtin_ia32_cvtdq2ps((__v4si)__A); 
# 809
} 
# 811
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 812
_mm_cvtpd_epi32(__m128d __A) 
# 813
{ 
# 814
return (__m128i)__builtin_ia32_cvtpd2dq((__v2df)__A); 
# 815
} 
# 817
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 818
_mm_cvtpd_pi32(__m128d __A) 
# 819
{ 
# 820
return (__m64)__builtin_ia32_cvtpd2pi((__v2df)__A); 
# 821
} 
# 823
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 824
_mm_cvtpd_ps(__m128d __A) 
# 825
{ 
# 826
return (__m128)__builtin_ia32_cvtpd2ps((__v2df)__A); 
# 827
} 
# 829
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 830
_mm_cvttpd_epi32(__m128d __A) 
# 831
{ 
# 832
return (__m128i)__builtin_ia32_cvttpd2dq((__v2df)__A); 
# 833
} 
# 835
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 836
_mm_cvttpd_pi32(__m128d __A) 
# 837
{ 
# 838
return (__m64)__builtin_ia32_cvttpd2pi((__v2df)__A); 
# 839
} 
# 841
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 842
_mm_cvtpi32_pd(__m64 __A) 
# 843
{ 
# 844
return (__m128d)__builtin_ia32_cvtpi2pd((__v2si)__A); 
# 845
} 
# 847
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 848
_mm_cvtps_epi32(__m128 __A) 
# 849
{ 
# 850
return (__m128i)__builtin_ia32_cvtps2dq((__v4sf)__A); 
# 851
} 
# 853
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 854
_mm_cvttps_epi32(__m128 __A) 
# 855
{ 
# 856
return (__m128i)__builtin_ia32_cvttps2dq((__v4sf)__A); 
# 857
} 
# 859
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 860
_mm_cvtps_pd(__m128 __A) 
# 861
{ 
# 862
return (__m128d)__builtin_ia32_cvtps2pd((__v4sf)__A); 
# 863
} 
# 865
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 866
_mm_cvtsd_si32(__m128d __A) 
# 867
{ 
# 868
return __builtin_ia32_cvtsd2si((__v2df)__A); 
# 869
} 
# 873
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 874
_mm_cvtsd_si64(__m128d __A) 
# 875
{ 
# 876
return __builtin_ia32_cvtsd2si64((__v2df)__A); 
# 877
} 
# 880
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 881
_mm_cvtsd_si64x(__m128d __A) 
# 882
{ 
# 883
return __builtin_ia32_cvtsd2si64((__v2df)__A); 
# 884
} 
# 887
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 888
_mm_cvttsd_si32(__m128d __A) 
# 889
{ 
# 890
return __builtin_ia32_cvttsd2si((__v2df)__A); 
# 891
} 
# 895
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 896
_mm_cvttsd_si64(__m128d __A) 
# 897
{ 
# 898
return __builtin_ia32_cvttsd2si64((__v2df)__A); 
# 899
} 
# 902
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 903
_mm_cvttsd_si64x(__m128d __A) 
# 904
{ 
# 905
return __builtin_ia32_cvttsd2si64((__v2df)__A); 
# 906
} 
# 909
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 910
_mm_cvtsd_ss(__m128 __A, __m128d __B) 
# 911
{ 
# 912
return (__m128)__builtin_ia32_cvtsd2ss((__v4sf)__A, (__v2df)__B); 
# 913
} 
# 915
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 916
_mm_cvtsi32_sd(__m128d __A, int __B) 
# 917
{ 
# 918
return (__m128d)__builtin_ia32_cvtsi2sd((__v2df)__A, __B); 
# 919
} 
# 923
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 924
_mm_cvtsi64_sd(__m128d __A, long long __B) 
# 925
{ 
# 926
return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B); 
# 927
} 
# 930
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 931
_mm_cvtsi64x_sd(__m128d __A, long long __B) 
# 932
{ 
# 933
return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B); 
# 934
} 
# 937
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 938
_mm_cvtss_sd(__m128d __A, __m128 __B) 
# 939
{ 
# 940
return (__m128d)__builtin_ia32_cvtss2sd((__v2df)__A, (__v4sf)__B); 
# 941
} 
# 955 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/emmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 956
_mm_unpackhi_pd(__m128d __A, __m128d __B) 
# 957
{ 
# 958
return (__m128d)__builtin_ia32_unpckhpd((__v2df)__A, (__v2df)__B); 
# 959
} 
# 961
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 962
_mm_unpacklo_pd(__m128d __A, __m128d __B) 
# 963
{ 
# 964
return (__m128d)__builtin_ia32_unpcklpd((__v2df)__A, (__v2df)__B); 
# 965
} 
# 967
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 968
_mm_loadh_pd(__m128d __A, const double *__B) 
# 969
{ 
# 970
return (__m128d)__builtin_ia32_loadhpd((__v2df)__A, __B); 
# 971
} 
# 973
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 974
_mm_loadl_pd(__m128d __A, const double *__B) 
# 975
{ 
# 976
return (__m128d)__builtin_ia32_loadlpd((__v2df)__A, __B); 
# 977
} 
# 979
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 980
_mm_movemask_pd(__m128d __A) 
# 981
{ 
# 982
return __builtin_ia32_movmskpd((__v2df)__A); 
# 983
} 
# 985
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 986
_mm_packs_epi16(__m128i __A, __m128i __B) 
# 987
{ 
# 988
return (__m128i)__builtin_ia32_packsswb128((__v8hi)__A, (__v8hi)__B); 
# 989
} 
# 991
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 992
_mm_packs_epi32(__m128i __A, __m128i __B) 
# 993
{ 
# 994
return (__m128i)__builtin_ia32_packssdw128((__v4si)__A, (__v4si)__B); 
# 995
} 
# 997
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 998
_mm_packus_epi16(__m128i __A, __m128i __B) 
# 999
{ 
# 1000
return (__m128i)__builtin_ia32_packuswb128((__v8hi)__A, (__v8hi)__B); 
# 1001
} 
# 1003
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1004
_mm_unpackhi_epi8(__m128i __A, __m128i __B) 
# 1005
{ 
# 1006
return (__m128i)__builtin_ia32_punpckhbw128((__v16qi)__A, (__v16qi)__B); 
# 1007
} 
# 1009
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1010
_mm_unpackhi_epi16(__m128i __A, __m128i __B) 
# 1011
{ 
# 1012
return (__m128i)__builtin_ia32_punpckhwd128((__v8hi)__A, (__v8hi)__B); 
# 1013
} 
# 1015
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1016
_mm_unpackhi_epi32(__m128i __A, __m128i __B) 
# 1017
{ 
# 1018
return (__m128i)__builtin_ia32_punpckhdq128((__v4si)__A, (__v4si)__B); 
# 1019
} 
# 1021
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1022
_mm_unpackhi_epi64(__m128i __A, __m128i __B) 
# 1023
{ 
# 1024
return (__m128i)__builtin_ia32_punpckhqdq128((__v2di)__A, (__v2di)__B); 
# 1025
} 
# 1027
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1028
_mm_unpacklo_epi8(__m128i __A, __m128i __B) 
# 1029
{ 
# 1030
return (__m128i)__builtin_ia32_punpcklbw128((__v16qi)__A, (__v16qi)__B); 
# 1031
} 
# 1033
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1034
_mm_unpacklo_epi16(__m128i __A, __m128i __B) 
# 1035
{ 
# 1036
return (__m128i)__builtin_ia32_punpcklwd128((__v8hi)__A, (__v8hi)__B); 
# 1037
} 
# 1039
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1040
_mm_unpacklo_epi32(__m128i __A, __m128i __B) 
# 1041
{ 
# 1042
return (__m128i)__builtin_ia32_punpckldq128((__v4si)__A, (__v4si)__B); 
# 1043
} 
# 1045
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1046
_mm_unpacklo_epi64(__m128i __A, __m128i __B) 
# 1047
{ 
# 1048
return (__m128i)__builtin_ia32_punpcklqdq128((__v2di)__A, (__v2di)__B); 
# 1049
} 
# 1051
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1052
_mm_add_epi8(__m128i __A, __m128i __B) 
# 1053
{ 
# 1054
return (__m128i)(((__v16qu)__A) + ((__v16qu)__B)); 
# 1055
} 
# 1057
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1058
_mm_add_epi16(__m128i __A, __m128i __B) 
# 1059
{ 
# 1060
return (__m128i)(((__v8hu)__A) + ((__v8hu)__B)); 
# 1061
} 
# 1063
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1064
_mm_add_epi32(__m128i __A, __m128i __B) 
# 1065
{ 
# 1066
return (__m128i)(((__v4su)__A) + ((__v4su)__B)); 
# 1067
} 
# 1069
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1070
_mm_add_epi64(__m128i __A, __m128i __B) 
# 1071
{ 
# 1072
return (__m128i)(((__v2du)__A) + ((__v2du)__B)); 
# 1073
} 
# 1075
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1076
_mm_adds_epi8(__m128i __A, __m128i __B) 
# 1077
{ 
# 1078
return (__m128i)__builtin_ia32_paddsb128((__v16qi)__A, (__v16qi)__B); 
# 1079
} 
# 1081
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1082
_mm_adds_epi16(__m128i __A, __m128i __B) 
# 1083
{ 
# 1084
return (__m128i)__builtin_ia32_paddsw128((__v8hi)__A, (__v8hi)__B); 
# 1085
} 
# 1087
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1088
_mm_adds_epu8(__m128i __A, __m128i __B) 
# 1089
{ 
# 1090
return (__m128i)__builtin_ia32_paddusb128((__v16qi)__A, (__v16qi)__B); 
# 1091
} 
# 1093
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1094
_mm_adds_epu16(__m128i __A, __m128i __B) 
# 1095
{ 
# 1096
return (__m128i)__builtin_ia32_paddusw128((__v8hi)__A, (__v8hi)__B); 
# 1097
} 
# 1099
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1100
_mm_sub_epi8(__m128i __A, __m128i __B) 
# 1101
{ 
# 1102
return (__m128i)(((__v16qu)__A) - ((__v16qu)__B)); 
# 1103
} 
# 1105
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1106
_mm_sub_epi16(__m128i __A, __m128i __B) 
# 1107
{ 
# 1108
return (__m128i)(((__v8hu)__A) - ((__v8hu)__B)); 
# 1109
} 
# 1111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1112
_mm_sub_epi32(__m128i __A, __m128i __B) 
# 1113
{ 
# 1114
return (__m128i)(((__v4su)__A) - ((__v4su)__B)); 
# 1115
} 
# 1117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1118
_mm_sub_epi64(__m128i __A, __m128i __B) 
# 1119
{ 
# 1120
return (__m128i)(((__v2du)__A) - ((__v2du)__B)); 
# 1121
} 
# 1123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1124
_mm_subs_epi8(__m128i __A, __m128i __B) 
# 1125
{ 
# 1126
return (__m128i)__builtin_ia32_psubsb128((__v16qi)__A, (__v16qi)__B); 
# 1127
} 
# 1129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1130
_mm_subs_epi16(__m128i __A, __m128i __B) 
# 1131
{ 
# 1132
return (__m128i)__builtin_ia32_psubsw128((__v8hi)__A, (__v8hi)__B); 
# 1133
} 
# 1135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1136
_mm_subs_epu8(__m128i __A, __m128i __B) 
# 1137
{ 
# 1138
return (__m128i)__builtin_ia32_psubusb128((__v16qi)__A, (__v16qi)__B); 
# 1139
} 
# 1141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1142
_mm_subs_epu16(__m128i __A, __m128i __B) 
# 1143
{ 
# 1144
return (__m128i)__builtin_ia32_psubusw128((__v8hi)__A, (__v8hi)__B); 
# 1145
} 
# 1147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1148
_mm_madd_epi16(__m128i __A, __m128i __B) 
# 1149
{ 
# 1150
return (__m128i)__builtin_ia32_pmaddwd128((__v8hi)__A, (__v8hi)__B); 
# 1151
} 
# 1153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1154
_mm_mulhi_epi16(__m128i __A, __m128i __B) 
# 1155
{ 
# 1156
return (__m128i)__builtin_ia32_pmulhw128((__v8hi)__A, (__v8hi)__B); 
# 1157
} 
# 1159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1160
_mm_mullo_epi16(__m128i __A, __m128i __B) 
# 1161
{ 
# 1162
return (__m128i)(((__v8hu)__A) * ((__v8hu)__B)); 
# 1163
} 
# 1165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1166
_mm_mul_su32(__m64 __A, __m64 __B) 
# 1167
{ 
# 1168
return (__m64)__builtin_ia32_pmuludq((__v2si)__A, (__v2si)__B); 
# 1169
} 
# 1171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1172
_mm_mul_epu32(__m128i __A, __m128i __B) 
# 1173
{ 
# 1174
return (__m128i)__builtin_ia32_pmuludq128((__v4si)__A, (__v4si)__B); 
# 1175
} 
# 1177
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1178
_mm_slli_epi16(__m128i __A, int __B) 
# 1179
{ 
# 1180
return (__m128i)__builtin_ia32_psllwi128((__v8hi)__A, __B); 
# 1181
} 
# 1183
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1184
_mm_slli_epi32(__m128i __A, int __B) 
# 1185
{ 
# 1186
return (__m128i)__builtin_ia32_pslldi128((__v4si)__A, __B); 
# 1187
} 
# 1189
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1190
_mm_slli_epi64(__m128i __A, int __B) 
# 1191
{ 
# 1192
return (__m128i)__builtin_ia32_psllqi128((__v2di)__A, __B); 
# 1193
} 
# 1195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1196
_mm_srai_epi16(__m128i __A, int __B) 
# 1197
{ 
# 1198
return (__m128i)__builtin_ia32_psrawi128((__v8hi)__A, __B); 
# 1199
} 
# 1201
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1202
_mm_srai_epi32(__m128i __A, int __B) 
# 1203
{ 
# 1204
return (__m128i)__builtin_ia32_psradi128((__v4si)__A, __B); 
# 1205
} 
# 1242 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/emmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1243
_mm_srli_epi16(__m128i __A, int __B) 
# 1244
{ 
# 1245
return (__m128i)__builtin_ia32_psrlwi128((__v8hi)__A, __B); 
# 1246
} 
# 1248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1249
_mm_srli_epi32(__m128i __A, int __B) 
# 1250
{ 
# 1251
return (__m128i)__builtin_ia32_psrldi128((__v4si)__A, __B); 
# 1252
} 
# 1254
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1255
_mm_srli_epi64(__m128i __A, int __B) 
# 1256
{ 
# 1257
return (__m128i)__builtin_ia32_psrlqi128((__v2di)__A, __B); 
# 1258
} 
# 1260
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1261
_mm_sll_epi16(__m128i __A, __m128i __B) 
# 1262
{ 
# 1263
return (__m128i)__builtin_ia32_psllw128((__v8hi)__A, (__v8hi)__B); 
# 1264
} 
# 1266
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1267
_mm_sll_epi32(__m128i __A, __m128i __B) 
# 1268
{ 
# 1269
return (__m128i)__builtin_ia32_pslld128((__v4si)__A, (__v4si)__B); 
# 1270
} 
# 1272
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1273
_mm_sll_epi64(__m128i __A, __m128i __B) 
# 1274
{ 
# 1275
return (__m128i)__builtin_ia32_psllq128((__v2di)__A, (__v2di)__B); 
# 1276
} 
# 1278
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1279
_mm_sra_epi16(__m128i __A, __m128i __B) 
# 1280
{ 
# 1281
return (__m128i)__builtin_ia32_psraw128((__v8hi)__A, (__v8hi)__B); 
# 1282
} 
# 1284
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1285
_mm_sra_epi32(__m128i __A, __m128i __B) 
# 1286
{ 
# 1287
return (__m128i)__builtin_ia32_psrad128((__v4si)__A, (__v4si)__B); 
# 1288
} 
# 1290
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1291
_mm_srl_epi16(__m128i __A, __m128i __B) 
# 1292
{ 
# 1293
return (__m128i)__builtin_ia32_psrlw128((__v8hi)__A, (__v8hi)__B); 
# 1294
} 
# 1296
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1297
_mm_srl_epi32(__m128i __A, __m128i __B) 
# 1298
{ 
# 1299
return (__m128i)__builtin_ia32_psrld128((__v4si)__A, (__v4si)__B); 
# 1300
} 
# 1302
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1303
_mm_srl_epi64(__m128i __A, __m128i __B) 
# 1304
{ 
# 1305
return (__m128i)__builtin_ia32_psrlq128((__v2di)__A, (__v2di)__B); 
# 1306
} 
# 1308
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1309
_mm_and_si128(__m128i __A, __m128i __B) 
# 1310
{ 
# 1311
return (__m128i)(((__v2du)__A) & ((__v2du)__B)); 
# 1312
} 
# 1314
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1315
_mm_andnot_si128(__m128i __A, __m128i __B) 
# 1316
{ 
# 1317
return (__m128i)__builtin_ia32_pandn128((__v2di)__A, (__v2di)__B); 
# 1318
} 
# 1320
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1321
_mm_or_si128(__m128i __A, __m128i __B) 
# 1322
{ 
# 1323
return (__m128i)(((__v2du)__A) | ((__v2du)__B)); 
# 1324
} 
# 1326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1327
_mm_xor_si128(__m128i __A, __m128i __B) 
# 1328
{ 
# 1329
return (__m128i)(((__v2du)__A) ^ ((__v2du)__B)); 
# 1330
} 
# 1332
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1333
_mm_cmpeq_epi8(__m128i __A, __m128i __B) 
# 1334
{ 
# 1335
return (__m128i)(((__v16qi)__A) == ((__v16qi)__B)); 
# 1336
} 
# 1338
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1339
_mm_cmpeq_epi16(__m128i __A, __m128i __B) 
# 1340
{ 
# 1341
return (__m128i)(((__v8hi)__A) == ((__v8hi)__B)); 
# 1342
} 
# 1344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1345
_mm_cmpeq_epi32(__m128i __A, __m128i __B) 
# 1346
{ 
# 1347
return (__m128i)(((__v4si)__A) == ((__v4si)__B)); 
# 1348
} 
# 1350
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1351
_mm_cmplt_epi8(__m128i __A, __m128i __B) 
# 1352
{ 
# 1353
return (__m128i)(((__v16qs)__A) < ((__v16qs)__B)); 
# 1354
} 
# 1356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1357
_mm_cmplt_epi16(__m128i __A, __m128i __B) 
# 1358
{ 
# 1359
return (__m128i)(((__v8hi)__A) < ((__v8hi)__B)); 
# 1360
} 
# 1362
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1363
_mm_cmplt_epi32(__m128i __A, __m128i __B) 
# 1364
{ 
# 1365
return (__m128i)(((__v4si)__A) < ((__v4si)__B)); 
# 1366
} 
# 1368
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1369
_mm_cmpgt_epi8(__m128i __A, __m128i __B) 
# 1370
{ 
# 1371
return (__m128i)(((__v16qs)__A) > ((__v16qs)__B)); 
# 1372
} 
# 1374
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1375
_mm_cmpgt_epi16(__m128i __A, __m128i __B) 
# 1376
{ 
# 1377
return (__m128i)(((__v8hi)__A) > ((__v8hi)__B)); 
# 1378
} 
# 1380
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1381
_mm_cmpgt_epi32(__m128i __A, __m128i __B) 
# 1382
{ 
# 1383
return (__m128i)(((__v4si)__A) > ((__v4si)__B)); 
# 1384
} 
# 1406 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/emmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1407
_mm_max_epi16(__m128i __A, __m128i __B) 
# 1408
{ 
# 1409
return (__m128i)__builtin_ia32_pmaxsw128((__v8hi)__A, (__v8hi)__B); 
# 1410
} 
# 1412
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1413
_mm_max_epu8(__m128i __A, __m128i __B) 
# 1414
{ 
# 1415
return (__m128i)__builtin_ia32_pmaxub128((__v16qi)__A, (__v16qi)__B); 
# 1416
} 
# 1418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1419
_mm_min_epi16(__m128i __A, __m128i __B) 
# 1420
{ 
# 1421
return (__m128i)__builtin_ia32_pminsw128((__v8hi)__A, (__v8hi)__B); 
# 1422
} 
# 1424
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1425
_mm_min_epu8(__m128i __A, __m128i __B) 
# 1426
{ 
# 1427
return (__m128i)__builtin_ia32_pminub128((__v16qi)__A, (__v16qi)__B); 
# 1428
} 
# 1430
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1431
_mm_movemask_epi8(__m128i __A) 
# 1432
{ 
# 1433
return __builtin_ia32_pmovmskb128((__v16qi)__A); 
# 1434
} 
# 1436
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1437
_mm_mulhi_epu16(__m128i __A, __m128i __B) 
# 1438
{ 
# 1439
return (__m128i)__builtin_ia32_pmulhuw128((__v8hi)__A, (__v8hi)__B); 
# 1440
} 
# 1469 "/usr/lib/gcc/x86_64-pc-linux-gnu/12.2.1/include/emmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1470
_mm_maskmoveu_si128(__m128i __A, __m128i __B, char *__C) 
# 1471
{ 
# 1472
__builtin_ia32_maskmovdqu((__v16qi)__A, (__v16qi)__B, __C); 
# 1473
} 
# 1475
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1476
_mm_avg_epu8(__m128i __A, __m128i __B) 
# 1477
{ 
# 1478
return (__m128i)__builtin_ia32_pavgb128((__v16qi)__A, (__v16qi)__B); 
# 1479
} 
# 1481
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1482
_mm_avg_epu16(__m128i __A, __m128i __B) 
# 1483
{ 
# 1484
return (__m128i)__builtin_ia32_pavgw128((__v8hi)__A, (__v8hi)__B); 
# 1485
} 
# 1487
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1488
_mm_sad_epu8(__m128i __A, __m128i __B) 
# 1489
{ 
# 1490
return (__m128i)__builtin_ia32_psadbw128((__v16qi)__A, (__v16qi)__B); 
# 1491
} 
# 1493
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1494
_mm_stream_si32(int *__A, int __B) 
# 1495
{ 
# 1496
__builtin_ia32_movnti(__A, __B); 
# 1497
} 
# 1500
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1501
_mm_stream_si64(long long *__A, long long __B) 
# 1502
{ 
# 1503
__builtin_ia32_movnti64(__A, __B); 
# 1504
} 
# 1507
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1508
_mm_stream_si128(__m128i *__A, __m128i __B) 
# 1509
{ 
# 1510
__builtin_ia32_movntdq((__v2di *)__A, (__v2di)__B); 
# 1511
} 
# 1513
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1514
_mm_stream_pd(double *__A, __m128d __B) 
# 1515
{ 
# 1516
__builtin_ia32_movntpd(__A, (__v2df)__B); 
# 1517
} 
# 1519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1520
_mm_clflush(const void *__A) 
# 1521
{ 
# 1522
__builtin_ia32_clflush(__A); 
# 1523
} 
# 1525
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1526
_mm_lfence() 
# 1527
{ 
# 1528
__builtin_ia32_lfence(); 
# 1529
} 
# 1531
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1532
_mm_mfence() 
# 1533
{ 
# 1534
__builtin_ia32_mfence(); 
# 1535
} 
# 1537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1538
_mm_cvtsi32_si128(int __A) 
# 1539
{ 
# 1540
return _mm_set_epi32(0, 0, 0, __A); 
# 1541
} 
# 1545
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1546
_mm_cvtsi64_si128(long long __A) 
# 1547
{ 
# 1548
return _mm_set_epi64x(0, __A); 
# 1549
} 
# 1552
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1553
_mm_cvtsi64x_si128(long long __A) 
# 1554
{ 
# 1555
return _mm_set_epi64x(0, __A); 
# 1556
} 
# 1561
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1562
_mm_castpd_ps(__m128d __A) 
# 1563
{ 
# 1564
return (__m128)__A; 
# 1565
} 
# 1567
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1568
_mm_castpd_si128(__m128d __A) 
# 1569
{ 
# 1570
return (__m128i)__A; 
# 1571
} 
# 1573
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1574
_mm_castps_pd(__m128 __A) 
# 1575
{ 
# 1576
return (__m128d)__A; 
# 1577
} 
# 1579
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1580
_mm_castps_si128(__m128 __A) 
# 1581
{ 
# 1582
return (__m128i)__A; 
# 1583
} 
# 1585
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1586
_mm_castsi128_ps(__m128i __A) 
# 1587
{ 
# 1588
return (__m128)__A; 
# 1589
} 
# 1591
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1592
_mm_castsi128_pd(__m128i __A) 
# 1593
{ 
# 1594
return (__m128d)__A; 
# 1595
} 
# 660 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static int stbi__sse2_available() 
# 661
{ 
# 665
return 1; 
# 666
} 
# 705 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
typedef 
# 692
struct { 
# 693
stbi__uint32 img_x, img_y; 
# 694
int img_n, img_out_n; 
# 696
stbi_io_callbacks io; 
# 697
void *io_user_data; 
# 699
int read_from_callbacks; 
# 700
int buflen; 
# 701
stbi_uc buffer_start[128]; 
# 703
stbi_uc *img_buffer, *img_buffer_end; 
# 704
stbi_uc *img_buffer_original, *img_buffer_original_end; 
# 705
} stbi__context; 
# 708
static void stbi__refill_buffer(stbi__context * s); 
# 711
static void stbi__start_mem(stbi__context *s, const stbi_uc *buffer, int len) 
# 712
{ 
# 713
((s->io).read) = (__null); 
# 714 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(s->read_from_callbacks) = 0; 
# 715
(s->img_buffer) = ((s->img_buffer_original) = ((stbi_uc *)buffer)); 
# 716
(s->img_buffer_end) = ((s->img_buffer_original_end) = (((stbi_uc *)buffer) + len)); 
# 717
} 
# 720
static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user) 
# 721
{ 
# 722
(s->io) = (*c); 
# 723
(s->io_user_data) = user; 
# 724
(s->buflen) = (sizeof (s->buffer_start)); 
# 725
(s->read_from_callbacks) = 1; 
# 726
(s->img_buffer_original) = (s->buffer_start); 
# 727
stbi__refill_buffer(s); 
# 728
(s->img_buffer_original_end) = (s->img_buffer_end); 
# 729
} 
# 733
static int stbi__stdio_read(void *user, char *data, int size) 
# 734
{ 
# 735
return (int)fread(data, 1, size, (FILE *)user); 
# 736
} 
# 738
static void stbi__stdio_skip(void *user, int n) 
# 739
{ 
# 740
fseek((FILE *)user, n, 1); 
# 741 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
} 
# 743
static int stbi__stdio_eof(void *user) 
# 744
{ 
# 745
return feof((FILE *)user); 
# 746
} 
# 748
static stbi_io_callbacks stbi__stdio_callbacks = {stbi__stdio_read, stbi__stdio_skip, stbi__stdio_eof}; 
# 755
static void stbi__start_file(stbi__context *s, FILE *f) 
# 756
{ 
# 757
stbi__start_callbacks(s, &stbi__stdio_callbacks, (void *)f); 
# 758
} 
# 764
static void stbi__rewind(stbi__context *s) 
# 765
{ 
# 769
(s->img_buffer) = (s->img_buffer_original); 
# 770
(s->img_buffer_end) = (s->img_buffer_original_end); 
# 771
} 
# 774
enum { 
# 775
STBI_ORDER_RGB, 
# 776
STBI_ORDER_BGR
# 777
}; 
# 784
typedef 
# 780
struct { 
# 781
int bits_per_channel; 
# 782
int num_channels; 
# 783
int channel_order; 
# 784
} stbi__result_info; 
# 787
static int stbi__jpeg_test(stbi__context * s); 
# 788
static void *stbi__jpeg_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri); 
# 789
static int stbi__jpeg_info(stbi__context * s, int * x, int * y, int * comp); 
# 793
static int stbi__png_test(stbi__context * s); 
# 794
static void *stbi__png_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri); 
# 795
static int stbi__png_info(stbi__context * s, int * x, int * y, int * comp); 
# 796
static int stbi__png_is16(stbi__context * s); 
# 800
static int stbi__bmp_test(stbi__context * s); 
# 801
static void *stbi__bmp_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri); 
# 802
static int stbi__bmp_info(stbi__context * s, int * x, int * y, int * comp); 
# 806
static int stbi__tga_test(stbi__context * s); 
# 807
static void *stbi__tga_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri); 
# 808
static int stbi__tga_info(stbi__context * s, int * x, int * y, int * comp); 
# 812
static int stbi__psd_test(stbi__context * s); 
# 813
static void *stbi__psd_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri, int bpc); 
# 814
static int stbi__psd_info(stbi__context * s, int * x, int * y, int * comp); 
# 815
static int stbi__psd_is16(stbi__context * s); 
# 819
static int stbi__hdr_test(stbi__context * s); 
# 820
static float *stbi__hdr_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri); 
# 821
static int stbi__hdr_info(stbi__context * s, int * x, int * y, int * comp); 
# 825
static int stbi__pic_test(stbi__context * s); 
# 826
static void *stbi__pic_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri); 
# 827
static int stbi__pic_info(stbi__context * s, int * x, int * y, int * comp); 
# 831
static int stbi__gif_test(stbi__context * s); 
# 832
static void *stbi__gif_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri); 
# 833
static void *stbi__load_gif_main(stbi__context * s, int ** delays, int * x, int * y, int * z, int * comp, int req_comp); 
# 834
static int stbi__gif_info(stbi__context * s, int * x, int * y, int * comp); 
# 838
static int stbi__pnm_test(stbi__context * s); 
# 839
static void *stbi__pnm_load(stbi__context * s, int * x, int * y, int * comp, int req_comp, stbi__result_info * ri); 
# 840
static int stbi__pnm_info(stbi__context * s, int * x, int * y, int * comp); 
# 844
static const char *stbi__g_failure_reason; 
# 846
extern const char *stbi_failure_reason() 
# 847
{ 
# 848
return stbi__g_failure_reason; 
# 849
} 
# 851
static int stbi__err(const char *str) 
# 852
{ 
# 853
stbi__g_failure_reason = str; 
# 854
return 0; 
# 855
} 
# 857
static void *stbi__malloc(::size_t size) 
# 858
{ 
# 859
return malloc(size); 
# 860
} 
# 874 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static int stbi__addsizes_valid(int a, int b) 
# 875
{ 
# 876
if (b < 0) { return 0; }  
# 881
return a <= (2147483647 - b); 
# 882
} 
# 886
static int stbi__mul2sizes_valid(int a, int b) 
# 887
{ 
# 888
if ((a < 0) || (b < 0)) { return 0; }  
# 889
if (b == 0) { return 1; }  
# 891
return a <= (2147483647 / b); 
# 892
} 
# 895
static int stbi__mad2sizes_valid(int a, int b, int add) 
# 896
{ 
# 897
return (stbi__mul2sizes_valid(a, b)) && (stbi__addsizes_valid(a * b, add)); 
# 898
} 
# 901
static int stbi__mad3sizes_valid(int a, int b, int c, int add) 
# 902
{ 
# 903
return (stbi__mul2sizes_valid(a, b)) && (stbi__mul2sizes_valid(a * b, c)) && (stbi__addsizes_valid((a * b) * c, add)); 
# 905
} 
# 909
static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add) 
# 910
{ 
# 911
return (stbi__mul2sizes_valid(a, b)) && (stbi__mul2sizes_valid(a * b, c)) && (stbi__mul2sizes_valid((a * b) * c, d)) && (stbi__addsizes_valid(((a * b) * c) * d, add)); 
# 913
} 
# 917
static void *stbi__malloc_mad2(int a, int b, int add) 
# 918
{ 
# 919
if (!(stbi__mad2sizes_valid(a, b, add))) { return __null; }  
# 920 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__malloc((a * b) + add); 
# 921
} 
# 923
static void *stbi__malloc_mad3(int a, int b, int c, int add) 
# 924
{ 
# 925
if (!(stbi__mad3sizes_valid(a, b, c, add))) { return __null; }  
# 926 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__malloc(((a * b) * c) + add); 
# 927
} 
# 930
static void *stbi__malloc_mad4(int a, int b, int c, int d, int add) 
# 931
{ 
# 932
if (!(stbi__mad4sizes_valid(a, b, c, d, add))) { return __null; }  
# 933 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__malloc((((a * b) * c) * d) + add); 
# 934
} 
# 952 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
extern void stbi_image_free(void *retval_from_stbi_load) 
# 953
{ 
# 954
free(retval_from_stbi_load); 
# 955
} 
# 958
static float *stbi__ldr_to_hdr(stbi_uc * data, int x, int y, int comp); 
# 962
static stbi_uc *stbi__hdr_to_ldr(float * data, int x, int y, int comp); 
# 965
static int stbi__vertically_flip_on_load = 0; 
# 967
extern void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip) 
# 968
{ 
# 969
stbi__vertically_flip_on_load = flag_true_if_should_flip; 
# 970
} 
# 972
static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc) 
# 973
{ 
# 974
memset(ri, 0, sizeof (*ri)); 
# 975
(ri->bits_per_channel) = 8; 
# 976
(ri->channel_order) = (STBI_ORDER_RGB); 
# 977
(ri->num_channels) = 0; 
# 980
if (stbi__jpeg_test(s)) { return stbi__jpeg_load(s, x, y, comp, req_comp, ri); }  
# 983
if (stbi__png_test(s)) { return stbi__png_load(s, x, y, comp, req_comp, ri); }  
# 986
if (stbi__bmp_test(s)) { return stbi__bmp_load(s, x, y, comp, req_comp, ri); }  
# 989
if (stbi__gif_test(s)) { return stbi__gif_load(s, x, y, comp, req_comp, ri); }  
# 992
if (stbi__psd_test(s)) { return stbi__psd_load(s, x, y, comp, req_comp, ri, bpc); }  
# 995
if (stbi__pic_test(s)) { return stbi__pic_load(s, x, y, comp, req_comp, ri); }  
# 998
if (stbi__pnm_test(s)) { return stbi__pnm_load(s, x, y, comp, req_comp, ri); }  
# 1002
if (stbi__hdr_test(s)) { 
# 1003
float *hdr = stbi__hdr_load(s, x, y, comp, req_comp, ri); 
# 1004
return stbi__hdr_to_ldr(hdr, *x, *y, (req_comp) ? req_comp : (*comp)); 
# 1005
}  
# 1010
if (stbi__tga_test(s)) { 
# 1011
return stbi__tga_load(s, x, y, comp, req_comp, ri); }  
# 1014
return ((unsigned char *)((::size_t)((stbi__err("unknown image type")) ? __null : __null))); 
# 1015 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
} 
# 1017
static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels) 
# 1018
{ 
# 1019
int i; 
# 1020
int img_len = (w * h) * channels; 
# 1021
stbi_uc *reduced; 
# 1023
reduced = ((stbi_uc *)stbi__malloc(img_len)); 
# 1024
if (reduced == (__null)) { 
# 1024 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); }  
# 1026 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
for (i = 0; i < img_len; ++i) { 
# 1027
(reduced[i]) = ((stbi_uc)(((orig[i]) >> 8) & 255)); }  
# 1029
free(orig); 
# 1030
return reduced; 
# 1031
} 
# 1033
static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels) 
# 1034
{ 
# 1035
int i; 
# 1036
int img_len = (w * h) * channels; 
# 1037
stbi__uint16 *enlarged; 
# 1039
enlarged = ((stbi__uint16 *)stbi__malloc(img_len * 2)); 
# 1040
if (enlarged == (__null)) { 
# 1040 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return (stbi__uint16 *)((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); }  
# 1042 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
for (i = 0; i < img_len; ++i) { 
# 1043
(enlarged[i]) = ((stbi__uint16)(((orig[i]) << 8) + (orig[i]))); }  
# 1045
free(orig); 
# 1046
return enlarged; 
# 1047
} 
# 1049
static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel) 
# 1050
{ 
# 1051
int row; 
# 1052
::size_t bytes_per_row = ((::size_t)w) * bytes_per_pixel; 
# 1053
stbi_uc temp[2048]; 
# 1054
stbi_uc *bytes = (stbi_uc *)image; 
# 1056
for (row = 0; row < (h >> 1); row++) { 
# 1057
stbi_uc *row0 = bytes + (row * bytes_per_row); 
# 1058
stbi_uc *row1 = bytes + (((h - row) - 1) * bytes_per_row); 
# 1060
::size_t bytes_left = bytes_per_row; 
# 1061
while (bytes_left) { 
# 1062
::size_t bytes_copy = (bytes_left < sizeof temp) ? bytes_left : sizeof temp; 
# 1063
memcpy(temp, row0, bytes_copy); 
# 1064
memcpy(row0, row1, bytes_copy); 
# 1065
memcpy(row1, temp, bytes_copy); 
# 1066
row0 += bytes_copy; 
# 1067
row1 += bytes_copy; 
# 1068
bytes_left -= bytes_copy; 
# 1069
}  
# 1070
}  
# 1071
} 
# 1073
static void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel) 
# 1074
{ 
# 1075
int slice; 
# 1076
int slice_size = (w * h) * bytes_per_pixel; 
# 1078
stbi_uc *bytes = (stbi_uc *)image; 
# 1079
for (slice = 0; slice < z; ++slice) { 
# 1080
stbi__vertical_flip(bytes, w, h, bytes_per_pixel); 
# 1081
bytes += slice_size; 
# 1082
}  
# 1083
} 
# 1085
static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp) 
# 1086
{ 
# 1087
stbi__result_info ri; 
# 1088
void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 8); 
# 1090
if (result == (__null)) { 
# 1091 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return __null; }  
# 1093 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if ((ri.bits_per_channel) != 8) { 
# 1094 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((ri.bits_per_channel) == 16)) ? (void)0 : __assert_fail("ri.bits_per_channel == 16", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 1094, __extension__ __PRETTY_FUNCTION__); 
# 1095 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
result = (stbi__convert_16_to_8((stbi__uint16 *)result, *x, *y, (req_comp == 0) ? *comp : req_comp)); 
# 1096
(ri.bits_per_channel) = 8; 
# 1097
}  
# 1101
if (stbi__vertically_flip_on_load) { 
# 1102
int channels = (req_comp) ? req_comp : (*comp); 
# 1103
stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi_uc)); 
# 1104
}  
# 1106
return (unsigned char *)result; 
# 1107
} 
# 1109
static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp) 
# 1110
{ 
# 1111
stbi__result_info ri; 
# 1112
void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 16); 
# 1114
if (result == (__null)) { 
# 1115 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return __null; }  
# 1117 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if ((ri.bits_per_channel) != 16) { 
# 1118 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((ri.bits_per_channel) == 8)) ? (void)0 : __assert_fail("ri.bits_per_channel == 8", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 1118, __extension__ __PRETTY_FUNCTION__); 
# 1119 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
result = (stbi__convert_8_to_16((stbi_uc *)result, *x, *y, (req_comp == 0) ? *comp : req_comp)); 
# 1120
(ri.bits_per_channel) = 16; 
# 1121
}  
# 1126
if (stbi__vertically_flip_on_load) { 
# 1127
int channels = (req_comp) ? req_comp : (*comp); 
# 1128
stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi__uint16)); 
# 1129
}  
# 1131
return (stbi__uint16 *)result; 
# 1132
} 
# 1135
static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp) 
# 1136
{ 
# 1137
if (stbi__vertically_flip_on_load && (result != (__null))) 
# 1137 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
{ 
# 1138
int channels = (req_comp) ? req_comp : (*comp); 
# 1139
stbi__vertical_flip(result, *x, *y, channels * sizeof(float)); 
# 1140
}  
# 1141
} 
# 1146
static FILE *stbi__fopen(const char *filename, const char *mode) 
# 1147
{ 
# 1148
FILE *f; 
# 1153
f = fopen(filename, mode); 
# 1155
return f; 
# 1156
} 
# 1159
extern stbi_uc *stbi_load(const char *filename, int *x, int *y, int *comp, int req_comp) 
# 1160
{ 
# 1161
FILE *f = stbi__fopen(filename, "rb"); 
# 1162
unsigned char *result; 
# 1163
if (!f) { return ((unsigned char *)((::size_t)((stbi__err("can\'t fopen")) ? __null : __null))); }  
# 1164 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
result = stbi_load_from_file(f, x, y, comp, req_comp); 
# 1165
fclose(f); 
# 1166
return result; 
# 1167
} 
# 1169
extern stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp) 
# 1170
{ 
# 1171
unsigned char *result; 
# 1172
stbi__context s; 
# 1173
stbi__start_file(&s, f); 
# 1174
result = stbi__load_and_postprocess_8bit(&s, x, y, comp, req_comp); 
# 1175
if (result) { 
# 1177
fseek(f, -((int)((s.img_buffer_end) - (s.img_buffer))), 1); 
# 1178 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 1179
return result; 
# 1180
} 
# 1182
extern stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp) 
# 1183
{ 
# 1184
stbi__uint16 *result; 
# 1185
stbi__context s; 
# 1186
stbi__start_file(&s, f); 
# 1187
result = stbi__load_and_postprocess_16bit(&s, x, y, comp, req_comp); 
# 1188
if (result) { 
# 1190
fseek(f, -((int)((s.img_buffer_end) - (s.img_buffer))), 1); 
# 1191 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 1192
return result; 
# 1193
} 
# 1195
extern stbi_us *stbi_load_16(const char *filename, int *x, int *y, int *comp, int req_comp) 
# 1196
{ 
# 1197
FILE *f = stbi__fopen(filename, "rb"); 
# 1198
stbi__uint16 *result; 
# 1199
if (!f) { return (stbi_us *)((unsigned char *)((::size_t)((stbi__err("can\'t fopen")) ? __null : __null))); }  
# 1200 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
result = stbi_load_from_file_16(f, x, y, comp, req_comp); 
# 1201
fclose(f); 
# 1202
return result; 
# 1203
} 
# 1208
extern stbi_us *stbi_load_16_from_memory(const stbi_uc *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels) 
# 1209
{ 
# 1210
stbi__context s; 
# 1211
stbi__start_mem(&s, buffer, len); 
# 1212
return stbi__load_and_postprocess_16bit(&s, x, y, channels_in_file, desired_channels); 
# 1213
} 
# 1215
extern stbi_us *stbi_load_16_from_callbacks(const stbi_io_callbacks *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels) 
# 1216
{ 
# 1217
stbi__context s; 
# 1218
stbi__start_callbacks(&s, (stbi_io_callbacks *)clbk, user); 
# 1219
return stbi__load_and_postprocess_16bit(&s, x, y, channels_in_file, desired_channels); 
# 1220
} 
# 1222
extern stbi_uc *stbi_load_from_memory(const stbi_uc *buffer, int len, int *x, int *y, int *comp, int req_comp) 
# 1223
{ 
# 1224
stbi__context s; 
# 1225
stbi__start_mem(&s, buffer, len); 
# 1226
return stbi__load_and_postprocess_8bit(&s, x, y, comp, req_comp); 
# 1227
} 
# 1229
extern stbi_uc *stbi_load_from_callbacks(const stbi_io_callbacks *clbk, void *user, int *x, int *y, int *comp, int req_comp) 
# 1230
{ 
# 1231
stbi__context s; 
# 1232
stbi__start_callbacks(&s, (stbi_io_callbacks *)clbk, user); 
# 1233
return stbi__load_and_postprocess_8bit(&s, x, y, comp, req_comp); 
# 1234
} 
# 1237
extern stbi_uc *stbi_load_gif_from_memory(const stbi_uc *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp) 
# 1238
{ 
# 1239
unsigned char *result; 
# 1240
stbi__context s; 
# 1241
stbi__start_mem(&s, buffer, len); 
# 1243
result = ((unsigned char *)stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp)); 
# 1244
if (stbi__vertically_flip_on_load) { 
# 1245
stbi__vertical_flip_slices(result, *x, *y, *z, *comp); 
# 1246
}  
# 1248
return result; 
# 1249
} 
# 1253
static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp) 
# 1254
{ 
# 1255
unsigned char *data; 
# 1257
if (stbi__hdr_test(s)) { 
# 1258
stbi__result_info ri; 
# 1259
float *hdr_data = stbi__hdr_load(s, x, y, comp, req_comp, &ri); 
# 1260
if (hdr_data) { 
# 1261
stbi__float_postprocess(hdr_data, x, y, comp, req_comp); }  
# 1262
return hdr_data; 
# 1263
}  
# 1265
data = stbi__load_and_postprocess_8bit(s, x, y, comp, req_comp); 
# 1266
if (data) { 
# 1267
return stbi__ldr_to_hdr(data, *x, *y, (req_comp) ? req_comp : (*comp)); }  
# 1268
return ((float *)((::size_t)((stbi__err("unknown image type")) ? __null : __null))); 
# 1269 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
} 
# 1271
extern float *stbi_loadf_from_memory(const stbi_uc *buffer, int len, int *x, int *y, int *comp, int req_comp) 
# 1272
{ 
# 1273
stbi__context s; 
# 1274
stbi__start_mem(&s, buffer, len); 
# 1275
return stbi__loadf_main(&s, x, y, comp, req_comp); 
# 1276
} 
# 1278
extern float *stbi_loadf_from_callbacks(const stbi_io_callbacks *clbk, void *user, int *x, int *y, int *comp, int req_comp) 
# 1279
{ 
# 1280
stbi__context s; 
# 1281
stbi__start_callbacks(&s, (stbi_io_callbacks *)clbk, user); 
# 1282
return stbi__loadf_main(&s, x, y, comp, req_comp); 
# 1283
} 
# 1286
extern float *stbi_loadf(const char *filename, int *x, int *y, int *comp, int req_comp) 
# 1287
{ 
# 1288
float *result; 
# 1289
FILE *f = stbi__fopen(filename, "rb"); 
# 1290
if (!f) { return ((float *)((::size_t)((stbi__err("can\'t fopen")) ? __null : __null))); }  
# 1291 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
result = stbi_loadf_from_file(f, x, y, comp, req_comp); 
# 1292
fclose(f); 
# 1293
return result; 
# 1294
} 
# 1296
extern float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp) 
# 1297
{ 
# 1298
stbi__context s; 
# 1299
stbi__start_file(&s, f); 
# 1300
return stbi__loadf_main(&s, x, y, comp, req_comp); 
# 1301
} 
# 1310 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
extern int stbi_is_hdr_from_memory(const stbi_uc *buffer, int len) 
# 1311
{ 
# 1313
stbi__context s; 
# 1314
stbi__start_mem(&s, buffer, len); 
# 1315
return stbi__hdr_test(&s); 
# 1321
} 
# 1324
extern int stbi_is_hdr(const char *filename) 
# 1325
{ 
# 1326
FILE *f = stbi__fopen(filename, "rb"); 
# 1327
int result = 0; 
# 1328
if (f) { 
# 1329
result = stbi_is_hdr_from_file(f); 
# 1330
fclose(f); 
# 1331
}  
# 1332
return result; 
# 1333
} 
# 1335
extern int stbi_is_hdr_from_file(FILE *f) 
# 1336
{ 
# 1338
long pos = ftell(f); 
# 1339
int res; 
# 1340
stbi__context s; 
# 1341
stbi__start_file(&s, f); 
# 1342
res = stbi__hdr_test(&s); 
# 1343
fseek(f, pos, 0); 
# 1344 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return res; 
# 1349
} 
# 1352
extern int stbi_is_hdr_from_callbacks(const stbi_io_callbacks *clbk, void *user) 
# 1353
{ 
# 1355
stbi__context s; 
# 1356
stbi__start_callbacks(&s, (stbi_io_callbacks *)clbk, user); 
# 1357
return stbi__hdr_test(&s); 
# 1363
} 
# 1366
static float stbi__l2h_gamma = (2.2F), stbi__l2h_scale = (1.0F); 
# 1368
extern void stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; } 
# 1369
extern void stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; } 
# 1372
static float stbi__h2l_gamma_i = ((1.0F) / (2.2F)), stbi__h2l_scale_i = (1.0F); 
# 1374
extern void stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = ((1) / gamma); } 
# 1375
extern void stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = ((1) / scale); } 
# 1384
enum { 
# 1385
STBI__SCAN_load, 
# 1386
STBI__SCAN_type, 
# 1387
STBI__SCAN_header
# 1388
}; 
# 1390
static void stbi__refill_buffer(stbi__context *s) 
# 1391
{ 
# 1392
int n = ((s->io).read)(s->io_user_data, (char *)(s->buffer_start), s->buflen); 
# 1393
if (n == 0) { 
# 1396
(s->read_from_callbacks) = 0; 
# 1397
(s->img_buffer) = (s->buffer_start); 
# 1398
(s->img_buffer_end) = ((s->buffer_start) + 1); 
# 1399
(*(s->img_buffer)) = (0); 
# 1400
} else { 
# 1401
(s->img_buffer) = (s->buffer_start); 
# 1402
(s->img_buffer_end) = ((s->buffer_start) + n); 
# 1403
}  
# 1404
} 
# 1406
static inline stbi_uc stbi__get8(stbi__context *s) 
# 1407
{ 
# 1408
if ((s->img_buffer) < (s->img_buffer_end)) { 
# 1409
return *((s->img_buffer)++); }  
# 1410
if (s->read_from_callbacks) { 
# 1411
stbi__refill_buffer(s); 
# 1412
return *((s->img_buffer)++); 
# 1413
}  
# 1414
return 0; 
# 1415
} 
# 1417
static inline int stbi__at_eof(stbi__context *s) 
# 1418
{ 
# 1419
if ((s->io).read) { 
# 1420
if (!(((s->io).eof)(s->io_user_data))) { return 0; }  
# 1423
if ((s->read_from_callbacks) == 0) { return 1; }  
# 1424
}  
# 1426
return (s->img_buffer) >= (s->img_buffer_end); 
# 1427
} 
# 1429
static void stbi__skip(stbi__context *s, int n) 
# 1430
{ 
# 1431
if (n < 0) { 
# 1432
(s->img_buffer) = (s->img_buffer_end); 
# 1433
return; 
# 1434
}  
# 1435
if ((s->io).read) { 
# 1436
int blen = (int)((s->img_buffer_end) - (s->img_buffer)); 
# 1437
if (blen < n) { 
# 1438
(s->img_buffer) = (s->img_buffer_end); 
# 1439
((s->io).skip)(s->io_user_data, n - blen); 
# 1440
return; 
# 1441
}  
# 1442
}  
# 1443
(s->img_buffer) += n; 
# 1444
} 
# 1446
static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n) 
# 1447
{ 
# 1448
if ((s->io).read) { 
# 1449
int blen = (int)((s->img_buffer_end) - (s->img_buffer)); 
# 1450
if (blen < n) { 
# 1451
int res, count; 
# 1453
memcpy(buffer, s->img_buffer, blen); 
# 1455
count = ((s->io).read)(s->io_user_data, ((char *)buffer) + blen, n - blen); 
# 1456
res = (count == (n - blen)); 
# 1457
(s->img_buffer) = (s->img_buffer_end); 
# 1458
return res; 
# 1459
}  
# 1460
}  
# 1462
if (((s->img_buffer) + n) <= (s->img_buffer_end)) { 
# 1463
memcpy(buffer, s->img_buffer, n); 
# 1464
(s->img_buffer) += n; 
# 1465
return 1; 
# 1466
} else { 
# 1467
return 0; }  
# 1468
} 
# 1470
static int stbi__get16be(stbi__context *s) 
# 1471
{ 
# 1472
int z = stbi__get8(s); 
# 1473
return (z << 8) + (stbi__get8(s)); 
# 1474
} 
# 1476
static stbi__uint32 stbi__get32be(stbi__context *s) 
# 1477
{ 
# 1478
stbi__uint32 z = stbi__get16be(s); 
# 1479
return (z << 16) + (stbi__get16be(s)); 
# 1480
} 
# 1485
static int stbi__get16le(stbi__context *s) 
# 1486
{ 
# 1487
int z = stbi__get8(s); 
# 1488
return z + ((stbi__get8(s)) << 8); 
# 1489
} 
# 1493
static stbi__uint32 stbi__get32le(stbi__context *s) 
# 1494
{ 
# 1495
stbi__uint32 z = stbi__get16le(s); 
# 1496
return z + (stbi__get16le(s) << 16); 
# 1497
} 
# 1514 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static stbi_uc stbi__compute_y(int r, int g, int b) 
# 1515
{ 
# 1516
return (stbi_uc)((((r * 77) + (g * 150)) + (29 * b)) >> 8); 
# 1517
} 
# 1519
static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned x, unsigned y) 
# 1520
{ 
# 1521
int i, j; 
# 1522
unsigned char *good; 
# 1524
if (req_comp == img_n) { return data; }  
# 1525 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((req_comp >= 1) && (req_comp <= 4))) ? (void)0 : __assert_fail("req_comp >= 1 && req_comp <= 4", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 1525, __extension__ __PRETTY_FUNCTION__); 
# 1527 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
good = ((unsigned char *)stbi__malloc_mad3(req_comp, x, y, 0)); 
# 1528
if (good == (__null)) 
# 1528 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
{ 
# 1529
free(data); 
# 1530
return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); 
# 1531 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 1533
for (j = 0; j < ((int)y); ++j) { 
# 1534
unsigned char *src = data + ((j * x) * img_n); 
# 1535
unsigned char *dest = good + ((j * x) * req_comp); 
# 1541
switch ((img_n * 8) + req_comp) { 
# 1542
case (1 * 8) + 2:  for (i = (x - (1)); i >= 0; ((--i), (src += 1)), (dest += 2)) { ((dest[0]) = (src[0])), ((dest[1]) = (255)); }  break; 
# 1543
case (1 * 8) + 3:  for (i = (x - (1)); i >= 0; ((--i), (src += 1)), (dest += 3)) { (dest[0]) = ((dest[1]) = ((dest[2]) = (src[0]))); }  break; 
# 1544
case (1 * 8) + 4:  for (i = (x - (1)); i >= 0; ((--i), (src += 1)), (dest += 4)) { ((dest[0]) = ((dest[1]) = ((dest[2]) = (src[0])))), ((dest[3]) = (255)); }  break; 
# 1545
case (2 * 8) + 1:  for (i = (x - (1)); i >= 0; ((--i), (src += 2)), (dest += 1)) { (dest[0]) = (src[0]); }  break; 
# 1546
case (2 * 8) + 3:  for (i = (x - (1)); i >= 0; ((--i), (src += 2)), (dest += 3)) { (dest[0]) = ((dest[1]) = ((dest[2]) = (src[0]))); }  break; 
# 1547
case (2 * 8) + 4:  for (i = (x - (1)); i >= 0; ((--i), (src += 2)), (dest += 4)) { ((dest[0]) = ((dest[1]) = ((dest[2]) = (src[0])))), ((dest[3]) = (src[1])); }  break; 
# 1548
case (3 * 8) + 4:  for (i = (x - (1)); i >= 0; ((--i), (src += 3)), (dest += 4)) { ((((dest[0]) = (src[0])), ((dest[1]) = (src[1]))), ((dest[2]) = (src[2]))), ((dest[3]) = (255)); }  break; 
# 1549
case (3 * 8) + 1:  for (i = (x - (1)); i >= 0; ((--i), (src += 3)), (dest += 1)) { (dest[0]) = stbi__compute_y(src[0], src[1], src[2]); }  break; 
# 1550
case (3 * 8) + 2:  for (i = (x - (1)); i >= 0; ((--i), (src += 3)), (dest += 2)) { ((dest[0]) = stbi__compute_y(src[0], src[1], src[2])), ((dest[1]) = (255)); }  break; 
# 1551
case (4 * 8) + 1:  for (i = (x - (1)); i >= 0; ((--i), (src += 4)), (dest += 1)) { (dest[0]) = stbi__compute_y(src[0], src[1], src[2]); }  break; 
# 1552
case (4 * 8) + 2:  for (i = (x - (1)); i >= 0; ((--i), (src += 4)), (dest += 2)) { ((dest[0]) = stbi__compute_y(src[0], src[1], src[2])), ((dest[1]) = (src[3])); }  break; 
# 1553
case (4 * 8) + 3:  for (i = (x - (1)); i >= 0; ((--i), (src += 4)), (dest += 3)) { (((dest[0]) = (src[0])), ((dest[1]) = (src[1]))), ((dest[2]) = (src[2])); }  break; 
# 1554
default:  
# 1554 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(0)) ? (void)0 : __assert_fail("0", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 1554, __extension__ __PRETTY_FUNCTION__); 
# 1555 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 1557
}  
# 1559
free(data); 
# 1560
return good; 
# 1561
} 
# 1563
static stbi__uint16 stbi__compute_y_16(int r, int g, int b) 
# 1564
{ 
# 1565
return (stbi__uint16)((((r * 77) + (g * 150)) + (29 * b)) >> 8); 
# 1566
} 
# 1568
static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned x, unsigned y) 
# 1569
{ 
# 1570
int i, j; 
# 1571
stbi__uint16 *good; 
# 1573
if (req_comp == img_n) { return data; }  
# 1574 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((req_comp >= 1) && (req_comp <= 4))) ? (void)0 : __assert_fail("req_comp >= 1 && req_comp <= 4", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 1574, __extension__ __PRETTY_FUNCTION__); 
# 1576 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
good = ((stbi__uint16 *)stbi__malloc(((req_comp * x) * y) * (2))); 
# 1577
if (good == (__null)) 
# 1577 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
{ 
# 1578
free(data); 
# 1579
return (stbi__uint16 *)((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); 
# 1580 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 1582
for (j = 0; j < ((int)y); ++j) { 
# 1583
stbi__uint16 *src = data + ((j * x) * img_n); 
# 1584
stbi__uint16 *dest = good + ((j * x) * req_comp); 
# 1590
switch ((img_n * 8) + req_comp) { 
# 1591
case (1 * 8) + 2:  for (i = (x - (1)); i >= 0; ((--i), (src += 1)), (dest += 2)) { ((dest[0]) = (src[0])), ((dest[1]) = (65535)); }  break; 
# 1592
case (1 * 8) + 3:  for (i = (x - (1)); i >= 0; ((--i), (src += 1)), (dest += 3)) { (dest[0]) = ((dest[1]) = ((dest[2]) = (src[0]))); }  break; 
# 1593
case (1 * 8) + 4:  for (i = (x - (1)); i >= 0; ((--i), (src += 1)), (dest += 4)) { ((dest[0]) = ((dest[1]) = ((dest[2]) = (src[0])))), ((dest[3]) = (65535)); }  break; 
# 1594
case (2 * 8) + 1:  for (i = (x - (1)); i >= 0; ((--i), (src += 2)), (dest += 1)) { (dest[0]) = (src[0]); }  break; 
# 1595
case (2 * 8) + 3:  for (i = (x - (1)); i >= 0; ((--i), (src += 2)), (dest += 3)) { (dest[0]) = ((dest[1]) = ((dest[2]) = (src[0]))); }  break; 
# 1596
case (2 * 8) + 4:  for (i = (x - (1)); i >= 0; ((--i), (src += 2)), (dest += 4)) { ((dest[0]) = ((dest[1]) = ((dest[2]) = (src[0])))), ((dest[3]) = (src[1])); }  break; 
# 1597
case (3 * 8) + 4:  for (i = (x - (1)); i >= 0; ((--i), (src += 3)), (dest += 4)) { ((((dest[0]) = (src[0])), ((dest[1]) = (src[1]))), ((dest[2]) = (src[2]))), ((dest[3]) = (65535)); }  break; 
# 1598
case (3 * 8) + 1:  for (i = (x - (1)); i >= 0; ((--i), (src += 3)), (dest += 1)) { (dest[0]) = stbi__compute_y_16(src[0], src[1], src[2]); }  break; 
# 1599
case (3 * 8) + 2:  for (i = (x - (1)); i >= 0; ((--i), (src += 3)), (dest += 2)) { ((dest[0]) = stbi__compute_y_16(src[0], src[1], src[2])), ((dest[1]) = (65535)); }  break; 
# 1600
case (4 * 8) + 1:  for (i = (x - (1)); i >= 0; ((--i), (src += 4)), (dest += 1)) { (dest[0]) = stbi__compute_y_16(src[0], src[1], src[2]); }  break; 
# 1601
case (4 * 8) + 2:  for (i = (x - (1)); i >= 0; ((--i), (src += 4)), (dest += 2)) { ((dest[0]) = stbi__compute_y_16(src[0], src[1], src[2])), ((dest[1]) = (src[3])); }  break; 
# 1602
case (4 * 8) + 3:  for (i = (x - (1)); i >= 0; ((--i), (src += 4)), (dest += 3)) { (((dest[0]) = (src[0])), ((dest[1]) = (src[1]))), ((dest[2]) = (src[2])); }  break; 
# 1603
default:  
# 1603 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(0)) ? (void)0 : __assert_fail("0", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 1603, __extension__ __PRETTY_FUNCTION__); 
# 1604 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 1606
}  
# 1608
free(data); 
# 1609
return good; 
# 1610
} 
# 1613
static float *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp) 
# 1614
{ 
# 1615
int i, k, n; 
# 1616
float *output; 
# 1617
if (!data) { return __null; }  
# 1618 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
output = ((float *)stbi__malloc_mad4(x, y, comp, sizeof(float), 0)); 
# 1619
if (output == (__null)) 
# 1619 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
{ free(data); return ((float *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); 
# 1619 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 1621
if (comp & 1) { n = comp; } else { n = (comp - 1); }  
# 1622
for (i = 0; i < (x * y); ++i) { 
# 1623
for (k = 0; k < n; ++k) { 
# 1624
(output[(i * comp) + k]) = ((float)(pow((data[(i * comp) + k]) / (255.0F), stbi__l2h_gamma) * stbi__l2h_scale)); 
# 1625
}  
# 1626
if (k < comp) { (output[(i * comp) + k]) = ((data[(i * comp) + k]) / (255.0F)); }  
# 1627
}  
# 1628
free(data); 
# 1629
return output; 
# 1630
} 
# 1635
static stbi_uc *stbi__hdr_to_ldr(float *data, int x, int y, int comp) 
# 1636
{ 
# 1637
int i, k, n; 
# 1638
stbi_uc *output; 
# 1639
if (!data) { return __null; }  
# 1640 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
output = ((stbi_uc *)stbi__malloc_mad3(x, y, comp, 0)); 
# 1641
if (output == (__null)) 
# 1641 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
{ free(data); return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); 
# 1641 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 1643
if (comp & 1) { n = comp; } else { n = (comp - 1); }  
# 1644
for (i = 0; i < (x * y); ++i) { 
# 1645
for (k = 0; k < n; ++k) { 
# 1646
float z = (((float)pow((data[(i * comp) + k]) * stbi__h2l_scale_i, stbi__h2l_gamma_i)) * (255)) + (0.5F); 
# 1647
if (z < (0)) { z = (0); }  
# 1648
if (z > (255)) { z = (255); }  
# 1649
(output[(i * comp) + k]) = ((stbi_uc)((int)z)); 
# 1650
}  
# 1651
if (k < comp) { 
# 1652
float z = ((data[(i * comp) + k]) * (255)) + (0.5F); 
# 1653
if (z < (0)) { z = (0); }  
# 1654
if (z > (255)) { z = (255); }  
# 1655
(output[(i * comp) + k]) = ((stbi_uc)((int)z)); 
# 1656
}  
# 1657
}  
# 1658
free(data); 
# 1659
return output; 
# 1660
} 
# 1698 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
typedef 
# 1690
struct { 
# 1691
stbi_uc fast[1 << 9]; 
# 1693
stbi__uint16 code[256]; 
# 1694
stbi_uc values[256]; 
# 1695
stbi_uc size[257]; 
# 1696
unsigned maxcode[18]; 
# 1697
int delta[17]; 
# 1698
} stbi__huffman; 
# 1752
typedef 
# 1701
struct { 
# 1702
stbi__context *s; 
# 1703
stbi__huffman huff_dc[4]; 
# 1704
stbi__huffman huff_ac[4]; 
# 1705
stbi__uint16 dequant[4][64]; 
# 1706
stbi__int16 fast_ac[4][1 << 9]; 
# 1709
int img_h_max, img_v_max; 
# 1710
int img_mcu_x, img_mcu_y; 
# 1711
int img_mcu_w, img_mcu_h; 
# 1715
struct { 
# 1716
int id; 
# 1717
int h, v; 
# 1718
int tq; 
# 1719
int hd, ha; 
# 1720
int dc_pred; 
# 1722
int x, y, w2, h2; 
# 1723
stbi_uc *data; 
# 1724
void *raw_data, *raw_coeff; 
# 1725
stbi_uc *linebuf; 
# 1726
short *coeff; 
# 1727
int coeff_w, coeff_h; 
# 1728
} img_comp[4]; 
# 1730
stbi__uint32 code_buffer; 
# 1731
int code_bits; 
# 1732
unsigned char marker; 
# 1733
int nomore; 
# 1735
int progressive; 
# 1736
int spec_start; 
# 1737
int spec_end; 
# 1738
int succ_high; 
# 1739
int succ_low; 
# 1740
int eob_run; 
# 1741
int jfif; 
# 1742
int app14_color_transform; 
# 1743
int rgb; 
# 1745
int scan_n, order[4]; 
# 1746
int restart_interval, todo; 
# 1749
void (*idct_block_kernel)(stbi_uc * out, int out_stride, short  data[64]); 
# 1750
void (*YCbCr_to_RGB_kernel)(stbi_uc * out, const stbi_uc * y, const stbi_uc * pcb, const stbi_uc * pcr, int count, int step); 
# 1751
stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc * out, stbi_uc * in_near, stbi_uc * in_far, int w, int hs); 
# 1752
} stbi__jpeg; 
# 1754
static int stbi__build_huffman(stbi__huffman *h, int *count) 
# 1755
{ 
# 1756
int i, j, k = 0; 
# 1757
unsigned code; 
# 1759
for (i = 0; i < 16; ++i) { 
# 1760
for (j = 0; j < (count[i]); ++j) { 
# 1761
((h->size)[k++]) = ((stbi_uc)(i + 1)); }  }  
# 1762
((h->size)[k]) = (0); 
# 1765
code = (0); 
# 1766
k = 0; 
# 1767
for (j = 1; j <= 16; ++j) { 
# 1769
((h->delta)[j]) = (k - code); 
# 1770
if (((h->size)[k]) == j) { 
# 1771
while (((h->size)[k]) == j) { 
# 1772
((h->code)[k++]) = ((stbi__uint16)(code++)); }  
# 1773
if ((code - (1)) >= (1U << j)) { return stbi__err("bad code lengths"); }  
# 1774
}  
# 1776
((h->maxcode)[j]) = (code << (16 - j)); 
# 1777
code <<= 1; 
# 1778
}  
# 1779
((h->maxcode)[j]) = 4294967295U; 
# 1782
memset(h->fast, 255, 1 << 9); 
# 1783
for (i = 0; i < k; ++i) { 
# 1784
int s = (h->size)[i]; 
# 1785
if (s <= 9) { 
# 1786
int c = ((h->code)[i]) << (9 - s); 
# 1787
int m = 1 << (9 - s); 
# 1788
for (j = 0; j < m; ++j) { 
# 1789
((h->fast)[c + j]) = ((stbi_uc)i); 
# 1790
}  
# 1791
}  
# 1792
}  
# 1793
return 1; 
# 1794
} 
# 1798
static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h) 
# 1799
{ 
# 1800
int i; 
# 1801
for (i = 0; i < (1 << 9); ++i) { 
# 1802
stbi_uc fast = (h->fast)[i]; 
# 1803
(fast_ac[i]) = (0); 
# 1804
if (fast < 255) { 
# 1805
int rs = (h->values)[fast]; 
# 1806
int run = (rs >> 4) & 15; 
# 1807
int magbits = rs & 15; 
# 1808
int len = (h->size)[fast]; 
# 1810
if (magbits && ((len + magbits) <= 9)) { 
# 1812
int k = ((i << len) & ((1 << 9) - 1)) >> (9 - magbits); 
# 1813
int m = 1 << (magbits - 1); 
# 1814
if (k < m) { k += (((~0U) << magbits) + (1)); }  
# 1816
if ((k >= (-128)) && (k <= 127)) { 
# 1817
(fast_ac[i]) = ((stbi__int16)(((k * 256) + (run * 16)) + (len + magbits))); }  
# 1818
}  
# 1819
}  
# 1820
}  
# 1821
} 
# 1823
static void stbi__grow_buffer_unsafe(stbi__jpeg *j) 
# 1824
{ 
# 1825
do { 
# 1826
unsigned b = (j->nomore) ? 0 : (stbi__get8(j->s)); 
# 1827
if (b == (255)) { 
# 1828
int c = stbi__get8(j->s); 
# 1829
while (c == 255) { c = (stbi__get8(j->s)); }  
# 1830
if (c != 0) { 
# 1831
(j->marker) = ((unsigned char)c); 
# 1832
(j->nomore) = 1; 
# 1833
return; 
# 1834
}  
# 1835
}  
# 1836
(j->code_buffer) |= (b << (24 - (j->code_bits))); 
# 1837
(j->code_bits) += 8; 
# 1838
} while ((j->code_bits) <= 24); 
# 1839
} 
# 1842
static const stbi__uint32 stbi__bmask[17] = {(0), (1), (3), (7), (15), (31), (63), (127), (255), (511), (1023), (2047), (4095), (8191), (16383), (32767), (65535)}; 
# 1845
static inline int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h) 
# 1846
{ 
# 1847
unsigned temp; 
# 1848
int c, k; 
# 1850
if ((j->code_bits) < 16) { stbi__grow_buffer_unsafe(j); }  
# 1854
c = (((j->code_buffer) >> (32 - 9)) & ((1 << 9) - 1)); 
# 1855
k = ((h->fast)[c]); 
# 1856
if (k < 255) { 
# 1857
int s = (h->size)[k]; 
# 1858
if (s > (j->code_bits)) { 
# 1859
return -1; }  
# 1860
(j->code_buffer) <<= s; 
# 1861
(j->code_bits) -= s; 
# 1862
return (h->values)[k]; 
# 1863
}  
# 1871
temp = ((j->code_buffer) >> 16); 
# 1872
for (k = (9 + 1); ; ++k) { 
# 1873
if (temp < ((h->maxcode)[k])) { 
# 1874
break; }  }  
# 1875
if (k == 17) { 
# 1877
(j->code_bits) -= 16; 
# 1878
return -1; 
# 1879
}  
# 1881
if (k > (j->code_bits)) { 
# 1882
return -1; }  
# 1885
c = ((((j->code_buffer) >> (32 - k)) & (stbi__bmask[k])) + ((h->delta)[k])); 
# 1886 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((((j->code_buffer) >> (32 - ((h->size)[c]))) & (stbi__bmask[(h->size)[c]])) == ((h->code)[c]))) ? (void)0 : __assert_fail("(((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c]", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 1886, __extension__ __PRETTY_FUNCTION__); 
# 1889 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(j->code_bits) -= k; 
# 1890
(j->code_buffer) <<= k; 
# 1891
return (h->values)[c]; 
# 1892
} 
# 1895
static const int stbi__jbias[16] = {0, (-1), (-3), (-7), (-15), (-31), (-63), (-127), (-255), (-511), (-1023), (-2047), (-4095), (-8191), (-16383), (-32767)}; 
# 1899
static inline int stbi__extend_receive(stbi__jpeg *j, int n) 
# 1900
{ 
# 1901
unsigned k; 
# 1902
int sgn; 
# 1903
if ((j->code_bits) < n) { stbi__grow_buffer_unsafe(j); }  
# 1905
sgn = (((stbi__int32)(j->code_buffer)) >> 31); 
# 1906
k = (((j->code_buffer) << n) | ((j->code_buffer) >> (32 - n))); 
# 1907 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((n >= 0) && (n < ((int)(sizeof stbi__bmask / sizeof (*(stbi__bmask))))))) ? (void)0 : __assert_fail("n >= 0 && n < (int) (sizeof(stbi__bmask)/sizeof(*stbi__bmask))", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 1907, __extension__ __PRETTY_FUNCTION__); 
# 1908 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(j->code_buffer) = (k & (~(stbi__bmask[n]))); 
# 1909
k &= (stbi__bmask[n]); 
# 1910
(j->code_bits) -= n; 
# 1911
return k + ((stbi__jbias[n]) & (~sgn)); 
# 1912
} 
# 1915
static inline int stbi__jpeg_get_bits(stbi__jpeg *j, int n) 
# 1916
{ 
# 1917
unsigned k; 
# 1918
if ((j->code_bits) < n) { stbi__grow_buffer_unsafe(j); }  
# 1919
k = (((j->code_buffer) << n) | ((j->code_buffer) >> (32 - n))); 
# 1920
(j->code_buffer) = (k & (~(stbi__bmask[n]))); 
# 1921
k &= (stbi__bmask[n]); 
# 1922
(j->code_bits) -= n; 
# 1923
return k; 
# 1924
} 
# 1926
static inline int stbi__jpeg_get_bit(stbi__jpeg *j) 
# 1927
{ 
# 1928
unsigned k; 
# 1929
if ((j->code_bits) < 1) { stbi__grow_buffer_unsafe(j); }  
# 1930
k = (j->code_buffer); 
# 1931
(j->code_buffer) <<= 1; 
# 1932
--(j->code_bits); 
# 1933
return k & 2147483648U; 
# 1934
} 
# 1938
static const stbi_uc stbi__jpeg_dezigzag[64 + 15] = {(0), (1), (8), (16), (9), (2), (3), (10), (17), (24), (32), (25), (18), (11), (4), (5), (12), (19), (26), (33), (40), (48), (41), (34), (27), (20), (13), (6), (7), (14), (21), (28), (35), (42), (49), (56), (57), (50), (43), (36), (29), (22), (15), (23), (30), (37), (44), (51), (58), (59), (52), (45), (38), (31), (39), (46), (53), (60), (61), (54), (47), (55), (62), (63), (63), (63), (63), (63), (63), (63), (63), (63), (63), (63), (63), (63), (63), (63), (63)}; 
# 1954
static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant) 
# 1955
{ 
# 1956
int diff, dc, k; 
# 1957
int t; 
# 1959
if ((j->code_bits) < 16) { stbi__grow_buffer_unsafe(j); }  
# 1960
t = stbi__jpeg_huff_decode(j, hdc); 
# 1961
if (t < 0) { return stbi__err("bad huffman code"); }  
# 1964
memset(data, 0, (64) * sizeof (data[0])); 
# 1966
diff = ((t) ? stbi__extend_receive(j, t) : 0); 
# 1967
dc = ((((j->img_comp)[b]).dc_pred) + diff); 
# 1968
(((j->img_comp)[b]).dc_pred) = dc; 
# 1969
(data[0]) = ((short)(dc * (dequant[0]))); 
# 1972
k = 1; 
# 1973
do { 
# 1974
unsigned zig; 
# 1975
int c, r, s; 
# 1976
if ((j->code_bits) < 16) { stbi__grow_buffer_unsafe(j); }  
# 1977
c = (((j->code_buffer) >> (32 - 9)) & ((1 << 9) - 1)); 
# 1978
r = (fac[c]); 
# 1979
if (r) { 
# 1980
k += ((r >> 4) & 15); 
# 1981
s = (r & 15); 
# 1982
(j->code_buffer) <<= s; 
# 1983
(j->code_bits) -= s; 
# 1985
zig = (stbi__jpeg_dezigzag[k++]); 
# 1986
(data[zig]) = ((short)((r >> 8) * (dequant[zig]))); 
# 1987
} else { 
# 1988
int rs = stbi__jpeg_huff_decode(j, hac); 
# 1989
if (rs < 0) { return stbi__err("bad huffman code"); }  
# 1990
s = (rs & 15); 
# 1991
r = (rs >> 4); 
# 1992
if (s == 0) { 
# 1993
if (rs != 240) { break; }  
# 1994
k += 16; 
# 1995
} else { 
# 1996
k += r; 
# 1998
zig = (stbi__jpeg_dezigzag[k++]); 
# 1999
(data[zig]) = ((short)(stbi__extend_receive(j, s) * (dequant[zig]))); 
# 2000
}  
# 2001
}  
# 2002
} while (k < 64); 
# 2003
return 1; 
# 2004
} 
# 2006
static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b) 
# 2007
{ 
# 2008
int diff, dc; 
# 2009
int t; 
# 2010
if ((j->spec_end) != 0) { return stbi__err("can\'t merge dc and ac"); }  
# 2012
if ((j->code_bits) < 16) { stbi__grow_buffer_unsafe(j); }  
# 2014
if ((j->succ_high) == 0) { 
# 2016
memset(data, 0, (64) * sizeof (data[0])); 
# 2017
t = stbi__jpeg_huff_decode(j, hdc); 
# 2018
diff = ((t) ? stbi__extend_receive(j, t) : 0); 
# 2020
dc = ((((j->img_comp)[b]).dc_pred) + diff); 
# 2021
(((j->img_comp)[b]).dc_pred) = dc; 
# 2022
(data[0]) = ((short)(dc << (j->succ_low))); 
# 2023
} else { 
# 2025
if (stbi__jpeg_get_bit(j)) { 
# 2026
(data[0]) += ((short)(1 << (j->succ_low))); }  
# 2027
}  
# 2028
return 1; 
# 2029
} 
# 2033
static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac) 
# 2034
{ 
# 2035
int k; 
# 2036
if ((j->spec_start) == 0) { return stbi__err("can\'t merge dc and ac"); }  
# 2038
if ((j->succ_high) == 0) { 
# 2039
int shift = j->succ_low; 
# 2041
if (j->eob_run) { 
# 2042
--(j->eob_run); 
# 2043
return 1; 
# 2044
}  
# 2046
k = (j->spec_start); 
# 2047
do { 
# 2048
unsigned zig; 
# 2049
int c, r, s; 
# 2050
if ((j->code_bits) < 16) { stbi__grow_buffer_unsafe(j); }  
# 2051
c = (((j->code_buffer) >> (32 - 9)) & ((1 << 9) - 1)); 
# 2052
r = (fac[c]); 
# 2053
if (r) { 
# 2054
k += ((r >> 4) & 15); 
# 2055
s = (r & 15); 
# 2056
(j->code_buffer) <<= s; 
# 2057
(j->code_bits) -= s; 
# 2058
zig = (stbi__jpeg_dezigzag[k++]); 
# 2059
(data[zig]) = ((short)((r >> 8) << shift)); 
# 2060
} else { 
# 2061
int rs = stbi__jpeg_huff_decode(j, hac); 
# 2062
if (rs < 0) { return stbi__err("bad huffman code"); }  
# 2063
s = (rs & 15); 
# 2064
r = (rs >> 4); 
# 2065
if (s == 0) { 
# 2066
if (r < 15) { 
# 2067
(j->eob_run) = (1 << r); 
# 2068
if (r) { 
# 2069
(j->eob_run) += stbi__jpeg_get_bits(j, r); }  
# 2070
--(j->eob_run); 
# 2071
break; 
# 2072
}  
# 2073
k += 16; 
# 2074
} else { 
# 2075
k += r; 
# 2076
zig = (stbi__jpeg_dezigzag[k++]); 
# 2077
(data[zig]) = ((short)(stbi__extend_receive(j, s) << shift)); 
# 2078
}  
# 2079
}  
# 2080
} while (k <= (j->spec_end)); 
# 2081
} else { 
# 2084
short bit = (short)(1 << (j->succ_low)); 
# 2086
if (j->eob_run) { 
# 2087
--(j->eob_run); 
# 2088
for (k = (j->spec_start); k <= (j->spec_end); ++k) { 
# 2089
short *p = &(data[stbi__jpeg_dezigzag[k]]); 
# 2090
if ((*p) != 0) { 
# 2091
if (stbi__jpeg_get_bit(j)) { 
# 2092
if (((*p) & bit) == 0) { 
# 2093
if ((*p) > 0) { 
# 2094
(*p) += bit; } else { 
# 2096
(*p) -= bit; }  
# 2097
}  }  }  
# 2098
}  
# 2099
} else { 
# 2100
k = (j->spec_start); 
# 2101
do { 
# 2102
int r, s; 
# 2103
int rs = stbi__jpeg_huff_decode(j, hac); 
# 2104
if (rs < 0) { return stbi__err("bad huffman code"); }  
# 2105
s = (rs & 15); 
# 2106
r = (rs >> 4); 
# 2107
if (s == 0) { 
# 2108
if (r < 15) { 
# 2109
(j->eob_run) = ((1 << r) - 1); 
# 2110
if (r) { 
# 2111
(j->eob_run) += stbi__jpeg_get_bits(j, r); }  
# 2112
r = 64; 
# 2113
} else { 
# 2117
}  
# 2118
} else { 
# 2119
if (s != 1) { return stbi__err("bad huffman code"); }  
# 2121
if (stbi__jpeg_get_bit(j)) { 
# 2122
s = bit; } else { 
# 2124
s = (-bit); }  
# 2125
}  
# 2128
while (k <= (j->spec_end)) { 
# 2129
short *p = &(data[stbi__jpeg_dezigzag[k++]]); 
# 2130
if ((*p) != 0) { 
# 2131
if (stbi__jpeg_get_bit(j)) { 
# 2132
if (((*p) & bit) == 0) { 
# 2133
if ((*p) > 0) { 
# 2134
(*p) += bit; } else { 
# 2136
(*p) -= bit; }  
# 2137
}  }  
# 2138
} else { 
# 2139
if (r == 0) { 
# 2140
(*p) = ((short)s); 
# 2141
break; 
# 2142
}  
# 2143
--r; 
# 2144
}  
# 2145
}  
# 2146
} while (k <= (j->spec_end)); 
# 2147
}  
# 2148
}  
# 2149
return 1; 
# 2150
} 
# 2153
static inline stbi_uc stbi__clamp(int x) 
# 2154
{ 
# 2156
if (((unsigned)x) > (255)) { 
# 2157
if (x < 0) { return 0; }  
# 2158
if (x > 255) { return 255; }  
# 2159
}  
# 2160
return (stbi_uc)x; 
# 2161
} 
# 2204 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64]) 
# 2205
{ 
# 2206
int i, val[64], *v = val; 
# 2207
stbi_uc *o; 
# 2208
short *d = data; 
# 2211
for (i = 0; i < 8; ((++i), (++d)), (++v)) { 
# 2213
if (((d[8]) == 0) && ((d[16]) == 0) && ((d[24]) == 0) && ((d[32]) == 0) && ((d[40]) == 0) && ((d[48]) == 0) && ((d[56]) == 0)) 
# 2214
{ 
# 2219
int dcterm = (d[0]) * 4; 
# 2220
(v[0]) = ((v[8]) = ((v[16]) = ((v[24]) = ((v[32]) = ((v[40]) = ((v[48]) = ((v[56]) = dcterm))))))); 
# 2221
} else { 
# 2222
int t0, t1, t2, t3, p1, p2, p3, p4, p5, x0, x1, x2, x3; p2 = (d[16]); p3 = (d[48]); p1 = ((p2 + p3) * ((int)(((0.5411961F) * (4096)) + (0.5)))); t2 = (p1 + (p3 * ((int)(((-(1.847759F)) * (4096)) + (0.5))))); t3 = (p1 + (p2 * ((int)(((0.76536685F) * (4096)) + (0.5))))); p2 = (d[0]); p3 = (d[32]); t0 = ((p2 + p3) * 4096); t1 = ((p2 - p3) * 4096); x0 = (t0 + t3); x3 = (t0 - t3); x1 = (t1 + t2); x2 = (t1 - t2); t0 = (d[56]); t1 = (d[40]); t2 = (d[24]); t3 = (d[8]); p3 = (t0 + t2); p4 = (t1 + t3); p1 = (t0 + t3); p2 = (t1 + t2); p5 = ((p3 + p4) * ((int)(((1.1758755F) * (4096)) + (0.5)))); t0 = (t0 * ((int)(((0.29863134F) * (4096)) + (0.5)))); t1 = (t1 * ((int)(((2.05312F) * (4096)) + (0.5)))); t2 = (t2 * ((int)(((3.072711F) * (4096)) + (0.5)))); t3 = (t3 * ((int)(((1.5013211F) * (4096)) + (0.5)))); p1 = (p5 + (p1 * ((int)(((-(0.8999762F)) * (4096)) + (0.5))))); p2 = (p5 + (p2 * ((int)(((-(2.5629156F)) * (4096)) + (0.5))))); p3 = (p3 * ((int)(((-(1.9615705F)) * (4096)) + (0.5)))); p4 = (p4 * ((int)(((-(0.39018065F)) * (4096)) + (0.5)))); t3 += (p1 + p4); t2 += (p2 + p3); t1 += (p2 + p4); t0 += (p1 + p3); 
# 2225
x0 += 512; x1 += 512; x2 += 512; x3 += 512; 
# 2226
(v[0]) = ((x0 + t3) >> 10); 
# 2227
(v[56]) = ((x0 - t3) >> 10); 
# 2228
(v[8]) = ((x1 + t2) >> 10); 
# 2229
(v[48]) = ((x1 - t2) >> 10); 
# 2230
(v[16]) = ((x2 + t1) >> 10); 
# 2231
(v[40]) = ((x2 - t1) >> 10); 
# 2232
(v[24]) = ((x3 + t0) >> 10); 
# 2233
(v[32]) = ((x3 - t0) >> 10); 
# 2234
}  
# 2235
}  
# 2237
for (((i = 0), (v = val)), (o = out); i < 8; ((++i), (v += 8)), (o += out_stride)) { 
# 2239
int t0, t1, t2, t3, p1, p2, p3, p4, p5, x0, x1, x2, x3; p2 = (v[2]); p3 = (v[6]); p1 = ((p2 + p3) * ((int)(((0.5411961F) * (4096)) + (0.5)))); t2 = (p1 + (p3 * ((int)(((-(1.847759F)) * (4096)) + (0.5))))); t3 = (p1 + (p2 * ((int)(((0.76536685F) * (4096)) + (0.5))))); p2 = (v[0]); p3 = (v[4]); t0 = ((p2 + p3) * 4096); t1 = ((p2 - p3) * 4096); x0 = (t0 + t3); x3 = (t0 - t3); x1 = (t1 + t2); x2 = (t1 - t2); t0 = (v[7]); t1 = (v[5]); t2 = (v[3]); t3 = (v[1]); p3 = (t0 + t2); p4 = (t1 + t3); p1 = (t0 + t3); p2 = (t1 + t2); p5 = ((p3 + p4) * ((int)(((1.1758755F) * (4096)) + (0.5)))); t0 = (t0 * ((int)(((0.29863134F) * (4096)) + (0.5)))); t1 = (t1 * ((int)(((2.05312F) * (4096)) + (0.5)))); t2 = (t2 * ((int)(((3.072711F) * (4096)) + (0.5)))); t3 = (t3 * ((int)(((1.5013211F) * (4096)) + (0.5)))); p1 = (p5 + (p1 * ((int)(((-(0.8999762F)) * (4096)) + (0.5))))); p2 = (p5 + (p2 * ((int)(((-(2.5629156F)) * (4096)) + (0.5))))); p3 = (p3 * ((int)(((-(1.9615705F)) * (4096)) + (0.5)))); p4 = (p4 * ((int)(((-(0.39018065F)) * (4096)) + (0.5)))); t3 += (p1 + p4); t2 += (p2 + p3); t1 += (p2 + p4); t0 += (p1 + p3); 
# 2246
x0 += (65536 + (128 << 17)); 
# 2247
x1 += (65536 + (128 << 17)); 
# 2248
x2 += (65536 + (128 << 17)); 
# 2249
x3 += (65536 + (128 << 17)); 
# 2252
(o[0]) = stbi__clamp((x0 + t3) >> 17); 
# 2253
(o[7]) = stbi__clamp((x0 - t3) >> 17); 
# 2254
(o[1]) = stbi__clamp((x1 + t2) >> 17); 
# 2255
(o[6]) = stbi__clamp((x1 - t2) >> 17); 
# 2256
(o[2]) = stbi__clamp((x2 + t1) >> 17); 
# 2257
(o[5]) = stbi__clamp((x2 - t1) >> 17); 
# 2258
(o[3]) = stbi__clamp((x3 + t0) >> 17); 
# 2259
(o[4]) = stbi__clamp((x3 - t0) >> 17); 
# 2260
}  
# 2261
} 
# 2267
static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64]) 
# 2268
{ 
# 2270
__m128i row0, row1, row2, row3, row4, row5, row6, row7; 
# 2271
__m128i tmp; 
# 2352 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
__m128i rot0_0 = _mm_setr_epi16((int)(((0.5411961F) * (4096)) + (0.5)), ((int)(((0.5411961F) * (4096)) + (0.5))) + ((int)(((-(1.847759F)) * (4096)) + (0.5))), (int)(((0.5411961F) * (4096)) + (0.5)), ((int)(((0.5411961F) * (4096)) + (0.5))) + ((int)(((-(1.847759F)) * (4096)) + (0.5))), (int)(((0.5411961F) * (4096)) + (0.5)), ((int)(((0.5411961F) * (4096)) + (0.5))) + ((int)(((-(1.847759F)) * (4096)) + (0.5))), (int)(((0.5411961F) * (4096)) + (0.5)), ((int)(((0.5411961F) * (4096)) + (0.5))) + ((int)(((-(1.847759F)) * (4096)) + (0.5)))); 
# 2353
__m128i rot0_1 = _mm_setr_epi16(((int)(((0.5411961F) * (4096)) + (0.5))) + ((int)(((0.76536685F) * (4096)) + (0.5))), (int)(((0.5411961F) * (4096)) + (0.5)), ((int)(((0.5411961F) * (4096)) + (0.5))) + ((int)(((0.76536685F) * (4096)) + (0.5))), (int)(((0.5411961F) * (4096)) + (0.5)), ((int)(((0.5411961F) * (4096)) + (0.5))) + ((int)(((0.76536685F) * (4096)) + (0.5))), (int)(((0.5411961F) * (4096)) + (0.5)), ((int)(((0.5411961F) * (4096)) + (0.5))) + ((int)(((0.76536685F) * (4096)) + (0.5))), (int)(((0.5411961F) * (4096)) + (0.5))); 
# 2354
__m128i rot1_0 = _mm_setr_epi16(((int)(((1.1758755F) * (4096)) + (0.5))) + ((int)(((-(0.8999762F)) * (4096)) + (0.5))), (int)(((1.1758755F) * (4096)) + (0.5)), ((int)(((1.1758755F) * (4096)) + (0.5))) + ((int)(((-(0.8999762F)) * (4096)) + (0.5))), (int)(((1.1758755F) * (4096)) + (0.5)), ((int)(((1.1758755F) * (4096)) + (0.5))) + ((int)(((-(0.8999762F)) * (4096)) + (0.5))), (int)(((1.1758755F) * (4096)) + (0.5)), ((int)(((1.1758755F) * (4096)) + (0.5))) + ((int)(((-(0.8999762F)) * (4096)) + (0.5))), (int)(((1.1758755F) * (4096)) + (0.5))); 
# 2355
__m128i rot1_1 = _mm_setr_epi16((int)(((1.1758755F) * (4096)) + (0.5)), ((int)(((1.1758755F) * (4096)) + (0.5))) + ((int)(((-(2.5629156F)) * (4096)) + (0.5))), (int)(((1.1758755F) * (4096)) + (0.5)), ((int)(((1.1758755F) * (4096)) + (0.5))) + ((int)(((-(2.5629156F)) * (4096)) + (0.5))), (int)(((1.1758755F) * (4096)) + (0.5)), ((int)(((1.1758755F) * (4096)) + (0.5))) + ((int)(((-(2.5629156F)) * (4096)) + (0.5))), (int)(((1.1758755F) * (4096)) + (0.5)), ((int)(((1.1758755F) * (4096)) + (0.5))) + ((int)(((-(2.5629156F)) * (4096)) + (0.5)))); 
# 2356
__m128i rot2_0 = _mm_setr_epi16(((int)(((-(1.9615705F)) * (4096)) + (0.5))) + ((int)(((0.29863134F) * (4096)) + (0.5))), (int)(((-(1.9615705F)) * (4096)) + (0.5)), ((int)(((-(1.9615705F)) * (4096)) + (0.5))) + ((int)(((0.29863134F) * (4096)) + (0.5))), (int)(((-(1.9615705F)) * (4096)) + (0.5)), ((int)(((-(1.9615705F)) * (4096)) + (0.5))) + ((int)(((0.29863134F) * (4096)) + (0.5))), (int)(((-(1.9615705F)) * (4096)) + (0.5)), ((int)(((-(1.9615705F)) * (4096)) + (0.5))) + ((int)(((0.29863134F) * (4096)) + (0.5))), (int)(((-(1.9615705F)) * (4096)) + (0.5))); 
# 2357
__m128i rot2_1 = _mm_setr_epi16((int)(((-(1.9615705F)) * (4096)) + (0.5)), ((int)(((-(1.9615705F)) * (4096)) + (0.5))) + ((int)(((3.072711F) * (4096)) + (0.5))), (int)(((-(1.9615705F)) * (4096)) + (0.5)), ((int)(((-(1.9615705F)) * (4096)) + (0.5))) + ((int)(((3.072711F) * (4096)) + (0.5))), (int)(((-(1.9615705F)) * (4096)) + (0.5)), ((int)(((-(1.9615705F)) * (4096)) + (0.5))) + ((int)(((3.072711F) * (4096)) + (0.5))), (int)(((-(1.9615705F)) * (4096)) + (0.5)), ((int)(((-(1.9615705F)) * (4096)) + (0.5))) + ((int)(((3.072711F) * (4096)) + (0.5)))); 
# 2358
__m128i rot3_0 = _mm_setr_epi16(((int)(((-(0.39018065F)) * (4096)) + (0.5))) + ((int)(((2.05312F) * (4096)) + (0.5))), (int)(((-(0.39018065F)) * (4096)) + (0.5)), ((int)(((-(0.39018065F)) * (4096)) + (0.5))) + ((int)(((2.05312F) * (4096)) + (0.5))), (int)(((-(0.39018065F)) * (4096)) + (0.5)), ((int)(((-(0.39018065F)) * (4096)) + (0.5))) + ((int)(((2.05312F) * (4096)) + (0.5))), (int)(((-(0.39018065F)) * (4096)) + (0.5)), ((int)(((-(0.39018065F)) * (4096)) + (0.5))) + ((int)(((2.05312F) * (4096)) + (0.5))), (int)(((-(0.39018065F)) * (4096)) + (0.5))); 
# 2359
__m128i rot3_1 = _mm_setr_epi16((int)(((-(0.39018065F)) * (4096)) + (0.5)), ((int)(((-(0.39018065F)) * (4096)) + (0.5))) + ((int)(((1.5013211F) * (4096)) + (0.5))), (int)(((-(0.39018065F)) * (4096)) + (0.5)), ((int)(((-(0.39018065F)) * (4096)) + (0.5))) + ((int)(((1.5013211F) * (4096)) + (0.5))), (int)(((-(0.39018065F)) * (4096)) + (0.5)), ((int)(((-(0.39018065F)) * (4096)) + (0.5))) + ((int)(((1.5013211F) * (4096)) + (0.5))), (int)(((-(0.39018065F)) * (4096)) + (0.5)), ((int)(((-(0.39018065F)) * (4096)) + (0.5))) + ((int)(((1.5013211F) * (4096)) + (0.5)))); 
# 2362
__m128i bias_0 = _mm_set1_epi32(512); 
# 2363
__m128i bias_1 = _mm_set1_epi32(65536 + (128 << 17)); 
# 2366
row0 = _mm_load_si128((const __m128i *)(data + (0 * 8))); 
# 2367
row1 = _mm_load_si128((const __m128i *)(data + (1 * 8))); 
# 2368
row2 = _mm_load_si128((const __m128i *)(data + (2 * 8))); 
# 2369
row3 = _mm_load_si128((const __m128i *)(data + (3 * 8))); 
# 2370
row4 = _mm_load_si128((const __m128i *)(data + (4 * 8))); 
# 2371
row5 = _mm_load_si128((const __m128i *)(data + (5 * 8))); 
# 2372
row6 = _mm_load_si128((const __m128i *)(data + (6 * 8))); 
# 2373
row7 = _mm_load_si128((const __m128i *)(data + (7 * 8))); 
# 2376
{ __m128i rot0_0lo = _mm_unpacklo_epi16(row2, row6); __m128i rot0_0hi = _mm_unpackhi_epi16(row2, row6); __m128i t2e_l = _mm_madd_epi16(rot0_0lo, rot0_0); __m128i t2e_h = _mm_madd_epi16(rot0_0hi, rot0_0); __m128i t3e_l = _mm_madd_epi16(rot0_0lo, rot0_1); __m128i t3e_h = _mm_madd_epi16(rot0_0hi, rot0_1); __m128i sum04 = _mm_add_epi16(row0, row4); __m128i dif04 = _mm_sub_epi16(row0, row4); __m128i t0e_l = _mm_srai_epi32(_mm_unpacklo_epi16(_mm_setzero_si128(), sum04), 4); __m128i t0e_h = _mm_srai_epi32(_mm_unpackhi_epi16(_mm_setzero_si128(), sum04), 4); __m128i t1e_l = _mm_srai_epi32(_mm_unpacklo_epi16(_mm_setzero_si128(), dif04), 4); __m128i t1e_h = _mm_srai_epi32(_mm_unpackhi_epi16(_mm_setzero_si128(), dif04), 4); __m128i x0_l = _mm_add_epi32(t0e_l, t3e_l); __m128i x0_h = _mm_add_epi32(t0e_h, t3e_h); __m128i x3_l = _mm_sub_epi32(t0e_l, t3e_l); __m128i x3_h = _mm_sub_epi32(t0e_h, t3e_h); __m128i x1_l = _mm_add_epi32(t1e_l, t2e_l); __m128i x1_h = _mm_add_epi32(t1e_h, t2e_h); __m128i x2_l = _mm_sub_epi32(t1e_l, t2e_l); __m128i x2_h = _mm_sub_epi32(t1e_h, t2e_h); __m128i rot2_0lo = _mm_unpacklo_epi16(row7, row3); __m128i rot2_0hi = _mm_unpackhi_epi16(row7, row3); __m128i y0o_l = _mm_madd_epi16(rot2_0lo, rot2_0); __m128i y0o_h = _mm_madd_epi16(rot2_0hi, rot2_0); __m128i y2o_l = _mm_madd_epi16(rot2_0lo, rot2_1); __m128i y2o_h = _mm_madd_epi16(rot2_0hi, rot2_1); __m128i rot3_0lo = _mm_unpacklo_epi16(row5, row1); __m128i rot3_0hi = _mm_unpackhi_epi16(row5, row1); __m128i y1o_l = _mm_madd_epi16(rot3_0lo, rot3_0); __m128i y1o_h = _mm_madd_epi16(rot3_0hi, rot3_0); __m128i y3o_l = _mm_madd_epi16(rot3_0lo, rot3_1); __m128i y3o_h = _mm_madd_epi16(rot3_0hi, rot3_1); __m128i sum17 = _mm_add_epi16(row1, row7); __m128i sum35 = _mm_add_epi16(row3, row5); __m128i rot1_0lo = _mm_unpacklo_epi16(sum17, sum35); __m128i rot1_0hi = _mm_unpackhi_epi16(sum17, sum35); __m128i y4o_l = _mm_madd_epi16(rot1_0lo, rot1_0); __m128i y4o_h = _mm_madd_epi16(rot1_0hi, rot1_0); __m128i y5o_l = _mm_madd_epi16(rot1_0lo, rot1_1); __m128i y5o_h = _mm_madd_epi16(rot1_0hi, rot1_1); __m128i x4_l = _mm_add_epi32(y0o_l, y4o_l); __m128i x4_h = _mm_add_epi32(y0o_h, y4o_h); __m128i x5_l = _mm_add_epi32(y1o_l, y5o_l); __m128i x5_h = _mm_add_epi32(y1o_h, y5o_h); __m128i x6_l = _mm_add_epi32(y2o_l, y5o_l); __m128i x6_h = _mm_add_epi32(y2o_h, y5o_h); __m128i x7_l = _mm_add_epi32(y3o_l, y4o_l); __m128i x7_h = _mm_add_epi32(y3o_h, y4o_h); { __m128i abiased_l = _mm_add_epi32(x0_l, bias_0); __m128i abiased_h = _mm_add_epi32(x0_h, bias_0); __m128i sum_l = _mm_add_epi32(abiased_l, x7_l); __m128i sum_h = _mm_add_epi32(abiased_h, x7_h); __m128i dif_l = _mm_sub_epi32(abiased_l, x7_l); __m128i dif_h = _mm_sub_epi32(abiased_h, x7_h); row0 = _mm_packs_epi32(_mm_srai_epi32(sum_l, 10), _mm_srai_epi32(sum_h, 10)); row7 = _mm_packs_epi32(_mm_srai_epi32(dif_l, 10), _mm_srai_epi32(dif_h, 10)); } ; { __m128i abiased_l = _mm_add_epi32(x1_l, bias_0); __m128i abiased_h = _mm_add_epi32(x1_h, bias_0); __m128i sum_l = _mm_add_epi32(abiased_l, x6_l); __m128i sum_h = _mm_add_epi32(abiased_h, x6_h); __m128i dif_l = _mm_sub_epi32(abiased_l, x6_l); __m128i dif_h = _mm_sub_epi32(abiased_h, x6_h); row1 = _mm_packs_epi32(_mm_srai_epi32(sum_l, 10), _mm_srai_epi32(sum_h, 10)); row6 = _mm_packs_epi32(_mm_srai_epi32(dif_l, 10), _mm_srai_epi32(dif_h, 10)); } ; { __m128i abiased_l = _mm_add_epi32(x2_l, bias_0); __m128i abiased_h = _mm_add_epi32(x2_h, bias_0); __m128i sum_l = _mm_add_epi32(abiased_l, x5_l); __m128i sum_h = _mm_add_epi32(abiased_h, x5_h); __m128i dif_l = _mm_sub_epi32(abiased_l, x5_l); __m128i dif_h = _mm_sub_epi32(abiased_h, x5_h); row2 = _mm_packs_epi32(_mm_srai_epi32(sum_l, 10), _mm_srai_epi32(sum_h, 10)); row5 = _mm_packs_epi32(_mm_srai_epi32(dif_l, 10), _mm_srai_epi32(dif_h, 10)); } ; { __m128i abiased_l = _mm_add_epi32(x3_l, bias_0); __m128i abiased_h = _mm_add_epi32(x3_h, bias_0); __m128i sum_l = _mm_add_epi32(abiased_l, x4_l); __m128i sum_h = _mm_add_epi32(abiased_h, x4_h); __m128i dif_l = _mm_sub_epi32(abiased_l, x4_l); __m128i dif_h = _mm_sub_epi32(abiased_h, x4_h); row3 = _mm_packs_epi32(_mm_srai_epi32(sum_l, 10), _mm_srai_epi32(sum_h, 10)); row4 = _mm_packs_epi32(_mm_srai_epi32(dif_l, 10), _mm_srai_epi32(dif_h, 10)); } ; } ; 
# 2378
{ 
# 2380
tmp = row0; row0 = _mm_unpacklo_epi16(row0, row4); row4 = _mm_unpackhi_epi16(tmp, row4); 
# 2381
tmp = row1; row1 = _mm_unpacklo_epi16(row1, row5); row5 = _mm_unpackhi_epi16(tmp, row5); 
# 2382
tmp = row2; row2 = _mm_unpacklo_epi16(row2, row6); row6 = _mm_unpackhi_epi16(tmp, row6); 
# 2383
tmp = row3; row3 = _mm_unpacklo_epi16(row3, row7); row7 = _mm_unpackhi_epi16(tmp, row7); 
# 2386
tmp = row0; row0 = _mm_unpacklo_epi16(row0, row2); row2 = _mm_unpackhi_epi16(tmp, row2); 
# 2387
tmp = row1; row1 = _mm_unpacklo_epi16(row1, row3); row3 = _mm_unpackhi_epi16(tmp, row3); 
# 2388
tmp = row4; row4 = _mm_unpacklo_epi16(row4, row6); row6 = _mm_unpackhi_epi16(tmp, row6); 
# 2389
tmp = row5; row5 = _mm_unpacklo_epi16(row5, row7); row7 = _mm_unpackhi_epi16(tmp, row7); 
# 2392
tmp = row0; row0 = _mm_unpacklo_epi16(row0, row1); row1 = _mm_unpackhi_epi16(tmp, row1); 
# 2393
tmp = row2; row2 = _mm_unpacklo_epi16(row2, row3); row3 = _mm_unpackhi_epi16(tmp, row3); 
# 2394
tmp = row4; row4 = _mm_unpacklo_epi16(row4, row5); row5 = _mm_unpackhi_epi16(tmp, row5); 
# 2395
tmp = row6; row6 = _mm_unpacklo_epi16(row6, row7); row7 = _mm_unpackhi_epi16(tmp, row7); 
# 2396
} 
# 2399
{ __m128i rot0_0lo = _mm_unpacklo_epi16(row2, row6); __m128i rot0_0hi = _mm_unpackhi_epi16(row2, row6); __m128i t2e_l = _mm_madd_epi16(rot0_0lo, rot0_0); __m128i t2e_h = _mm_madd_epi16(rot0_0hi, rot0_0); __m128i t3e_l = _mm_madd_epi16(rot0_0lo, rot0_1); __m128i t3e_h = _mm_madd_epi16(rot0_0hi, rot0_1); __m128i sum04 = _mm_add_epi16(row0, row4); __m128i dif04 = _mm_sub_epi16(row0, row4); __m128i t0e_l = _mm_srai_epi32(_mm_unpacklo_epi16(_mm_setzero_si128(), sum04), 4); __m128i t0e_h = _mm_srai_epi32(_mm_unpackhi_epi16(_mm_setzero_si128(), sum04), 4); __m128i t1e_l = _mm_srai_epi32(_mm_unpacklo_epi16(_mm_setzero_si128(), dif04), 4); __m128i t1e_h = _mm_srai_epi32(_mm_unpackhi_epi16(_mm_setzero_si128(), dif04), 4); __m128i x0_l = _mm_add_epi32(t0e_l, t3e_l); __m128i x0_h = _mm_add_epi32(t0e_h, t3e_h); __m128i x3_l = _mm_sub_epi32(t0e_l, t3e_l); __m128i x3_h = _mm_sub_epi32(t0e_h, t3e_h); __m128i x1_l = _mm_add_epi32(t1e_l, t2e_l); __m128i x1_h = _mm_add_epi32(t1e_h, t2e_h); __m128i x2_l = _mm_sub_epi32(t1e_l, t2e_l); __m128i x2_h = _mm_sub_epi32(t1e_h, t2e_h); __m128i rot2_0lo = _mm_unpacklo_epi16(row7, row3); __m128i rot2_0hi = _mm_unpackhi_epi16(row7, row3); __m128i y0o_l = _mm_madd_epi16(rot2_0lo, rot2_0); __m128i y0o_h = _mm_madd_epi16(rot2_0hi, rot2_0); __m128i y2o_l = _mm_madd_epi16(rot2_0lo, rot2_1); __m128i y2o_h = _mm_madd_epi16(rot2_0hi, rot2_1); __m128i rot3_0lo = _mm_unpacklo_epi16(row5, row1); __m128i rot3_0hi = _mm_unpackhi_epi16(row5, row1); __m128i y1o_l = _mm_madd_epi16(rot3_0lo, rot3_0); __m128i y1o_h = _mm_madd_epi16(rot3_0hi, rot3_0); __m128i y3o_l = _mm_madd_epi16(rot3_0lo, rot3_1); __m128i y3o_h = _mm_madd_epi16(rot3_0hi, rot3_1); __m128i sum17 = _mm_add_epi16(row1, row7); __m128i sum35 = _mm_add_epi16(row3, row5); __m128i rot1_0lo = _mm_unpacklo_epi16(sum17, sum35); __m128i rot1_0hi = _mm_unpackhi_epi16(sum17, sum35); __m128i y4o_l = _mm_madd_epi16(rot1_0lo, rot1_0); __m128i y4o_h = _mm_madd_epi16(rot1_0hi, rot1_0); __m128i y5o_l = _mm_madd_epi16(rot1_0lo, rot1_1); __m128i y5o_h = _mm_madd_epi16(rot1_0hi, rot1_1); __m128i x4_l = _mm_add_epi32(y0o_l, y4o_l); __m128i x4_h = _mm_add_epi32(y0o_h, y4o_h); __m128i x5_l = _mm_add_epi32(y1o_l, y5o_l); __m128i x5_h = _mm_add_epi32(y1o_h, y5o_h); __m128i x6_l = _mm_add_epi32(y2o_l, y5o_l); __m128i x6_h = _mm_add_epi32(y2o_h, y5o_h); __m128i x7_l = _mm_add_epi32(y3o_l, y4o_l); __m128i x7_h = _mm_add_epi32(y3o_h, y4o_h); { __m128i abiased_l = _mm_add_epi32(x0_l, bias_1); __m128i abiased_h = _mm_add_epi32(x0_h, bias_1); __m128i sum_l = _mm_add_epi32(abiased_l, x7_l); __m128i sum_h = _mm_add_epi32(abiased_h, x7_h); __m128i dif_l = _mm_sub_epi32(abiased_l, x7_l); __m128i dif_h = _mm_sub_epi32(abiased_h, x7_h); row0 = _mm_packs_epi32(_mm_srai_epi32(sum_l, 17), _mm_srai_epi32(sum_h, 17)); row7 = _mm_packs_epi32(_mm_srai_epi32(dif_l, 17), _mm_srai_epi32(dif_h, 17)); } ; { __m128i abiased_l = _mm_add_epi32(x1_l, bias_1); __m128i abiased_h = _mm_add_epi32(x1_h, bias_1); __m128i sum_l = _mm_add_epi32(abiased_l, x6_l); __m128i sum_h = _mm_add_epi32(abiased_h, x6_h); __m128i dif_l = _mm_sub_epi32(abiased_l, x6_l); __m128i dif_h = _mm_sub_epi32(abiased_h, x6_h); row1 = _mm_packs_epi32(_mm_srai_epi32(sum_l, 17), _mm_srai_epi32(sum_h, 17)); row6 = _mm_packs_epi32(_mm_srai_epi32(dif_l, 17), _mm_srai_epi32(dif_h, 17)); } ; { __m128i abiased_l = _mm_add_epi32(x2_l, bias_1); __m128i abiased_h = _mm_add_epi32(x2_h, bias_1); __m128i sum_l = _mm_add_epi32(abiased_l, x5_l); __m128i sum_h = _mm_add_epi32(abiased_h, x5_h); __m128i dif_l = _mm_sub_epi32(abiased_l, x5_l); __m128i dif_h = _mm_sub_epi32(abiased_h, x5_h); row2 = _mm_packs_epi32(_mm_srai_epi32(sum_l, 17), _mm_srai_epi32(sum_h, 17)); row5 = _mm_packs_epi32(_mm_srai_epi32(dif_l, 17), _mm_srai_epi32(dif_h, 17)); } ; { __m128i abiased_l = _mm_add_epi32(x3_l, bias_1); __m128i abiased_h = _mm_add_epi32(x3_h, bias_1); __m128i sum_l = _mm_add_epi32(abiased_l, x4_l); __m128i sum_h = _mm_add_epi32(abiased_h, x4_h); __m128i dif_l = _mm_sub_epi32(abiased_l, x4_l); __m128i dif_h = _mm_sub_epi32(abiased_h, x4_h); row3 = _mm_packs_epi32(_mm_srai_epi32(sum_l, 17), _mm_srai_epi32(sum_h, 17)); row4 = _mm_packs_epi32(_mm_srai_epi32(dif_l, 17), _mm_srai_epi32(dif_h, 17)); } ; } ; 
# 2401
{ 
# 2403
__m128i p0 = _mm_packus_epi16(row0, row1); 
# 2404
__m128i p1 = _mm_packus_epi16(row2, row3); 
# 2405
__m128i p2 = _mm_packus_epi16(row4, row5); 
# 2406
__m128i p3 = _mm_packus_epi16(row6, row7); 
# 2409
tmp = p0; p0 = _mm_unpacklo_epi8(p0, p2); p2 = _mm_unpackhi_epi8(tmp, p2); 
# 2410
tmp = p1; p1 = _mm_unpacklo_epi8(p1, p3); p3 = _mm_unpackhi_epi8(tmp, p3); 
# 2413
tmp = p0; p0 = _mm_unpacklo_epi8(p0, p1); p1 = _mm_unpackhi_epi8(tmp, p1); 
# 2414
tmp = p2; p2 = _mm_unpacklo_epi8(p2, p3); p3 = _mm_unpackhi_epi8(tmp, p3); 
# 2417
tmp = p0; p0 = _mm_unpacklo_epi8(p0, p2); p2 = _mm_unpackhi_epi8(tmp, p2); 
# 2418
tmp = p1; p1 = _mm_unpacklo_epi8(p1, p3); p3 = _mm_unpackhi_epi8(tmp, p3); 
# 2421
_mm_storel_epi64((__m128i *)out, p0); out += out_stride; 
# 2422
_mm_storel_epi64((__m128i *)out, (__m128i)__builtin_ia32_pshufd((__v4si)((__m128i)p0), (int)78)); 
# 2422 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
out += out_stride; 
# 2423
_mm_storel_epi64((__m128i *)out, p2); out += out_stride; 
# 2424
_mm_storel_epi64((__m128i *)out, (__m128i)__builtin_ia32_pshufd((__v4si)((__m128i)p2), (int)78)); 
# 2424 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
out += out_stride; 
# 2425
_mm_storel_epi64((__m128i *)out, p1); out += out_stride; 
# 2426
_mm_storel_epi64((__m128i *)out, (__m128i)__builtin_ia32_pshufd((__v4si)((__m128i)p1), (int)78)); 
# 2426 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
out += out_stride; 
# 2427
_mm_storel_epi64((__m128i *)out, p3); out += out_stride; 
# 2428
_mm_storel_epi64((__m128i *)out, (__m128i)__builtin_ia32_pshufd((__v4si)((__m128i)p3), (int)78)); 
# 2429 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
} 
# 2440 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
} 
# 2656 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static stbi_uc stbi__get_marker(stbi__jpeg *j) 
# 2657
{ 
# 2658
stbi_uc x; 
# 2659
if ((j->marker) != 255) { x = (j->marker); (j->marker) = (255); return x; }  
# 2660
x = stbi__get8(j->s); 
# 2661
if (x != 255) { return 255; }  
# 2662
while (x == 255) { 
# 2663
x = stbi__get8(j->s); }  
# 2664
return x; 
# 2665
} 
# 2673
static void stbi__jpeg_reset(stbi__jpeg *j) 
# 2674
{ 
# 2675
(j->code_bits) = 0; 
# 2676
(j->code_buffer) = (0); 
# 2677
(j->nomore) = 0; 
# 2678
(((j->img_comp)[0]).dc_pred) = ((((j->img_comp)[1]).dc_pred) = ((((j->img_comp)[2]).dc_pred) = ((((j->img_comp)[3]).dc_pred) = 0))); 
# 2679
(j->marker) = (255); 
# 2680
(j->todo) = ((j->restart_interval) ? j->restart_interval : 2147483647); 
# 2681
(j->eob_run) = 0; 
# 2684
} 
# 2686
static int stbi__parse_entropy_coded_data(stbi__jpeg *z) 
# 2687
{ 
# 2688
stbi__jpeg_reset(z); 
# 2689
if (!(z->progressive)) { 
# 2690
if ((z->scan_n) == 1) { 
# 2691
int i, j; 
# 2692
short data[64] __attribute((aligned(16))); 
# 2693
int n = (z->order)[0]; 
# 2698
int w = ((((z->img_comp)[n]).x) + 7) >> 3; 
# 2699
int h = ((((z->img_comp)[n]).y) + 7) >> 3; 
# 2700
for (j = 0; j < h; ++j) { 
# 2701
for (i = 0; i < w; ++i) { 
# 2702
int ha = ((z->img_comp)[n]).ha; 
# 2703
if (!(stbi__jpeg_decode_block(z, data, (z->huff_dc) + (((z->img_comp)[n]).hd), (z->huff_ac) + ha, (z->fast_ac)[ha], n, (z->dequant)[((z->img_comp)[n]).tq]))) { return 0; }  
# 2704
(z->idct_block_kernel)(((((z->img_comp)[n]).data) + (((((z->img_comp)[n]).w2) * j) * 8)) + (i * 8), ((z->img_comp)[n]).w2, data); 
# 2706
if ((--(z->todo)) <= 0) { 
# 2707
if ((z->code_bits) < 24) { stbi__grow_buffer_unsafe(z); }  
# 2710
if (!(((z->marker) >= 208) && ((z->marker) <= 215))) { return 1; }  
# 2711
stbi__jpeg_reset(z); 
# 2712
}  
# 2713
}  
# 2714
}  
# 2715
return 1; 
# 2716
} else { 
# 2717
int i, j, k, x, y; 
# 2718
short data[64] __attribute((aligned(16))); 
# 2719
for (j = 0; j < (z->img_mcu_y); ++j) { 
# 2720
for (i = 0; i < (z->img_mcu_x); ++i) { 
# 2722
for (k = 0; k < (z->scan_n); ++k) { 
# 2723
int n = (z->order)[k]; 
# 2726
for (y = 0; y < (((z->img_comp)[n]).v); ++y) { 
# 2727
for (x = 0; x < (((z->img_comp)[n]).h); ++x) { 
# 2728
int x2 = ((i * (((z->img_comp)[n]).h)) + x) * 8; 
# 2729
int y2 = ((j * (((z->img_comp)[n]).v)) + y) * 8; 
# 2730
int ha = ((z->img_comp)[n]).ha; 
# 2731
if (!(stbi__jpeg_decode_block(z, data, (z->huff_dc) + (((z->img_comp)[n]).hd), (z->huff_ac) + ha, (z->fast_ac)[ha], n, (z->dequant)[((z->img_comp)[n]).tq]))) { return 0; }  
# 2732
(z->idct_block_kernel)(((((z->img_comp)[n]).data) + ((((z->img_comp)[n]).w2) * y2)) + x2, ((z->img_comp)[n]).w2, data); 
# 2733
}  
# 2734
}  
# 2735
}  
# 2738
if ((--(z->todo)) <= 0) { 
# 2739
if ((z->code_bits) < 24) { stbi__grow_buffer_unsafe(z); }  
# 2740
if (!(((z->marker) >= 208) && ((z->marker) <= 215))) { return 1; }  
# 2741
stbi__jpeg_reset(z); 
# 2742
}  
# 2743
}  
# 2744
}  
# 2745
return 1; 
# 2746
}  
# 2747
} else { 
# 2748
if ((z->scan_n) == 1) { 
# 2749
int i, j; 
# 2750
int n = (z->order)[0]; 
# 2755
int w = ((((z->img_comp)[n]).x) + 7) >> 3; 
# 2756
int h = ((((z->img_comp)[n]).y) + 7) >> 3; 
# 2757
for (j = 0; j < h; ++j) { 
# 2758
for (i = 0; i < w; ++i) { 
# 2759
short *data = (((z->img_comp)[n]).coeff) + (64 * (i + (j * (((z->img_comp)[n]).coeff_w)))); 
# 2760
if ((z->spec_start) == 0) { 
# 2761
if (!(stbi__jpeg_decode_block_prog_dc(z, data, &((z->huff_dc)[((z->img_comp)[n]).hd]), n))) { 
# 2762
return 0; }  
# 2763
} else { 
# 2764
int ha = ((z->img_comp)[n]).ha; 
# 2765
if (!(stbi__jpeg_decode_block_prog_ac(z, data, &((z->huff_ac)[ha]), (z->fast_ac)[ha]))) { 
# 2766
return 0; }  
# 2767
}  
# 2769
if ((--(z->todo)) <= 0) { 
# 2770
if ((z->code_bits) < 24) { stbi__grow_buffer_unsafe(z); }  
# 2771
if (!(((z->marker) >= 208) && ((z->marker) <= 215))) { return 1; }  
# 2772
stbi__jpeg_reset(z); 
# 2773
}  
# 2774
}  
# 2775
}  
# 2776
return 1; 
# 2777
} else { 
# 2778
int i, j, k, x, y; 
# 2779
for (j = 0; j < (z->img_mcu_y); ++j) { 
# 2780
for (i = 0; i < (z->img_mcu_x); ++i) { 
# 2782
for (k = 0; k < (z->scan_n); ++k) { 
# 2783
int n = (z->order)[k]; 
# 2786
for (y = 0; y < (((z->img_comp)[n]).v); ++y) { 
# 2787
for (x = 0; x < (((z->img_comp)[n]).h); ++x) { 
# 2788
int x2 = (i * (((z->img_comp)[n]).h)) + x; 
# 2789
int y2 = (j * (((z->img_comp)[n]).v)) + y; 
# 2790
short *data = (((z->img_comp)[n]).coeff) + (64 * (x2 + (y2 * (((z->img_comp)[n]).coeff_w)))); 
# 2791
if (!(stbi__jpeg_decode_block_prog_dc(z, data, &((z->huff_dc)[((z->img_comp)[n]).hd]), n))) { 
# 2792
return 0; }  
# 2793
}  
# 2794
}  
# 2795
}  
# 2798
if ((--(z->todo)) <= 0) { 
# 2799
if ((z->code_bits) < 24) { stbi__grow_buffer_unsafe(z); }  
# 2800
if (!(((z->marker) >= 208) && ((z->marker) <= 215))) { return 1; }  
# 2801
stbi__jpeg_reset(z); 
# 2802
}  
# 2803
}  
# 2804
}  
# 2805
return 1; 
# 2806
}  
# 2807
}  
# 2808
} 
# 2810
static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant) 
# 2811
{ 
# 2812
int i; 
# 2813
for (i = 0; i < 64; ++i) { 
# 2814
(data[i]) *= (dequant[i]); }  
# 2815
} 
# 2817
static void stbi__jpeg_finish(stbi__jpeg *z) 
# 2818
{ 
# 2819
if (z->progressive) { 
# 2821
int i, j, n; 
# 2822
for (n = 0; n < ((z->s)->img_n); ++n) { 
# 2823
int w = ((((z->img_comp)[n]).x) + 7) >> 3; 
# 2824
int h = ((((z->img_comp)[n]).y) + 7) >> 3; 
# 2825
for (j = 0; j < h; ++j) { 
# 2826
for (i = 0; i < w; ++i) { 
# 2827
short *data = (((z->img_comp)[n]).coeff) + (64 * (i + (j * (((z->img_comp)[n]).coeff_w)))); 
# 2828
stbi__jpeg_dequantize(data, (z->dequant)[((z->img_comp)[n]).tq]); 
# 2829
(z->idct_block_kernel)(((((z->img_comp)[n]).data) + (((((z->img_comp)[n]).w2) * j) * 8)) + (i * 8), ((z->img_comp)[n]).w2, data); 
# 2830
}  
# 2831
}  
# 2832
}  
# 2833
}  
# 2834
} 
# 2836
static int stbi__process_marker(stbi__jpeg *z, int m) 
# 2837
{ 
# 2838
int L; 
# 2839
switch (m) { 
# 2840
case 255:  
# 2841
return stbi__err("expected marker"); 
# 2843
case 221:  
# 2844
if (stbi__get16be(z->s) != 4) { return stbi__err("bad DRI len"); }  
# 2845
(z->restart_interval) = stbi__get16be(z->s); 
# 2846
return 1; 
# 2848
case 219:  
# 2849
L = (stbi__get16be(z->s) - 2); 
# 2850
while (L > 0) { 
# 2851
int q = stbi__get8(z->s); 
# 2852
int p = q >> 4, sixteen = p != 0; 
# 2853
int t = q & 15, i; 
# 2854
if ((p != 0) && (p != 1)) { return stbi__err("bad DQT type"); }  
# 2855
if (t > 3) { return stbi__err("bad DQT table"); }  
# 2857
for (i = 0; i < 64; ++i) { 
# 2858
(((z->dequant)[t])[stbi__jpeg_dezigzag[i]]) = ((stbi__uint16)((sixteen) ? stbi__get16be(z->s) : (stbi__get8(z->s)))); }  
# 2859
L -= ((sixteen) ? 129 : 65); 
# 2860
}  
# 2861
return L == 0; 
# 2863
case 196:  
# 2864
L = (stbi__get16be(z->s) - 2); 
# 2865
while (L > 0) { 
# 2866
stbi_uc *v; 
# 2867
int sizes[16], i, n = 0; 
# 2868
int q = stbi__get8(z->s); 
# 2869
int tc = q >> 4; 
# 2870
int th = q & 15; 
# 2871
if ((tc > 1) || (th > 3)) { return stbi__err("bad DHT header"); }  
# 2872
for (i = 0; i < 16; ++i) { 
# 2873
(sizes[i]) = (stbi__get8(z->s)); 
# 2874
n += (sizes[i]); 
# 2875
}  
# 2876
L -= 17; 
# 2877
if (tc == 0) { 
# 2878
if (!(stbi__build_huffman((z->huff_dc) + th, sizes))) { return 0; }  
# 2879
v = (((z->huff_dc)[th]).values); 
# 2880
} else { 
# 2881
if (!(stbi__build_huffman((z->huff_ac) + th, sizes))) { return 0; }  
# 2882
v = (((z->huff_ac)[th]).values); 
# 2883
}  
# 2884
for (i = 0; i < n; ++i) { 
# 2885
(v[i]) = stbi__get8(z->s); }  
# 2886
if (tc != 0) { 
# 2887
stbi__build_fast_ac((z->fast_ac)[th], (z->huff_ac) + th); }  
# 2888
L -= n; 
# 2889
}  
# 2890
return L == 0; 
# 2891
}  
# 2894
if (((m >= 224) && (m <= 239)) || (m == 254)) { 
# 2895
L = stbi__get16be(z->s); 
# 2896
if (L < 2) { 
# 2897
if (m == 254) { 
# 2898
return stbi__err("bad COM len"); } else { 
# 2900
return stbi__err("bad APP len"); }  
# 2901
}  
# 2902
L -= 2; 
# 2904
if ((m == 224) && (L >= 5)) { 
# 2905
static const unsigned char tag[5] = {('J'), ('F'), ('I'), ('F'), ('\000')}; 
# 2906
int ok = 1; 
# 2907
int i; 
# 2908
for (i = 0; i < 5; ++i) { 
# 2909
if ((stbi__get8(z->s)) != (tag[i])) { 
# 2910
ok = 0; }  }  
# 2911
L -= 5; 
# 2912
if (ok) { 
# 2913
(z->jfif) = 1; }  
# 2914
} else { if ((m == 238) && (L >= 12)) { 
# 2915
static const unsigned char tag[6] = {('A'), ('d'), ('o'), ('b'), ('e'), ('\000')}; 
# 2916
int ok = 1; 
# 2917
int i; 
# 2918
for (i = 0; i < 6; ++i) { 
# 2919
if ((stbi__get8(z->s)) != (tag[i])) { 
# 2920
ok = 0; }  }  
# 2921
L -= 6; 
# 2922
if (ok) { 
# 2923
stbi__get8(z->s); 
# 2924
stbi__get16be(z->s); 
# 2925
stbi__get16be(z->s); 
# 2926
(z->app14_color_transform) = (stbi__get8(z->s)); 
# 2927
L -= 6; 
# 2928
}  
# 2929
}  }  
# 2931
stbi__skip(z->s, L); 
# 2932
return 1; 
# 2933
}  
# 2935
return stbi__err("unknown marker"); 
# 2936
} 
# 2939
static int stbi__process_scan_header(stbi__jpeg *z) 
# 2940
{ 
# 2941
int i; 
# 2942
int Ls = stbi__get16be(z->s); 
# 2943
(z->scan_n) = (stbi__get8(z->s)); 
# 2944
if ((((z->scan_n) < 1) || ((z->scan_n) > 4)) || ((z->scan_n) > ((int)((z->s)->img_n)))) { return stbi__err("bad SOS component count"); }  
# 2945
if (Ls != (6 + (2 * (z->scan_n)))) { return stbi__err("bad SOS len"); }  
# 2946
for (i = 0; i < (z->scan_n); ++i) { 
# 2947
int id = stbi__get8(z->s), which; 
# 2948
int q = stbi__get8(z->s); 
# 2949
for (which = 0; which < ((z->s)->img_n); ++which) { 
# 2950
if ((((z->img_comp)[which]).id) == id) { 
# 2951
break; }  }  
# 2952
if (which == ((z->s)->img_n)) { return 0; }  
# 2953
(((z->img_comp)[which]).hd) = (q >> 4); if ((((z->img_comp)[which]).hd) > 3) { return stbi__err("bad DC huff"); }  
# 2954
(((z->img_comp)[which]).ha) = (q & 15); if ((((z->img_comp)[which]).ha) > 3) { return stbi__err("bad AC huff"); }  
# 2955
((z->order)[i]) = which; 
# 2956
}  
# 2958
{ 
# 2959
int aa; 
# 2960
(z->spec_start) = (stbi__get8(z->s)); 
# 2961
(z->spec_end) = (stbi__get8(z->s)); 
# 2962
aa = (stbi__get8(z->s)); 
# 2963
(z->succ_high) = (aa >> 4); 
# 2964
(z->succ_low) = (aa & 15); 
# 2965
if (z->progressive) { 
# 2966
if ((((((z->spec_start) > 63) || ((z->spec_end) > 63)) || ((z->spec_start) > (z->spec_end))) || ((z->succ_high) > 13)) || ((z->succ_low) > 13)) { 
# 2967
return stbi__err("bad SOS"); }  
# 2968
} else { 
# 2969
if ((z->spec_start) != 0) { return stbi__err("bad SOS"); }  
# 2970
if (((z->succ_high) != 0) || ((z->succ_low) != 0)) { return stbi__err("bad SOS"); }  
# 2971
(z->spec_end) = 63; 
# 2972
}  
# 2973
} 
# 2975
return 1; 
# 2976
} 
# 2978
static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why) 
# 2979
{ 
# 2980
int i; 
# 2981
for (i = 0; i < ncomp; ++i) { 
# 2982
if (((z->img_comp)[i]).raw_data) { 
# 2983
free(((z->img_comp)[i]).raw_data); 
# 2984
(((z->img_comp)[i]).raw_data) = (__null); 
# 2985 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(((z->img_comp)[i]).data) = (__null); 
# 2986 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 2987
if (((z->img_comp)[i]).raw_coeff) { 
# 2988
free(((z->img_comp)[i]).raw_coeff); 
# 2989
(((z->img_comp)[i]).raw_coeff) = (0); 
# 2990
(((z->img_comp)[i]).coeff) = (0); 
# 2991
}  
# 2992
if (((z->img_comp)[i]).linebuf) { 
# 2993
free(((z->img_comp)[i]).linebuf); 
# 2994
(((z->img_comp)[i]).linebuf) = (__null); 
# 2995 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 2996
}  
# 2997
return why; 
# 2998
} 
# 3000
static int stbi__process_frame_header(stbi__jpeg *z, int scan) 
# 3001
{ 
# 3002
stbi__context *s = z->s; 
# 3003
int Lf, p, i, q, h_max = 1, v_max = 1, c; 
# 3004
Lf = stbi__get16be(s); if (Lf < 11) { return stbi__err("bad SOF len"); }  
# 3005
p = (stbi__get8(s)); if (p != 8) { return stbi__err("only 8-bit"); }  
# 3006
(s->img_y) = (stbi__get16be(s)); if ((s->img_y) == (0)) { return stbi__err("no header height"); }  
# 3007
(s->img_x) = (stbi__get16be(s)); if ((s->img_x) == (0)) { return stbi__err("0 width"); }  
# 3008
c = (stbi__get8(s)); 
# 3009
if ((c != 3) && (c != 1) && (c != 4)) { return stbi__err("bad component count"); }  
# 3010
(s->img_n) = c; 
# 3011
for (i = 0; i < c; ++i) { 
# 3012
(((z->img_comp)[i]).data) = (__null); 
# 3013 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(((z->img_comp)[i]).linebuf) = (__null); 
# 3014 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 3016
if (Lf != (8 + (3 * (s->img_n)))) { return stbi__err("bad SOF len"); }  
# 3018
(z->rgb) = 0; 
# 3019
for (i = 0; i < (s->img_n); ++i) { 
# 3020
static const unsigned char rgb[3] = {('R'), ('G'), ('B')}; 
# 3021
(((z->img_comp)[i]).id) = (stbi__get8(s)); 
# 3022
if (((s->img_n) == 3) && ((((z->img_comp)[i]).id) == (rgb[i]))) { 
# 3023
++(z->rgb); }  
# 3024
q = (stbi__get8(s)); 
# 3025
(((z->img_comp)[i]).h) = (q >> 4); if ((!(((z->img_comp)[i]).h)) || ((((z->img_comp)[i]).h) > 4)) { return stbi__err("bad H"); }  
# 3026
(((z->img_comp)[i]).v) = (q & 15); if ((!(((z->img_comp)[i]).v)) || ((((z->img_comp)[i]).v) > 4)) { return stbi__err("bad V"); }  
# 3027
(((z->img_comp)[i]).tq) = (stbi__get8(s)); if ((((z->img_comp)[i]).tq) > 3) { return stbi__err("bad TQ"); }  
# 3028
}  
# 3030
if (scan != (STBI__SCAN_load)) { return 1; }  
# 3032
if (!(stbi__mad3sizes_valid(s->img_x, s->img_y, s->img_n, 0))) { return stbi__err("too large"); }  
# 3034
for (i = 0; i < (s->img_n); ++i) { 
# 3035
if ((((z->img_comp)[i]).h) > h_max) { h_max = (((z->img_comp)[i]).h); }  
# 3036
if ((((z->img_comp)[i]).v) > v_max) { v_max = (((z->img_comp)[i]).v); }  
# 3037
}  
# 3040
(z->img_h_max) = h_max; 
# 3041
(z->img_v_max) = v_max; 
# 3042
(z->img_mcu_w) = (h_max * 8); 
# 3043
(z->img_mcu_h) = (v_max * 8); 
# 3045
(z->img_mcu_x) = ((((s->img_x) + (z->img_mcu_w)) - (1)) / (z->img_mcu_w)); 
# 3046
(z->img_mcu_y) = ((((s->img_y) + (z->img_mcu_h)) - (1)) / (z->img_mcu_h)); 
# 3048
for (i = 0; i < (s->img_n); ++i) { 
# 3050
(((z->img_comp)[i]).x) = (((((s->img_x) * (((z->img_comp)[i]).h)) + h_max) - (1)) / h_max); 
# 3051
(((z->img_comp)[i]).y) = (((((s->img_y) * (((z->img_comp)[i]).v)) + v_max) - (1)) / v_max); 
# 3059
(((z->img_comp)[i]).w2) = (((z->img_mcu_x) * (((z->img_comp)[i]).h)) * 8); 
# 3060
(((z->img_comp)[i]).h2) = (((z->img_mcu_y) * (((z->img_comp)[i]).v)) * 8); 
# 3061
(((z->img_comp)[i]).coeff) = (0); 
# 3062
(((z->img_comp)[i]).raw_coeff) = (0); 
# 3063
(((z->img_comp)[i]).linebuf) = (__null); 
# 3064 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(((z->img_comp)[i]).raw_data) = stbi__malloc_mad2(((z->img_comp)[i]).w2, ((z->img_comp)[i]).h2, 15); 
# 3065
if ((((z->img_comp)[i]).raw_data) == (__null)) { 
# 3066 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__free_jpeg_components(z, i + 1, stbi__err("outofmem")); }  
# 3068
(((z->img_comp)[i]).data) = ((stbi_uc *)((((::size_t)(((z->img_comp)[i]).raw_data)) + (15)) & (~15))); 
# 3069
if (z->progressive) { 
# 3071
(((z->img_comp)[i]).coeff_w) = ((((z->img_comp)[i]).w2) / 8); 
# 3072
(((z->img_comp)[i]).coeff_h) = ((((z->img_comp)[i]).h2) / 8); 
# 3073
(((z->img_comp)[i]).raw_coeff) = stbi__malloc_mad3(((z->img_comp)[i]).w2, ((z->img_comp)[i]).h2, sizeof(short), 15); 
# 3074
if ((((z->img_comp)[i]).raw_coeff) == (__null)) { 
# 3075 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__free_jpeg_components(z, i + 1, stbi__err("outofmem")); }  
# 3076
(((z->img_comp)[i]).coeff) = ((short *)((((::size_t)(((z->img_comp)[i]).raw_coeff)) + (15)) & (~15))); 
# 3077
}  
# 3078
}  
# 3080
return 1; 
# 3081
} 
# 3092 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan) 
# 3093
{ 
# 3094
int m; 
# 3095
(z->jfif) = 0; 
# 3096
(z->app14_color_transform) = (-1); 
# 3097
(z->marker) = (255); 
# 3098
m = (stbi__get_marker(z)); 
# 3099
if (!(m == 216)) { return stbi__err("no SOI"); }  
# 3100
if (scan == (STBI__SCAN_type)) { return 1; }  
# 3101
m = (stbi__get_marker(z)); 
# 3102
while (!(((m == 192) || (m == 193)) || (m == 194))) { 
# 3103
if (!(stbi__process_marker(z, m))) { return 0; }  
# 3104
m = (stbi__get_marker(z)); 
# 3105
while (m == 255) { 
# 3107
if (stbi__at_eof(z->s)) { return stbi__err("no SOF"); }  
# 3108
m = (stbi__get_marker(z)); 
# 3109
}  
# 3110
}  
# 3111
(z->progressive) = (m == 194); 
# 3112
if (!(stbi__process_frame_header(z, scan))) { return 0; }  
# 3113
return 1; 
# 3114
} 
# 3117
static int stbi__decode_jpeg_image(stbi__jpeg *j) 
# 3118
{ 
# 3119
int m; 
# 3120
for (m = 0; m < 4; m++) { 
# 3121
(((j->img_comp)[m]).raw_data) = (__null); 
# 3122 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(((j->img_comp)[m]).raw_coeff) = (__null); 
# 3123 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 3124
(j->restart_interval) = 0; 
# 3125
if (!(stbi__decode_jpeg_header(j, STBI__SCAN_load))) { return 0; }  
# 3126
m = (stbi__get_marker(j)); 
# 3127
while (!(m == 217)) { 
# 3128
if (m == 218) { 
# 3129
if (!(stbi__process_scan_header(j))) { return 0; }  
# 3130
if (!(stbi__parse_entropy_coded_data(j))) { return 0; }  
# 3131
if ((j->marker) == 255) { 
# 3133
while (!(stbi__at_eof(j->s))) { 
# 3134
int x = stbi__get8(j->s); 
# 3135
if (x == 255) { 
# 3136
(j->marker) = stbi__get8(j->s); 
# 3137
break; 
# 3138
}  
# 3139
}  
# 3141
}  
# 3142
} else { if (m == 220) { 
# 3143
int Ld = stbi__get16be(j->s); 
# 3144
stbi__uint32 NL = stbi__get16be(j->s); 
# 3145
if (Ld != 4) { return stbi__err("bad DNL len"); }  
# 3146
if (NL != ((j->s)->img_y)) { return stbi__err("bad DNL height"); }  
# 3147
} else { 
# 3148
if (!(stbi__process_marker(j, m))) { return 0; }  
# 3149
}  }  
# 3150
m = (stbi__get_marker(j)); 
# 3151
}  
# 3152
if (j->progressive) { 
# 3153
stbi__jpeg_finish(j); }  
# 3154
return 1; 
# 3155
} 
# 3159
typedef stbi_uc *(*resample_row_func)(stbi_uc * out, stbi_uc * in0, stbi_uc * in1, int w, int hs); 
# 3164
static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) 
# 3165
{ 
# 3166
(void)sizeof out; 
# 3167
(void)sizeof in_far; 
# 3168
(void)sizeof w; 
# 3169
(void)sizeof hs; 
# 3170
return in_near; 
# 3171
} 
# 3173
static stbi_uc *stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) 
# 3174
{ 
# 3176
int i; 
# 3177
(void)sizeof hs; 
# 3178
for (i = 0; i < w; ++i) { 
# 3179
(out[i]) = ((stbi_uc)((((3 * (in_near[i])) + (in_far[i])) + 2) >> 2)); }  
# 3180
return out; 
# 3181
} 
# 3183
static stbi_uc *stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) 
# 3184
{ 
# 3186
int i; 
# 3187
stbi_uc *input = in_near; 
# 3189
if (w == 1) { 
# 3191
(out[0]) = ((out[1]) = (input[0])); 
# 3192
return out; 
# 3193
}  
# 3195
(out[0]) = (input[0]); 
# 3196
(out[1]) = ((stbi_uc)(((((input[0]) * 3) + (input[1])) + 2) >> 2)); 
# 3197
for (i = 1; i < (w - 1); ++i) { 
# 3198
int n = (3 * (input[i])) + 2; 
# 3199
(out[(i * 2) + 0]) = ((stbi_uc)((n + (input[i - 1])) >> 2)); 
# 3200
(out[(i * 2) + 1]) = ((stbi_uc)((n + (input[i + 1])) >> 2)); 
# 3201
}  
# 3202
(out[(i * 2) + 0]) = ((stbi_uc)(((((input[w - 2]) * 3) + (input[w - 1])) + 2) >> 2)); 
# 3203
(out[(i * 2) + 1]) = (input[w - 1]); 
# 3205
(void)sizeof in_far; 
# 3206
(void)sizeof hs; 
# 3208
return out; 
# 3209
} 
# 3213
static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) 
# 3214
{ 
# 3216
int i, t0, t1; 
# 3217
if (w == 1) { 
# 3218
(out[0]) = ((out[1]) = ((stbi_uc)((((3 * (in_near[0])) + (in_far[0])) + 2) >> 2))); 
# 3219
return out; 
# 3220
}  
# 3222
t1 = ((3 * (in_near[0])) + (in_far[0])); 
# 3223
(out[0]) = ((stbi_uc)((t1 + 2) >> 2)); 
# 3224
for (i = 1; i < w; ++i) { 
# 3225
t0 = t1; 
# 3226
t1 = ((3 * (in_near[i])) + (in_far[i])); 
# 3227
(out[(i * 2) - 1]) = ((stbi_uc)((((3 * t0) + t1) + 8) >> 4)); 
# 3228
(out[i * 2]) = ((stbi_uc)((((3 * t1) + t0) + 8) >> 4)); 
# 3229
}  
# 3230
(out[(w * 2) - 1]) = ((stbi_uc)((t1 + 2) >> 2)); 
# 3232
(void)sizeof hs; 
# 3234
return out; 
# 3235
} 
# 3238
static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) 
# 3239
{ 
# 3241
int i = 0, t0, t1; 
# 3243
if (w == 1) { 
# 3244
(out[0]) = ((out[1]) = ((stbi_uc)((((3 * (in_near[0])) + (in_far[0])) + 2) >> 2))); 
# 3245
return out; 
# 3246
}  
# 3248
t1 = ((3 * (in_near[0])) + (in_far[0])); 
# 3252
for (; i < ((w - 1) & (~7)); i += 8) { 
# 3256
__m128i zero = _mm_setzero_si128(); 
# 3257
__m128i farb = _mm_loadl_epi64((__m128i *)(in_far + i)); 
# 3258
__m128i nearb = _mm_loadl_epi64((__m128i *)(in_near + i)); 
# 3259
__m128i farw = _mm_unpacklo_epi8(farb, zero); 
# 3260
__m128i nearw = _mm_unpacklo_epi8(nearb, zero); 
# 3261
__m128i diff = _mm_sub_epi16(farw, nearw); 
# 3262
__m128i nears = _mm_slli_epi16(nearw, 2); 
# 3263
__m128i curr = _mm_add_epi16(nears, diff); 
# 3270
__m128i prv0 = (__m128i)__builtin_ia32_pslldqi128((__m128i)curr, ((int)2) * 8); 
# 3271 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
__m128i nxt0 = (__m128i)__builtin_ia32_psrldqi128((__m128i)curr, ((int)2) * 8); 
# 3272 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
__m128i prev = (__m128i)__builtin_ia32_vec_set_v8hi((__v8hi)((__m128i)prv0), (int)t1, (int)0); 
# 3273 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
__m128i next = (__m128i)__builtin_ia32_vec_set_v8hi((__v8hi)((__m128i)nxt0), (int)((3 * (in_near[i + 8])) + (in_far[i + 8])), (int)7); 
# 3279 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
__m128i bias = _mm_set1_epi16(8); 
# 3280
__m128i curs = _mm_slli_epi16(curr, 2); 
# 3281
__m128i prvd = _mm_sub_epi16(prev, curr); 
# 3282
__m128i nxtd = _mm_sub_epi16(next, curr); 
# 3283
__m128i curb = _mm_add_epi16(curs, bias); 
# 3284
__m128i even = _mm_add_epi16(prvd, curb); 
# 3285
__m128i odd = _mm_add_epi16(nxtd, curb); 
# 3288
__m128i int0 = _mm_unpacklo_epi16(even, odd); 
# 3289
__m128i int1 = _mm_unpackhi_epi16(even, odd); 
# 3290
__m128i de0 = _mm_srli_epi16(int0, 4); 
# 3291
__m128i de1 = _mm_srli_epi16(int1, 4); 
# 3294
__m128i outv = _mm_packus_epi16(de0, de1); 
# 3295
_mm_storeu_si128((__m128i *)(out + (i * 2)), outv); 
# 3333 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
t1 = ((3 * (in_near[i + 7])) + (in_far[i + 7])); 
# 3334
}  
# 3336
t0 = t1; 
# 3337
t1 = ((3 * (in_near[i])) + (in_far[i])); 
# 3338
(out[i * 2]) = ((stbi_uc)((((3 * t1) + t0) + 8) >> 4)); 
# 3340
for (++i; i < w; ++i) { 
# 3341
t0 = t1; 
# 3342
t1 = ((3 * (in_near[i])) + (in_far[i])); 
# 3343
(out[(i * 2) - 1]) = ((stbi_uc)((((3 * t0) + t1) + 8) >> 4)); 
# 3344
(out[i * 2]) = ((stbi_uc)((((3 * t1) + t0) + 8) >> 4)); 
# 3345
}  
# 3346
(out[(w * 2) - 1]) = ((stbi_uc)((t1 + 2) >> 2)); 
# 3348
(void)sizeof hs; 
# 3350
return out; 
# 3351
} 
# 3354
static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs) 
# 3355
{ 
# 3357
int i, j; 
# 3358
(void)sizeof in_far; 
# 3359
for (i = 0; i < w; ++i) { 
# 3360
for (j = 0; j < hs; ++j) { 
# 3361
(out[(i * hs) + j]) = (in_near[i]); }  }  
# 3362
return out; 
# 3363
} 
# 3368
static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step) 
# 3369
{ 
# 3370
int i; 
# 3371
for (i = 0; i < count; ++i) { 
# 3372
int y_fixed = ((y[i]) << 20) + (1 << 19); 
# 3373
int r, g, b; 
# 3374
int cr = (pcr[i]) - 128; 
# 3375
int cb = (pcb[i]) - 128; 
# 3376
r = (y_fixed + (cr * (((int)(((1.402F) * (4096.0F)) + (0.5F))) << 8))); 
# 3377
g = ((y_fixed + (cr * (-(((int)(((0.71414F) * (4096.0F)) + (0.5F))) << 8)))) + ((cb * (-(((int)(((0.34414F) * (4096.0F)) + (0.5F))) << 8))) & 4294901760U)); 
# 3378
b = (y_fixed + (cb * (((int)(((1.772F) * (4096.0F)) + (0.5F))) << 8))); 
# 3379
r >>= 20; 
# 3380
g >>= 20; 
# 3381
b >>= 20; 
# 3382
if (((unsigned)r) > (255)) { if (r < 0) { r = 0; } else { r = 255; }  }  
# 3383
if (((unsigned)g) > (255)) { if (g < 0) { g = 0; } else { g = 255; }  }  
# 3384
if (((unsigned)b) > (255)) { if (b < 0) { b = 0; } else { b = 255; }  }  
# 3385
(out[0]) = ((stbi_uc)r); 
# 3386
(out[1]) = ((stbi_uc)g); 
# 3387
(out[2]) = ((stbi_uc)b); 
# 3388
(out[3]) = (255); 
# 3389
out += step; 
# 3390
}  
# 3391
} 
# 3394
static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step) 
# 3395
{ 
# 3396
int i = 0; 
# 3402
if (step == 4) { 
# 3404
__m128i signflip = _mm_set1_epi8(-128); 
# 3405
__m128i cr_const0 = _mm_set1_epi16((short)(((1.402F) * (4096.0F)) + (0.5F))); 
# 3406
__m128i cr_const1 = _mm_set1_epi16(-((short)(((0.71414F) * (4096.0F)) + (0.5F)))); 
# 3407
__m128i cb_const0 = _mm_set1_epi16(-((short)(((0.34414F) * (4096.0F)) + (0.5F)))); 
# 3408
__m128i cb_const1 = _mm_set1_epi16((short)(((1.772F) * (4096.0F)) + (0.5F))); 
# 3409
__m128i y_bias = _mm_set1_epi8((char)((unsigned char)128)); 
# 3410
__m128i xw = _mm_set1_epi16(255); 
# 3412
for (; (i + 7) < count; i += 8) { 
# 3414
__m128i y_bytes = _mm_loadl_epi64((__m128i *)(y + i)); 
# 3415
__m128i cr_bytes = _mm_loadl_epi64((__m128i *)(pcr + i)); 
# 3416
__m128i cb_bytes = _mm_loadl_epi64((__m128i *)(pcb + i)); 
# 3417
__m128i cr_biased = _mm_xor_si128(cr_bytes, signflip); 
# 3418
__m128i cb_biased = _mm_xor_si128(cb_bytes, signflip); 
# 3421
__m128i yw = _mm_unpacklo_epi8(y_bias, y_bytes); 
# 3422
__m128i crw = _mm_unpacklo_epi8(_mm_setzero_si128(), cr_biased); 
# 3423
__m128i cbw = _mm_unpacklo_epi8(_mm_setzero_si128(), cb_biased); 
# 3426
__m128i yws = _mm_srli_epi16(yw, 4); 
# 3427
__m128i cr0 = _mm_mulhi_epi16(cr_const0, crw); 
# 3428
__m128i cb0 = _mm_mulhi_epi16(cb_const0, cbw); 
# 3429
__m128i cb1 = _mm_mulhi_epi16(cbw, cb_const1); 
# 3430
__m128i cr1 = _mm_mulhi_epi16(crw, cr_const1); 
# 3431
__m128i rws = _mm_add_epi16(cr0, yws); 
# 3432
__m128i gwt = _mm_add_epi16(cb0, yws); 
# 3433
__m128i bws = _mm_add_epi16(yws, cb1); 
# 3434
__m128i gws = _mm_add_epi16(gwt, cr1); 
# 3437
__m128i rw = _mm_srai_epi16(rws, 4); 
# 3438
__m128i bw = _mm_srai_epi16(bws, 4); 
# 3439
__m128i gw = _mm_srai_epi16(gws, 4); 
# 3442
__m128i brb = _mm_packus_epi16(rw, bw); 
# 3443
__m128i gxb = _mm_packus_epi16(gw, xw); 
# 3446
__m128i t0 = _mm_unpacklo_epi8(brb, gxb); 
# 3447
__m128i t1 = _mm_unpackhi_epi8(brb, gxb); 
# 3448
__m128i o0 = _mm_unpacklo_epi16(t0, t1); 
# 3449
__m128i o1 = _mm_unpackhi_epi16(t0, t1); 
# 3452
_mm_storeu_si128((__m128i *)(out + 0), o0); 
# 3453
_mm_storeu_si128((__m128i *)(out + 16), o1); 
# 3454
out += 32; 
# 3455
}  
# 3456
}  
# 3505 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
for (; i < count; ++i) { 
# 3506
int y_fixed = ((y[i]) << 20) + (1 << 19); 
# 3507
int r, g, b; 
# 3508
int cr = (pcr[i]) - 128; 
# 3509
int cb = (pcb[i]) - 128; 
# 3510
r = (y_fixed + (cr * (((int)(((1.402F) * (4096.0F)) + (0.5F))) << 8))); 
# 3511
g = ((y_fixed + (cr * (-(((int)(((0.71414F) * (4096.0F)) + (0.5F))) << 8)))) + ((cb * (-(((int)(((0.34414F) * (4096.0F)) + (0.5F))) << 8))) & 4294901760U)); 
# 3512
b = (y_fixed + (cb * (((int)(((1.772F) * (4096.0F)) + (0.5F))) << 8))); 
# 3513
r >>= 20; 
# 3514
g >>= 20; 
# 3515
b >>= 20; 
# 3516
if (((unsigned)r) > (255)) { if (r < 0) { r = 0; } else { r = 255; }  }  
# 3517
if (((unsigned)g) > (255)) { if (g < 0) { g = 0; } else { g = 255; }  }  
# 3518
if (((unsigned)b) > (255)) { if (b < 0) { b = 0; } else { b = 255; }  }  
# 3519
(out[0]) = ((stbi_uc)r); 
# 3520
(out[1]) = ((stbi_uc)g); 
# 3521
(out[2]) = ((stbi_uc)b); 
# 3522
(out[3]) = (255); 
# 3523
out += step; 
# 3524
}  
# 3525
} 
# 3529
static void stbi__setup_jpeg(stbi__jpeg *j) 
# 3530
{ 
# 3531
(j->idct_block_kernel) = stbi__idct_block; 
# 3532
(j->YCbCr_to_RGB_kernel) = stbi__YCbCr_to_RGB_row; 
# 3533
(j->resample_row_hv_2_kernel) = stbi__resample_row_hv_2; 
# 3536
if (stbi__sse2_available()) { 
# 3537
(j->idct_block_kernel) = stbi__idct_simd; 
# 3538
(j->YCbCr_to_RGB_kernel) = stbi__YCbCr_to_RGB_simd; 
# 3539
(j->resample_row_hv_2_kernel) = stbi__resample_row_hv_2_simd; 
# 3540
}  
# 3548
} 
# 3551
static void stbi__cleanup_jpeg(stbi__jpeg *j) 
# 3552
{ 
# 3553
stbi__free_jpeg_components(j, (j->s)->img_n, 0); 
# 3554
} 
# 3564
typedef 
# 3557
struct { 
# 3558
resample_row_func resample; 
# 3559
stbi_uc *line0, *line1; 
# 3560
int hs, vs; 
# 3561
int w_lores; 
# 3562
int ystep; 
# 3563
int ypos; 
# 3564
} stbi__resample; 
# 3567
static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y) 
# 3568
{ 
# 3569
unsigned t = (x * y) + 128; 
# 3570
return (stbi_uc)((t + (t >> 8)) >> 8); 
# 3571
} 
# 3573
static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp) 
# 3574
{ 
# 3575
int n, decode_n, is_rgb; 
# 3576
((z->s)->img_n) = 0; 
# 3579
if ((req_comp < 0) || (req_comp > 4)) { return ((unsigned char *)((::size_t)((stbi__err("bad req_comp")) ? __null : __null))); }  
# 3582 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (!(stbi__decode_jpeg_image(z))) { stbi__cleanup_jpeg(z); return __null; 
# 3582 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 3585
n = ((req_comp) ? req_comp : ((((z->s)->img_n) >= 3) ? 3 : 1)); 
# 3587
is_rgb = ((((z->s)->img_n) == 3) && (((z->rgb) == 3) || (((z->app14_color_transform) == 0) && (!(z->jfif))))); 
# 3589
if ((((z->s)->img_n) == 3) && (n < 3) && (!is_rgb)) { 
# 3590
decode_n = 1; } else { 
# 3592
decode_n = ((z->s)->img_n); }  
# 3595
{ 
# 3596
int k; 
# 3597
unsigned i, j; 
# 3598
stbi_uc *output; 
# 3599
stbi_uc *coutput[4]; 
# 3601
stbi__resample res_comp[4]; 
# 3603
for (k = 0; k < decode_n; ++k) { 
# 3604
stbi__resample *r = &(res_comp[k]); 
# 3608
(((z->img_comp)[k]).linebuf) = ((stbi_uc *)stbi__malloc(((z->s)->img_x) + (3))); 
# 3609
if (!(((z->img_comp)[k]).linebuf)) { stbi__cleanup_jpeg(z); return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); 
# 3609 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 3611
(r->hs) = ((z->img_h_max) / (((z->img_comp)[k]).h)); 
# 3612
(r->vs) = ((z->img_v_max) / (((z->img_comp)[k]).v)); 
# 3613
(r->ystep) = ((r->vs) >> 1); 
# 3614
(r->w_lores) = (((((z->s)->img_x) + (r->hs)) - (1)) / (r->hs)); 
# 3615
(r->ypos) = 0; 
# 3616
(r->line0) = ((r->line1) = (((z->img_comp)[k]).data)); 
# 3618
if (((r->hs) == 1) && ((r->vs) == 1)) { (r->resample) = resample_row_1; } else { 
# 3619
if (((r->hs) == 1) && ((r->vs) == 2)) { (r->resample) = stbi__resample_row_v_2; } else { 
# 3620
if (((r->hs) == 2) && ((r->vs) == 1)) { (r->resample) = stbi__resample_row_h_2; } else { 
# 3621
if (((r->hs) == 2) && ((r->vs) == 2)) { (r->resample) = (z->resample_row_hv_2_kernel); } else { 
# 3622
(r->resample) = stbi__resample_row_generic; }  }  }  }  
# 3623
}  
# 3626
output = ((stbi_uc *)stbi__malloc_mad3(n, (z->s)->img_x, (z->s)->img_y, 1)); 
# 3627
if (!output) { stbi__cleanup_jpeg(z); return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); 
# 3627 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 3630
for (j = (0); j < ((z->s)->img_y); ++j) { 
# 3631
stbi_uc *out = output + ((n * ((z->s)->img_x)) * j); 
# 3632
for (k = 0; k < decode_n; ++k) { 
# 3633
stbi__resample *r = &(res_comp[k]); 
# 3634
int y_bot = (r->ystep) >= ((r->vs) >> 1); 
# 3635
(coutput[k]) = (r->resample)(((z->img_comp)[k]).linebuf, (y_bot) ? r->line1 : (r->line0), (y_bot) ? r->line0 : (r->line1), r->w_lores, r->hs); 
# 3639
if ((++(r->ystep)) >= (r->vs)) { 
# 3640
(r->ystep) = 0; 
# 3641
(r->line0) = (r->line1); 
# 3642
if ((++(r->ypos)) < (((z->img_comp)[k]).y)) { 
# 3643
(r->line1) += (((z->img_comp)[k]).w2); }  
# 3644
}  
# 3645
}  
# 3646
if (n >= 3) { 
# 3647
stbi_uc *y = coutput[0]; 
# 3648
if (((z->s)->img_n) == 3) { 
# 3649
if (is_rgb) { 
# 3650
for (i = (0); i < ((z->s)->img_x); ++i) { 
# 3651
(out[0]) = (y[i]); 
# 3652
(out[1]) = ((coutput[1])[i]); 
# 3653
(out[2]) = ((coutput[2])[i]); 
# 3654
(out[3]) = (255); 
# 3655
out += n; 
# 3656
}  
# 3657
} else { 
# 3658
(z->YCbCr_to_RGB_kernel)(out, y, coutput[1], coutput[2], (z->s)->img_x, n); 
# 3659
}  
# 3660
} else { if (((z->s)->img_n) == 4) { 
# 3661
if ((z->app14_color_transform) == 0) { 
# 3662
for (i = (0); i < ((z->s)->img_x); ++i) { 
# 3663
stbi_uc m = (coutput[3])[i]; 
# 3664
(out[0]) = stbi__blinn_8x8((coutput[0])[i], m); 
# 3665
(out[1]) = stbi__blinn_8x8((coutput[1])[i], m); 
# 3666
(out[2]) = stbi__blinn_8x8((coutput[2])[i], m); 
# 3667
(out[3]) = (255); 
# 3668
out += n; 
# 3669
}  
# 3670
} else { if ((z->app14_color_transform) == 2) { 
# 3671
(z->YCbCr_to_RGB_kernel)(out, y, coutput[1], coutput[2], (z->s)->img_x, n); 
# 3672
for (i = (0); i < ((z->s)->img_x); ++i) { 
# 3673
stbi_uc m = (coutput[3])[i]; 
# 3674
(out[0]) = stbi__blinn_8x8(255 - (out[0]), m); 
# 3675
(out[1]) = stbi__blinn_8x8(255 - (out[1]), m); 
# 3676
(out[2]) = stbi__blinn_8x8(255 - (out[2]), m); 
# 3677
out += n; 
# 3678
}  
# 3679
} else { 
# 3680
(z->YCbCr_to_RGB_kernel)(out, y, coutput[1], coutput[2], (z->s)->img_x, n); 
# 3681
}  }  
# 3682
} else { 
# 3683
for (i = (0); i < ((z->s)->img_x); ++i) { 
# 3684
(out[0]) = ((out[1]) = ((out[2]) = (y[i]))); 
# 3685
(out[3]) = (255); 
# 3686
out += n; 
# 3687
}  }  }  
# 3688
} else { 
# 3689
if (is_rgb) { 
# 3690
if (n == 1) { 
# 3691
for (i = (0); i < ((z->s)->img_x); ++i) { 
# 3692
(*(out++)) = stbi__compute_y((coutput[0])[i], (coutput[1])[i], (coutput[2])[i]); }  } else 
# 3693
{ 
# 3694
for (i = (0); i < ((z->s)->img_x); (++i), (out += 2)) { 
# 3695
(out[0]) = stbi__compute_y((coutput[0])[i], (coutput[1])[i], (coutput[2])[i]); 
# 3696
(out[1]) = (255); 
# 3697
}  
# 3698
}  
# 3699
} else { if ((((z->s)->img_n) == 4) && ((z->app14_color_transform) == 0)) { 
# 3700
for (i = (0); i < ((z->s)->img_x); ++i) { 
# 3701
stbi_uc m = (coutput[3])[i]; 
# 3702
stbi_uc r = stbi__blinn_8x8((coutput[0])[i], m); 
# 3703
stbi_uc g = stbi__blinn_8x8((coutput[1])[i], m); 
# 3704
stbi_uc b = stbi__blinn_8x8((coutput[2])[i], m); 
# 3705
(out[0]) = stbi__compute_y(r, g, b); 
# 3706
(out[1]) = (255); 
# 3707
out += n; 
# 3708
}  
# 3709
} else { if ((((z->s)->img_n) == 4) && ((z->app14_color_transform) == 2)) { 
# 3710
for (i = (0); i < ((z->s)->img_x); ++i) { 
# 3711
(out[0]) = stbi__blinn_8x8(255 - ((coutput[0])[i]), (coutput[3])[i]); 
# 3712
(out[1]) = (255); 
# 3713
out += n; 
# 3714
}  
# 3715
} else { 
# 3716
stbi_uc *y = coutput[0]; 
# 3717
if (n == 1) { 
# 3718
for (i = (0); i < ((z->s)->img_x); ++i) { (out[i]) = (y[i]); }  } else { 
# 3720
for (i = (0); i < ((z->s)->img_x); ++i) { ((*(out++)) = (y[i])), ((*(out++)) = (255)); }  }  
# 3721
}  }  }  
# 3722
}  
# 3723
}  
# 3724
stbi__cleanup_jpeg(z); 
# 3725
(*out_x) = ((z->s)->img_x); 
# 3726
(*out_y) = ((z->s)->img_y); 
# 3727
if (comp) { (*comp) = ((((z->s)->img_n) >= 3) ? 3 : 1); }  
# 3728
return output; 
# 3729
} 
# 3730
} 
# 3732
static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri) 
# 3733
{ 
# 3734
unsigned char *result; 
# 3735
stbi__jpeg *j = (stbi__jpeg *)stbi__malloc(sizeof(stbi__jpeg)); 
# 3736
(void)sizeof ri; 
# 3737
(j->s) = s; 
# 3738
stbi__setup_jpeg(j); 
# 3739
result = load_jpeg_image(j, x, y, comp, req_comp); 
# 3740
free(j); 
# 3741
return result; 
# 3742
} 
# 3744
static int stbi__jpeg_test(stbi__context *s) 
# 3745
{ 
# 3746
int r; 
# 3747
stbi__jpeg *j = (stbi__jpeg *)stbi__malloc(sizeof(stbi__jpeg)); 
# 3748
(j->s) = s; 
# 3749
stbi__setup_jpeg(j); 
# 3750
r = stbi__decode_jpeg_header(j, STBI__SCAN_type); 
# 3751
stbi__rewind(s); 
# 3752
free(j); 
# 3753
return r; 
# 3754
} 
# 3756
static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp) 
# 3757
{ 
# 3758
if (!(stbi__decode_jpeg_header(j, STBI__SCAN_header))) { 
# 3759
stbi__rewind(j->s); 
# 3760
return 0; 
# 3761
}  
# 3762
if (x) { (*x) = ((j->s)->img_x); }  
# 3763
if (y) { (*y) = ((j->s)->img_y); }  
# 3764
if (comp) { (*comp) = ((((j->s)->img_n) >= 3) ? 3 : 1); }  
# 3765
return 1; 
# 3766
} 
# 3768
static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp) 
# 3769
{ 
# 3770
int result; 
# 3771
stbi__jpeg *j = (stbi__jpeg *)stbi__malloc(sizeof(stbi__jpeg)); 
# 3772
(j->s) = s; 
# 3773
result = stbi__jpeg_info_raw(j, x, y, comp); 
# 3774
free(j); 
# 3775
return result; 
# 3776
} 
# 3802 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
typedef 
# 3795
struct { 
# 3796
stbi__uint16 fast[1 << 9]; 
# 3797
stbi__uint16 firstcode[16]; 
# 3798
int maxcode[17]; 
# 3799
stbi__uint16 firstsymbol[16]; 
# 3800
stbi_uc size[288]; 
# 3801
stbi__uint16 value[288]; 
# 3802
} stbi__zhuffman; 
# 3804
static inline int stbi__bitreverse16(int n) 
# 3805
{ 
# 3806
n = (((n & 43690) >> 1) | ((n & 21845) << 1)); 
# 3807
n = (((n & 52428) >> 2) | ((n & 13107) << 2)); 
# 3808
n = (((n & 61680) >> 4) | ((n & 3855) << 4)); 
# 3809
n = (((n & 65280) >> 8) | ((n & 255) << 8)); 
# 3810
return n; 
# 3811
} 
# 3813
static inline int stbi__bit_reverse(int v, int bits) 
# 3814
{ 
# 3815 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(bits <= 16)) ? (void)0 : __assert_fail("bits <= 16", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 3815, __extension__ __PRETTY_FUNCTION__); 
# 3818 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__bitreverse16(v) >> (16 - bits); 
# 3819
} 
# 3821
static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num) 
# 3822
{ 
# 3823
int i, k = 0; 
# 3824
int code, next_code[16], sizes[17]; 
# 3827
memset(sizes, 0, sizeof sizes); 
# 3828
memset(z->fast, 0, sizeof (z->fast)); 
# 3829
for (i = 0; i < num; ++i) { 
# 3830
++(sizes[sizelist[i]]); }  
# 3831
(sizes[0]) = 0; 
# 3832
for (i = 1; i < 16; ++i) { 
# 3833
if ((sizes[i]) > (1 << i)) { 
# 3834
return stbi__err("bad sizes"); }  }  
# 3835
code = 0; 
# 3836
for (i = 1; i < 16; ++i) { 
# 3837
(next_code[i]) = code; 
# 3838
((z->firstcode)[i]) = ((stbi__uint16)code); 
# 3839
((z->firstsymbol)[i]) = ((stbi__uint16)k); 
# 3840
code = (code + (sizes[i])); 
# 3841
if (sizes[i]) { 
# 3842
if ((code - 1) >= (1 << i)) { return stbi__err("bad codelengths"); }  }  
# 3843
((z->maxcode)[i]) = (code << (16 - i)); 
# 3844
code <<= 1; 
# 3845
k += (sizes[i]); 
# 3846
}  
# 3847
((z->maxcode)[16]) = 65536; 
# 3848
for (i = 0; i < num; ++i) { 
# 3849
int s = sizelist[i]; 
# 3850
if (s) { 
# 3851
int c = ((next_code[s]) - ((z->firstcode)[s])) + ((z->firstsymbol)[s]); 
# 3852
stbi__uint16 fastv = (stbi__uint16)((s << 9) | i); 
# 3853
((z->size)[c]) = ((stbi_uc)s); 
# 3854
((z->value)[c]) = ((stbi__uint16)i); 
# 3855
if (s <= 9) { 
# 3856
int j = stbi__bit_reverse(next_code[s], s); 
# 3857
while (j < (1 << 9)) { 
# 3858
((z->fast)[j]) = fastv; 
# 3859
j += (1 << s); 
# 3860
}  
# 3861
}  
# 3862
++(next_code[s]); 
# 3863
}  
# 3864
}  
# 3865
return 1; 
# 3866
} 
# 3886
typedef 
# 3875
struct { 
# 3876
stbi_uc *zbuffer, *zbuffer_end; 
# 3877
int num_bits; 
# 3878
stbi__uint32 code_buffer; 
# 3880
char *zout; 
# 3881
char *zout_start; 
# 3882
char *zout_end; 
# 3883
int z_expandable; 
# 3885
stbi__zhuffman z_length, z_distance; 
# 3886
} stbi__zbuf; 
# 3888
static inline stbi_uc stbi__zget8(stbi__zbuf *z) 
# 3889
{ 
# 3890
if ((z->zbuffer) >= (z->zbuffer_end)) { return 0; }  
# 3891
return *((z->zbuffer)++); 
# 3892
} 
# 3894
static void stbi__fill_bits(stbi__zbuf *z) 
# 3895
{ 
# 3896
do { 
# 3897 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((z->code_buffer) < (1U << (z->num_bits)))) ? (void)0 : __assert_fail("z->code_buffer < (1U << z->num_bits)", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 3897, __extension__ __PRETTY_FUNCTION__); 
# 3898 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(z->code_buffer) |= (((unsigned)stbi__zget8(z)) << (z->num_bits)); 
# 3899
(z->num_bits) += 8; 
# 3900
} while ((z->num_bits) <= 24); 
# 3901
} 
# 3903
static inline unsigned stbi__zreceive(stbi__zbuf *z, int n) 
# 3904
{ 
# 3905
unsigned k; 
# 3906
if ((z->num_bits) < n) { stbi__fill_bits(z); }  
# 3907
k = ((z->code_buffer) & ((1 << n) - 1)); 
# 3908
(z->code_buffer) >>= n; 
# 3909
(z->num_bits) -= n; 
# 3910
return k; 
# 3911
} 
# 3913
static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z) 
# 3914
{ 
# 3915
int b, s, k; 
# 3918
k = stbi__bit_reverse(a->code_buffer, 16); 
# 3919
for (s = (9 + 1); ; ++s) { 
# 3920
if (k < ((z->maxcode)[s])) { 
# 3921
break; }  }  
# 3922
if (s == 16) { return -1; }  
# 3924
b = (((k >> (16 - s)) - ((z->firstcode)[s])) + ((z->firstsymbol)[s])); 
# 3925 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(((z->size)[b]) == s)) ? (void)0 : __assert_fail("z->size[b] == s", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 3925, __extension__ __PRETTY_FUNCTION__); 
# 3926 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(a->code_buffer) >>= s; 
# 3927
(a->num_bits) -= s; 
# 3928
return (z->value)[b]; 
# 3929
} 
# 3931
static inline int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z) 
# 3932
{ 
# 3933
int b, s; 
# 3934
if ((a->num_bits) < 16) { stbi__fill_bits(a); }  
# 3935
b = ((z->fast)[(a->code_buffer) & ((1 << 9) - 1)]); 
# 3936
if (b) { 
# 3937
s = (b >> 9); 
# 3938
(a->code_buffer) >>= s; 
# 3939
(a->num_bits) -= s; 
# 3940
return b & 511; 
# 3941
}  
# 3942
return stbi__zhuffman_decode_slowpath(a, z); 
# 3943
} 
# 3945
static int stbi__zexpand(stbi__zbuf *z, char *zout, int n) 
# 3946
{ 
# 3947
char *q; 
# 3948
int cur, limit, old_limit; 
# 3949
(z->zout) = zout; 
# 3950
if (!(z->z_expandable)) { return stbi__err("output buffer limit"); }  
# 3951
cur = ((int)((z->zout) - (z->zout_start))); 
# 3952
limit = (old_limit = ((int)((z->zout_end) - (z->zout_start)))); 
# 3953
while ((cur + n) > limit) { 
# 3954
limit *= 2; }  
# 3955
q = ((char *)realloc(z->zout_start, limit)); 
# 3956
(void)sizeof old_limit; 
# 3957
if (q == (__null)) { 
# 3957 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__err("outofmem"); }  
# 3958
(z->zout_start) = q; 
# 3959
(z->zout) = (q + cur); 
# 3960
(z->zout_end) = (q + limit); 
# 3961
return 1; 
# 3962
} 
# 3964
static const int stbi__zlength_base[31] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0}; 
# 3969
static const int stbi__zlength_extra[31] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0}; 
# 3972
static const int stbi__zdist_base[32] = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0}; 
# 3975
static const int stbi__zdist_extra[32] = {0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13}; 
# 3978
static int stbi__parse_huffman_block(stbi__zbuf *a) 
# 3979
{ 
# 3980
char *zout = a->zout; 
# 3981
for (; ;) { 
# 3982
int z = stbi__zhuffman_decode(a, &(a->z_length)); 
# 3983
if (z < 256) { 
# 3984
if (z < 0) { return stbi__err("bad huffman code"); }  
# 3985
if (zout >= (a->zout_end)) { 
# 3986
if (!(stbi__zexpand(a, zout, 1))) { return 0; }  
# 3987
zout = (a->zout); 
# 3988
}  
# 3989
(*(zout++)) = ((char)z); 
# 3990
} else { 
# 3991
stbi_uc *p; 
# 3992
int len, dist; 
# 3993
if (z == 256) { 
# 3994
(a->zout) = zout; 
# 3995
return 1; 
# 3996
}  
# 3997
z -= 257; 
# 3998
len = (stbi__zlength_base[z]); 
# 3999
if (stbi__zlength_extra[z]) { len += stbi__zreceive(a, stbi__zlength_extra[z]); }  
# 4000
z = stbi__zhuffman_decode(a, &(a->z_distance)); 
# 4001
if (z < 0) { return stbi__err("bad huffman code"); }  
# 4002
dist = (stbi__zdist_base[z]); 
# 4003
if (stbi__zdist_extra[z]) { dist += stbi__zreceive(a, stbi__zdist_extra[z]); }  
# 4004
if ((zout - (a->zout_start)) < dist) { return stbi__err("bad dist"); }  
# 4005
if ((zout + len) > (a->zout_end)) { 
# 4006
if (!(stbi__zexpand(a, zout, len))) { return 0; }  
# 4007
zout = (a->zout); 
# 4008
}  
# 4009
p = ((stbi_uc *)(zout - dist)); 
# 4010
if (dist == 1) { 
# 4011
stbi_uc v = *p; 
# 4012
if (len) { do { (*(zout++)) = v; } while (--len); }  
# 4013
} else { 
# 4014
if (len) { do { (*(zout++)) = (*(p++)); } while (--len); }  
# 4015
}  
# 4016
}  
# 4017
}  
# 4018
} 
# 4020
static int stbi__compute_huffman_codes(stbi__zbuf *a) 
# 4021
{ 
# 4022
static const stbi_uc length_dezigzag[19] = {(16), (17), (18), (0), (8), (7), (9), (6), (10), (5), (11), (4), (12), (3), (13), (2), (14), (1), (15)}; 
# 4023
stbi__zhuffman z_codelength; 
# 4024
stbi_uc lencodes[(286 + 32) + 137]; 
# 4025
stbi_uc codelength_sizes[19]; 
# 4026
int i, n; 
# 4028
int hlit = stbi__zreceive(a, 5) + (257); 
# 4029
int hdist = stbi__zreceive(a, 5) + (1); 
# 4030
int hclen = stbi__zreceive(a, 4) + (4); 
# 4031
int ntot = hlit + hdist; 
# 4033
memset(codelength_sizes, 0, sizeof codelength_sizes); 
# 4034
for (i = 0; i < hclen; ++i) { 
# 4035
int s = stbi__zreceive(a, 3); 
# 4036
(codelength_sizes[length_dezigzag[i]]) = ((stbi_uc)s); 
# 4037
}  
# 4038
if (!(stbi__zbuild_huffman(&z_codelength, codelength_sizes, 19))) { return 0; }  
# 4040
n = 0; 
# 4041
while (n < ntot) { 
# 4042
int c = stbi__zhuffman_decode(a, &z_codelength); 
# 4043
if ((c < 0) || (c >= 19)) { return stbi__err("bad codelengths"); }  
# 4044
if (c < 16) { 
# 4045
(lencodes[n++]) = ((stbi_uc)c); } else 
# 4046
{ 
# 4047
stbi_uc fill = (0); 
# 4048
if (c == 16) { 
# 4049
c = (stbi__zreceive(a, 2) + (3)); 
# 4050
if (n == 0) { return stbi__err("bad codelengths"); }  
# 4051
fill = (lencodes[n - 1]); 
# 4052
} else { if (c == 17) { 
# 4053
c = (stbi__zreceive(a, 3) + (3)); } else 
# 4054
{ 
# 4055 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(c == 18)) ? (void)0 : __assert_fail("c == 18", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4055, __extension__ __PRETTY_FUNCTION__); 
# 4056 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
c = (stbi__zreceive(a, 7) + (11)); 
# 4057
}  }  
# 4058
if ((ntot - n) < c) { return stbi__err("bad codelengths"); }  
# 4059
memset(lencodes + n, fill, c); 
# 4060
n += c; 
# 4061
}  
# 4062
}  
# 4063
if (n != ntot) { return stbi__err("bad codelengths"); }  
# 4064
if (!(stbi__zbuild_huffman(&(a->z_length), lencodes, hlit))) { return 0; }  
# 4065
if (!(stbi__zbuild_huffman(&(a->z_distance), lencodes + hlit, hdist))) { return 0; }  
# 4066
return 1; 
# 4067
} 
# 4069
static int stbi__parse_uncompressed_block(stbi__zbuf *a) 
# 4070
{ 
# 4071
stbi_uc header[4]; 
# 4072
int len, nlen, k; 
# 4073
if ((a->num_bits) & 7) { 
# 4074
stbi__zreceive(a, (a->num_bits) & 7); }  
# 4076
k = 0; 
# 4077
while ((a->num_bits) > 0) { 
# 4078
(header[k++]) = ((stbi_uc)((a->code_buffer) & (255))); 
# 4079
(a->code_buffer) >>= 8; 
# 4080
(a->num_bits) -= 8; 
# 4081
}  
# 4082 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((a->num_bits) == 0)) ? (void)0 : __assert_fail("a->num_bits == 0", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4082, __extension__ __PRETTY_FUNCTION__); 
# 4084 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
while (k < 4) { 
# 4085
(header[k++]) = stbi__zget8(a); }  
# 4086
len = (((header[1]) * 256) + (header[0])); 
# 4087
nlen = (((header[3]) * 256) + (header[2])); 
# 4088
if (nlen != (len ^ 65535)) { return stbi__err("zlib corrupt"); }  
# 4089
if (((a->zbuffer) + len) > (a->zbuffer_end)) { return stbi__err("read past buffer"); }  
# 4090
if (((a->zout) + len) > (a->zout_end)) { 
# 4091
if (!(stbi__zexpand(a, a->zout, len))) { return 0; }  }  
# 4092
memcpy(a->zout, a->zbuffer, len); 
# 4093
(a->zbuffer) += len; 
# 4094
(a->zout) += len; 
# 4095
return 1; 
# 4096
} 
# 4098
static int stbi__parse_zlib_header(stbi__zbuf *a) 
# 4099
{ 
# 4100
int cmf = stbi__zget8(a); 
# 4101
int cm = cmf & 15; 
# 4103
int flg = stbi__zget8(a); 
# 4104
if ((((cmf * 256) + flg) % 31) != 0) { return stbi__err("bad zlib header"); }  
# 4105
if (flg & 32) { return stbi__err("no preset dict"); }  
# 4106
if (cm != 8) { return stbi__err("bad compression"); }  
# 4108
return 1; 
# 4109
} 
# 4111
static const stbi_uc stbi__zdefault_length[288] = {}; 
# 4123
static const stbi_uc stbi__zdefault_distance[32] = {(5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5), (5)}; 
# 4140 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static int stbi__parse_zlib(stbi__zbuf *a, int parse_header) 
# 4141
{ 
# 4142
int final, type; 
# 4143
if (parse_header) { 
# 4144
if (!(stbi__parse_zlib_header(a))) { return 0; }  }  
# 4145
(a->num_bits) = 0; 
# 4146
(a->code_buffer) = (0); 
# 4147
do { 
# 4148
final = (stbi__zreceive(a, 1)); 
# 4149
type = (stbi__zreceive(a, 2)); 
# 4150
if (type == 0) { 
# 4151
if (!(stbi__parse_uncompressed_block(a))) { return 0; }  
# 4152
} else { if (type == 3) { 
# 4153
return 0; 
# 4154
} else { 
# 4155
if (type == 1) { 
# 4157
if (!(stbi__zbuild_huffman(&(a->z_length), stbi__zdefault_length, 288))) { return 0; }  
# 4158
if (!(stbi__zbuild_huffman(&(a->z_distance), stbi__zdefault_distance, 32))) { return 0; }  
# 4159
} else { 
# 4160
if (!(stbi__compute_huffman_codes(a))) { return 0; }  
# 4161
}  
# 4162
if (!(stbi__parse_huffman_block(a))) { return 0; }  
# 4163
}  }  
# 4164
} while (!final); 
# 4165
return 1; 
# 4166
} 
# 4168
static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header) 
# 4169
{ 
# 4170
(a->zout_start) = obuf; 
# 4171
(a->zout) = obuf; 
# 4172
(a->zout_end) = (obuf + olen); 
# 4173
(a->z_expandable) = exp; 
# 4175
return stbi__parse_zlib(a, parse_header); 
# 4176
} 
# 4178
extern char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen) 
# 4179
{ 
# 4180
stbi__zbuf a; 
# 4181
char *p = (char *)stbi__malloc(initial_size); 
# 4182
if (p == (__null)) { 
# 4182 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return __null; }  
# 4183 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(a.zbuffer) = ((stbi_uc *)buffer); 
# 4184
(a.zbuffer_end) = (((stbi_uc *)buffer) + len); 
# 4185
if (stbi__do_zlib(&a, p, initial_size, 1, 1)) { 
# 4186
if (outlen) { (*outlen) = ((int)((a.zout) - (a.zout_start))); }  
# 4187
return a.zout_start; 
# 4188
} else { 
# 4189
free(a.zout_start); 
# 4190
return __null; 
# 4191 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 4192
} 
# 4194
extern char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen) 
# 4195
{ 
# 4196
return stbi_zlib_decode_malloc_guesssize(buffer, len, 16384, outlen); 
# 4197
} 
# 4199
extern char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header) 
# 4200
{ 
# 4201
stbi__zbuf a; 
# 4202
char *p = (char *)stbi__malloc(initial_size); 
# 4203
if (p == (__null)) { 
# 4203 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return __null; }  
# 4204 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(a.zbuffer) = ((stbi_uc *)buffer); 
# 4205
(a.zbuffer_end) = (((stbi_uc *)buffer) + len); 
# 4206
if (stbi__do_zlib(&a, p, initial_size, 1, parse_header)) { 
# 4207
if (outlen) { (*outlen) = ((int)((a.zout) - (a.zout_start))); }  
# 4208
return a.zout_start; 
# 4209
} else { 
# 4210
free(a.zout_start); 
# 4211
return __null; 
# 4212 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 4213
} 
# 4215
extern int stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen) 
# 4216
{ 
# 4217
stbi__zbuf a; 
# 4218
(a.zbuffer) = ((stbi_uc *)ibuffer); 
# 4219
(a.zbuffer_end) = (((stbi_uc *)ibuffer) + ilen); 
# 4220
if (stbi__do_zlib(&a, obuffer, olen, 0, 1)) { 
# 4221
return (int)((a.zout) - (a.zout_start)); } else { 
# 4223
return -1; }  
# 4224
} 
# 4226
extern char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen) 
# 4227
{ 
# 4228
stbi__zbuf a; 
# 4229
char *p = (char *)stbi__malloc(16384); 
# 4230
if (p == (__null)) { 
# 4230 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return __null; }  
# 4231 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(a.zbuffer) = ((stbi_uc *)buffer); 
# 4232
(a.zbuffer_end) = (((stbi_uc *)buffer) + len); 
# 4233
if (stbi__do_zlib(&a, p, 16384, 1, 0)) { 
# 4234
if (outlen) { (*outlen) = ((int)((a.zout) - (a.zout_start))); }  
# 4235
return a.zout_start; 
# 4236
} else { 
# 4237
free(a.zout_start); 
# 4238
return __null; 
# 4239 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 4240
} 
# 4242
extern int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen) 
# 4243
{ 
# 4244
stbi__zbuf a; 
# 4245
(a.zbuffer) = ((stbi_uc *)ibuffer); 
# 4246
(a.zbuffer_end) = (((stbi_uc *)ibuffer) + ilen); 
# 4247
if (stbi__do_zlib(&a, obuffer, olen, 0, 0)) { 
# 4248
return (int)((a.zout) - (a.zout_start)); } else { 
# 4250
return -1; }  
# 4251
} 
# 4269 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
typedef 
# 4266
struct { 
# 4267
stbi__uint32 length; 
# 4268
stbi__uint32 type; 
# 4269
} stbi__pngchunk; 
# 4271
static stbi__pngchunk stbi__get_chunk_header(stbi__context *s) 
# 4272
{ 
# 4273
stbi__pngchunk c; 
# 4274
(c.length) = stbi__get32be(s); 
# 4275
(c.type) = stbi__get32be(s); 
# 4276
return c; 
# 4277
} 
# 4279
static int stbi__check_png_header(stbi__context *s) 
# 4280
{ 
# 4281
static const stbi_uc png_sig[8] = {(137), (80), (78), (71), (13), (10), (26), (10)}; 
# 4282
int i; 
# 4283
for (i = 0; i < 8; ++i) { 
# 4284
if ((stbi__get8(s)) != (png_sig[i])) { return stbi__err("bad png sig"); }  }  
# 4285
return 1; 
# 4286
} 
# 4293
typedef 
# 4289
struct { 
# 4290
stbi__context *s; 
# 4291
stbi_uc *idata, *expanded, *out; 
# 4292
int depth; 
# 4293
} stbi__png; 
# 4296
enum { 
# 4297
STBI__F_none, 
# 4298
STBI__F_sub, 
# 4299
STBI__F_up, 
# 4300
STBI__F_avg, 
# 4301
STBI__F_paeth, 
# 4303
STBI__F_avg_first, 
# 4304
STBI__F_paeth_first
# 4305
}; 
# 4307
static stbi_uc first_row_filter[5] = {(STBI__F_none), (STBI__F_sub), (STBI__F_none), (STBI__F_avg_first), (STBI__F_paeth_first)}; 
# 4316
static int stbi__paeth(int a, int b, int c) 
# 4317
{ 
# 4318
int p = (a + b) - c; 
# 4319
int pa = abs(p - a); 
# 4320
int pb = abs(p - b); 
# 4321
int pc = abs(p - c); 
# 4322
if ((pa <= pb) && (pa <= pc)) { return a; }  
# 4323
if (pb <= pc) { return b; }  
# 4324
return c; 
# 4325
} 
# 4327
static const stbi_uc stbi__depth_scale_table[9] = {(0), (255), (85), (0), (17), (0), (0), (0), (1)}; 
# 4330
static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color) 
# 4331
{ 
# 4332
int bytes = (depth == 16) ? 2 : 1; 
# 4333
stbi__context *s = a->s; 
# 4334
stbi__uint32 i, j, stride = (x * out_n) * bytes; 
# 4335
stbi__uint32 img_len, img_width_bytes; 
# 4336
int k; 
# 4337
int img_n = s->img_n; 
# 4339
int output_bytes = out_n * bytes; 
# 4340
int filter_bytes = img_n * bytes; 
# 4341
int width = x; 
# 4343 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((out_n == (s->img_n)) || (out_n == ((s->img_n) + 1)))) ? (void)0 : __assert_fail("out_n == s->img_n || out_n == s->img_n+1", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4343, __extension__ __PRETTY_FUNCTION__); 
# 4344 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(a->out) = ((stbi_uc *)stbi__malloc_mad3(x, y, output_bytes, 0)); 
# 4345
if (!(a->out)) { return stbi__err("outofmem"); }  
# 4347
if (!(stbi__mad3sizes_valid(img_n, x, depth, 7))) { return stbi__err("too large"); }  
# 4348
img_width_bytes = ((((img_n * x) * depth) + (7)) >> 3); 
# 4349
img_len = ((img_width_bytes + (1)) * y); 
# 4354
if (raw_len < img_len) { return stbi__err("not enough pixels"); }  
# 4356
for (j = (0); j < y; ++j) { 
# 4357
stbi_uc *cur = (a->out) + (stride * j); 
# 4358
stbi_uc *prior; 
# 4359
int filter = *(raw++); 
# 4361
if (filter > 4) { 
# 4362
return stbi__err("invalid filter"); }  
# 4364
if (depth < 8) { 
# 4365 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(img_width_bytes <= x)) ? (void)0 : __assert_fail("img_width_bytes <= x", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4365, __extension__ __PRETTY_FUNCTION__); 
# 4366 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
cur += ((x * out_n) - img_width_bytes); 
# 4367
filter_bytes = 1; 
# 4368
width = img_width_bytes; 
# 4369
}  
# 4370
prior = (cur - stride); 
# 4373
if (j == (0)) { filter = (first_row_filter[filter]); }  
# 4376
for (k = 0; k < filter_bytes; ++k) { 
# 4377
switch (filter) { 
# 4378
case STBI__F_none:  (cur[k]) = (raw[k]); break; 
# 4379
case STBI__F_sub:  (cur[k]) = (raw[k]); break; 
# 4380
case STBI__F_up:  (cur[k]) = ((stbi_uc)(((raw[k]) + (prior[k])) & 255)); break; 
# 4381
case STBI__F_avg:  (cur[k]) = ((stbi_uc)(((raw[k]) + ((prior[k]) >> 1)) & 255)); break; 
# 4382
case STBI__F_paeth:  (cur[k]) = ((stbi_uc)(((raw[k]) + stbi__paeth(0, prior[k], 0)) & 255)); break; 
# 4383
case STBI__F_avg_first:  (cur[k]) = (raw[k]); break; 
# 4384
case STBI__F_paeth_first:  (cur[k]) = (raw[k]); break; 
# 4385
}  
# 4386
}  
# 4388
if (depth == 8) { 
# 4389
if (img_n != out_n) { 
# 4390
(cur[img_n]) = (255); }  
# 4391
raw += img_n; 
# 4392
cur += out_n; 
# 4393
prior += out_n; 
# 4394
} else { if (depth == 16) { 
# 4395
if (img_n != out_n) { 
# 4396
(cur[filter_bytes]) = (255); 
# 4397
(cur[filter_bytes + 1]) = (255); 
# 4398
}  
# 4399
raw += filter_bytes; 
# 4400
cur += output_bytes; 
# 4401
prior += output_bytes; 
# 4402
} else { 
# 4403
raw += 1; 
# 4404
cur += 1; 
# 4405
prior += 1; 
# 4406
}  }  
# 4409
if ((depth < 8) || (img_n == out_n)) { 
# 4410
int nk = (width - 1) * filter_bytes; 
# 4414
switch (filter) { 
# 4416
case STBI__F_none:  memcpy(cur, raw, nk); break; 
# 4417
case STBI__F_sub:  for (k = 0; k < nk; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + (cur[k - filter_bytes])) & 255)); }  break; 
# 4418
case STBI__F_up:  for (k = 0; k < nk; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + (prior[k])) & 255)); }  break; 
# 4419
case STBI__F_avg:  for (k = 0; k < nk; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + (((prior[k]) + (cur[k - filter_bytes])) >> 1)) & 255)); }  break; 
# 4420
case STBI__F_paeth:  for (k = 0; k < nk; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + stbi__paeth(cur[k - filter_bytes], prior[k], prior[k - filter_bytes])) & 255)); }  break; 
# 4421
case STBI__F_avg_first:  for (k = 0; k < nk; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + ((cur[k - filter_bytes]) >> 1)) & 255)); }  break; 
# 4422
case STBI__F_paeth_first:  for (k = 0; k < nk; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + stbi__paeth(cur[k - filter_bytes], 0, 0)) & 255)); }  break; 
# 4423
}  
# 4425
raw += nk; 
# 4426
} else { 
# 4427 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((img_n + 1) == out_n)) ? (void)0 : __assert_fail("img_n+1 == out_n", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4427, __extension__ __PRETTY_FUNCTION__); 
# 4432 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
switch (filter) { 
# 4433
case STBI__F_none:  for (i = (x - (1)); i >= (1); ((((--i), ((cur[filter_bytes]) = (255))), (raw += filter_bytes)), (cur += output_bytes)), (prior += output_bytes)) { for (k = 0; k < filter_bytes; ++k) { (cur[k]) = (raw[k]); }  }  break; 
# 4434
case STBI__F_sub:  for (i = (x - (1)); i >= (1); ((((--i), ((cur[filter_bytes]) = (255))), (raw += filter_bytes)), (cur += output_bytes)), (prior += output_bytes)) { for (k = 0; k < filter_bytes; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + (cur[k - output_bytes])) & 255)); }  }  break; 
# 4435
case STBI__F_up:  for (i = (x - (1)); i >= (1); ((((--i), ((cur[filter_bytes]) = (255))), (raw += filter_bytes)), (cur += output_bytes)), (prior += output_bytes)) { for (k = 0; k < filter_bytes; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + (prior[k])) & 255)); }  }  break; 
# 4436
case STBI__F_avg:  for (i = (x - (1)); i >= (1); ((((--i), ((cur[filter_bytes]) = (255))), (raw += filter_bytes)), (cur += output_bytes)), (prior += output_bytes)) { for (k = 0; k < filter_bytes; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + (((prior[k]) + (cur[k - output_bytes])) >> 1)) & 255)); }  }  break; 
# 4437
case STBI__F_paeth:  for (i = (x - (1)); i >= (1); ((((--i), ((cur[filter_bytes]) = (255))), (raw += filter_bytes)), (cur += output_bytes)), (prior += output_bytes)) { for (k = 0; k < filter_bytes; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + stbi__paeth(cur[k - output_bytes], prior[k], prior[k - output_bytes])) & 255)); }  }  break; 
# 4438
case STBI__F_avg_first:  for (i = (x - (1)); i >= (1); ((((--i), ((cur[filter_bytes]) = (255))), (raw += filter_bytes)), (cur += output_bytes)), (prior += output_bytes)) { for (k = 0; k < filter_bytes; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + ((cur[k - output_bytes]) >> 1)) & 255)); }  }  break; 
# 4439
case STBI__F_paeth_first:  for (i = (x - (1)); i >= (1); ((((--i), ((cur[filter_bytes]) = (255))), (raw += filter_bytes)), (cur += output_bytes)), (prior += output_bytes)) { for (k = 0; k < filter_bytes; ++k) { (cur[k]) = ((stbi_uc)(((raw[k]) + stbi__paeth(cur[k - output_bytes], 0, 0)) & 255)); }  }  break; 
# 4440
}  
# 4445
if (depth == 16) { 
# 4446
cur = ((a->out) + (stride * j)); 
# 4447
for (i = (0); i < x; (++i), (cur += output_bytes)) { 
# 4448
(cur[filter_bytes + 1]) = (255); 
# 4449
}  
# 4450
}  
# 4451
}  
# 4452
}  
# 4457
if (depth < 8) { 
# 4458
for (j = (0); j < y; ++j) { 
# 4459
stbi_uc *cur = (a->out) + (stride * j); 
# 4460
stbi_uc *in = (((a->out) + (stride * j)) + (x * out_n)) - img_width_bytes; 
# 4463
stbi_uc scale = (color == 0) ? stbi__depth_scale_table[depth] : 1; 
# 4471
if (depth == 4) { 
# 4472
for (k = (x * img_n); k >= 2; (k -= 2), (++in)) { 
# 4473
(*(cur++)) = (scale * ((*in) >> 4)); 
# 4474
(*(cur++)) = (scale * ((*in) & 15)); 
# 4475
}  
# 4476
if (k > 0) { (*(cur++)) = (scale * ((*in) >> 4)); }  
# 4477
} else { if (depth == 2) { 
# 4478
for (k = (x * img_n); k >= 4; (k -= 4), (++in)) { 
# 4479
(*(cur++)) = (scale * ((*in) >> 6)); 
# 4480
(*(cur++)) = (scale * (((*in) >> 4) & 3)); 
# 4481
(*(cur++)) = (scale * (((*in) >> 2) & 3)); 
# 4482
(*(cur++)) = (scale * ((*in) & 3)); 
# 4483
}  
# 4484
if (k > 0) { (*(cur++)) = (scale * ((*in) >> 6)); }  
# 4485
if (k > 1) { (*(cur++)) = (scale * (((*in) >> 4) & 3)); }  
# 4486
if (k > 2) { (*(cur++)) = (scale * (((*in) >> 2) & 3)); }  
# 4487
} else { if (depth == 1) { 
# 4488
for (k = (x * img_n); k >= 8; (k -= 8), (++in)) { 
# 4489
(*(cur++)) = (scale * ((*in) >> 7)); 
# 4490
(*(cur++)) = (scale * (((*in) >> 6) & 1)); 
# 4491
(*(cur++)) = (scale * (((*in) >> 5) & 1)); 
# 4492
(*(cur++)) = (scale * (((*in) >> 4) & 1)); 
# 4493
(*(cur++)) = (scale * (((*in) >> 3) & 1)); 
# 4494
(*(cur++)) = (scale * (((*in) >> 2) & 1)); 
# 4495
(*(cur++)) = (scale * (((*in) >> 1) & 1)); 
# 4496
(*(cur++)) = (scale * ((*in) & 1)); 
# 4497
}  
# 4498
if (k > 0) { (*(cur++)) = (scale * ((*in) >> 7)); }  
# 4499
if (k > 1) { (*(cur++)) = (scale * (((*in) >> 6) & 1)); }  
# 4500
if (k > 2) { (*(cur++)) = (scale * (((*in) >> 5) & 1)); }  
# 4501
if (k > 3) { (*(cur++)) = (scale * (((*in) >> 4) & 1)); }  
# 4502
if (k > 4) { (*(cur++)) = (scale * (((*in) >> 3) & 1)); }  
# 4503
if (k > 5) { (*(cur++)) = (scale * (((*in) >> 2) & 1)); }  
# 4504
if (k > 6) { (*(cur++)) = (scale * (((*in) >> 1) & 1)); }  
# 4505
}  }  }  
# 4506
if (img_n != out_n) { 
# 4507
int q; 
# 4509
cur = ((a->out) + (stride * j)); 
# 4510
if (img_n == 1) { 
# 4511
for (q = (x - (1)); q >= 0; --q) { 
# 4512
(cur[(q * 2) + 1]) = (255); 
# 4513
(cur[(q * 2) + 0]) = (cur[q]); 
# 4514
}  
# 4515
} else { 
# 4516 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(img_n == 3)) ? (void)0 : __assert_fail("img_n == 3", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4516, __extension__ __PRETTY_FUNCTION__); 
# 4517 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
for (q = (x - (1)); q >= 0; --q) { 
# 4518
(cur[(q * 4) + 3]) = (255); 
# 4519
(cur[(q * 4) + 2]) = (cur[(q * 3) + 2]); 
# 4520
(cur[(q * 4) + 1]) = (cur[(q * 3) + 1]); 
# 4521
(cur[(q * 4) + 0]) = (cur[(q * 3) + 0]); 
# 4522
}  
# 4523
}  
# 4524
}  
# 4525
}  
# 4526
} else { if (depth == 16) { 
# 4531
stbi_uc *cur = a->out; 
# 4532
stbi__uint16 *cur16 = (stbi__uint16 *)cur; 
# 4534
for (i = (0); i < ((x * y) * out_n); ((++i), (cur16++)), (cur += 2)) { 
# 4535
(*cur16) = (((cur[0]) << 8) | (cur[1])); 
# 4536
}  
# 4537
}  }  
# 4539
return 1; 
# 4540
} 
# 4542
static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced) 
# 4543
{ 
# 4544
int bytes = (depth == 16) ? 2 : 1; 
# 4545
int out_bytes = out_n * bytes; 
# 4546
stbi_uc *final; 
# 4547
int p; 
# 4548
if (!interlaced) { 
# 4549
return stbi__create_png_image_raw(a, image_data, image_data_len, out_n, (a->s)->img_x, (a->s)->img_y, depth, color); }  
# 4552
final = ((stbi_uc *)stbi__malloc_mad3((a->s)->img_x, (a->s)->img_y, out_bytes, 0)); 
# 4553
for (p = 0; p < 7; ++p) { 
# 4554
int xorig[] = {0, 4, 0, 2, 0, 1, 0}; 
# 4555
int yorig[] = {0, 0, 4, 0, 2, 0, 1}; 
# 4556
int xspc[] = {8, 8, 4, 4, 2, 2, 1}; 
# 4557
int yspc[] = {8, 8, 8, 4, 4, 2, 2}; 
# 4558
int i, j, x, y; 
# 4560
x = ((((((a->s)->img_x) - (xorig[p])) + (xspc[p])) - (1)) / (xspc[p])); 
# 4561
y = ((((((a->s)->img_y) - (yorig[p])) + (yspc[p])) - (1)) / (yspc[p])); 
# 4562
if (x && y) { 
# 4563
stbi__uint32 img_len = (((((((a->s)->img_n) * x) * depth) + 7) >> 3) + 1) * y; 
# 4564
if (!(stbi__create_png_image_raw(a, image_data, image_data_len, out_n, x, y, depth, color))) { 
# 4565
free(final); 
# 4566
return 0; 
# 4567
}  
# 4568
for (j = 0; j < y; ++j) { 
# 4569
for (i = 0; i < x; ++i) { 
# 4570
int out_y = (j * (yspc[p])) + (yorig[p]); 
# 4571
int out_x = (i * (xspc[p])) + (xorig[p]); 
# 4572
memcpy((final + ((out_y * ((a->s)->img_x)) * out_bytes)) + (out_x * out_bytes), (a->out) + (((j * x) + i) * out_bytes), out_bytes); 
# 4574
}  
# 4575
}  
# 4576
free(a->out); 
# 4577
image_data += img_len; 
# 4578
image_data_len -= img_len; 
# 4579
}  
# 4580
}  
# 4581
(a->out) = final; 
# 4583
return 1; 
# 4584
} 
# 4586
static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n) 
# 4587
{ 
# 4588
stbi__context *s = z->s; 
# 4589
stbi__uint32 i, pixel_count = (s->img_x) * (s->img_y); 
# 4590
stbi_uc *p = z->out; 
# 4594 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((out_n == 2) || (out_n == 4))) ? (void)0 : __assert_fail("out_n == 2 || out_n == 4", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4594, __extension__ __PRETTY_FUNCTION__); 
# 4596 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (out_n == 2) { 
# 4597
for (i = (0); i < pixel_count; ++i) { 
# 4598
(p[1]) = (((p[0]) == (tc[0])) ? 0 : 255); 
# 4599
p += 2; 
# 4600
}  
# 4601
} else { 
# 4602
for (i = (0); i < pixel_count; ++i) { 
# 4603
if (((p[0]) == (tc[0])) && ((p[1]) == (tc[1])) && ((p[2]) == (tc[2]))) { 
# 4604
(p[3]) = (0); }  
# 4605
p += 4; 
# 4606
}  
# 4607
}  
# 4608
return 1; 
# 4609
} 
# 4611
static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n) 
# 4612
{ 
# 4613
stbi__context *s = z->s; 
# 4614
stbi__uint32 i, pixel_count = (s->img_x) * (s->img_y); 
# 4615
stbi__uint16 *p = (stbi__uint16 *)(z->out); 
# 4619 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((out_n == 2) || (out_n == 4))) ? (void)0 : __assert_fail("out_n == 2 || out_n == 4", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4619, __extension__ __PRETTY_FUNCTION__); 
# 4621 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (out_n == 2) { 
# 4622
for (i = (0); i < pixel_count; ++i) { 
# 4623
(p[1]) = (((p[0]) == (tc[0])) ? 0 : 65535); 
# 4624
p += 2; 
# 4625
}  
# 4626
} else { 
# 4627
for (i = (0); i < pixel_count; ++i) { 
# 4628
if (((p[0]) == (tc[0])) && ((p[1]) == (tc[1])) && ((p[2]) == (tc[2]))) { 
# 4629
(p[3]) = (0); }  
# 4630
p += 4; 
# 4631
}  
# 4632
}  
# 4633
return 1; 
# 4634
} 
# 4636
static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n) 
# 4637
{ 
# 4638
stbi__uint32 i, pixel_count = ((a->s)->img_x) * ((a->s)->img_y); 
# 4639
stbi_uc *p, *temp_out, *orig = a->out; 
# 4641
p = ((stbi_uc *)stbi__malloc_mad2(pixel_count, pal_img_n, 0)); 
# 4642
if (p == (__null)) { 
# 4642 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__err("outofmem"); }  
# 4645
temp_out = p; 
# 4647
if (pal_img_n == 3) { 
# 4648
for (i = (0); i < pixel_count; ++i) { 
# 4649
int n = (orig[i]) * 4; 
# 4650
(p[0]) = (palette[n]); 
# 4651
(p[1]) = (palette[n + 1]); 
# 4652
(p[2]) = (palette[n + 2]); 
# 4653
p += 3; 
# 4654
}  
# 4655
} else { 
# 4656
for (i = (0); i < pixel_count; ++i) { 
# 4657
int n = (orig[i]) * 4; 
# 4658
(p[0]) = (palette[n]); 
# 4659
(p[1]) = (palette[n + 1]); 
# 4660
(p[2]) = (palette[n + 2]); 
# 4661
(p[3]) = (palette[n + 3]); 
# 4662
p += 4; 
# 4663
}  
# 4664
}  
# 4665
free(a->out); 
# 4666
(a->out) = temp_out; 
# 4668
(void)sizeof len; 
# 4670
return 1; 
# 4671
} 
# 4673
static int stbi__unpremultiply_on_load = 0; 
# 4674
static int stbi__de_iphone_flag = 0; 
# 4676
extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply) 
# 4677
{ 
# 4678
stbi__unpremultiply_on_load = flag_true_if_should_unpremultiply; 
# 4679
} 
# 4681
extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert) 
# 4682
{ 
# 4683
stbi__de_iphone_flag = flag_true_if_should_convert; 
# 4684
} 
# 4686
static void stbi__de_iphone(stbi__png *z) 
# 4687
{ 
# 4688
stbi__context *s = z->s; 
# 4689
stbi__uint32 i, pixel_count = (s->img_x) * (s->img_y); 
# 4690
stbi_uc *p = z->out; 
# 4692
if ((s->img_out_n) == 3) { 
# 4693
for (i = (0); i < pixel_count; ++i) { 
# 4694
stbi_uc t = p[0]; 
# 4695
(p[0]) = (p[2]); 
# 4696
(p[2]) = t; 
# 4697
p += 3; 
# 4698
}  
# 4699
} else { 
# 4700 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((s->img_out_n) == 4)) ? (void)0 : __assert_fail("s->img_out_n == 4", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 4700, __extension__ __PRETTY_FUNCTION__); 
# 4701 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (stbi__unpremultiply_on_load) { 
# 4703
for (i = (0); i < pixel_count; ++i) { 
# 4704
stbi_uc a = p[3]; 
# 4705
stbi_uc t = p[0]; 
# 4706
if (a) { 
# 4707
stbi_uc half = a / 2; 
# 4708
(p[0]) = ((((p[2]) * 255) + half) / a); 
# 4709
(p[1]) = ((((p[1]) * 255) + half) / a); 
# 4710
(p[2]) = (((t * 255) + half) / a); 
# 4711
} else { 
# 4712
(p[0]) = (p[2]); 
# 4713
(p[2]) = t; 
# 4714
}  
# 4715
p += 4; 
# 4716
}  
# 4717
} else { 
# 4719
for (i = (0); i < pixel_count; ++i) { 
# 4720
stbi_uc t = p[0]; 
# 4721
(p[0]) = (p[2]); 
# 4722
(p[2]) = t; 
# 4723
p += 4; 
# 4724
}  
# 4725
}  
# 4726
}  
# 4727
} 
# 4731
static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp) 
# 4732
{ 
# 4733
stbi_uc palette[1024], pal_img_n = (0); 
# 4734
stbi_uc has_trans = (0), tc[3]; 
# 4735
stbi__uint16 tc16[3]; 
# 4736
stbi__uint32 ioff = (0), idata_limit = (0), i, pal_len = (0); 
# 4737
int first = 1, k, interlace = 0, color = 0, is_iphone = 0; 
# 4738
stbi__context *s = z->s; 
# 4740
(z->expanded) = (__null); 
# 4741 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(z->idata) = (__null); 
# 4742 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(z->out) = (__null); 
# 4744 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (!(stbi__check_png_header(s))) { return 0; }  
# 4746
if (scan == (STBI__SCAN_type)) { return 1; }  
# 4748
for (; ;) { 
# 4749
stbi__pngchunk c = stbi__get_chunk_header(s); 
# 4750
switch (c.type) { 
# 4751
case (((((unsigned)'C') << 24) + (((unsigned)'g') << 16)) + (((unsigned)'B') << 8)) + ((unsigned)'I'):  
# 4752
is_iphone = 1; 
# 4753
stbi__skip(s, c.length); 
# 4754
break; 
# 4755
case (((((unsigned)'I') << 24) + (((unsigned)'H') << 16)) + (((unsigned)'D') << 8)) + ((unsigned)'R'):  { 
# 4756
int comp, filter; 
# 4757
if (!first) { return stbi__err("multiple IHDR"); }  
# 4758
first = 0; 
# 4759
if ((c.length) != (13)) { return stbi__err("bad IHDR len"); }  
# 4760
(s->img_x) = stbi__get32be(s); if ((s->img_x) > (1 << 24)) { return stbi__err("too large"); }  
# 4761
(s->img_y) = stbi__get32be(s); if ((s->img_y) > (1 << 24)) { return stbi__err("too large"); }  
# 4762
(z->depth) = (stbi__get8(s)); if (((z->depth) != 1) && ((z->depth) != 2) && ((z->depth) != 4) && ((z->depth) != 8) && ((z->depth) != 16)) { return stbi__err("1/2/4/8/16-bit only"); }  
# 4763
color = (stbi__get8(s)); if (color > 6) { return stbi__err("bad ctype"); }  
# 4764
if ((color == 3) && ((z->depth) == 16)) { return stbi__err("bad ctype"); }  
# 4765
if (color == 3) { pal_img_n = (3); } else { if (color & 1) { return stbi__err("bad ctype"); }  }  
# 4766
comp = (stbi__get8(s)); if (comp) { return stbi__err("bad comp method"); }  
# 4767
filter = (stbi__get8(s)); if (filter) { return stbi__err("bad filter method"); }  
# 4768
interlace = (stbi__get8(s)); if (interlace > 1) { return stbi__err("bad interlace method"); }  
# 4769
if ((!(s->img_x)) || (!(s->img_y))) { return stbi__err("0-pixel image"); }  
# 4770
if (!pal_img_n) { 
# 4771
(s->img_n) = (((color & 2) ? 3 : 1) + ((color & 4) ? 1 : 0)); 
# 4772
if ((((1 << 30) / (s->img_x)) / (s->img_n)) < (s->img_y)) { return stbi__err("too large"); }  
# 4773
if (scan == (STBI__SCAN_header)) { return 1; }  
# 4774
} else { 
# 4777
(s->img_n) = 1; 
# 4778
if ((((1 << 30) / (s->img_x)) / (4)) < (s->img_y)) { return stbi__err("too large"); }  
# 4780
}  
# 4781
break; 
# 4782
} 
# 4784
case (((((unsigned)'P') << 24) + (((unsigned)'L') << 16)) + (((unsigned)'T') << 8)) + ((unsigned)'E'):  { 
# 4785
if (first) { return stbi__err("first not IHDR"); }  
# 4786
if ((c.length) > (256 * 3)) { return stbi__err("invalid PLTE"); }  
# 4787
pal_len = ((c.length) / (3)); 
# 4788
if ((pal_len * (3)) != (c.length)) { return stbi__err("invalid PLTE"); }  
# 4789
for (i = (0); i < pal_len; ++i) { 
# 4790
(palette[(i * (4)) + (0)]) = stbi__get8(s); 
# 4791
(palette[(i * (4)) + (1)]) = stbi__get8(s); 
# 4792
(palette[(i * (4)) + (2)]) = stbi__get8(s); 
# 4793
(palette[(i * (4)) + (3)]) = (255); 
# 4794
}  
# 4795
break; 
# 4796
} 
# 4798
case (((((unsigned)'t') << 24) + (((unsigned)'R') << 16)) + (((unsigned)'N') << 8)) + ((unsigned)'S'):  { 
# 4799
if (first) { return stbi__err("first not IHDR"); }  
# 4800
if (z->idata) { return stbi__err("tRNS after IDAT"); }  
# 4801
if (pal_img_n) { 
# 4802
if (scan == (STBI__SCAN_header)) { (s->img_n) = 4; return 1; }  
# 4803
if (pal_len == (0)) { return stbi__err("tRNS before PLTE"); }  
# 4804
if ((c.length) > pal_len) { return stbi__err("bad tRNS len"); }  
# 4805
pal_img_n = (4); 
# 4806
for (i = (0); i < (c.length); ++i) { 
# 4807
(palette[(i * (4)) + (3)]) = stbi__get8(s); }  
# 4808
} else { 
# 4809
if (!((s->img_n) & 1)) { return stbi__err("tRNS with alpha"); }  
# 4810
if ((c.length) != (((stbi__uint32)(s->img_n)) * (2))) { return stbi__err("bad tRNS len"); }  
# 4811
has_trans = (1); 
# 4812
if ((z->depth) == 16) { 
# 4813
for (k = 0; k < (s->img_n); ++k) { (tc16[k]) = ((stbi__uint16)stbi__get16be(s)); }  
# 4814
} else { 
# 4815
for (k = 0; k < (s->img_n); ++k) { (tc[k]) = (((stbi_uc)(stbi__get16be(s) & 255)) * (stbi__depth_scale_table[z->depth])); }  
# 4816
}  
# 4817
}  
# 4818
break; 
# 4819
} 
# 4821
case (((((unsigned)'I') << 24) + (((unsigned)'D') << 16)) + (((unsigned)'A') << 8)) + ((unsigned)'T'):  { 
# 4822
if (first) { return stbi__err("first not IHDR"); }  
# 4823
if (pal_img_n && (!pal_len)) { return stbi__err("no PLTE"); }  
# 4824
if (scan == (STBI__SCAN_header)) { (s->img_n) = pal_img_n; return 1; }  
# 4825
if (((int)(ioff + (c.length))) < ((int)ioff)) { return 0; }  
# 4826
if ((ioff + (c.length)) > idata_limit) { 
# 4827
stbi__uint32 idata_limit_old = idata_limit; 
# 4828
stbi_uc *p; 
# 4829
if (idata_limit == (0)) { idata_limit = (((c.length) > (4096)) ? c.length : (4096)); }  
# 4830
while ((ioff + (c.length)) > idata_limit) { 
# 4831
idata_limit *= (2); }  
# 4832
(void)sizeof idata_limit_old; 
# 4833
p = ((stbi_uc *)realloc(z->idata, idata_limit)); if (p == (__null)) { 
# 4833 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__err("outofmem"); }  
# 4834
(z->idata) = p; 
# 4835
}  
# 4836
if (!(stbi__getn(s, (z->idata) + ioff, c.length))) { return stbi__err("outofdata"); }  
# 4837
ioff += (c.length); 
# 4838
break; 
# 4839
} 
# 4841
case (((((unsigned)'I') << 24) + (((unsigned)'E') << 16)) + (((unsigned)'N') << 8)) + ((unsigned)'D'):  { 
# 4842
stbi__uint32 raw_len, bpl; 
# 4843
if (first) { return stbi__err("first not IHDR"); }  
# 4844
if (scan != (STBI__SCAN_load)) { return 1; }  
# 4845
if ((z->idata) == (__null)) { 
# 4845 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return stbi__err("no IDAT"); }  
# 4847
bpl = ((((s->img_x) * (z->depth)) + (7)) / (8)); 
# 4848
raw_len = (((bpl * (s->img_y)) * (s->img_n)) + (s->img_y)); 
# 4849
(z->expanded) = ((stbi_uc *)stbi_zlib_decode_malloc_guesssize_headerflag((char *)(z->idata), ioff, raw_len, (int *)(&raw_len), !is_iphone)); 
# 4850
if ((z->expanded) == (__null)) { 
# 4850 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return 0; }  
# 4851
free(z->idata); (z->idata) = (__null); 
# 4852 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (((req_comp == ((s->img_n) + 1)) && (req_comp != 3) && (!pal_img_n)) || has_trans) { 
# 4853
(s->img_out_n) = ((s->img_n) + 1); } else { 
# 4855
(s->img_out_n) = (s->img_n); }  
# 4856
if (!(stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace))) { return 0; }  
# 4857
if (has_trans) { 
# 4858
if ((z->depth) == 16) { 
# 4859
if (!(stbi__compute_transparency16(z, tc16, s->img_out_n))) { return 0; }  
# 4860
} else { 
# 4861
if (!(stbi__compute_transparency(z, tc, s->img_out_n))) { return 0; }  
# 4862
}  
# 4863
}  
# 4864
if (is_iphone && stbi__de_iphone_flag && ((s->img_out_n) > 2)) { 
# 4865
stbi__de_iphone(z); }  
# 4866
if (pal_img_n) { 
# 4868
(s->img_n) = pal_img_n; 
# 4869
(s->img_out_n) = pal_img_n; 
# 4870
if (req_comp >= 3) { (s->img_out_n) = req_comp; }  
# 4871
if (!(stbi__expand_png_palette(z, palette, pal_len, s->img_out_n))) { 
# 4872
return 0; }  
# 4873
} else { if (has_trans) { 
# 4875
++(s->img_n); 
# 4876
}  }  
# 4877
free(z->expanded); (z->expanded) = (__null); 
# 4878 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return 1; 
# 4879
} 
# 4881
default:  
# 4883
if (first) { return stbi__err("first not IHDR"); }  
# 4884
if (((c.type) & (1 << 29)) == (0)) { 
# 4887
static char invalid_chunk[] = "XXXX PNG chunk not known"; 
# 4888
(invalid_chunk[0]) = ((stbi_uc)(((c.type) >> 24) & (255))); 
# 4889
(invalid_chunk[1]) = ((stbi_uc)(((c.type) >> 16) & (255))); 
# 4890
(invalid_chunk[2]) = ((stbi_uc)(((c.type) >> 8) & (255))); 
# 4891
(invalid_chunk[3]) = ((stbi_uc)(((c.type) >> 0) & (255))); 
# 4893
return stbi__err(invalid_chunk); 
# 4894
}  
# 4895
stbi__skip(s, c.length); 
# 4896
break; 
# 4897
}  
# 4899
stbi__get32be(s); 
# 4900
}  
# 4901
} 
# 4903
static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri) 
# 4904
{ 
# 4905
void *result = (__null); 
# 4906 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if ((req_comp < 0) || (req_comp > 4)) { return ((unsigned char *)((::size_t)((stbi__err("bad req_comp")) ? __null : __null))); }  
# 4907 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (stbi__parse_png_file(p, STBI__SCAN_load, req_comp)) { 
# 4908
if ((p->depth) < 8) { 
# 4909
(ri->bits_per_channel) = 8; } else { 
# 4911
(ri->bits_per_channel) = (p->depth); }  
# 4912
result = (p->out); 
# 4913
(p->out) = (__null); 
# 4914 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (req_comp && (req_comp != ((p->s)->img_out_n))) { 
# 4915
if ((ri->bits_per_channel) == 8) { 
# 4916
result = (stbi__convert_format((unsigned char *)result, (p->s)->img_out_n, req_comp, (p->s)->img_x, (p->s)->img_y)); } else { 
# 4918
result = (stbi__convert_format16((stbi__uint16 *)result, (p->s)->img_out_n, req_comp, (p->s)->img_x, (p->s)->img_y)); }  
# 4919
((p->s)->img_out_n) = req_comp; 
# 4920
if (result == (__null)) { 
# 4920 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return result; }  
# 4921
}  
# 4922
(*x) = ((p->s)->img_x); 
# 4923
(*y) = ((p->s)->img_y); 
# 4924
if (n) { (*n) = ((p->s)->img_n); }  
# 4925
}  
# 4926
free(p->out); (p->out) = (__null); 
# 4927 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
free(p->expanded); (p->expanded) = (__null); 
# 4928 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
free(p->idata); (p->idata) = (__null); 
# 4930 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return result; 
# 4931
} 
# 4933
static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri) 
# 4934
{ 
# 4935
stbi__png p; 
# 4936
(p.s) = s; 
# 4937
return stbi__do_png(&p, x, y, comp, req_comp, ri); 
# 4938
} 
# 4940
static int stbi__png_test(stbi__context *s) 
# 4941
{ 
# 4942
int r; 
# 4943
r = stbi__check_png_header(s); 
# 4944
stbi__rewind(s); 
# 4945
return r; 
# 4946
} 
# 4948
static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp) 
# 4949
{ 
# 4950
if (!(stbi__parse_png_file(p, STBI__SCAN_header, 0))) { 
# 4951
stbi__rewind(p->s); 
# 4952
return 0; 
# 4953
}  
# 4954
if (x) { (*x) = ((p->s)->img_x); }  
# 4955
if (y) { (*y) = ((p->s)->img_y); }  
# 4956
if (comp) { (*comp) = ((p->s)->img_n); }  
# 4957
return 1; 
# 4958
} 
# 4960
static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp) 
# 4961
{ 
# 4962
stbi__png p; 
# 4963
(p.s) = s; 
# 4964
return stbi__png_info_raw(&p, x, y, comp); 
# 4965
} 
# 4967
static int stbi__png_is16(stbi__context *s) 
# 4968
{ 
# 4969
stbi__png p; 
# 4970
(p.s) = s; 
# 4971
if (!(stbi__png_info_raw(&p, __null, __null, __null))) { 
# 4972 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return 0; }  
# 4973
if ((p.depth) != 16) { 
# 4974
stbi__rewind(p.s); 
# 4975
return 0; 
# 4976
}  
# 4977
return 1; 
# 4978
} 
# 4984
static int stbi__bmp_test_raw(stbi__context *s) 
# 4985
{ 
# 4986
int r; 
# 4987
int sz; 
# 4988
if ((stbi__get8(s)) != ('B')) { return 0; }  
# 4989
if ((stbi__get8(s)) != ('M')) { return 0; }  
# 4990
stbi__get32le(s); 
# 4991
stbi__get16le(s); 
# 4992
stbi__get16le(s); 
# 4993
stbi__get32le(s); 
# 4994
sz = (stbi__get32le(s)); 
# 4995
r = (((((sz == 12) || (sz == 40)) || (sz == 56)) || (sz == 108)) || (sz == 124)); 
# 4996
return r; 
# 4997
} 
# 4999
static int stbi__bmp_test(stbi__context *s) 
# 5000
{ 
# 5001
int r = stbi__bmp_test_raw(s); 
# 5002
stbi__rewind(s); 
# 5003
return r; 
# 5004
} 
# 5008
static int stbi__high_bit(unsigned z) 
# 5009
{ 
# 5010
int n = 0; 
# 5011
if (z == (0)) { return -1; }  
# 5012
if (z >= (65536)) { (n += 16), (z >>= 16); }  
# 5013
if (z >= (256)) { (n += 8), (z >>= 8); }  
# 5014
if (z >= (16)) { (n += 4), (z >>= 4); }  
# 5015
if (z >= (4)) { (n += 2), (z >>= 2); }  
# 5016
if (z >= (2)) { (n += 1), (z >>= 1); }  
# 5017
return n; 
# 5018
} 
# 5020
static int stbi__bitcount(unsigned a) 
# 5021
{ 
# 5022
a = ((a & (1431655765)) + ((a >> 1) & (1431655765))); 
# 5023
a = ((a & (858993459)) + ((a >> 2) & (858993459))); 
# 5024
a = ((a + (a >> 4)) & (252645135)); 
# 5025
a = (a + (a >> 8)); 
# 5026
a = (a + (a >> 16)); 
# 5027
return a & (255); 
# 5028
} 
# 5033
static int stbi__shiftsigned(int v, int shift, int bits) 
# 5034
{ 
# 5035
static unsigned mul_table[9] = {(0), (255), (85), (73), (17), (33), (65), (129), (1)}; 
# 5040
static unsigned shift_table[9] = {(0), (0), (0), (1), (0), (2), (4), (6), (0)}; 
# 5043
if (shift < 0) { 
# 5044
v <<= (-shift); } else { 
# 5046
v >>= shift; }  
# 5047 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((v >= 0) && (v < 256))) ? (void)0 : __assert_fail("v >= 0 && v < 256", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 5047, __extension__ __PRETTY_FUNCTION__); 
# 5048 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
v >>= (8 - bits); 
# 5049 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>((bits >= 0) && (bits <= 8))) ? (void)0 : __assert_fail("bits >= 0 && bits <= 8", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 5049, __extension__ __PRETTY_FUNCTION__); 
# 5050 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return ((int)(((unsigned)v) * (mul_table[bits]))) >> (shift_table[bits]); 
# 5051
} 
# 5057
typedef 
# 5054
struct { 
# 5055
int bpp, offset, hsz; 
# 5056
unsigned mr, mg, mb, ma, all_a; 
# 5057
} stbi__bmp_data; 
# 5059
static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info) 
# 5060
{ 
# 5061
int hsz; 
# 5062
if (((stbi__get8(s)) != ('B')) || ((stbi__get8(s)) != ('M'))) { return ((unsigned char *)((::size_t)((stbi__err("not BMP")) ? __null : __null))); }  
# 5063 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__get32le(s); 
# 5064
stbi__get16le(s); 
# 5065
stbi__get16le(s); 
# 5066
(info->offset) = (stbi__get32le(s)); 
# 5067
(info->hsz) = (hsz = (stbi__get32le(s))); 
# 5068
(info->mr) = ((info->mg) = ((info->mb) = ((info->ma) = (0)))); 
# 5070
if ((hsz != 12) && (hsz != 40) && (hsz != 56) && (hsz != 108) && (hsz != 124)) { return ((unsigned char *)((::size_t)((stbi__err("unknown BMP")) ? __null : __null))); }  
# 5071 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (hsz == 12) { 
# 5072
(s->img_x) = (stbi__get16le(s)); 
# 5073
(s->img_y) = (stbi__get16le(s)); 
# 5074
} else { 
# 5075
(s->img_x) = stbi__get32le(s); 
# 5076
(s->img_y) = stbi__get32le(s); 
# 5077
}  
# 5078
if (stbi__get16le(s) != 1) { return ((unsigned char *)((::size_t)((stbi__err("bad BMP")) ? __null : __null))); }  
# 5079 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(info->bpp) = stbi__get16le(s); 
# 5080
if (hsz != 12) { 
# 5081
int compress = stbi__get32le(s); 
# 5082
if ((compress == 1) || (compress == 2)) { return ((unsigned char *)((::size_t)((stbi__err("BMP RLE")) ? __null : __null))); }  
# 5083 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__get32le(s); 
# 5084
stbi__get32le(s); 
# 5085
stbi__get32le(s); 
# 5086
stbi__get32le(s); 
# 5087
stbi__get32le(s); 
# 5088
if ((hsz == 40) || (hsz == 56)) { 
# 5089
if (hsz == 56) { 
# 5090
stbi__get32le(s); 
# 5091
stbi__get32le(s); 
# 5092
stbi__get32le(s); 
# 5093
stbi__get32le(s); 
# 5094
}  
# 5095
if (((info->bpp) == 16) || ((info->bpp) == 32)) { 
# 5096
if (compress == 0) { 
# 5097
if ((info->bpp) == 32) { 
# 5098
(info->mr) = (255U << 16); 
# 5099
(info->mg) = (255U << 8); 
# 5100
(info->mb) = (255U << 0); 
# 5101
(info->ma) = (255U << 24); 
# 5102
(info->all_a) = (0); 
# 5103
} else { 
# 5104
(info->mr) = (31U << 10); 
# 5105
(info->mg) = (31U << 5); 
# 5106
(info->mb) = (31U << 0); 
# 5107
}  
# 5108
} else { if (compress == 3) { 
# 5109
(info->mr) = stbi__get32le(s); 
# 5110
(info->mg) = stbi__get32le(s); 
# 5111
(info->mb) = stbi__get32le(s); 
# 5113
if (((info->mr) == (info->mg)) && ((info->mg) == (info->mb))) { 
# 5115
return ((unsigned char *)((::size_t)((stbi__err("bad BMP")) ? __null : __null))); 
# 5116 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 5117
} else { 
# 5118
return ((unsigned char *)((::size_t)((stbi__err("bad BMP")) ? __null : __null))); }  }  
# 5119 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 5120
} else { 
# 5121
int i; 
# 5122
if ((hsz != 108) && (hsz != 124)) { 
# 5123
return ((unsigned char *)((::size_t)((stbi__err("bad BMP")) ? __null : __null))); }  
# 5124 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(info->mr) = stbi__get32le(s); 
# 5125
(info->mg) = stbi__get32le(s); 
# 5126
(info->mb) = stbi__get32le(s); 
# 5127
(info->ma) = stbi__get32le(s); 
# 5128
stbi__get32le(s); 
# 5129
for (i = 0; i < 12; ++i) { 
# 5130
stbi__get32le(s); }  
# 5131
if (hsz == 124) { 
# 5132
stbi__get32le(s); 
# 5133
stbi__get32le(s); 
# 5134
stbi__get32le(s); 
# 5135
stbi__get32le(s); 
# 5136
}  
# 5137
}  
# 5138
}  
# 5139
return (void *)1; 
# 5140
} 
# 5143
static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri) 
# 5144
{ 
# 5145
stbi_uc *out; 
# 5146
unsigned mr = (0), mg = (0), mb = (0), ma = (0), all_a; 
# 5147
stbi_uc pal[256][4]; 
# 5148
int psize = 0, i, j, width; 
# 5149
int flip_vertically, pad, target; 
# 5150
stbi__bmp_data info; 
# 5151
(void)sizeof ri; 
# 5153
(info.all_a) = (255); 
# 5154
if (stbi__bmp_parse_header(s, &info) == (__null)) { 
# 5155 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return __null; }  
# 5157 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
flip_vertically = (((int)(s->img_y)) > 0); 
# 5158
(s->img_y) = (abs((int)(s->img_y))); 
# 5160
mr = (info.mr); 
# 5161
mg = (info.mg); 
# 5162
mb = (info.mb); 
# 5163
ma = (info.ma); 
# 5164
all_a = (info.all_a); 
# 5166
if ((info.hsz) == 12) { 
# 5167
if ((info.bpp) < 24) { 
# 5168
psize = ((((info.offset) - 14) - 24) / 3); }  
# 5169
} else { 
# 5170
if ((info.bpp) < 16) { 
# 5171
psize = ((((info.offset) - 14) - (info.hsz)) >> 2); }  
# 5172
}  
# 5174
(s->img_n) = ((ma) ? 4 : 3); 
# 5175
if (req_comp && (req_comp >= 3)) { 
# 5176
target = req_comp; } else { 
# 5178
target = (s->img_n); }  
# 5181
if (!(stbi__mad3sizes_valid(target, s->img_x, s->img_y, 0))) { 
# 5182
return ((unsigned char *)((::size_t)((stbi__err("too large")) ? __null : __null))); }  
# 5184 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
out = ((stbi_uc *)stbi__malloc_mad3(target, s->img_x, s->img_y, 0)); 
# 5185
if (!out) { return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); }  
# 5186 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if ((info.bpp) < 16) { 
# 5187
int z = 0; 
# 5188
if ((psize == 0) || (psize > 256)) { free(out); return ((unsigned char *)((::size_t)((stbi__err("invalid")) ? __null : __null))); 
# 5188 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 5189
for (i = 0; i < psize; ++i) { 
# 5190
((pal[i])[2]) = stbi__get8(s); 
# 5191
((pal[i])[1]) = stbi__get8(s); 
# 5192
((pal[i])[0]) = stbi__get8(s); 
# 5193
if ((info.hsz) != 12) { stbi__get8(s); }  
# 5194
((pal[i])[3]) = (255); 
# 5195
}  
# 5196
stbi__skip(s, (((info.offset) - 14) - (info.hsz)) - (psize * (((info.hsz) == 12) ? 3 : 4))); 
# 5197
if ((info.bpp) == 1) { width = (((s->img_x) + (7)) >> 3); } else { 
# 5198
if ((info.bpp) == 4) { width = (((s->img_x) + (1)) >> 1); } else { 
# 5199
if ((info.bpp) == 8) { width = (s->img_x); } else 
# 5200
{ free(out); return ((unsigned char *)((::size_t)((stbi__err("bad bpp")) ? __null : __null))); 
# 5200 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  }  }  
# 5201
pad = ((-width) & 3); 
# 5202
if ((info.bpp) == 1) { 
# 5203
for (j = 0; j < ((int)(s->img_y)); ++j) { 
# 5204
int bit_offset = 7, v = stbi__get8(s); 
# 5205
for (i = 0; i < ((int)(s->img_x)); ++i) { 
# 5206
int color = (v >> bit_offset) & 1; 
# 5207
(out[z++]) = ((pal[color])[0]); 
# 5208
(out[z++]) = ((pal[color])[1]); 
# 5209
(out[z++]) = ((pal[color])[2]); 
# 5210
if ((--bit_offset) < 0) { 
# 5211
bit_offset = 7; 
# 5212
v = (stbi__get8(s)); 
# 5213
}  
# 5214
}  
# 5215
stbi__skip(s, pad); 
# 5216
}  
# 5217
} else { 
# 5218
for (j = 0; j < ((int)(s->img_y)); ++j) { 
# 5219
for (i = 0; i < ((int)(s->img_x)); i += 2) { 
# 5220
int v = stbi__get8(s), v2 = 0; 
# 5221
if ((info.bpp) == 4) { 
# 5222
v2 = (v & 15); 
# 5223
v >>= 4; 
# 5224
}  
# 5225
(out[z++]) = ((pal[v])[0]); 
# 5226
(out[z++]) = ((pal[v])[1]); 
# 5227
(out[z++]) = ((pal[v])[2]); 
# 5228
if (target == 4) { (out[z++]) = (255); }  
# 5229
if ((i + 1) == ((int)(s->img_x))) { break; }  
# 5230
v = (((info.bpp) == 8) ? stbi__get8(s) : v2); 
# 5231
(out[z++]) = ((pal[v])[0]); 
# 5232
(out[z++]) = ((pal[v])[1]); 
# 5233
(out[z++]) = ((pal[v])[2]); 
# 5234
if (target == 4) { (out[z++]) = (255); }  
# 5235
}  
# 5236
stbi__skip(s, pad); 
# 5237
}  
# 5238
}  
# 5239
} else { 
# 5240
int rshift = 0, gshift = 0, bshift = 0, ashift = 0, rcount = 0, gcount = 0, bcount = 0, acount = 0; 
# 5241
int z = 0; 
# 5242
int easy = 0; 
# 5243
stbi__skip(s, ((info.offset) - 14) - (info.hsz)); 
# 5244
if ((info.bpp) == 24) { width = ((3) * (s->img_x)); } else { 
# 5245
if ((info.bpp) == 16) { width = ((2) * (s->img_x)); } else { 
# 5246
width = 0; }  }  
# 5247
pad = ((-width) & 3); 
# 5248
if ((info.bpp) == 24) { 
# 5249
easy = 1; 
# 5250
} else { if ((info.bpp) == 32) { 
# 5251
if ((mb == (255)) && (mg == (65280)) && (mr == (16711680)) && (ma == 4278190080U)) { 
# 5252
easy = 2; }  
# 5253
}  }  
# 5254
if (!easy) { 
# 5255
if (((!mr) || (!mg)) || (!mb)) { free(out); return ((unsigned char *)((::size_t)((stbi__err("bad masks")) ? __null : __null))); 
# 5255 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 5257
rshift = (stbi__high_bit(mr) - 7); rcount = stbi__bitcount(mr); 
# 5258
gshift = (stbi__high_bit(mg) - 7); gcount = stbi__bitcount(mg); 
# 5259
bshift = (stbi__high_bit(mb) - 7); bcount = stbi__bitcount(mb); 
# 5260
ashift = (stbi__high_bit(ma) - 7); acount = stbi__bitcount(ma); 
# 5261
}  
# 5262
for (j = 0; j < ((int)(s->img_y)); ++j) { 
# 5263
if (easy) { 
# 5264
for (i = 0; i < ((int)(s->img_x)); ++i) { 
# 5265
unsigned char a; 
# 5266
(out[z + 2]) = stbi__get8(s); 
# 5267
(out[z + 1]) = stbi__get8(s); 
# 5268
(out[z + 0]) = stbi__get8(s); 
# 5269
z += 3; 
# 5270
a = ((easy == 2) ? stbi__get8(s) : 255); 
# 5271
all_a |= a; 
# 5272
if (target == 4) { (out[z++]) = a; }  
# 5273
}  
# 5274
} else { 
# 5275
int bpp = info.bpp; 
# 5276
for (i = 0; i < ((int)(s->img_x)); ++i) { 
# 5277
stbi__uint32 v = (bpp == 16) ? (stbi__uint32)stbi__get16le(s) : stbi__get32le(s); 
# 5278
unsigned a; 
# 5279
(out[z++]) = ((stbi_uc)(stbi__shiftsigned(v & mr, rshift, rcount) & 255)); 
# 5280
(out[z++]) = ((stbi_uc)(stbi__shiftsigned(v & mg, gshift, gcount) & 255)); 
# 5281
(out[z++]) = ((stbi_uc)(stbi__shiftsigned(v & mb, bshift, bcount) & 255)); 
# 5282
a = ((ma) ? stbi__shiftsigned(v & ma, ashift, acount) : 255); 
# 5283
all_a |= a; 
# 5284
if (target == 4) { (out[z++]) = ((stbi_uc)(a & (255))); }  
# 5285
}  
# 5286
}  
# 5287
stbi__skip(s, pad); 
# 5288
}  
# 5289
}  
# 5292
if ((target == 4) && (all_a == (0))) { 
# 5293
for (i = ((((4) * (s->img_x)) * (s->img_y)) - (1)); i >= 0; i -= 4) { 
# 5294
(out[i]) = (255); }  }  
# 5296
if (flip_vertically) { 
# 5297
stbi_uc t; 
# 5298
for (j = 0; j < (((int)(s->img_y)) >> 1); ++j) { 
# 5299
stbi_uc *p1 = out + ((j * (s->img_x)) * target); 
# 5300
stbi_uc *p2 = out + (((((s->img_y) - (1)) - j) * (s->img_x)) * target); 
# 5301
for (i = 0; i < (((int)(s->img_x)) * target); ++i) { 
# 5302
((t = (p1[i])), ((p1[i]) = (p2[i]))), ((p2[i]) = t); 
# 5303
}  
# 5304
}  
# 5305
}  
# 5307
if (req_comp && (req_comp != target)) { 
# 5308
out = stbi__convert_format(out, target, req_comp, s->img_x, s->img_y); 
# 5309
if (out == (__null)) { 
# 5309 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return out; }  
# 5310
}  
# 5312
(*x) = (s->img_x); 
# 5313
(*y) = (s->img_y); 
# 5314
if (comp) { (*comp) = (s->img_n); }  
# 5315
return out; 
# 5316
} 
# 5323
static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int *is_rgb16) 
# 5324
{ 
# 5326
if (is_rgb16) { (*is_rgb16) = 0; }  
# 5327
switch (bits_per_pixel) { 
# 5328
case 8:  return STBI_grey; 
# 5329
case 16:  if (is_grey) { return STBI_grey_alpha; }  
# 5331
case 15:  if (is_rgb16) { (*is_rgb16) = 1; }  
# 5332
return STBI_rgb; 
# 5333
case 24:  
# 5334
case 32:  return bits_per_pixel / 8; 
# 5335
default:  return 0; 
# 5336
}  
# 5337
} 
# 5339
static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp) 
# 5340
{ 
# 5341
int tga_w, tga_h, tga_comp, tga_image_type, tga_bits_per_pixel, tga_colormap_bpp; 
# 5342
int sz, tga_colormap_type; 
# 5343
stbi__get8(s); 
# 5344
tga_colormap_type = (stbi__get8(s)); 
# 5345
if (tga_colormap_type > 1) { 
# 5346
stbi__rewind(s); 
# 5347
return 0; 
# 5348
}  
# 5349
tga_image_type = (stbi__get8(s)); 
# 5350
if (tga_colormap_type == 1) { 
# 5351
if ((tga_image_type != 1) && (tga_image_type != 9)) { 
# 5352
stbi__rewind(s); 
# 5353
return 0; 
# 5354
}  
# 5355
stbi__skip(s, 4); 
# 5356
sz = (stbi__get8(s)); 
# 5357
if ((sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32)) { 
# 5358
stbi__rewind(s); 
# 5359
return 0; 
# 5360
}  
# 5361
stbi__skip(s, 4); 
# 5362
tga_colormap_bpp = sz; 
# 5363
} else { 
# 5364
if ((tga_image_type != 2) && (tga_image_type != 3) && (tga_image_type != 10) && (tga_image_type != 11)) { 
# 5365
stbi__rewind(s); 
# 5366
return 0; 
# 5367
}  
# 5368
stbi__skip(s, 9); 
# 5369
tga_colormap_bpp = 0; 
# 5370
}  
# 5371
tga_w = stbi__get16le(s); 
# 5372
if (tga_w < 1) { 
# 5373
stbi__rewind(s); 
# 5374
return 0; 
# 5375
}  
# 5376
tga_h = stbi__get16le(s); 
# 5377
if (tga_h < 1) { 
# 5378
stbi__rewind(s); 
# 5379
return 0; 
# 5380
}  
# 5381
tga_bits_per_pixel = (stbi__get8(s)); 
# 5382
stbi__get8(s); 
# 5383
if (tga_colormap_bpp != 0) { 
# 5384
if ((tga_bits_per_pixel != 8) && (tga_bits_per_pixel != 16)) { 
# 5387
stbi__rewind(s); 
# 5388
return 0; 
# 5389
}  
# 5390
tga_comp = stbi__tga_get_comp(tga_colormap_bpp, 0, __null); 
# 5391 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
} else { 
# 5392
tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3) || (tga_image_type == 11), __null); 
# 5393 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 5394
if (!tga_comp) { 
# 5395
stbi__rewind(s); 
# 5396
return 0; 
# 5397
}  
# 5398
if (x) { (*x) = tga_w; }  
# 5399
if (y) { (*y) = tga_h; }  
# 5400
if (comp) { (*comp) = tga_comp; }  
# 5401
return 1; 
# 5402
} 
# 5404
static int stbi__tga_test(stbi__context *s) 
# 5405
{ 
# 5406
int res = 0; 
# 5407
int sz, tga_color_type; 
# 5408
stbi__get8(s); 
# 5409
tga_color_type = (stbi__get8(s)); 
# 5410
if (tga_color_type > 1) { goto errorEnd; }  
# 5411
sz = (stbi__get8(s)); 
# 5412
if (tga_color_type == 1) { 
# 5413
if ((sz != 1) && (sz != 9)) { goto errorEnd; }  
# 5414
stbi__skip(s, 4); 
# 5415
sz = (stbi__get8(s)); 
# 5416
if ((sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32)) { goto errorEnd; }  
# 5417
stbi__skip(s, 4); 
# 5418
} else { 
# 5419
if ((sz != 2) && (sz != 3) && (sz != 10) && (sz != 11)) { goto errorEnd; }  
# 5420
stbi__skip(s, 9); 
# 5421
}  
# 5422
if (stbi__get16le(s) < 1) { goto errorEnd; }  
# 5423
if (stbi__get16le(s) < 1) { goto errorEnd; }  
# 5424
sz = (stbi__get8(s)); 
# 5425
if ((tga_color_type == 1) && (sz != 8) && (sz != 16)) { goto errorEnd; }  
# 5426
if ((sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32)) { goto errorEnd; }  
# 5428
res = 1; 
# 5430
errorEnd:; 
# 5431
stbi__rewind(s); 
# 5432
return res; 
# 5433
} 
# 5436
static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc *out) 
# 5437
{ 
# 5438
stbi__uint16 px = (stbi__uint16)stbi__get16le(s); 
# 5439
stbi__uint16 fiveBitMask = (31); 
# 5441
int r = (px >> 10) & fiveBitMask; 
# 5442
int g = (px >> 5) & fiveBitMask; 
# 5443
int b = px & fiveBitMask; 
# 5445
(out[0]) = ((stbi_uc)((r * 255) / 31)); 
# 5446
(out[1]) = ((stbi_uc)((g * 255) / 31)); 
# 5447
(out[2]) = ((stbi_uc)((b * 255) / 31)); 
# 5453
} 
# 5455
static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri) 
# 5456
{ 
# 5458
int tga_offset = stbi__get8(s); 
# 5459
int tga_indexed = stbi__get8(s); 
# 5460
int tga_image_type = stbi__get8(s); 
# 5461
int tga_is_RLE = 0; 
# 5462
int tga_palette_start = stbi__get16le(s); 
# 5463
int tga_palette_len = stbi__get16le(s); 
# 5464
int tga_palette_bits = stbi__get8(s); 
# 5465
int tga_x_origin = stbi__get16le(s); 
# 5466
int tga_y_origin = stbi__get16le(s); 
# 5467
int tga_width = stbi__get16le(s); 
# 5468
int tga_height = stbi__get16le(s); 
# 5469
int tga_bits_per_pixel = stbi__get8(s); 
# 5470
int tga_comp, tga_rgb16 = 0; 
# 5471
int tga_inverted = stbi__get8(s); 
# 5474
unsigned char *tga_data; 
# 5475
unsigned char *tga_palette = (__null); 
# 5476 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
int i, j; 
# 5477
unsigned char raw_data[4] = {(0)}; 
# 5478
int RLE_count = 0; 
# 5479
int RLE_repeating = 0; 
# 5480
int read_next_pixel = 1; 
# 5481
(void)sizeof ri; 
# 5484
if (tga_image_type >= 8) 
# 5485
{ 
# 5486
tga_image_type -= 8; 
# 5487
tga_is_RLE = 1; 
# 5488
}  
# 5489
tga_inverted = (1 - ((tga_inverted >> 5) & 1)); 
# 5492
if (tga_indexed) { tga_comp = stbi__tga_get_comp(tga_palette_bits, 0, &tga_rgb16); } else { 
# 5493
tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, tga_image_type == 3, &tga_rgb16); }  
# 5495
if (!tga_comp) { 
# 5496
return ((unsigned char *)((::size_t)((stbi__err("bad format")) ? __null : __null))); }  
# 5499 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(*x) = tga_width; 
# 5500
(*y) = tga_height; 
# 5501
if (comp) { (*comp) = tga_comp; }  
# 5503
if (!(stbi__mad3sizes_valid(tga_width, tga_height, tga_comp, 0))) { 
# 5504
return ((unsigned char *)((::size_t)((stbi__err("too large")) ? __null : __null))); }  
# 5506 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
tga_data = ((unsigned char *)stbi__malloc_mad3(tga_width, tga_height, tga_comp, 0)); 
# 5507
if (!tga_data) { return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); }  
# 5510 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__skip(s, tga_offset); 
# 5512
if ((!tga_indexed) && (!tga_is_RLE) && (!tga_rgb16)) { 
# 5513
for (i = 0; i < tga_height; ++i) { 
# 5514
int row = (tga_inverted) ? (tga_height - i) - 1 : i; 
# 5515
stbi_uc *tga_row = tga_data + ((row * tga_width) * tga_comp); 
# 5516
stbi__getn(s, tga_row, tga_width * tga_comp); 
# 5517
}  
# 5518
} else { 
# 5520
if (tga_indexed) 
# 5521
{ 
# 5523
stbi__skip(s, tga_palette_start); 
# 5525
tga_palette = ((unsigned char *)stbi__malloc_mad2(tga_palette_len, tga_comp, 0)); 
# 5526
if (!tga_palette) { 
# 5527
free(tga_data); 
# 5528
return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); 
# 5529 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 5530
if (tga_rgb16) { 
# 5531
stbi_uc *pal_entry = tga_palette; 
# 5532 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(tga_comp == (STBI_rgb))) ? (void)0 : __assert_fail("tga_comp == STBI_rgb", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 5532, __extension__ __PRETTY_FUNCTION__); 
# 5533 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
for (i = 0; i < tga_palette_len; ++i) { 
# 5534
stbi__tga_read_rgb16(s, pal_entry); 
# 5535
pal_entry += tga_comp; 
# 5536
}  
# 5537
} else { if (!(stbi__getn(s, tga_palette, tga_palette_len * tga_comp))) { 
# 5538
free(tga_data); 
# 5539
free(tga_palette); 
# 5540
return ((unsigned char *)((::size_t)((stbi__err("bad palette")) ? __null : __null))); 
# 5541 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  }  
# 5542
}  
# 5544
for (i = 0; i < (tga_width * tga_height); ++i) 
# 5545
{ 
# 5547
if (tga_is_RLE) 
# 5548
{ 
# 5549
if (RLE_count == 0) 
# 5550
{ 
# 5552
int RLE_cmd = stbi__get8(s); 
# 5553
RLE_count = (1 + (RLE_cmd & 127)); 
# 5554
RLE_repeating = (RLE_cmd >> 7); 
# 5555
read_next_pixel = 1; 
# 5556
} else { if (!RLE_repeating) 
# 5557
{ 
# 5558
read_next_pixel = 1; 
# 5559
}  }  
# 5560
} else 
# 5561
{ 
# 5562
read_next_pixel = 1; 
# 5563
}  
# 5565
if (read_next_pixel) 
# 5566
{ 
# 5568
if (tga_indexed) 
# 5569
{ 
# 5571
int pal_idx = (tga_bits_per_pixel == 8) ? stbi__get8(s) : stbi__get16le(s); 
# 5572
if (pal_idx >= tga_palette_len) { 
# 5574
pal_idx = 0; 
# 5575
}  
# 5576
pal_idx *= tga_comp; 
# 5577
for (j = 0; j < tga_comp; ++j) { 
# 5578
(raw_data[j]) = (tga_palette[pal_idx + j]); 
# 5579
}  
# 5580
} else { if (tga_rgb16) { 
# 5581 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h" 3
(static_cast< bool>(tga_comp == (STBI_rgb))) ? (void)0 : __assert_fail("tga_comp == STBI_rgb", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h", 5581, __extension__ __PRETTY_FUNCTION__); 
# 5582 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__tga_read_rgb16(s, raw_data); 
# 5583
} else { 
# 5585
for (j = 0; j < tga_comp; ++j) { 
# 5586
(raw_data[j]) = stbi__get8(s); 
# 5587
}  
# 5588
}  }  
# 5590
read_next_pixel = 0; 
# 5591
}  
# 5594
for (j = 0; j < tga_comp; ++j) { 
# 5595
(tga_data[(i * tga_comp) + j]) = (raw_data[j]); }  
# 5598
--RLE_count; 
# 5599
}  
# 5601
if (tga_inverted) 
# 5602
{ 
# 5603
for (j = 0; (j * 2) < tga_height; ++j) 
# 5604
{ 
# 5605
int index1 = (j * tga_width) * tga_comp; 
# 5606
int index2 = (((tga_height - 1) - j) * tga_width) * tga_comp; 
# 5607
for (i = (tga_width * tga_comp); i > 0; --i) 
# 5608
{ 
# 5609
unsigned char temp = tga_data[index1]; 
# 5610
(tga_data[index1]) = (tga_data[index2]); 
# 5611
(tga_data[index2]) = temp; 
# 5612
++index1; 
# 5613
++index2; 
# 5614
}  
# 5615
}  
# 5616
}  
# 5618
if (tga_palette != (__null)) 
# 5619 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
{ 
# 5620
free(tga_palette); 
# 5621
}  
# 5622
}  
# 5625
if ((tga_comp >= 3) && (!tga_rgb16)) 
# 5626
{ 
# 5627
unsigned char *tga_pixel = tga_data; 
# 5628
for (i = 0; i < (tga_width * tga_height); ++i) 
# 5629
{ 
# 5630
unsigned char temp = tga_pixel[0]; 
# 5631
(tga_pixel[0]) = (tga_pixel[2]); 
# 5632
(tga_pixel[2]) = temp; 
# 5633
tga_pixel += tga_comp; 
# 5634
}  
# 5635
}  
# 5638
if (req_comp && (req_comp != tga_comp)) { 
# 5639
tga_data = stbi__convert_format(tga_data, tga_comp, req_comp, tga_width, tga_height); }  
# 5643
tga_palette_start = (tga_palette_len = (tga_palette_bits = (tga_x_origin = (tga_y_origin = 0)))); 
# 5646
return tga_data; 
# 5647
} 
# 5654
static int stbi__psd_test(stbi__context *s) 
# 5655
{ 
# 5656
int r = stbi__get32be(s) == (943870035); 
# 5657
stbi__rewind(s); 
# 5658
return r; 
# 5659
} 
# 5661
static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount) 
# 5662
{ 
# 5663
int count, nleft, len; 
# 5665
count = 0; 
# 5666
while ((nleft = (pixelCount - count)) > 0) { 
# 5667
len = (stbi__get8(s)); 
# 5668
if (len == 128) { 
# 5670
} else { if (len < 128) { 
# 5672
len++; 
# 5673
if (len > nleft) { return 0; }  
# 5674
count += len; 
# 5675
while (len) { 
# 5676
(*p) = stbi__get8(s); 
# 5677
p += 4; 
# 5678
len--; 
# 5679
}  
# 5680
} else { if (len > 128) { 
# 5681
stbi_uc val; 
# 5684
len = (257 - len); 
# 5685
if (len > nleft) { return 0; }  
# 5686
val = stbi__get8(s); 
# 5687
count += len; 
# 5688
while (len) { 
# 5689
(*p) = val; 
# 5690
p += 4; 
# 5691
len--; 
# 5692
}  
# 5693
}  }  }  
# 5694
}  
# 5696
return 1; 
# 5697
} 
# 5699
static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc) 
# 5700
{ 
# 5701
int pixelCount; 
# 5702
int channelCount, compression; 
# 5703
int channel, i; 
# 5704
int bitdepth; 
# 5705
int w, h; 
# 5706
stbi_uc *out; 
# 5707
(void)sizeof ri; 
# 5710
if (stbi__get32be(s) != (943870035)) { 
# 5711
return ((unsigned char *)((::size_t)((stbi__err("not PSD")) ? __null : __null))); }  
# 5714 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (stbi__get16be(s) != 1) { 
# 5715
return ((unsigned char *)((::size_t)((stbi__err("wrong version")) ? __null : __null))); }  
# 5718 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__skip(s, 6); 
# 5721
channelCount = stbi__get16be(s); 
# 5722
if ((channelCount < 0) || (channelCount > 16)) { 
# 5723
return ((unsigned char *)((::size_t)((stbi__err("wrong channel count")) ? __null : __null))); }  
# 5726 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
h = (stbi__get32be(s)); 
# 5727
w = (stbi__get32be(s)); 
# 5730
bitdepth = stbi__get16be(s); 
# 5731
if ((bitdepth != 8) && (bitdepth != 16)) { 
# 5732
return ((unsigned char *)((::size_t)((stbi__err("unsupported bit depth")) ? __null : __null))); }  
# 5744 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (stbi__get16be(s) != 3) { 
# 5745
return ((unsigned char *)((::size_t)((stbi__err("wrong color format")) ? __null : __null))); }  
# 5748 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__skip(s, stbi__get32be(s)); 
# 5751
stbi__skip(s, stbi__get32be(s)); 
# 5754
stbi__skip(s, stbi__get32be(s)); 
# 5760
compression = stbi__get16be(s); 
# 5761
if (compression > 1) { 
# 5762
return ((unsigned char *)((::size_t)((stbi__err("bad compression")) ? __null : __null))); }  
# 5765 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (!(stbi__mad3sizes_valid(4, w, h, 0))) { 
# 5766
return ((unsigned char *)((::size_t)((stbi__err("too large")) ? __null : __null))); }  
# 5770 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if ((!compression) && (bitdepth == 16) && (bpc == 16)) { 
# 5771
out = ((stbi_uc *)stbi__malloc_mad3(8, w, h, 0)); 
# 5772
(ri->bits_per_channel) = 16; 
# 5773
} else { 
# 5774
out = ((stbi_uc *)stbi__malloc((4 * w) * h)); }  
# 5776
if (!out) { return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); }  
# 5777 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
pixelCount = (w * h); 
# 5783
if (compression) { 
# 5794 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__skip(s, (h * channelCount) * 2); 
# 5797
for (channel = 0; channel < 4; channel++) { 
# 5798
stbi_uc *p; 
# 5800
p = (out + channel); 
# 5801
if (channel >= channelCount) { 
# 5803
for (i = 0; i < pixelCount; (i++), (p += 4)) { 
# 5804
(*p) = ((channel == 3) ? 255 : 0); }  
# 5805
} else { 
# 5807
if (!(stbi__psd_decode_rle(s, p, pixelCount))) { 
# 5808
free(out); 
# 5809
return ((unsigned char *)((::size_t)((stbi__err("corrupt")) ? __null : __null))); 
# 5810 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 5811
}  
# 5812
}  
# 5814
} else { 
# 5819
for (channel = 0; channel < 4; channel++) { 
# 5820
if (channel >= channelCount) { 
# 5822
if ((bitdepth == 16) && (bpc == 16)) { 
# 5823
stbi__uint16 *q = ((stbi__uint16 *)out) + channel; 
# 5824
stbi__uint16 val = (channel == 3) ? 65535 : 0; 
# 5825
for (i = 0; i < pixelCount; (i++), (q += 4)) { 
# 5826
(*q) = val; }  
# 5827
} else { 
# 5828
stbi_uc *p = out + channel; 
# 5829
stbi_uc val = (channel == 3) ? 255 : 0; 
# 5830
for (i = 0; i < pixelCount; (i++), (p += 4)) { 
# 5831
(*p) = val; }  
# 5832
}  
# 5833
} else { 
# 5834
if ((ri->bits_per_channel) == 16) { 
# 5835
stbi__uint16 *q = ((stbi__uint16 *)out) + channel; 
# 5836
for (i = 0; i < pixelCount; (i++), (q += 4)) { 
# 5837
(*q) = ((stbi__uint16)stbi__get16be(s)); }  
# 5838
} else { 
# 5839
stbi_uc *p = out + channel; 
# 5840
if (bitdepth == 16) { 
# 5841
for (i = 0; i < pixelCount; (i++), (p += 4)) { 
# 5842
(*p) = ((stbi_uc)(stbi__get16be(s) >> 8)); }  
# 5843
} else { 
# 5844
for (i = 0; i < pixelCount; (i++), (p += 4)) { 
# 5845
(*p) = stbi__get8(s); }  
# 5846
}  
# 5847
}  
# 5848
}  
# 5849
}  
# 5850
}  
# 5853
if (channelCount >= 4) { 
# 5854
if ((ri->bits_per_channel) == 16) { 
# 5855
for (i = 0; i < (w * h); ++i) { 
# 5856
stbi__uint16 *pixel = ((stbi__uint16 *)out) + (4 * i); 
# 5857
if (((pixel[3]) != 0) && ((pixel[3]) != 65535)) { 
# 5858
float a = (pixel[3]) / (65535.0F); 
# 5859
float ra = (1.0F) / a; 
# 5860
float inv_a = (65535.0F) * ((1) - ra); 
# 5861
(pixel[0]) = ((stbi__uint16)(((pixel[0]) * ra) + inv_a)); 
# 5862
(pixel[1]) = ((stbi__uint16)(((pixel[1]) * ra) + inv_a)); 
# 5863
(pixel[2]) = ((stbi__uint16)(((pixel[2]) * ra) + inv_a)); 
# 5864
}  
# 5865
}  
# 5866
} else { 
# 5867
for (i = 0; i < (w * h); ++i) { 
# 5868
unsigned char *pixel = out + (4 * i); 
# 5869
if (((pixel[3]) != 0) && ((pixel[3]) != 255)) { 
# 5870
float a = (pixel[3]) / (255.0F); 
# 5871
float ra = (1.0F) / a; 
# 5872
float inv_a = (255.0F) * ((1) - ra); 
# 5873
(pixel[0]) = ((unsigned char)(((pixel[0]) * ra) + inv_a)); 
# 5874
(pixel[1]) = ((unsigned char)(((pixel[1]) * ra) + inv_a)); 
# 5875
(pixel[2]) = ((unsigned char)(((pixel[2]) * ra) + inv_a)); 
# 5876
}  
# 5877
}  
# 5878
}  
# 5879
}  
# 5882
if (req_comp && (req_comp != 4)) { 
# 5883
if ((ri->bits_per_channel) == 16) { 
# 5884
out = ((stbi_uc *)stbi__convert_format16((stbi__uint16 *)out, 4, req_comp, w, h)); } else { 
# 5886
out = stbi__convert_format(out, 4, req_comp, w, h); }  
# 5887
if (out == (__null)) { 
# 5887 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return out; }  
# 5888
}  
# 5890
if (comp) { (*comp) = 4; }  
# 5891
(*y) = h; 
# 5892
(*x) = w; 
# 5894
return out; 
# 5895
} 
# 5906 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static int stbi__pic_is4(stbi__context *s, const char *str) 
# 5907
{ 
# 5908
int i; 
# 5909
for (i = 0; i < 4; ++i) { 
# 5910
if ((stbi__get8(s)) != ((stbi_uc)(str[i]))) { 
# 5911
return 0; }  }  
# 5913
return 1; 
# 5914
} 
# 5916
static int stbi__pic_test_core(stbi__context *s) 
# 5917
{ 
# 5918
int i; 
# 5920
if (!(stbi__pic_is4(s, "S\200\3664"))) { 
# 5921
return 0; }  
# 5923
for (i = 0; i < 84; ++i) { 
# 5924
stbi__get8(s); }  
# 5926
if (!(stbi__pic_is4(s, "PICT"))) { 
# 5927
return 0; }  
# 5929
return 1; 
# 5930
} 
# 5935
typedef 
# 5933
struct { 
# 5934
stbi_uc size, type, channel; 
# 5935
} stbi__pic_packet; 
# 5937
static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest) 
# 5938
{ 
# 5939
int mask = 128, i; 
# 5941
for (i = 0; i < 4; (++i), (mask >>= 1)) { 
# 5942
if (channel & mask) { 
# 5943
if (stbi__at_eof(s)) { return ((unsigned char *)((::size_t)((stbi__err("bad file")) ? __null : __null))); }  
# 5944 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(dest[i]) = stbi__get8(s); 
# 5945
}  
# 5946
}  
# 5948
return dest; 
# 5949
} 
# 5951
static void stbi__copyval(int channel, stbi_uc *dest, const stbi_uc *src) 
# 5952
{ 
# 5953
int mask = 128, i; 
# 5955
for (i = 0; i < 4; (++i), (mask >>= 1)) { 
# 5956
if (channel & mask) { 
# 5957
(dest[i]) = (src[i]); }  }  
# 5958
} 
# 5960
static stbi_uc *stbi__pic_load_core(stbi__context *s, int width, int height, int *comp, stbi_uc *result) 
# 5961
{ 
# 5962
int act_comp = 0, num_packets = 0, y, chained; 
# 5963
stbi__pic_packet packets[10]; 
# 5967
do { 
# 5968
stbi__pic_packet *packet; 
# 5970
if (num_packets == (sizeof packets / sizeof (packets[0]))) { 
# 5971
return ((unsigned char *)((::size_t)((stbi__err("bad format")) ? __null : __null))); }  
# 5973 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
packet = (&(packets[num_packets++])); 
# 5975
chained = (stbi__get8(s)); 
# 5976
(packet->size) = stbi__get8(s); 
# 5977
(packet->type) = stbi__get8(s); 
# 5978
(packet->channel) = stbi__get8(s); 
# 5980
act_comp |= (packet->channel); 
# 5982
if (stbi__at_eof(s)) { return ((unsigned char *)((::size_t)((stbi__err("bad file")) ? __null : __null))); }  
# 5983 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if ((packet->size) != 8) { return ((unsigned char *)((::size_t)((stbi__err("bad format")) ? __null : __null))); }  
# 5984 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
} while (chained); 
# 5986
(*comp) = ((act_comp & 16) ? 4 : 3); 
# 5988
for (y = 0; y < height; ++y) { 
# 5989
int packet_idx; 
# 5991
for (packet_idx = 0; packet_idx < num_packets; ++packet_idx) { 
# 5992
stbi__pic_packet *packet = &(packets[packet_idx]); 
# 5993
stbi_uc *dest = result + ((y * width) * 4); 
# 5995
switch (packet->type) { 
# 5996
default:  
# 5997
return ((unsigned char *)((::size_t)((stbi__err("bad format")) ? __null : __null))); 
# 5999 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
case 0:  { 
# 6000
int x; 
# 6002
for (x = 0; x < width; (++x), (dest += 4)) { 
# 6003
if (!(stbi__readval(s, packet->channel, dest))) { 
# 6004
return 0; }  }  
# 6005
break; 
# 6006
} 
# 6008
case 1:  
# 6009
{ 
# 6010
int left = width, i; 
# 6012
while (left > 0) { 
# 6013
stbi_uc count, value[4]; 
# 6015
count = stbi__get8(s); 
# 6016
if (stbi__at_eof(s)) { return ((unsigned char *)((::size_t)((stbi__err("bad file")) ? __null : __null))); }  
# 6018 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (count > left) { 
# 6019
count = ((stbi_uc)left); }  
# 6021
if (!(stbi__readval(s, packet->channel, value))) { return 0; }  
# 6023
for (i = 0; i < count; (++i), (dest += 4)) { 
# 6024
stbi__copyval(packet->channel, dest, value); }  
# 6025
left -= count; 
# 6026
}  
# 6027
} 
# 6028
break; 
# 6030
case 2:  { 
# 6031
int left = width; 
# 6032
while (left > 0) { 
# 6033
int count = stbi__get8(s), i; 
# 6034
if (stbi__at_eof(s)) { return ((unsigned char *)((::size_t)((stbi__err("bad file")) ? __null : __null))); }  
# 6036 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (count >= 128) { 
# 6037
stbi_uc value[4]; 
# 6039
if (count == 128) { 
# 6040
count = stbi__get16be(s); } else { 
# 6042
count -= 127; }  
# 6043
if (count > left) { 
# 6044
return ((unsigned char *)((::size_t)((stbi__err("bad file")) ? __null : __null))); }  
# 6046 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (!(stbi__readval(s, packet->channel, value))) { 
# 6047
return 0; }  
# 6049
for (i = 0; i < count; (++i), (dest += 4)) { 
# 6050
stbi__copyval(packet->channel, dest, value); }  
# 6051
} else { 
# 6052
++count; 
# 6053
if (count > left) { return ((unsigned char *)((::size_t)((stbi__err("bad file")) ? __null : __null))); }  
# 6055 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
for (i = 0; i < count; (++i), (dest += 4)) { 
# 6056
if (!(stbi__readval(s, packet->channel, dest))) { 
# 6057
return 0; }  }  
# 6058
}  
# 6059
left -= count; 
# 6060
}  
# 6061
break; 
# 6062
} 
# 6063
}  
# 6064
}  
# 6065
}  
# 6067
return result; 
# 6068
} 
# 6070
static void *stbi__pic_load(stbi__context *s, int *px, int *py, int *comp, int req_comp, stbi__result_info *ri) 
# 6071
{ 
# 6072
stbi_uc *result; 
# 6073
int i, x, y, internal_comp; 
# 6074
(void)sizeof ri; 
# 6076
if (!comp) { comp = (&internal_comp); }  
# 6078
for (i = 0; i < 92; ++i) { 
# 6079
stbi__get8(s); }  
# 6081
x = stbi__get16be(s); 
# 6082
y = stbi__get16be(s); 
# 6083
if (stbi__at_eof(s)) { return ((unsigned char *)((::size_t)((stbi__err("bad file")) ? __null : __null))); }  
# 6084 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if (!(stbi__mad3sizes_valid(x, y, 4, 0))) { return ((unsigned char *)((::size_t)((stbi__err("too large")) ? __null : __null))); }  
# 6086 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__get32be(s); 
# 6087
stbi__get16be(s); 
# 6088
stbi__get16be(s); 
# 6091
result = ((stbi_uc *)stbi__malloc_mad3(x, y, 4, 0)); 
# 6092
memset(result, 255, (x * y) * 4); 
# 6094
if (!(stbi__pic_load_core(s, x, y, comp, result))) { 
# 6095
free(result); 
# 6096
result = (0); 
# 6097
}  
# 6098
(*px) = x; 
# 6099
(*py) = y; 
# 6100
if (req_comp == 0) { req_comp = (*comp); }  
# 6101
result = stbi__convert_format(result, 4, req_comp, x, y); 
# 6103
return result; 
# 6104
} 
# 6106
static int stbi__pic_test(stbi__context *s) 
# 6107
{ 
# 6108
int r = stbi__pic_test_core(s); 
# 6109
stbi__rewind(s); 
# 6110
return r; 
# 6111
} 
# 6123
typedef 
# 6119
struct { 
# 6120
stbi__int16 prefix; 
# 6121
stbi_uc first; 
# 6122
stbi_uc suffix; 
# 6123
} stbi__gif_lzw; 
# 6143
typedef 
# 6126
struct { 
# 6127
int w, h; 
# 6128
stbi_uc *out; 
# 6129
stbi_uc *background; 
# 6130
stbi_uc *history; 
# 6131
int flags, bgindex, ratio, transparent, eflags; 
# 6132
stbi_uc pal[256][4]; 
# 6133
stbi_uc lpal[256][4]; 
# 6134
stbi__gif_lzw codes[8192]; 
# 6135
stbi_uc *color_table; 
# 6136
int parse, step; 
# 6137
int lflags; 
# 6138
int start_x, start_y; 
# 6139
int max_x, max_y; 
# 6140
int cur_x, cur_y; 
# 6141
int line_size; 
# 6142
int delay; 
# 6143
} stbi__gif; 
# 6145
static int stbi__gif_test_raw(stbi__context *s) 
# 6146
{ 
# 6147
int sz; 
# 6148
if (((((stbi__get8(s)) != ('G')) || ((stbi__get8(s)) != ('I'))) || ((stbi__get8(s)) != ('F'))) || ((stbi__get8(s)) != ('8'))) { return 0; }  
# 6149
sz = (stbi__get8(s)); 
# 6150
if ((sz != ('9')) && (sz != ('7'))) { return 0; }  
# 6151
if ((stbi__get8(s)) != ('a')) { return 0; }  
# 6152
return 1; 
# 6153
} 
# 6155
static int stbi__gif_test(stbi__context *s) 
# 6156
{ 
# 6157
int r = stbi__gif_test_raw(s); 
# 6158
stbi__rewind(s); 
# 6159
return r; 
# 6160
} 
# 6162
static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp) 
# 6163
{ 
# 6164
int i; 
# 6165
for (i = 0; i < num_entries; ++i) { 
# 6166
((pal[i])[2]) = stbi__get8(s); 
# 6167
((pal[i])[1]) = stbi__get8(s); 
# 6168
((pal[i])[0]) = stbi__get8(s); 
# 6169
((pal[i])[3]) = ((transp == i) ? 0 : 255); 
# 6170
}  
# 6171
} 
# 6173
static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info) 
# 6174
{ 
# 6175
stbi_uc version; 
# 6176
if (((((stbi__get8(s)) != ('G')) || ((stbi__get8(s)) != ('I'))) || ((stbi__get8(s)) != ('F'))) || ((stbi__get8(s)) != ('8'))) { 
# 6177
return stbi__err("not GIF"); }  
# 6179
version = stbi__get8(s); 
# 6180
if ((version != ('7')) && (version != ('9'))) { return stbi__err("not GIF"); }  
# 6181
if ((stbi__get8(s)) != ('a')) { return stbi__err("not GIF"); }  
# 6183
stbi__g_failure_reason = (""); 
# 6184
(g->w) = stbi__get16le(s); 
# 6185
(g->h) = stbi__get16le(s); 
# 6186
(g->flags) = (stbi__get8(s)); 
# 6187
(g->bgindex) = (stbi__get8(s)); 
# 6188
(g->ratio) = (stbi__get8(s)); 
# 6189
(g->transparent) = (-1); 
# 6191
if (comp != (0)) { (*comp) = 4; }  
# 6193
if (is_info) { return 1; }  
# 6195
if ((g->flags) & 128) { 
# 6196
stbi__gif_parse_colortable(s, g->pal, 2 << ((g->flags) & 7), -1); }  
# 6198
return 1; 
# 6199
} 
# 6201
static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp) 
# 6202
{ 
# 6203
stbi__gif *g = (stbi__gif *)stbi__malloc(sizeof(stbi__gif)); 
# 6204
if (!(stbi__gif_header(s, g, comp, 1))) { 
# 6205
free(g); 
# 6206
stbi__rewind(s); 
# 6207
return 0; 
# 6208
}  
# 6209
if (x) { (*x) = (g->w); }  
# 6210
if (y) { (*y) = (g->h); }  
# 6211
free(g); 
# 6212
return 1; 
# 6213
} 
# 6215
static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code) 
# 6216
{ 
# 6217
stbi_uc *p, *c; 
# 6218
int idx; 
# 6222
if ((((g->codes)[code]).prefix) >= 0) { 
# 6223
stbi__out_gif_code(g, ((g->codes)[code]).prefix); }  
# 6225
if ((g->cur_y) >= (g->max_y)) { return; }  
# 6227
idx = ((g->cur_x) + (g->cur_y)); 
# 6228
p = (&((g->out)[idx])); 
# 6229
((g->history)[idx / 4]) = (1); 
# 6231
c = (&((g->color_table)[(((g->codes)[code]).suffix) * 4])); 
# 6232
if ((c[3]) > 128) { 
# 6233
(p[0]) = (c[2]); 
# 6234
(p[1]) = (c[1]); 
# 6235
(p[2]) = (c[0]); 
# 6236
(p[3]) = (c[3]); 
# 6237
}  
# 6238
(g->cur_x) += 4; 
# 6240
if ((g->cur_x) >= (g->max_x)) { 
# 6241
(g->cur_x) = (g->start_x); 
# 6242
(g->cur_y) += (g->step); 
# 6244
while (((g->cur_y) >= (g->max_y)) && ((g->parse) > 0)) { 
# 6245
(g->step) = ((1 << (g->parse)) * (g->line_size)); 
# 6246
(g->cur_y) = ((g->start_y) + ((g->step) >> 1)); 
# 6247
--(g->parse); 
# 6248
}  
# 6249
}  
# 6250
} 
# 6252
static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g) 
# 6253
{ 
# 6254
stbi_uc lzw_cs; 
# 6255
stbi__int32 len, init_code; 
# 6256
stbi__uint32 first; 
# 6257
stbi__int32 codesize, codemask, avail, oldcode, bits, valid_bits, clear; 
# 6258
stbi__gif_lzw *p; 
# 6260
lzw_cs = stbi__get8(s); 
# 6261
if (lzw_cs > 12) { return __null; }  
# 6262 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
clear = (1 << lzw_cs); 
# 6263
first = (1); 
# 6264
codesize = (lzw_cs + 1); 
# 6265
codemask = ((1 << codesize) - 1); 
# 6266
bits = 0; 
# 6267
valid_bits = 0; 
# 6268
for (init_code = 0; init_code < clear; init_code++) { 
# 6269
(((g->codes)[init_code]).prefix) = (-1); 
# 6270
(((g->codes)[init_code]).first) = ((stbi_uc)init_code); 
# 6271
(((g->codes)[init_code]).suffix) = ((stbi_uc)init_code); 
# 6272
}  
# 6275
avail = (clear + 2); 
# 6276
oldcode = (-1); 
# 6278
len = 0; 
# 6279
for (; ;) { 
# 6280
if (valid_bits < codesize) { 
# 6281
if (len == 0) { 
# 6282
len = (stbi__get8(s)); 
# 6283
if (len == 0) { 
# 6284
return g->out; }  
# 6285
}  
# 6286
--len; 
# 6287
bits |= (((stbi__int32)stbi__get8(s)) << valid_bits); 
# 6288
valid_bits += 8; 
# 6289
} else { 
# 6290
stbi__int32 code = bits & codemask; 
# 6291
bits >>= codesize; 
# 6292
valid_bits -= codesize; 
# 6294
if (code == clear) { 
# 6295
codesize = (lzw_cs + 1); 
# 6296
codemask = ((1 << codesize) - 1); 
# 6297
avail = (clear + 2); 
# 6298
oldcode = (-1); 
# 6299
first = (0); 
# 6300
} else { if (code == (clear + 1)) { 
# 6301
stbi__skip(s, len); 
# 6302
while ((len = (stbi__get8(s))) > 0) { 
# 6303
stbi__skip(s, len); }  
# 6304
return g->out; 
# 6305
} else { if (code <= avail) { 
# 6306
if (first) { 
# 6307
return ((unsigned char *)((::size_t)((stbi__err("no clear code")) ? __null : __null))); 
# 6308 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 6310
if (oldcode >= 0) { 
# 6311
p = (&((g->codes)[avail++])); 
# 6312
if (avail > 8192) { 
# 6313
return ((unsigned char *)((::size_t)((stbi__err("too many codes")) ? __null : __null))); 
# 6314 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 6316
(p->prefix) = ((stbi__int16)oldcode); 
# 6317
(p->first) = (((g->codes)[oldcode]).first); 
# 6318
(p->suffix) = ((code == avail) ? p->first : (((g->codes)[code]).first)); 
# 6319
} else { if (code == avail) { 
# 6320
return ((unsigned char *)((::size_t)((stbi__err("illegal code in raster")) ? __null : __null))); }  }  
# 6322 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__out_gif_code(g, (stbi__uint16)code); 
# 6324
if (((avail & codemask) == 0) && (avail <= 4095)) { 
# 6325
codesize++; 
# 6326
codemask = ((1 << codesize) - 1); 
# 6327
}  
# 6329
oldcode = code; 
# 6330
} else { 
# 6331
return ((unsigned char *)((::size_t)((stbi__err("illegal code in raster")) ? __null : __null))); 
# 6332 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  }  }  
# 6333
}  
# 6334
}  
# 6335
} 
# 6339
static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back) 
# 6340
{ 
# 6341
int dispose; 
# 6342
int first_frame; 
# 6343
int pi; 
# 6344
int pcount; 
# 6347
first_frame = 0; 
# 6348
if ((g->out) == (0)) { 
# 6349
if (!(stbi__gif_header(s, g, comp, 0))) { return 0; }  
# 6350
(g->out) = ((stbi_uc *)stbi__malloc((4 * (g->w)) * (g->h))); 
# 6351
(g->background) = ((stbi_uc *)stbi__malloc((4 * (g->w)) * (g->h))); 
# 6352
(g->history) = ((stbi_uc *)stbi__malloc((g->w) * (g->h))); 
# 6353
if ((g->out) == (0)) { return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); }  
# 6358 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
memset(g->out, 0, (4 * (g->w)) * (g->h)); 
# 6359
memset(g->background, 0, (4 * (g->w)) * (g->h)); 
# 6360
memset(g->history, 0, (g->w) * (g->h)); 
# 6361
first_frame = 1; 
# 6362
} else { 
# 6364
dispose = (((g->eflags) & 28) >> 2); 
# 6365
pcount = ((g->w) * (g->h)); 
# 6367
if ((dispose == 3) && (two_back == (0))) { 
# 6368
dispose = 2; 
# 6369
}  
# 6371
if (dispose == 3) { 
# 6372
for (pi = 0; pi < pcount; ++pi) { 
# 6373
if ((g->history)[pi]) { 
# 6374
memcpy(&((g->out)[pi * 4]), &(two_back[pi * 4]), 4); 
# 6375
}  
# 6376
}  
# 6377
} else { if (dispose == 2) { 
# 6379
for (pi = 0; pi < pcount; ++pi) { 
# 6380
if ((g->history)[pi]) { 
# 6381
memcpy(&((g->out)[pi * 4]), &((g->background)[pi * 4]), 4); 
# 6382
}  
# 6383
}  
# 6384
} else { 
# 6389
}  }  
# 6392
memcpy(g->background, g->out, (4 * (g->w)) * (g->h)); 
# 6393
}  
# 6396
memset(g->history, 0, (g->w) * (g->h)); 
# 6398
for (; ;) { 
# 6399
int tag = stbi__get8(s); 
# 6400
switch (tag) { 
# 6401
case 44:  
# 6402
{ 
# 6403
stbi__int32 x, y, w, h; 
# 6404
stbi_uc *o; 
# 6406
x = stbi__get16le(s); 
# 6407
y = stbi__get16le(s); 
# 6408
w = stbi__get16le(s); 
# 6409
h = stbi__get16le(s); 
# 6410
if (((x + w) > (g->w)) || ((y + h) > (g->h))) { 
# 6411
return ((unsigned char *)((::size_t)((stbi__err("bad Image Descriptor")) ? __null : __null))); }  
# 6413 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(g->line_size) = ((g->w) * 4); 
# 6414
(g->start_x) = (x * 4); 
# 6415
(g->start_y) = (y * (g->line_size)); 
# 6416
(g->max_x) = ((g->start_x) + (w * 4)); 
# 6417
(g->max_y) = ((g->start_y) + (h * (g->line_size))); 
# 6418
(g->cur_x) = (g->start_x); 
# 6419
(g->cur_y) = (g->start_y); 
# 6421
(g->lflags) = (stbi__get8(s)); 
# 6423
if ((g->lflags) & 64) { 
# 6424
(g->step) = (8 * (g->line_size)); 
# 6425
(g->parse) = 3; 
# 6426
} else { 
# 6427
(g->step) = (g->line_size); 
# 6428
(g->parse) = 0; 
# 6429
}  
# 6431
if ((g->lflags) & 128) { 
# 6432
stbi__gif_parse_colortable(s, g->lpal, 2 << ((g->lflags) & 7), ((g->eflags) & 1) ? g->transparent : (-1)); 
# 6433
(g->color_table) = ((stbi_uc *)(g->lpal)); 
# 6434
} else { if ((g->flags) & 128) { 
# 6435
(g->color_table) = ((stbi_uc *)(g->pal)); 
# 6436
} else { 
# 6437
return ((unsigned char *)((::size_t)((stbi__err("missing color table")) ? __null : __null))); }  }  
# 6439 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
o = stbi__process_gif_raster(s, g); 
# 6440
if (o == (__null)) { 
# 6440 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return __null; }  
# 6443 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
pcount = ((g->w) * (g->h)); 
# 6444
if (first_frame && ((g->bgindex) > 0)) { 
# 6446
for (pi = 0; pi < pcount; ++pi) { 
# 6447
if (((g->history)[pi]) == 0) { 
# 6448
(((g->pal)[g->bgindex])[3]) = (255); 
# 6449
memcpy(&((g->out)[pi * 4]), &((g->pal)[g->bgindex]), 4); 
# 6450
}  
# 6451
}  
# 6452
}  
# 6454
return o; 
# 6455
} 
# 6457
case 33:  
# 6458
{ 
# 6459
int len; 
# 6460
int ext = stbi__get8(s); 
# 6461
if (ext == 249) { 
# 6462
len = (stbi__get8(s)); 
# 6463
if (len == 4) { 
# 6464
(g->eflags) = (stbi__get8(s)); 
# 6465
(g->delay) = (10 * stbi__get16le(s)); 
# 6468
if ((g->transparent) >= 0) { 
# 6469
(((g->pal)[g->transparent])[3]) = (255); 
# 6470
}  
# 6471
if ((g->eflags) & 1) { 
# 6472
(g->transparent) = (stbi__get8(s)); 
# 6473
if ((g->transparent) >= 0) { 
# 6474
(((g->pal)[g->transparent])[3]) = (0); 
# 6475
}  
# 6476
} else { 
# 6478
stbi__skip(s, 1); 
# 6479
(g->transparent) = (-1); 
# 6480
}  
# 6481
} else { 
# 6482
stbi__skip(s, len); 
# 6483
break; 
# 6484
}  
# 6485
}  
# 6486
while ((len = (stbi__get8(s))) != 0) { 
# 6487
stbi__skip(s, len); 
# 6488
}  
# 6489
break; 
# 6490
} 
# 6492
case 59:  
# 6493
return (stbi_uc *)s; 
# 6495
default:  
# 6496
return ((unsigned char *)((::size_t)((stbi__err("unknown code")) ? __null : __null))); 
# 6497 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 6498
}  
# 6499
} 
# 6501
static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp) 
# 6502
{ 
# 6503
if (stbi__gif_test(s)) { 
# 6504
int layers = 0; 
# 6505
stbi_uc *u = (0); 
# 6506
stbi_uc *out = (0); 
# 6507
stbi_uc *two_back = (0); 
# 6508
stbi__gif g; 
# 6509
int stride; 
# 6510
memset(&g, 0, sizeof g); 
# 6511
if (delays) { 
# 6512
(*delays) = (0); 
# 6513
}  
# 6515
do { 
# 6516
u = stbi__gif_load_next(s, &g, comp, req_comp, two_back); 
# 6517
if (u == ((stbi_uc *)s)) { u = (0); }  
# 6519
if (u) { 
# 6520
(*x) = (g.w); 
# 6521
(*y) = (g.h); 
# 6522
++layers; 
# 6523
stride = (((g.w) * (g.h)) * 4); 
# 6525
if (out) { 
# 6526
out = ((stbi_uc *)realloc(out, layers * stride)); 
# 6527
if (delays) { 
# 6528
(*delays) = ((int *)realloc(*delays, sizeof(int) * layers)); 
# 6529
}  
# 6530
} else { 
# 6531
out = ((stbi_uc *)stbi__malloc(layers * stride)); 
# 6532
if (delays) { 
# 6533
(*delays) = ((int *)stbi__malloc(layers * sizeof(int))); 
# 6534
}  
# 6535
}  
# 6536
memcpy(out + ((layers - 1) * stride), u, stride); 
# 6537
if (layers >= 2) { 
# 6538
two_back = (out - (2 * stride)); 
# 6539
}  
# 6541
if (delays) { 
# 6542
((*delays)[layers - 1U]) = (g.delay); 
# 6543
}  
# 6544
}  
# 6545
} while (u != (0)); 
# 6548
free(g.out); 
# 6549
free(g.history); 
# 6550
free(g.background); 
# 6553
if (req_comp && (req_comp != 4)) { 
# 6554
out = stbi__convert_format(out, 4, req_comp, layers * (g.w), g.h); }  
# 6556
(*z) = layers; 
# 6557
return out; 
# 6558
} else { 
# 6559
return ((unsigned char *)((::size_t)((stbi__err("not GIF")) ? __null : __null))); 
# 6560 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 6561
} 
# 6563
static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri) 
# 6564
{ 
# 6565
stbi_uc *u = (0); 
# 6566
stbi__gif g; 
# 6567
memset(&g, 0, sizeof g); 
# 6569
u = stbi__gif_load_next(s, &g, comp, req_comp, 0); 
# 6570
if (u == ((stbi_uc *)s)) { u = (0); }  
# 6571
if (u) { 
# 6572
(*x) = (g.w); 
# 6573
(*y) = (g.h); 
# 6577
if (req_comp && (req_comp != 4)) { 
# 6578
u = stbi__convert_format(u, 4, req_comp, g.w, g.h); }  
# 6579
}  
# 6582
free(g.history); 
# 6583
free(g.background); 
# 6585
return u; 
# 6586
} 
# 6588
static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp) 
# 6589
{ 
# 6590
return stbi__gif_info_raw(s, x, y, comp); 
# 6591
} 
# 6598
static int stbi__hdr_test_core(stbi__context *s, const char *signature) 
# 6599
{ 
# 6600
int i; 
# 6601
for (i = 0; signature[i]; ++i) { 
# 6602
if ((stbi__get8(s)) != (signature[i])) { 
# 6603
return 0; }  }  
# 6604
stbi__rewind(s); 
# 6605
return 1; 
# 6606
} 
# 6608
static int stbi__hdr_test(stbi__context *s) 
# 6609
{ 
# 6610
int r = stbi__hdr_test_core(s, "#\?RADIANCE\n"); 
# 6611
stbi__rewind(s); 
# 6612
if (!r) { 
# 6613
r = stbi__hdr_test_core(s, "#\?RGBE\n"); 
# 6614
stbi__rewind(s); 
# 6615
}  
# 6616
return r; 
# 6617
} 
# 6620
static char *stbi__hdr_gettoken(stbi__context *z, char *buffer) 
# 6621
{ 
# 6622
int len = 0; 
# 6623
char c = '\000'; 
# 6625
c = ((char)stbi__get8(z)); 
# 6627
while ((!(stbi__at_eof(z))) && (c != ('\n'))) { 
# 6628
(buffer[len++]) = c; 
# 6629
if (len == (1024 - 1)) { 
# 6631
while ((!(stbi__at_eof(z))) && ((stbi__get8(z)) != ('\n'))) { 
# 6632
; }  
# 6633
break; 
# 6634
}  
# 6635
c = ((char)stbi__get8(z)); 
# 6636
}  
# 6638
(buffer[len]) = (0); 
# 6639
return buffer; 
# 6640
} 
# 6642
static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp) 
# 6643
{ 
# 6644
if ((input[3]) != 0) { 
# 6645
float f1; 
# 6647
f1 = ((float)ldexp((1.0F), (input[3]) - ((int)(128 + 8)))); 
# 6648
if (req_comp <= 2) { 
# 6649
(output[0]) = (((((input[0]) + (input[1])) + (input[2])) * f1) / (3)); } else 
# 6650
{ 
# 6651
(output[0]) = ((input[0]) * f1); 
# 6652
(output[1]) = ((input[1]) * f1); 
# 6653
(output[2]) = ((input[2]) * f1); 
# 6654
}  
# 6655
if (req_comp == 2) { (output[1]) = (1); }  
# 6656
if (req_comp == 4) { (output[3]) = (1); }  
# 6657
} else { 
# 6658
switch (req_comp) { 
# 6659
case 4:  (output[3]) = (1); 
# 6660
case 3:  (output[0]) = ((output[1]) = ((output[2]) = (0))); 
# 6661
break; 
# 6662
case 2:  (output[1]) = (1); 
# 6663
case 1:  (output[0]) = (0); 
# 6664
break; 
# 6665
}  
# 6666
}  
# 6667
} 
# 6669
static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri) 
# 6670
{ 
# 6671
char buffer[1024]; 
# 6672
char *token; 
# 6673
int valid = 0; 
# 6674
int width, height; 
# 6675
stbi_uc *scanline; 
# 6676
float *hdr_data; 
# 6677
int len; 
# 6678
unsigned char count, value; 
# 6679
int i, j, k, c1, c2, z; 
# 6680
const char *headerToken; 
# 6681
(void)sizeof ri; 
# 6684
headerToken = (stbi__hdr_gettoken(s, buffer)); 
# 6685
if ((strcmp(headerToken, "#\?RADIANCE") != 0) && (strcmp(headerToken, "#\?RGBE") != 0)) { 
# 6686
return ((float *)((::size_t)((stbi__err("not HDR")) ? __null : __null))); }  
# 6689 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
for (; ;) { 
# 6690
token = stbi__hdr_gettoken(s, buffer); 
# 6691
if ((token[0]) == 0) { break; }  
# 6692
if (strcmp(token, "FORMAT=32-bit_rle_rgbe") == 0) { valid = 1; }  
# 6693
}  
# 6695
if (!valid) { return ((float *)((::size_t)((stbi__err("unsupported format")) ? __null : __null))); }  
# 6699 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
token = stbi__hdr_gettoken(s, buffer); 
# 6700
if (strncmp(token, "-Y ", 3)) { return ((float *)((::size_t)((stbi__err("unsupported data layout")) ? __null : __null))); }  
# 6701 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
token += 3; 
# 6702
height = ((int)strtol(token, &token, 10)); 
# 6703
while ((*token) == (' ')) { ++token; }  
# 6704
if (strncmp(token, "+X ", 3)) { return ((float *)((::size_t)((stbi__err("unsupported data layout")) ? __null : __null))); }  
# 6705 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
token += 3; 
# 6706
width = ((int)strtol(token, __null, 10)); 
# 6708 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(*x) = width; 
# 6709
(*y) = height; 
# 6711
if (comp) { (*comp) = 3; }  
# 6712
if (req_comp == 0) { req_comp = 3; }  
# 6714
if (!(stbi__mad4sizes_valid(width, height, req_comp, sizeof(float), 0))) { 
# 6715
return ((float *)((::size_t)((stbi__err("too large")) ? __null : __null))); }  
# 6718 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
hdr_data = ((float *)stbi__malloc_mad4(width, height, req_comp, sizeof(float), 0)); 
# 6719
if (!hdr_data) { 
# 6720
return ((float *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); }  
# 6724 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
if ((width < 8) || (width >= 32768)) { 
# 6726
for (j = 0; j < height; ++j) { 
# 6727
for (i = 0; i < width; ++i) { 
# 6728
stbi_uc rgbe[4]; 
# 6729
main_decode_loop:; 
# 6730
stbi__getn(s, rgbe, 4); 
# 6731
stbi__hdr_convert((hdr_data + ((j * width) * req_comp)) + (i * req_comp), rgbe, req_comp); 
# 6732
}  
# 6733
}  
# 6734
} else { 
# 6736
scanline = (__null); 
# 6738 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
for (j = 0; j < height; ++j) { 
# 6739
c1 = (stbi__get8(s)); 
# 6740
c2 = (stbi__get8(s)); 
# 6741
len = (stbi__get8(s)); 
# 6742
if (((c1 != 2) || (c2 != 2)) || (len & 128)) { 
# 6745
stbi_uc rgbe[4]; 
# 6746
(rgbe[0]) = ((stbi_uc)c1); 
# 6747
(rgbe[1]) = ((stbi_uc)c2); 
# 6748
(rgbe[2]) = ((stbi_uc)len); 
# 6749
(rgbe[3]) = ((stbi_uc)stbi__get8(s)); 
# 6750
stbi__hdr_convert(hdr_data, rgbe, req_comp); 
# 6751
i = 1; 
# 6752
j = 0; 
# 6753
free(scanline); 
# 6754
goto main_decode_loop; 
# 6755
}  
# 6756
len <<= 8; 
# 6757
len |= (stbi__get8(s)); 
# 6758
if (len != width) { free(hdr_data); free(scanline); return ((float *)((::size_t)((stbi__err("invalid decoded scanline length")) ? __null : __null))); 
# 6758 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 6759
if (scanline == (__null)) 
# 6759 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
{ 
# 6760
scanline = ((stbi_uc *)stbi__malloc_mad2(width, 4, 0)); 
# 6761
if (!scanline) { 
# 6762
free(hdr_data); 
# 6763
return ((float *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); 
# 6764 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 6765
}  
# 6767
for (k = 0; k < 4; ++k) { 
# 6768
int nleft; 
# 6769
i = 0; 
# 6770
while ((nleft = (width - i)) > 0) { 
# 6771
count = stbi__get8(s); 
# 6772
if (count > 128) { 
# 6774
value = stbi__get8(s); 
# 6775
count -= 128; 
# 6776
if (count > nleft) { free(hdr_data); free(scanline); return ((float *)((::size_t)((stbi__err("corrupt")) ? __null : __null))); 
# 6776 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 6777
for (z = 0; z < count; ++z) { 
# 6778
(scanline[((i++) * 4) + k]) = value; }  
# 6779
} else { 
# 6781
if (count > nleft) { free(hdr_data); free(scanline); return ((float *)((::size_t)((stbi__err("corrupt")) ? __null : __null))); 
# 6781 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
}  
# 6782
for (z = 0; z < count; ++z) { 
# 6783
(scanline[((i++) * 4) + k]) = stbi__get8(s); }  
# 6784
}  
# 6785
}  
# 6786
}  
# 6787
for (i = 0; i < width; ++i) { 
# 6788
stbi__hdr_convert(hdr_data + (((j * width) + i) * req_comp), scanline + (i * 4), req_comp); }  
# 6789
}  
# 6790
if (scanline) { 
# 6791
free(scanline); }  
# 6792
}  
# 6794
return hdr_data; 
# 6795
} 
# 6797
static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp) 
# 6798
{ 
# 6799
char buffer[1024]; 
# 6800
char *token; 
# 6801
int valid = 0; 
# 6802
int dummy; 
# 6804
if (!x) { x = (&dummy); }  
# 6805
if (!y) { y = (&dummy); }  
# 6806
if (!comp) { comp = (&dummy); }  
# 6808
if (stbi__hdr_test(s) == 0) { 
# 6809
stbi__rewind(s); 
# 6810
return 0; 
# 6811
}  
# 6813
for (; ;) { 
# 6814
token = stbi__hdr_gettoken(s, buffer); 
# 6815
if ((token[0]) == 0) { break; }  
# 6816
if (strcmp(token, "FORMAT=32-bit_rle_rgbe") == 0) { valid = 1; }  
# 6817
}  
# 6819
if (!valid) { 
# 6820
stbi__rewind(s); 
# 6821
return 0; 
# 6822
}  
# 6823
token = stbi__hdr_gettoken(s, buffer); 
# 6824
if (strncmp(token, "-Y ", 3)) { 
# 6825
stbi__rewind(s); 
# 6826
return 0; 
# 6827
}  
# 6828
token += 3; 
# 6829
(*y) = ((int)strtol(token, &token, 10)); 
# 6830
while ((*token) == (' ')) { ++token; }  
# 6831
if (strncmp(token, "+X ", 3)) { 
# 6832
stbi__rewind(s); 
# 6833
return 0; 
# 6834
}  
# 6835
token += 3; 
# 6836
(*x) = ((int)strtol(token, __null, 10)); 
# 6837 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
(*comp) = 3; 
# 6838
return 1; 
# 6839
} 
# 6843
static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp) 
# 6844
{ 
# 6845
void *p; 
# 6846
stbi__bmp_data info; 
# 6848
(info.all_a) = (255); 
# 6849
p = stbi__bmp_parse_header(s, &info); 
# 6850
stbi__rewind(s); 
# 6851
if (p == (__null)) { 
# 6852 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return 0; }  
# 6853
if (x) { (*x) = (s->img_x); }  
# 6854
if (y) { (*y) = (s->img_y); }  
# 6855
if (comp) { (*comp) = ((info.ma) ? 4 : 3); }  
# 6856
return 1; 
# 6857
} 
# 6861
static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp) 
# 6862
{ 
# 6863
int channelCount, dummy, depth; 
# 6864
if (!x) { x = (&dummy); }  
# 6865
if (!y) { y = (&dummy); }  
# 6866
if (!comp) { comp = (&dummy); }  
# 6867
if (stbi__get32be(s) != (943870035)) { 
# 6868
stbi__rewind(s); 
# 6869
return 0; 
# 6870
}  
# 6871
if (stbi__get16be(s) != 1) { 
# 6872
stbi__rewind(s); 
# 6873
return 0; 
# 6874
}  
# 6875
stbi__skip(s, 6); 
# 6876
channelCount = stbi__get16be(s); 
# 6877
if ((channelCount < 0) || (channelCount > 16)) { 
# 6878
stbi__rewind(s); 
# 6879
return 0; 
# 6880
}  
# 6881
(*y) = (stbi__get32be(s)); 
# 6882
(*x) = (stbi__get32be(s)); 
# 6883
depth = stbi__get16be(s); 
# 6884
if ((depth != 8) && (depth != 16)) { 
# 6885
stbi__rewind(s); 
# 6886
return 0; 
# 6887
}  
# 6888
if (stbi__get16be(s) != 3) { 
# 6889
stbi__rewind(s); 
# 6890
return 0; 
# 6891
}  
# 6892
(*comp) = 4; 
# 6893
return 1; 
# 6894
} 
# 6896
static int stbi__psd_is16(stbi__context *s) 
# 6897
{ 
# 6898
int channelCount, depth; 
# 6899
if (stbi__get32be(s) != (943870035)) { 
# 6900
stbi__rewind(s); 
# 6901
return 0; 
# 6902
}  
# 6903
if (stbi__get16be(s) != 1) { 
# 6904
stbi__rewind(s); 
# 6905
return 0; 
# 6906
}  
# 6907
stbi__skip(s, 6); 
# 6908
channelCount = stbi__get16be(s); 
# 6909
if ((channelCount < 0) || (channelCount > 16)) { 
# 6910
stbi__rewind(s); 
# 6911
return 0; 
# 6912
}  
# 6913
(void)stbi__get32be(s); 
# 6914
(void)stbi__get32be(s); 
# 6915
depth = stbi__get16be(s); 
# 6916
if (depth != 16) { 
# 6917
stbi__rewind(s); 
# 6918
return 0; 
# 6919
}  
# 6920
return 1; 
# 6921
} 
# 6925
static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp) 
# 6926
{ 
# 6927
int act_comp = 0, num_packets = 0, chained, dummy; 
# 6928
stbi__pic_packet packets[10]; 
# 6930
if (!x) { x = (&dummy); }  
# 6931
if (!y) { y = (&dummy); }  
# 6932
if (!comp) { comp = (&dummy); }  
# 6934
if (!(stbi__pic_is4(s, "S\200\3664"))) { 
# 6935
stbi__rewind(s); 
# 6936
return 0; 
# 6937
}  
# 6939
stbi__skip(s, 88); 
# 6941
(*x) = stbi__get16be(s); 
# 6942
(*y) = stbi__get16be(s); 
# 6943
if (stbi__at_eof(s)) { 
# 6944
stbi__rewind(s); 
# 6945
return 0; 
# 6946
}  
# 6947
if (((*x) != 0) && (((1 << 28) / (*x)) < (*y))) { 
# 6948
stbi__rewind(s); 
# 6949
return 0; 
# 6950
}  
# 6952
stbi__skip(s, 8); 
# 6954
do { 
# 6955
stbi__pic_packet *packet; 
# 6957
if (num_packets == (sizeof packets / sizeof (packets[0]))) { 
# 6958
return 0; }  
# 6960
packet = (&(packets[num_packets++])); 
# 6961
chained = (stbi__get8(s)); 
# 6962
(packet->size) = stbi__get8(s); 
# 6963
(packet->type) = stbi__get8(s); 
# 6964
(packet->channel) = stbi__get8(s); 
# 6965
act_comp |= (packet->channel); 
# 6967
if (stbi__at_eof(s)) { 
# 6968
stbi__rewind(s); 
# 6969
return 0; 
# 6970
}  
# 6971
if ((packet->size) != 8) { 
# 6972
stbi__rewind(s); 
# 6973
return 0; 
# 6974
}  
# 6975
} while (chained); 
# 6977
(*comp) = ((act_comp & 16) ? 4 : 3); 
# 6979
return 1; 
# 6980
} 
# 6997 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
static int stbi__pnm_test(stbi__context *s) 
# 6998
{ 
# 6999
char p, t; 
# 7000
p = ((char)stbi__get8(s)); 
# 7001
t = ((char)stbi__get8(s)); 
# 7002
if ((p != ('P')) || ((t != ('5')) && (t != ('6')))) { 
# 7003
stbi__rewind(s); 
# 7004
return 0; 
# 7005
}  
# 7006
return 1; 
# 7007
} 
# 7009
static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri) 
# 7010
{ 
# 7011
stbi_uc *out; 
# 7012
(void)sizeof ri; 
# 7014
if (!(stbi__pnm_info(s, (int *)(&(s->img_x)), (int *)(&(s->img_y)), (int *)(&(s->img_n))))) { 
# 7015
return 0; }  
# 7017
(*x) = (s->img_x); 
# 7018
(*y) = (s->img_y); 
# 7019
if (comp) { (*comp) = (s->img_n); }  
# 7021
if (!(stbi__mad3sizes_valid(s->img_n, s->img_x, s->img_y, 0))) { 
# 7022
return ((unsigned char *)((::size_t)((stbi__err("too large")) ? __null : __null))); }  
# 7024 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
out = ((stbi_uc *)stbi__malloc_mad3(s->img_n, s->img_x, s->img_y, 0)); 
# 7025
if (!out) { return ((unsigned char *)((::size_t)((stbi__err("outofmem")) ? __null : __null))); }  
# 7026 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
stbi__getn(s, out, ((s->img_n) * (s->img_x)) * (s->img_y)); 
# 7028
if (req_comp && (req_comp != (s->img_n))) { 
# 7029
out = stbi__convert_format(out, s->img_n, req_comp, s->img_x, s->img_y); 
# 7030
if (out == (__null)) { 
# 7030 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return out; }  
# 7031
}  
# 7032
return out; 
# 7033
} 
# 7035
static int stbi__pnm_isspace(char c) 
# 7036
{ 
# 7037
return (((((c == (' ')) || (c == ('\t'))) || (c == ('\n'))) || (c == ('\v'))) || (c == ('\f'))) || (c == ('\r')); 
# 7038
} 
# 7040
static void stbi__pnm_skip_whitespace(stbi__context *s, char *c) 
# 7041
{ 
# 7042
for (; ;) { 
# 7043
while ((!(stbi__at_eof(s))) && (stbi__pnm_isspace(*c))) { 
# 7044
(*c) = ((char)stbi__get8(s)); }  
# 7046
if ((stbi__at_eof(s)) || ((*c) != ('#'))) { 
# 7047
break; }  
# 7049
while ((!(stbi__at_eof(s))) && ((*c) != ('\n')) && ((*c) != ('\r'))) { 
# 7050
(*c) = ((char)stbi__get8(s)); }  
# 7051
}  
# 7052
} 
# 7054
static int stbi__pnm_isdigit(char c) 
# 7055
{ 
# 7056
return (c >= ('0')) && (c <= ('9')); 
# 7057
} 
# 7059
static int stbi__pnm_getinteger(stbi__context *s, char *c) 
# 7060
{ 
# 7061
int value = 0; 
# 7063
while ((!(stbi__at_eof(s))) && (stbi__pnm_isdigit(*c))) { 
# 7064
value = ((value * 10) + ((*c) - ('0'))); 
# 7065
(*c) = ((char)stbi__get8(s)); 
# 7066
}  
# 7068
return value; 
# 7069
} 
# 7071
static int stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp) 
# 7072
{ 
# 7073
int maxv, dummy; 
# 7074
char c, p, t; 
# 7076
if (!x) { x = (&dummy); }  
# 7077
if (!y) { y = (&dummy); }  
# 7078
if (!comp) { comp = (&dummy); }  
# 7080
stbi__rewind(s); 
# 7083
p = ((char)stbi__get8(s)); 
# 7084
t = ((char)stbi__get8(s)); 
# 7085
if ((p != ('P')) || ((t != ('5')) && (t != ('6')))) { 
# 7086
stbi__rewind(s); 
# 7087
return 0; 
# 7088
}  
# 7090
(*comp) = ((t == ('6')) ? 3 : 1); 
# 7092
c = ((char)stbi__get8(s)); 
# 7093
stbi__pnm_skip_whitespace(s, &c); 
# 7095
(*x) = stbi__pnm_getinteger(s, &c); 
# 7096
stbi__pnm_skip_whitespace(s, &c); 
# 7098
(*y) = stbi__pnm_getinteger(s, &c); 
# 7099
stbi__pnm_skip_whitespace(s, &c); 
# 7101
maxv = stbi__pnm_getinteger(s, &c); 
# 7103
if (maxv > 255) { 
# 7104
return stbi__err("max value > 255"); } else { 
# 7106
return 1; }  
# 7107
} 
# 7110
static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp) 
# 7111
{ 
# 7113
if (stbi__jpeg_info(s, x, y, comp)) { return 1; }  
# 7117
if (stbi__png_info(s, x, y, comp)) { return 1; }  
# 7121
if (stbi__gif_info(s, x, y, comp)) { return 1; }  
# 7125
if (stbi__bmp_info(s, x, y, comp)) { return 1; }  
# 7129
if (stbi__psd_info(s, x, y, comp)) { return 1; }  
# 7133
if (stbi__pic_info(s, x, y, comp)) { return 1; }  
# 7137
if (stbi__pnm_info(s, x, y, comp)) { return 1; }  
# 7141
if (stbi__hdr_info(s, x, y, comp)) { return 1; }  
# 7146
if (stbi__tga_info(s, x, y, comp)) { 
# 7147
return 1; }  
# 7149
return stbi__err("unknown image type"); 
# 7150
} 
# 7152
static int stbi__is_16_main(stbi__context *s) 
# 7153
{ 
# 7155
if (stbi__png_is16(s)) { return 1; }  
# 7159
if (stbi__psd_is16(s)) { return 1; }  
# 7162
return 0; 
# 7163
} 
# 7166
extern int stbi_info(const char *filename, int *x, int *y, int *comp) 
# 7167
{ 
# 7168
FILE *f = stbi__fopen(filename, "rb"); 
# 7169
int result; 
# 7170
if (!f) { return stbi__err("can\'t fopen"); }  
# 7171
result = stbi_info_from_file(f, x, y, comp); 
# 7172
fclose(f); 
# 7173
return result; 
# 7174
} 
# 7176
extern int stbi_info_from_file(FILE *f, int *x, int *y, int *comp) 
# 7177
{ 
# 7178
int r; 
# 7179
stbi__context s; 
# 7180
long pos = ftell(f); 
# 7181
stbi__start_file(&s, f); 
# 7182
r = stbi__info_main(&s, x, y, comp); 
# 7183
fseek(f, pos, 0); 
# 7184 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return r; 
# 7185
} 
# 7187
extern int stbi_is_16_bit(const char *filename) 
# 7188
{ 
# 7189
FILE *f = stbi__fopen(filename, "rb"); 
# 7190
int result; 
# 7191
if (!f) { return stbi__err("can\'t fopen"); }  
# 7192
result = stbi_is_16_bit_from_file(f); 
# 7193
fclose(f); 
# 7194
return result; 
# 7195
} 
# 7197
extern int stbi_is_16_bit_from_file(FILE *f) 
# 7198
{ 
# 7199
int r; 
# 7200
stbi__context s; 
# 7201
long pos = ftell(f); 
# 7202
stbi__start_file(&s, f); 
# 7203
r = stbi__is_16_main(&s); 
# 7204
fseek(f, pos, 0); 
# 7205 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image.h"
return r; 
# 7206
} 
# 7209
extern int stbi_info_from_memory(const stbi_uc *buffer, int len, int *x, int *y, int *comp) 
# 7210
{ 
# 7211
stbi__context s; 
# 7212
stbi__start_mem(&s, buffer, len); 
# 7213
return stbi__info_main(&s, x, y, comp); 
# 7214
} 
# 7216
extern int stbi_info_from_callbacks(const stbi_io_callbacks *c, void *user, int *x, int *y, int *comp) 
# 7217
{ 
# 7218
stbi__context s; 
# 7219
stbi__start_callbacks(&s, (stbi_io_callbacks *)c, user); 
# 7220
return stbi__info_main(&s, x, y, comp); 
# 7221
} 
# 7223
extern int stbi_is_16_bit_from_memory(const stbi_uc *buffer, int len) 
# 7224
{ 
# 7225
stbi__context s; 
# 7226
stbi__start_mem(&s, buffer, len); 
# 7227
return stbi__is_16_main(&s); 
# 7228
} 
# 7230
extern int stbi_is_16_bit_from_callbacks(const stbi_io_callbacks *c, void *user) 
# 7231
{ 
# 7232
stbi__context s; 
# 7233
stbi__start_callbacks(&s, (stbi_io_callbacks *)c, user); 
# 7234
return stbi__is_16_main(&s); 
# 7235
} 
# 165 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
extern int stbi_write_tga_with_rle; 
# 166
extern int stbi_write_png_compression_level; 
# 167
extern int stbi_write_force_png_filter; 
# 171
extern "C" int stbi_write_png(const char * filename, int w, int h, int comp, const void * data, int stride_in_bytes); 
# 172
extern "C" int stbi_write_bmp(const char * filename, int w, int h, int comp, const void * data); 
# 173
extern "C" int stbi_write_tga(const char * filename, int w, int h, int comp, const void * data); 
# 174
extern "C" int stbi_write_hdr(const char * filename, int w, int h, int comp, const float * data); 
# 175
extern "C" int stbi_write_jpg(const char * filename, int x, int y, int comp, const void * data, int quality); 
# 178
typedef void stbi_write_func(void * context, void * data, int size); 
# 180
extern "C" int stbi_write_png_to_func(stbi_write_func * func, void * context, int w, int h, int comp, const void * data, int stride_in_bytes); 
# 181
extern "C" int stbi_write_bmp_to_func(stbi_write_func * func, void * context, int w, int h, int comp, const void * data); 
# 182
extern "C" int stbi_write_tga_to_func(stbi_write_func * func, void * context, int w, int h, int comp, const void * data); 
# 183
extern "C" int stbi_write_hdr_to_func(stbi_write_func * func, void * context, int w, int h, int comp, const float * data); 
# 184
extern "C" int stbi_write_jpg_to_func(stbi_write_func * func, void * context, int x, int y, int comp, const void * data, int quality); 
# 186
extern "C" void stbi_flip_vertically_on_write(int flip_boolean); 
# 64 "/usr/include/assert.h" 3
extern "C" {
# 67
extern void __assert_fail(const char * __assertion, const char * __file, unsigned __line, const char * __function) noexcept(true)
# 69
 __attribute((__noreturn__)); 
# 72
extern void __assert_perror_fail(int __errnum, const char * __file, unsigned __line, const char * __function) noexcept(true)
# 74
 __attribute((__noreturn__)); 
# 79
extern void __assert(const char * __assertion, const char * __file, int __line) noexcept(true)
# 80
 __attribute((__noreturn__)); 
# 83
}
# 247 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
int stbi_write_png_compression_level = 8; 
# 248
int stbi__flip_vertically_on_write = 0; 
# 249
int stbi_write_tga_with_rle = 1; 
# 250
int stbi_write_force_png_filter = (-1); 
# 253
extern "C" void stbi_flip_vertically_on_write(int flag) 
# 254
{ 
# 255
stbi__flip_vertically_on_write = flag; 
# 256
} 
# 262
typedef 
# 259
struct { 
# 260
stbi_write_func *func; 
# 261
void *context; 
# 262
} stbi__write_context; 
# 265
static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context) 
# 266
{ 
# 267
(s->func) = c; 
# 268
(s->context) = context; 
# 269
} 
# 273
static void stbi__stdio_write(void *context, void *data, int size) 
# 274
{ 
# 275
fwrite(data, 1, size, (FILE *)context); 
# 276
} 
# 278
static int stbi__start_write_file(stbi__write_context *s, const char *filename) 
# 279
{ 
# 280
FILE *f; 
# 285
f = fopen(filename, "wb"); 
# 287
stbi__start_write_callbacks(s, stbi__stdio_write, (void *)f); 
# 288
return f != (__null); 
# 289 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
} 
# 291
static void stbi__end_write_file(stbi__write_context *s) 
# 292
{ 
# 293
fclose((FILE *)(s->context)); 
# 294
} 
# 298
typedef unsigned stbiw_uint32; 
# 299
typedef int stb_image_write_test[(sizeof(stbiw_uint32) == (4)) ? 1 : (-1)]; 
# 301
static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v) 
# 302
{ 
# 303
while (*fmt) { 
# 304
switch (*(fmt++)) { 
# 305
case ' ':  break; 
# 306
case '1':  { unsigned char x = (unsigned char)((__builtin_va_arg(v,int)) & 255); 
# 307 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
(s->func)(s->context, &x, 1); 
# 308
break; } 
# 309
case '2':  { int x = __builtin_va_arg(v,int); 
# 310 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
unsigned char b[2]; 
# 311
(b[0]) = ((unsigned char)(x & 255)); 
# 312
(b[1]) = ((unsigned char)((x >> 8) & 255)); 
# 313
(s->func)(s->context, b, 2); 
# 314
break; } 
# 315
case '4':  { stbiw_uint32 x = __builtin_va_arg(v,int); 
# 316 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
unsigned char b[4]; 
# 317
(b[0]) = ((unsigned char)(x & (255))); 
# 318
(b[1]) = ((unsigned char)((x >> 8) & (255))); 
# 319
(b[2]) = ((unsigned char)((x >> 16) & (255))); 
# 320
(b[3]) = ((unsigned char)((x >> 24) & (255))); 
# 321
(s->func)(s->context, b, 4); 
# 322
break; } 
# 323
default:  
# 324 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
(static_cast< bool>(0)) ? (void)0 : __assert_fail("0", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h", 324, __extension__ __PRETTY_FUNCTION__); 
# 325 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
return; 
# 326
}  
# 327
}  
# 328
} 
# 330
static void stbiw__writef(stbi__write_context *s, const char *fmt, ...) 
# 331
{ 
# 332
va_list v; 
# 333 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
__builtin_va_start((v),fmt); 
# 334 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
stbiw__writefv(s, fmt, v); 
# 335 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
__builtin_va_end(v); 
# 336 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
} 
# 338
static void stbiw__putc(stbi__write_context *s, unsigned char c) 
# 339
{ 
# 340
(s->func)(s->context, &c, 1); 
# 341
} 
# 343
static void stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c) 
# 344
{ 
# 345
unsigned char arr[3]; 
# 346
(((arr[0]) = a), ((arr[1]) = b)), ((arr[2]) = c); 
# 347
(s->func)(s->context, arr, 3); 
# 348
} 
# 350
static void stbiw__write_pixel(stbi__write_context *s, int rgb_dir, int comp, int write_alpha, int expand_mono, unsigned char *d) 
# 351
{ 
# 352
unsigned char bg[3] = {(255), (0), (255)}, px[3]; 
# 353
int k; 
# 355
if (write_alpha < 0) { 
# 356
(s->func)(s->context, &(d[comp - 1]), 1); }  
# 358
switch (comp) { 
# 359
case 2:  
# 360
case 1:  
# 361
if (expand_mono) { 
# 362
stbiw__write3(s, d[0], d[0], d[0]); } else { 
# 364
(s->func)(s->context, d, 1); }  
# 365
break; 
# 366
case 4:  
# 367
if (!write_alpha) { 
# 369
for (k = 0; k < 3; ++k) { 
# 370
(px[k]) = ((bg[k]) + ((((d[k]) - (bg[k])) * (d[3])) / 255)); }  
# 371
stbiw__write3(s, px[1 - rgb_dir], px[1], px[1 + rgb_dir]); 
# 372
break; 
# 373
}  
# 375
case 3:  
# 376
stbiw__write3(s, d[1 - rgb_dir], d[1], d[1 + rgb_dir]); 
# 377
break; 
# 378
}  
# 379
if (write_alpha > 0) { 
# 380
(s->func)(s->context, &(d[comp - 1]), 1); }  
# 381
} 
# 383
static void stbiw__write_pixels(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono) 
# 384
{ 
# 385
stbiw_uint32 zero = (0); 
# 386
int i, j, j_end; 
# 388
if (y <= 0) { 
# 389
return; }  
# 391
if (stbi__flip_vertically_on_write) { 
# 392
vdir *= (-1); }  
# 394
if (vdir < 0) { 
# 395
(j_end = (-1)), (j = (y - 1)); } else { 
# 397
(j_end = y), (j = 0); }  
# 399
for (; j != j_end; j += vdir) { 
# 400
for (i = 0; i < x; ++i) { 
# 401
unsigned char *d = ((unsigned char *)data) + (((j * x) + i) * comp); 
# 402
stbiw__write_pixel(s, rgb_dir, comp, write_alpha, expand_mono, d); 
# 403
}  
# 404
(s->func)(s->context, &zero, scanline_pad); 
# 405
}  
# 406
} 
# 408
static int stbiw__outfile(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...) 
# 409
{ 
# 410
if ((y < 0) || (x < 0)) { 
# 411
return 0; 
# 412
} else { 
# 413
va_list v; 
# 414 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
__builtin_va_start((v),fmt); 
# 415 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
stbiw__writefv(s, fmt, v); 
# 416 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
__builtin_va_end(v); 
# 417 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
stbiw__write_pixels(s, rgb_dir, vdir, x, y, comp, data, alpha, pad, expand_mono); 
# 418
return 1; 
# 419
}  
# 420
} 
# 422
static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data) 
# 423
{ 
# 424
int pad = ((-x) * 3) & 3; 
# 425
return stbiw__outfile(s, -1, -1, x, y, comp, 1, (void *)data, 0, pad, "11 4 22 44 44 22 444444", 'B', 'M', (14 + 40) + (((x * 3) + pad) * y), 0, 0, 14 + 40, 40, x, y, 1, 24, 0, 0, 0, 0, 0, 0); 
# 429
} 
# 431
extern "C" int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data) 
# 432
{ 
# 433
stbi__write_context s; 
# 434
stbi__start_write_callbacks(&s, func, context); 
# 435
return stbi_write_bmp_core(&s, x, y, comp, data); 
# 436
} 
# 439
extern "C" int stbi_write_bmp(const char *filename, int x, int y, int comp, const void *data) 
# 440
{ 
# 441
stbi__write_context s; 
# 442
if (stbi__start_write_file(&s, filename)) { 
# 443
int r = stbi_write_bmp_core(&s, x, y, comp, data); 
# 444
stbi__end_write_file(&s); 
# 445
return r; 
# 446
} else { 
# 447
return 0; }  
# 448
} 
# 451
static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data) 
# 452
{ 
# 453
int has_alpha = (comp == 2) || (comp == 4); 
# 454
int colorbytes = (has_alpha) ? comp - 1 : comp; 
# 455
int format = (colorbytes < 2) ? 3 : 2; 
# 457
if ((y < 0) || (x < 0)) { 
# 458
return 0; }  
# 460
if (!stbi_write_tga_with_rle) { 
# 461
return stbiw__outfile(s, -1, -1, x, y, comp, 0, (void *)data, has_alpha, 0, "111 221 2222 11", 0, 0, format, 0, 0, 0, 0, 0, x, y, (colorbytes + has_alpha) * 8, has_alpha * 8); 
# 463
} else { 
# 464
int i, j, k; 
# 465
int jend, jdir; 
# 467
stbiw__writef(s, "111 221 2222 11", 0, 0, format + 8, 0, 0, 0, 0, 0, x, y, (colorbytes + has_alpha) * 8, has_alpha * 8); 
# 469
if (stbi__flip_vertically_on_write) { 
# 470
j = 0; 
# 471
jend = y; 
# 472
jdir = 1; 
# 473
} else { 
# 474
j = (y - 1); 
# 475
jend = (-1); 
# 476
jdir = (-1); 
# 477
}  
# 478
for (; j != jend; j += jdir) { 
# 479
unsigned char *row = ((unsigned char *)data) + ((j * x) * comp); 
# 480
int len; 
# 482
for (i = 0; i < x; i += len) { 
# 483
unsigned char *begin = row + (i * comp); 
# 484
int diff = 1; 
# 485
len = 1; 
# 487
if (i < (x - 1)) { 
# 488
++len; 
# 489
diff = memcmp(begin, row + ((i + 1) * comp), comp); 
# 490
if (diff) { 
# 491
const unsigned char *prev = begin; 
# 492
for (k = (i + 2); (k < x) && (len < 128); ++k) { 
# 493
if (memcmp(prev, row + (k * comp), comp)) { 
# 494
prev += comp; 
# 495
++len; 
# 496
} else { 
# 497
--len; 
# 498
break; 
# 499
}  
# 500
}  
# 501
} else { 
# 502
for (k = (i + 2); (k < x) && (len < 128); ++k) { 
# 503
if (!(memcmp(begin, row + (k * comp), comp))) { 
# 504
++len; 
# 505
} else { 
# 506
break; 
# 507
}  
# 508
}  
# 509
}  
# 510
}  
# 512
if (diff) { 
# 513
unsigned char header = (unsigned char)((len - 1) & 255); 
# 514
(s->func)(s->context, &header, 1); 
# 515
for (k = 0; k < len; ++k) { 
# 516
stbiw__write_pixel(s, -1, comp, has_alpha, 0, begin + (k * comp)); 
# 517
}  
# 518
} else { 
# 519
unsigned char header = (unsigned char)((len - 129) & 255); 
# 520
(s->func)(s->context, &header, 1); 
# 521
stbiw__write_pixel(s, -1, comp, has_alpha, 0, begin); 
# 522
}  
# 523
}  
# 524
}  
# 525
}  
# 526
return 1; 
# 527
} 
# 529
extern "C" int stbi_write_tga_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data) 
# 530
{ 
# 531
stbi__write_context s; 
# 532
stbi__start_write_callbacks(&s, func, context); 
# 533
return stbi_write_tga_core(&s, x, y, comp, (void *)data); 
# 534
} 
# 537
extern "C" int stbi_write_tga(const char *filename, int x, int y, int comp, const void *data) 
# 538
{ 
# 539
stbi__write_context s; 
# 540
if (stbi__start_write_file(&s, filename)) { 
# 541
int r = stbi_write_tga_core(&s, x, y, comp, (void *)data); 
# 542
stbi__end_write_file(&s); 
# 543
return r; 
# 544
} else { 
# 545
return 0; }  
# 546
} 
# 555 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear) 
# 556
{ 
# 557
int exponent; 
# 558
float maxcomp = ((linear[0]) > (((linear[1]) > (linear[2])) ? linear[1] : (linear[2]))) ? linear[0] : (((linear[1]) > (linear[2])) ? linear[1] : (linear[2])); 
# 560
if (maxcomp < (1.0E-32F)) { 
# 561
(rgbe[0]) = ((rgbe[1]) = ((rgbe[2]) = ((rgbe[3]) = (0)))); 
# 562
} else { 
# 563
float normalize = (((float)frexp(maxcomp, &exponent)) * (256.0F)) / maxcomp; 
# 565
(rgbe[0]) = ((unsigned char)((linear[0]) * normalize)); 
# 566
(rgbe[1]) = ((unsigned char)((linear[1]) * normalize)); 
# 567
(rgbe[2]) = ((unsigned char)((linear[2]) * normalize)); 
# 568
(rgbe[3]) = ((unsigned char)(exponent + 128)); 
# 569
}  
# 570
} 
# 572
void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte) 
# 573
{ 
# 574
unsigned char lengthbyte = (unsigned char)((length + 128) & 255); 
# 575 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
(static_cast< bool>((length + 128) <= 255)) ? (void)0 : __assert_fail("length+128 <= 255", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h", 575, __extension__ __PRETTY_FUNCTION__); 
# 576 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
(s->func)(s->context, &lengthbyte, 1); 
# 577
(s->func)(s->context, &databyte, 1); 
# 578
} 
# 580
void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data) 
# 581
{ 
# 582
unsigned char lengthbyte = (unsigned char)(length & 255); 
# 583 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
(static_cast< bool>(length <= 128)) ? (void)0 : __assert_fail("length <= 128", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h", 583, __extension__ __PRETTY_FUNCTION__); 
# 584 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
(s->func)(s->context, &lengthbyte, 1); 
# 585
(s->func)(s->context, data, length); 
# 586
} 
# 588
void stbiw__write_hdr_scanline(stbi__write_context *s, int width, int ncomp, unsigned char *scratch, float *scanline) 
# 589
{ 
# 590
unsigned char scanlineheader[4] = {(2), (2), (0), (0)}; 
# 591
unsigned char rgbe[4]; 
# 592
float linear[3]; 
# 593
int x; 
# 595
(scanlineheader[2]) = ((width & 65280) >> 8); 
# 596
(scanlineheader[3]) = (width & 255); 
# 599
if ((width < 8) || (width >= 32768)) { 
# 600
for (x = 0; x < width; x++) { 
# 601
switch (ncomp) { 
# 602
case 4:  
# 603
case 3:  (linear[2]) = (scanline[(x * ncomp) + 2]); 
# 604
(linear[1]) = (scanline[(x * ncomp) + 1]); 
# 605
(linear[0]) = (scanline[(x * ncomp) + 0]); 
# 606
break; 
# 607
default:  
# 608
(linear[0]) = ((linear[1]) = ((linear[2]) = (scanline[(x * ncomp) + 0]))); 
# 609
break; 
# 610
}  
# 611
stbiw__linear_to_rgbe(rgbe, linear); 
# 612
(s->func)(s->context, rgbe, 4); 
# 613
}  
# 614
} else { 
# 615
int c, r; 
# 617
for (x = 0; x < width; x++) { 
# 618
switch (ncomp) { 
# 619
case 4:  
# 620
case 3:  (linear[2]) = (scanline[(x * ncomp) + 2]); 
# 621
(linear[1]) = (scanline[(x * ncomp) + 1]); 
# 622
(linear[0]) = (scanline[(x * ncomp) + 0]); 
# 623
break; 
# 624
default:  
# 625
(linear[0]) = ((linear[1]) = ((linear[2]) = (scanline[(x * ncomp) + 0]))); 
# 626
break; 
# 627
}  
# 628
stbiw__linear_to_rgbe(rgbe, linear); 
# 629
(scratch[x + (width * 0)]) = (rgbe[0]); 
# 630
(scratch[x + (width * 1)]) = (rgbe[1]); 
# 631
(scratch[x + (width * 2)]) = (rgbe[2]); 
# 632
(scratch[x + (width * 3)]) = (rgbe[3]); 
# 633
}  
# 635
(s->func)(s->context, scanlineheader, 4); 
# 638
for (c = 0; c < 4; c++) { 
# 639
unsigned char *comp = &(scratch[width * c]); 
# 641
x = 0; 
# 642
while (x < width) { 
# 644
r = x; 
# 645
while ((r + 2) < width) { 
# 646
if (((comp[r]) == (comp[r + 1])) && ((comp[r]) == (comp[r + 2]))) { 
# 647
break; }  
# 648
++r; 
# 649
}  
# 650
if ((r + 2) >= width) { 
# 651
r = width; }  
# 653
while (x < r) { 
# 654
int len = r - x; 
# 655
if (len > 128) { len = 128; }  
# 656
stbiw__write_dump_data(s, len, &(comp[x])); 
# 657
x += len; 
# 658
}  
# 660
if ((r + 2) < width) { 
# 662
while ((r < width) && ((comp[r]) == (comp[x]))) { 
# 663
++r; }  
# 665
while (x < r) { 
# 666
int len = r - x; 
# 667
if (len > 127) { len = 127; }  
# 668
stbiw__write_run_data(s, len, comp[x]); 
# 669
x += len; 
# 670
}  
# 671
}  
# 672
}  
# 673
}  
# 674
}  
# 675
} 
# 677
static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data) 
# 678
{ 
# 679
if (((y <= 0) || (x <= 0)) || (data == (__null))) { 
# 680 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
return 0; } else 
# 681
{ 
# 683
unsigned char *scratch = (unsigned char *)malloc(x * 4); 
# 684
int i, len; 
# 685
char buffer[128]; 
# 686
char header[] = "#\?RADIANCE\n# Written by stb_image_write.h\nFORMAT=32-bit_rle_rgbe\n"; 
# 687
(s->func)(s->context, header, sizeof header - (1)); 
# 692
len = sprintf(buffer, "EXPOSURE=          1.0000000000000\n\n-Y %d +X %d\n", y, x); 
# 694
(s->func)(s->context, buffer, len); 
# 696
for (i = 0; i < y; i++) { 
# 697
stbiw__write_hdr_scanline(s, x, comp, scratch, data + (((comp * x) * ((stbi__flip_vertically_on_write) ? (y - 1) - i : i)) * x)); }  
# 698
free(scratch); 
# 699
return 1; 
# 700
}  
# 701
} 
# 703
extern "C" int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const float *data) 
# 704
{ 
# 705
stbi__write_context s; 
# 706
stbi__start_write_callbacks(&s, func, context); 
# 707
return stbi_write_hdr_core(&s, x, y, comp, (float *)data); 
# 708
} 
# 711
extern "C" int stbi_write_hdr(const char *filename, int x, int y, int comp, const float *data) 
# 712
{ 
# 713
stbi__write_context s; 
# 714
if (stbi__start_write_file(&s, filename)) { 
# 715
int r = stbi_write_hdr_core(&s, x, y, comp, (float *)data); 
# 716
stbi__end_write_file(&s); 
# 717
return r; 
# 718
} else { 
# 719
return 0; }  
# 720
} 
# 743 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
static void *stbiw__sbgrowf(void **arr, int increment, int itemsize) 
# 744
{ 
# 745
int m = (*arr) ? (2 * ((((int *)(*arr)) - 2)[0])) + increment : (increment + 1); 
# 746
void *p = realloc((*arr) ? ((int *)(*arr)) - 2 : (0), (itemsize * m) + (sizeof(int) * (2))); 
# 747 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
(static_cast< bool>(p)) ? (void)0 : __assert_fail("p", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h", 747, __extension__ __PRETTY_FUNCTION__); 
# 748 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
if (p) { 
# 749
if (!(*arr)) { (((int *)p)[1]) = 0; }  
# 750
(*arr) = ((void *)(((int *)p) + 2)); 
# 751
((((int *)(*arr)) - 2)[0]) = m; 
# 752
}  
# 753
return *arr; 
# 754
} 
# 756
static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned *bitbuffer, int *bitcount) 
# 757
{ 
# 758
while ((*bitcount) >= 8) { 
# 759
(((data == (0)) || ((((((int *)data) - 2)[1]) + 1) >= ((((int *)data) - 2)[0]))) ? stbiw__sbgrowf((void **)(&data), 1, sizeof (*data)) : (0)), ((data[((((int *)data) - 2)[1])++]) = ((unsigned char)((*bitbuffer) & (255)))); 
# 760
(*bitbuffer) >>= 8; 
# 761
(*bitcount) -= 8; 
# 762
}  
# 763
return data; 
# 764
} 
# 766
static int stbiw__zlib_bitrev(int code, int codebits) 
# 767
{ 
# 768
int res = 0; 
# 769
while (codebits--) { 
# 770
res = ((res << 1) | (code & 1)); 
# 771
code >>= 1; 
# 772
}  
# 773
return res; 
# 774
} 
# 776
static unsigned stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit) 
# 777
{ 
# 778
int i; 
# 779
for (i = 0; (i < limit) && (i < 258); ++i) { 
# 780
if ((a[i]) != (b[i])) { break; }  }  
# 781
return i; 
# 782
} 
# 784
static unsigned stbiw__zhash(unsigned char *data) 
# 785
{ 
# 786
stbiw_uint32 hash = ((data[0]) + ((data[1]) << 8)) + ((data[2]) << 16); 
# 787
hash ^= (hash << 3); 
# 788
hash += (hash >> 5); 
# 789
hash ^= (hash << 4); 
# 790
hash += (hash >> 17); 
# 791
hash ^= (hash << 25); 
# 792
hash += (hash >> 6); 
# 793
return hash; 
# 794
} 
# 812 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
unsigned char *stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality) 
# 813
{ 
# 818
static unsigned short lengthc[] = {(3), (4), (5), (6), (7), (8), (9), (10), (11), (13), (15), (17), (19), (23), (27), (31), (35), (43), (51), (59), (67), (83), (99), (115), (131), (163), (195), (227), (258), (259)}; 
# 819
static unsigned char lengtheb[] = {(0), (0), (0), (0), (0), (0), (0), (0), (1), (1), (1), (1), (2), (2), (2), (2), (3), (3), (3), (3), (4), (4), (4), (4), (5), (5), (5), (5), (0)}; 
# 820
static unsigned short distc[] = {(1), (2), (3), (4), (5), (7), (9), (13), (17), (25), (33), (49), (65), (97), (129), (193), (257), (385), (513), (769), (1025), (1537), (2049), (3073), (4097), (6145), (8193), (12289), (16385), (24577), (32768)}; 
# 821
static unsigned char disteb[] = {(0), (0), (0), (0), (1), (1), (2), (2), (3), (3), (4), (4), (5), (5), (6), (6), (7), (7), (8), (8), (9), (9), (10), (10), (11), (11), (12), (12), (13), (13)}; 
# 822
unsigned bitbuf = (0); 
# 823
int i, j, bitcount = 0; 
# 824
unsigned char *out = (__null); 
# 825 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
unsigned char ***hash_table = (unsigned char ***)malloc((16384) * sizeof(char **)); 
# 826
if (hash_table == (__null)) { 
# 827 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
return __null; }  
# 828 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
if (quality < 5) { quality = 5; }  
# 830
(((out == (0)) || ((((((int *)out) - 2)[1]) + 1) >= ((((int *)out) - 2)[0]))) ? stbiw__sbgrowf((void **)(&out), 1, sizeof (*out)) : (0)), ((out[((((int *)out) - 2)[1])++]) = (120)); 
# 831
(((out == (0)) || ((((((int *)out) - 2)[1]) + 1) >= ((((int *)out) - 2)[0]))) ? stbiw__sbgrowf((void **)(&out), 1, sizeof (*out)) : (0)), ((out[((((int *)out) - 2)[1])++]) = (94)); 
# 832
((bitbuf |= (1 << bitcount)), (bitcount += 1)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)); 
# 833
((bitbuf |= (1 << bitcount)), (bitcount += 2)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)); 
# 835
for (i = 0; i < 16384; ++i) { 
# 836
(hash_table[i]) = (__null); }  
# 838 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
i = 0; 
# 839
while (i < (data_len - 3)) { 
# 841
int h = stbiw__zhash(data + i) & (16384 - 1), best = 3; 
# 842
unsigned char *bestloc = (0); 
# 843
unsigned char **hlist = hash_table[h]; 
# 844
int n = (hlist) ? (((int *)hlist) - 2)[1] : 0; 
# 845
for (j = 0; j < n; ++j) { 
# 846
if (((hlist[j]) - data) > (i - 32768)) { 
# 847
int d = stbiw__zlib_countm(hlist[j], data + i, data_len - i); 
# 848
if (d >= best) { (best = d), (bestloc = (hlist[j])); }  
# 849
}  
# 850
}  
# 852
if ((hash_table[h]) && (((((int *)(hash_table[h])) - 2)[1]) == (2 * quality))) { 
# 853
memmove(hash_table[h], (hash_table[h]) + quality, sizeof ((hash_table[h])[0]) * quality); 
# 854
((((int *)(hash_table[h])) - 2)[1]) = quality; 
# 855
}  
# 856
((((hash_table[h]) == (0)) || ((((((int *)(hash_table[h])) - 2)[1]) + 1) >= ((((int *)(hash_table[h])) - 2)[0]))) ? stbiw__sbgrowf((void **)(&(hash_table[h])), 1, sizeof (*(hash_table[h]))) : (0)), (((hash_table[h])[((((int *)(hash_table[h])) - 2)[1])++]) = (data + i)); 
# 858
if (bestloc) { 
# 860
h = (stbiw__zhash((data + i) + 1) & (16384 - 1)); 
# 861
hlist = (hash_table[h]); 
# 862
n = ((hlist) ? (((int *)hlist) - 2)[1] : 0); 
# 863
for (j = 0; j < n; ++j) { 
# 864
if (((hlist[j]) - data) > (i - 32767)) { 
# 865
int e = stbiw__zlib_countm(hlist[j], (data + i) + 1, (data_len - i) - 1); 
# 866
if (e > best) { 
# 867
bestloc = (__null); 
# 868 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
break; 
# 869
}  
# 870
}  
# 871
}  
# 872
}  
# 874
if (bestloc) { 
# 875
int d = (int)((data + i) - bestloc); 
# 876 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
(static_cast< bool>((d <= 32767) && (best <= 258))) ? (void)0 : __assert_fail("d <= 32767 && best <= 258", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h", 876, __extension__ __PRETTY_FUNCTION__); 
# 877 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
for (j = 0; best > ((lengthc[j + 1]) - 1); ++j) { ; }  
# 878
((j + 257) <= 143) ? ((bitbuf |= (stbiw__zlib_bitrev(48 + (j + 257), 8) << bitcount)), (bitcount += 8)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)) : (((j + 257) <= 255) ? ((bitbuf |= (stbiw__zlib_bitrev((400 + (j + 257)) - 144, 9) << bitcount)), (bitcount += 9)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)) : (((j + 257) <= 279) ? ((bitbuf |= (stbiw__zlib_bitrev((0 + (j + 257)) - 256, 7) << bitcount)), (bitcount += 7)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)) : (((bitbuf |= (stbiw__zlib_bitrev((192 + (j + 257)) - 280, 8) << bitcount)), (bitcount += 8)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount))))); 
# 879
if (lengtheb[j]) { ((bitbuf |= ((best - (lengthc[j])) << bitcount)), (bitcount += (lengtheb[j]))), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)); }  
# 880
for (j = 0; d > ((distc[j + 1]) - 1); ++j) { ; }  
# 881
((bitbuf |= (stbiw__zlib_bitrev(j, 5) << bitcount)), (bitcount += 5)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)); 
# 882
if (disteb[j]) { ((bitbuf |= ((d - (distc[j])) << bitcount)), (bitcount += (disteb[j]))), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)); }  
# 883
i += best; 
# 884
} else { 
# 885
((data[i]) <= 143) ? ((bitbuf |= (stbiw__zlib_bitrev(48 + (data[i]), 8) << bitcount)), (bitcount += 8)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)) : (((bitbuf |= (stbiw__zlib_bitrev((400 + (data[i])) - 144, 9) << bitcount)), (bitcount += 9)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount))); 
# 886
++i; 
# 887
}  
# 888
}  
# 890
for (; i < data_len; ++i) { 
# 891
((data[i]) <= 143) ? ((bitbuf |= (stbiw__zlib_bitrev(48 + (data[i]), 8) << bitcount)), (bitcount += 8)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)) : (((bitbuf |= (stbiw__zlib_bitrev((400 + (data[i])) - 144, 9) << bitcount)), (bitcount += 9)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount))); }  
# 892
(256 <= 143) ? ((bitbuf |= (stbiw__zlib_bitrev(48 + 256, 8) << bitcount)), (bitcount += 8)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)) : ((256 <= 255) ? ((bitbuf |= (stbiw__zlib_bitrev((400 + 256) - 144, 9) << bitcount)), (bitcount += 9)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)) : ((256 <= 279) ? ((bitbuf |= (stbiw__zlib_bitrev((0 + 256) - 256, 7) << bitcount)), (bitcount += 7)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)) : (((bitbuf |= (stbiw__zlib_bitrev((192 + 256) - 280, 8) << bitcount)), (bitcount += 8)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount))))); 
# 894
while (bitcount) { 
# 895
((bitbuf |= (0 << bitcount)), (bitcount += 1)), (out = stbiw__zlib_flushf(out, &bitbuf, &bitcount)); }  
# 897
for (i = 0; i < 16384; ++i) { 
# 898
(void)((hash_table[i]) ? free(((int *)(hash_table[i])) - 2), 0 : 0); }  
# 899
free(hash_table); 
# 901
{ 
# 903
unsigned s1 = (1), s2 = (0); 
# 904
int blocklen = (int)(data_len % 5552); 
# 905
j = 0; 
# 906
while (j < data_len) { 
# 907
for (i = 0; i < blocklen; ++i) { (s1 += (data[j + i])), (s2 += s1); }  
# 908
(s1 %= (65521)), (s2 %= (65521)); 
# 909
j += blocklen; 
# 910
blocklen = 5552; 
# 911
}  
# 912
(((out == (0)) || ((((((int *)out) - 2)[1]) + 1) >= ((((int *)out) - 2)[0]))) ? stbiw__sbgrowf((void **)(&out), 1, sizeof (*out)) : (0)), ((out[((((int *)out) - 2)[1])++]) = ((unsigned char)((s2 >> 8) & (255)))); 
# 913
(((out == (0)) || ((((((int *)out) - 2)[1]) + 1) >= ((((int *)out) - 2)[0]))) ? stbiw__sbgrowf((void **)(&out), 1, sizeof (*out)) : (0)), ((out[((((int *)out) - 2)[1])++]) = ((unsigned char)(s2 & (255)))); 
# 914
(((out == (0)) || ((((((int *)out) - 2)[1]) + 1) >= ((((int *)out) - 2)[0]))) ? stbiw__sbgrowf((void **)(&out), 1, sizeof (*out)) : (0)), ((out[((((int *)out) - 2)[1])++]) = ((unsigned char)((s1 >> 8) & (255)))); 
# 915
(((out == (0)) || ((((((int *)out) - 2)[1]) + 1) >= ((((int *)out) - 2)[0]))) ? stbiw__sbgrowf((void **)(&out), 1, sizeof (*out)) : (0)), ((out[((((int *)out) - 2)[1])++]) = ((unsigned char)(s1 & (255)))); 
# 916
} 
# 917
(*out_len) = ((((int *)out) - 2)[1]); 
# 919
memmove(((int *)out) - 2, out, *out_len); 
# 920
return (unsigned char *)(((int *)out) - 2); 
# 922
} 
# 924
static unsigned stbiw__crc32(unsigned char *buffer, int len) 
# 925
{ 
# 926
static unsigned crc_table[256] = {(0), (1996959894), 3993919788U, 2567524794U, (124634137), (1886057615), 3915621685U, 2657392035U, (249268274), (2044508324), 3772115230U, 2547177864U, (162941995), (2125561021), 3887607047U, 2428444049U, (498536548), (1789927666), 4089016648U, 2227061214U, (450548861), (1843258603), 4107580753U, 2211677639U, (325883990), (1684777152), 4251122042U, 2321926636U, (335633487), (1661365465), 4195302755U, 2366115317U, (997073096), (1281953886), 3579855332U, 2724688242U, (1006888145), (1258607687), 3524101629U, 2768942443U, (901097722), (1119000684), 3686517206U, 2898065728U, (853044451), (1172266101), 3705015759U, 2882616665U, (651767980), (1373503546), 3369554304U, 3218104598U, (565507253), (1454621731), 3485111705U, 3099436303U, (671266974), (1594198024), 3322730930U, 2970347812U, (795835527), (1483230225), 3244367275U, 3060149565U, (1994146192), (31158534), 2563907772U, 4023717930U, (1907459465), (112637215), 2680153253U, 3904427059U, (2013776290), (251722036), 2517215374U, 3775830040U, (2137656763), (141376813), 2439277719U, 3865271297U, (1802195444), (476864866), 2238001368U, 4066508878U, (1812370925), (453092731), 2181625025U, 4111451223U, (1706088902), (314042704), 2344532202U, 4240017532U, (1658658271), (366619977), 2362670323U, 4224994405U, (1303535960), (984961486), 2747007092U, 3569037538U, (1256170817), (1037604311), 2765210733U, 3554079995U, (1131014506), (879679996), 2909243462U, 3663771856U, (1141124467), (855842277), 2852801631U, 3708648649U, (1342533948), (654459306), 3188396048U, 3373015174U, (1466479909), (544179635), 3110523913U, 3462522015U, (1591671054), (702138776), 2966460450U, 3352799412U, (1504918807), (783551873), 3082640443U, 3233442989U, 3988292384U, 2596254646U, (62317068), (1957810842), 3939845945U, 2647816111U, (81470997), (1943803523), 3814918930U, 2489596804U, (225274430), (2053790376), 3826175755U, 2466906013U, (167816743), (2097651377), 4027552580U, 2265490386U, (503444072), (1762050814), 4150417245U, 2154129355U, (426522225), (1852507879), 4275313526U, 2312317920U, (282753626), (1742555852), 4189708143U, 2394877945U, (397917763), (1622183637), 3604390888U, 2714866558U, (953729732), (1340076626), 3518719985U, 2797360999U, (1068828381), (1219638859), 3624741850U, 2936675148U, (906185462), (1090812512), 3747672003U, 2825379669U, (829329135), (1181335161), 3412177804U, 3160834842U, (628085408), (1382605366), 3423369109U, 3138078467U, (570562233), (1426400815), 3317316542U, 2998733608U, (733239954), (1555261956), 3268935591U, 3050360625U, (752459403), (1541320221), 2607071920U, 3965973030U, (1969922972), (40735498), 2617837225U, 3943577151U, (1913087877), (83908371), 2512341634U, 3803740692U, (2075208622), (213261112), 2463272603U, 3855990285U, (2094854071), (198958881), 2262029012U, 4057260610U, (1759359992), (534414190), 2176718541U, 4139329115U, (1873836001), (414664567), 2282248934U, 4279200368U, (1711684554), (285281116), 2405801727U, 4167216745U, (1634467795), (376229701), 2685067896U, 3608007406U, (1308918612), (956543938), 2808555105U, 3495958263U, (1231636301), (1047427035), 2932959818U, 3654703836U, (1088359270), (936918000), 2847714899U, 3736837829U, (1202900863), (817233897), 3183342108U, 3401237130U, (1404277552), (615818150), 3134207493U, 3453421203U, (1423857449), (601450431), 3009837614U, 3294710456U, (1567103746), (711928724), 3020668471U, 3272380065U, (1510334235), (755167117)}; 
# 962
unsigned crc = (~0U); 
# 963
int i; 
# 964
for (i = 0; i < len; ++i) { 
# 965
crc = ((crc >> 8) ^ (crc_table[(buffer[i]) ^ (crc & (255))])); }  
# 966
return ~crc; 
# 967
} 
# 973
static void stbiw__wpcrc(unsigned char **data, int len) 
# 974
{ 
# 975
unsigned crc = stbiw__crc32(((*data) - len) - 4, len + 4); 
# 976
((((((*data)[0]) = ((unsigned char)((crc >> 24) & (255)))), (((*data)[1]) = ((unsigned char)((crc >> 16) & (255))))), (((*data)[2]) = ((unsigned char)((crc >> 8) & (255))))), (((*data)[3]) = ((unsigned char)(crc & (255))))), ((*data) += 4); ; 
# 977
} 
# 979
static unsigned char stbiw__paeth(int a, int b, int c) 
# 980
{ 
# 981
int p = (a + b) - c, pa = abs(p - a), pb = abs(p - b), pc = abs(p - c); 
# 982
if ((pa <= pb) && (pa <= pc)) { return (unsigned char)(a & 255); }  
# 983
if (pb <= pc) { return (unsigned char)(b & 255); }  
# 984
return (unsigned char)(c & 255); 
# 985
} 
# 988
static void stbiw__encode_png_line(unsigned char *pixels, int stride_bytes, int width, int height, int y, int n, int filter_type, signed char *line_buffer) 
# 989
{ 
# 990
static int mapping[] = {0, 1, 2, 3, 4}; 
# 991
static int firstmap[] = {0, 1, 0, 5, 6}; 
# 992
int *mymap = (y != 0) ? mapping : firstmap; 
# 993
int i; 
# 994
int type = mymap[filter_type]; 
# 995
unsigned char *z = pixels + (stride_bytes * ((stbi__flip_vertically_on_write) ? (height - 1) - y : y)); 
# 996
int signed_stride = (stbi__flip_vertically_on_write) ? -stride_bytes : stride_bytes; 
# 997
for (i = 0; i < n; ++i) { 
# 998
switch (type) { 
# 999
case 0:  (line_buffer[i]) = (z[i]); break; 
# 1000
case 1:  (line_buffer[i]) = (z[i]); break; 
# 1001
case 2:  (line_buffer[i]) = ((z[i]) - (z[i - signed_stride])); break; 
# 1002
case 3:  (line_buffer[i]) = ((z[i]) - ((z[i - signed_stride]) >> 1)); break; 
# 1003
case 4:  (line_buffer[i]) = ((signed char)((z[i]) - (stbiw__paeth(0, z[i - signed_stride], 0)))); break; 
# 1004
case 5:  (line_buffer[i]) = (z[i]); break; 
# 1005
case 6:  (line_buffer[i]) = (z[i]); break; 
# 1006
}  
# 1007
}  
# 1008
for (i = n; i < (width * n); ++i) { 
# 1009
switch (type) { 
# 1010
case 0:  (line_buffer[i]) = (z[i]); break; 
# 1011
case 1:  (line_buffer[i]) = ((z[i]) - (z[i - n])); break; 
# 1012
case 2:  (line_buffer[i]) = ((z[i]) - (z[i - signed_stride])); break; 
# 1013
case 3:  (line_buffer[i]) = ((z[i]) - (((z[i - n]) + (z[i - signed_stride])) >> 1)); break; 
# 1014
case 4:  (line_buffer[i]) = ((z[i]) - (stbiw__paeth(z[i - n], z[i - signed_stride], z[(i - signed_stride) - n]))); break; 
# 1015
case 5:  (line_buffer[i]) = ((z[i]) - ((z[i - n]) >> 1)); break; 
# 1016
case 6:  (line_buffer[i]) = ((z[i]) - (stbiw__paeth(z[i - n], 0, 0))); break; 
# 1017
}  
# 1018
}  
# 1019
} 
# 1021
unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len) 
# 1022
{ 
# 1023
int force_filter = stbi_write_force_png_filter; 
# 1024
int ctype[5] = {(-1), 0, 4, 2, 6}; 
# 1025
unsigned char sig[8] = {(137), (80), (78), (71), (13), (10), (26), (10)}; 
# 1026
unsigned char *out, *o, *filt, *zlib; 
# 1027
signed char *line_buffer; 
# 1028
int j, zlen; 
# 1030
if (stride_bytes == 0) { 
# 1031
stride_bytes = (x * n); }  
# 1033
if (force_filter >= 5) { 
# 1034
force_filter = (-1); 
# 1035
}  
# 1037
filt = ((unsigned char *)malloc(((x * n) + 1) * y)); if (!filt) { return 0; }  
# 1038
line_buffer = ((signed char *)malloc(x * n)); if (!line_buffer) { free(filt); return 0; }  
# 1039
for (j = 0; j < y; ++j) { 
# 1040
int filter_type; 
# 1041
if (force_filter > (-1)) { 
# 1042
filter_type = force_filter; 
# 1043
stbiw__encode_png_line(pixels, stride_bytes, x, y, j, n, force_filter, line_buffer); 
# 1044
} else { 
# 1045
int best_filter = 0, best_filter_val = 2147483647, est, i; 
# 1046
for (filter_type = 0; filter_type < 5; filter_type++) { 
# 1047
stbiw__encode_png_line(pixels, stride_bytes, x, y, j, n, filter_type, line_buffer); 
# 1050
est = 0; 
# 1051
for (i = 0; i < (x * n); ++i) { 
# 1052
est += abs((signed char)(line_buffer[i])); 
# 1053
}  
# 1054
if (est < best_filter_val) { 
# 1055
best_filter_val = est; 
# 1056
best_filter = filter_type; 
# 1057
}  
# 1058
}  
# 1059
if (filter_type != best_filter) { 
# 1060
stbiw__encode_png_line(pixels, stride_bytes, x, y, j, n, best_filter, line_buffer); 
# 1061
filter_type = best_filter; 
# 1062
}  
# 1063
}  
# 1065
(filt[j * ((x * n) + 1)]) = ((unsigned char)filter_type); 
# 1066
memmove((filt + (j * ((x * n) + 1))) + 1, line_buffer, x * n); 
# 1067
}  
# 1068
free(line_buffer); 
# 1069
zlib = stbi_zlib_compress(filt, y * ((x * n) + 1), &zlen, stbi_write_png_compression_level); 
# 1070
free(filt); 
# 1071
if (!zlib) { return 0; }  
# 1074
out = ((unsigned char *)malloc(((((8 + 12) + 13) + 12) + zlen) + 12)); 
# 1075
if (!out) { return 0; }  
# 1076
(*out_len) = (((((8 + 12) + 13) + 12) + zlen) + 12); 
# 1078
o = out; 
# 1079
memmove(o, sig, 8); o += 8; 
# 1080
(((((o[0]) = ((unsigned char)((13 >> 24) & 255))), ((o[1]) = ((unsigned char)((13 >> 16) & 255)))), ((o[2]) = ((unsigned char)((13 >> 8) & 255)))), ((o[3]) = ((unsigned char)(13 & 255)))), (o += 4); ; 
# 1081
(((((o[0]) = ((unsigned char)((("IHDR")[0]) & 255))), ((o[1]) = ((unsigned char)((("IHDR")[1]) & 255)))), ((o[2]) = ((unsigned char)((("IHDR")[2]) & 255)))), ((o[3]) = ((unsigned char)((("IHDR")[3]) & 255)))), (o += 4); 
# 1082
(((((o[0]) = ((unsigned char)((x >> 24) & 255))), ((o[1]) = ((unsigned char)((x >> 16) & 255)))), ((o[2]) = ((unsigned char)((x >> 8) & 255)))), ((o[3]) = ((unsigned char)(x & 255)))), (o += 4); ; 
# 1083
(((((o[0]) = ((unsigned char)((y >> 24) & 255))), ((o[1]) = ((unsigned char)((y >> 16) & 255)))), ((o[2]) = ((unsigned char)((y >> 8) & 255)))), ((o[3]) = ((unsigned char)(y & 255)))), (o += 4); ; 
# 1084
(*(o++)) = (8); 
# 1085
(*(o++)) = ((unsigned char)((ctype[n]) & 255)); 
# 1086
(*(o++)) = (0); 
# 1087
(*(o++)) = (0); 
# 1088
(*(o++)) = (0); 
# 1089
stbiw__wpcrc(&o, 13); 
# 1091
(((((o[0]) = ((unsigned char)((zlen >> 24) & 255))), ((o[1]) = ((unsigned char)((zlen >> 16) & 255)))), ((o[2]) = ((unsigned char)((zlen >> 8) & 255)))), ((o[3]) = ((unsigned char)(zlen & 255)))), (o += 4); ; 
# 1092
(((((o[0]) = ((unsigned char)((("IDAT")[0]) & 255))), ((o[1]) = ((unsigned char)((("IDAT")[1]) & 255)))), ((o[2]) = ((unsigned char)((("IDAT")[2]) & 255)))), ((o[3]) = ((unsigned char)((("IDAT")[3]) & 255)))), (o += 4); 
# 1093
memmove(o, zlib, zlen); 
# 1094
o += zlen; 
# 1095
free(zlib); 
# 1096
stbiw__wpcrc(&o, zlen); 
# 1098
(((((o[0]) = ((unsigned char)((0 >> 24) & 255))), ((o[1]) = ((unsigned char)((0 >> 16) & 255)))), ((o[2]) = ((unsigned char)((0 >> 8) & 255)))), ((o[3]) = ((unsigned char)(0 & 255)))), (o += 4); ; 
# 1099
(((((o[0]) = ((unsigned char)((("IEND")[0]) & 255))), ((o[1]) = ((unsigned char)((("IEND")[1]) & 255)))), ((o[2]) = ((unsigned char)((("IEND")[2]) & 255)))), ((o[3]) = ((unsigned char)((("IEND")[3]) & 255)))), (o += 4); 
# 1100
stbiw__wpcrc(&o, 0); 
# 1102 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h" 3
(static_cast< bool>(o == (out + (*out_len)))) ? (void)0 : __assert_fail("o == out + *out_len", "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h", 1102, __extension__ __PRETTY_FUNCTION__); 
# 1104 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
return out; 
# 1105
} 
# 1108
extern "C" int stbi_write_png(const char *filename, int x, int y, int comp, const void *data, int stride_bytes) 
# 1109
{ 
# 1110
FILE *f; 
# 1111
int len; 
# 1112
unsigned char *png = stbi_write_png_to_mem((unsigned char *)data, stride_bytes, x, y, comp, &len); 
# 1113
if (png == (__null)) { 
# 1113 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
return 0; }  
# 1118
f = fopen(filename, "wb"); 
# 1120
if (!f) { free(png); return 0; }  
# 1121
fwrite(png, 1, len, f); 
# 1122
fclose(f); 
# 1123
free(png); 
# 1124
return 1; 
# 1125
} 
# 1128
extern "C" int stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes) 
# 1129
{ 
# 1130
int len; 
# 1131
unsigned char *png = stbi_write_png_to_mem((unsigned char *)data, stride_bytes, x, y, comp, &len); 
# 1132
if (png == (__null)) { 
# 1132 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
return 0; }  
# 1133
func(context, png, len); 
# 1134
free(png); 
# 1135
return 1; 
# 1136
} 
# 1147 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/stb_image_write.h"
static const unsigned char stbiw__jpg_ZigZag[] = {(0), (1), (5), (6), (14), (15), (27), (28), (2), (4), (7), (13), (16), (26), (29), (42), (3), (8), (12), (17), (25), (30), (41), (43), (9), (11), (18), (24), (31), (40), (44), (53), (10), (19), (23), (32), (39), (45), (52), (54), (20), (22), (33), (38), (46), (51), (55), (60), (21), (34), (37), (47), (50), (56), (59), (61), (35), (36), (48), (49), (57), (58), (62), (63)}; 
# 1150
static void stbiw__jpg_writeBits(stbi__write_context *s, int *bitBufP, int *bitCntP, const unsigned short *bs) { 
# 1151
int bitBuf = *bitBufP, bitCnt = *bitCntP; 
# 1152
bitCnt += (bs[1]); 
# 1153
bitBuf |= ((bs[0]) << (24 - bitCnt)); 
# 1154
while (bitCnt >= 8) { 
# 1155
unsigned char c = (bitBuf >> 16) & 255; 
# 1156
stbiw__putc(s, c); 
# 1157
if (c == 255) { 
# 1158
stbiw__putc(s, 0); 
# 1159
}  
# 1160
bitBuf <<= 8; 
# 1161
bitCnt -= 8; 
# 1162
}  
# 1163
(*bitBufP) = bitBuf; 
# 1164
(*bitCntP) = bitCnt; 
# 1165
} 
# 1167
static void stbiw__jpg_DCT(float *d0p, float *d1p, float *d2p, float *d3p, float *d4p, float *d5p, float *d6p, float *d7p) { 
# 1168
float d0 = *d0p, d1 = *d1p, d2 = *d2p, d3 = *d3p, d4 = *d4p, d5 = *d5p, d6 = *d6p, d7 = *d7p; 
# 1169
float z1, z2, z3, z4, z5, z11, z13; 
# 1171
float tmp0 = d0 + d7; 
# 1172
float tmp7 = d0 - d7; 
# 1173
float tmp1 = d1 + d6; 
# 1174
float tmp6 = d1 - d6; 
# 1175
float tmp2 = d2 + d5; 
# 1176
float tmp5 = d2 - d5; 
# 1177
float tmp3 = d3 + d4; 
# 1178
float tmp4 = d3 - d4; 
# 1181
float tmp10 = tmp0 + tmp3; 
# 1182
float tmp13 = tmp0 - tmp3; 
# 1183
float tmp11 = tmp1 + tmp2; 
# 1184
float tmp12 = tmp1 - tmp2; 
# 1186
d0 = (tmp10 + tmp11); 
# 1187
d4 = (tmp10 - tmp11); 
# 1189
z1 = ((tmp12 + tmp13) * (0.70710677F)); 
# 1190
d2 = (tmp13 + z1); 
# 1191
d6 = (tmp13 - z1); 
# 1194
tmp10 = (tmp4 + tmp5); 
# 1195
tmp11 = (tmp5 + tmp6); 
# 1196
tmp12 = (tmp6 + tmp7); 
# 1199
z5 = ((tmp10 - tmp12) * (0.38268343F)); 
# 1200
z2 = ((tmp10 * (0.5411961F)) + z5); 
# 1201
z4 = ((tmp12 * (1.306563F)) + z5); 
# 1202
z3 = (tmp11 * (0.70710677F)); 
# 1204
z11 = (tmp7 + z3); 
# 1205
z13 = (tmp7 - z3); 
# 1207
(*d5p) = (z13 + z2); 
# 1208
(*d3p) = (z13 - z2); 
# 1209
(*d1p) = (z11 + z4); 
# 1210
(*d7p) = (z11 - z4); 
# 1212
(*d0p) = d0; (*d2p) = d2; (*d4p) = d4; (*d6p) = d6; 
# 1213
} 
# 1215
static void stbiw__jpg_calcBits(int val, unsigned short bits[2]) { 
# 1216
int tmp1 = (val < 0) ? -val : val; 
# 1217
val = ((val < 0) ? val - 1 : val); 
# 1218
(bits[1]) = (1); 
# 1219
while (tmp1 >>= 1) { 
# 1220
++(bits[1]); 
# 1221
}  
# 1222
(bits[0]) = (val & ((1 << (bits[1])) - 1)); 
# 1223
} 
# 1225
static int stbiw__jpg_processDU(stbi__write_context *s, int *bitBuf, int *bitCnt, float *CDU, float *fdtbl, int DC, const unsigned short HTDC[256][2], const unsigned short HTAC[256][2]) { 
# 1226
const unsigned short EOB[2] = {(HTAC[0])[0], (HTAC[0])[1]}; 
# 1227
const unsigned short M16zeroes[2] = {(HTAC[240])[0], (HTAC[240])[1]}; 
# 1228
int dataOff, i, diff, end0pos; 
# 1229
int DU[64]; 
# 1232
for (dataOff = 0; dataOff < 64; dataOff += 8) { 
# 1233
stbiw__jpg_DCT(&(CDU[dataOff]), &(CDU[dataOff + 1]), &(CDU[dataOff + 2]), &(CDU[dataOff + 3]), &(CDU[dataOff + 4]), &(CDU[dataOff + 5]), &(CDU[dataOff + 6]), &(CDU[dataOff + 7])); 
# 1234
}  
# 1236
for (dataOff = 0; dataOff < 8; ++dataOff) { 
# 1237
stbiw__jpg_DCT(&(CDU[dataOff]), &(CDU[dataOff + 8]), &(CDU[dataOff + 16]), &(CDU[dataOff + 24]), &(CDU[dataOff + 32]), &(CDU[dataOff + 40]), &(CDU[dataOff + 48]), &(CDU[dataOff + 56])); 
# 1238
}  
# 1240
for (i = 0; i < 64; ++i) { 
# 1241
float v = (CDU[i]) * (fdtbl[i]); 
# 1244
(DU[stbiw__jpg_ZigZag[i]]) = ((int)((v < (0)) ? v - (0.5F) : (v + (0.5F)))); 
# 1245
}  
# 1248
diff = ((DU[0]) - DC); 
# 1249
if (diff == 0) { 
# 1250
stbiw__jpg_writeBits(s, bitBuf, bitCnt, HTDC[0]); 
# 1251
} else { 
# 1252
unsigned short bits[2]; 
# 1253
stbiw__jpg_calcBits(diff, bits); 
# 1254
stbiw__jpg_writeBits(s, bitBuf, bitCnt, HTDC[bits[1]]); 
# 1255
stbiw__jpg_writeBits(s, bitBuf, bitCnt, bits); 
# 1256
}  
# 1258
end0pos = 63; 
# 1259
for (; (end0pos > 0) && ((DU[end0pos]) == 0); --end0pos) { 
# 1260
}  
# 1262
if (end0pos == 0) { 
# 1263
stbiw__jpg_writeBits(s, bitBuf, bitCnt, EOB); 
# 1264
return DU[0]; 
# 1265
}  
# 1266
for (i = 1; i <= end0pos; ++i) { 
# 1267
int startpos = i; 
# 1268
int nrzeroes; 
# 1269
unsigned short bits[2]; 
# 1270
for (; ((DU[i]) == 0) && (i <= end0pos); ++i) { 
# 1271
}  
# 1272
nrzeroes = (i - startpos); 
# 1273
if (nrzeroes >= 16) { 
# 1274
int lng = nrzeroes >> 4; 
# 1275
int nrmarker; 
# 1276
for (nrmarker = 1; nrmarker <= lng; ++nrmarker) { 
# 1277
stbiw__jpg_writeBits(s, bitBuf, bitCnt, M16zeroes); }  
# 1278
nrzeroes &= 15; 
# 1279
}  
# 1280
stbiw__jpg_calcBits(DU[i], bits); 
# 1281
stbiw__jpg_writeBits(s, bitBuf, bitCnt, HTAC[(nrzeroes << 4) + (bits[1])]); 
# 1282
stbiw__jpg_writeBits(s, bitBuf, bitCnt, bits); 
# 1283
}  
# 1284
if (end0pos != 63) { 
# 1285
stbiw__jpg_writeBits(s, bitBuf, bitCnt, EOB); 
# 1286
}  
# 1287
return DU[0]; 
# 1288
} 
# 1290
static int stbi_write_jpg_core(stbi__write_context *s, int width, int height, int comp, const void *data, int quality) { 
# 1292
static const unsigned char std_dc_luminance_nrcodes[] = {(0), (0), (1), (5), (1), (1), (1), (1), (1), (1), (0), (0), (0), (0), (0), (0), (0)}; 
# 1293
static const unsigned char std_dc_luminance_values[] = {(0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11)}; 
# 1294
static const unsigned char std_ac_luminance_nrcodes[] = {(0), (0), (2), (1), (3), (3), (2), (4), (3), (5), (5), (4), (4), (0), (0), (1), (125)}; 
# 1295
static const unsigned char std_ac_luminance_values[] = {(1), (2), (3), (0), (4), (17), (5), (18), (33), (49), (65), (6), (19), (81), (97), (7), (34), (113), (20), (50), (129), (145), (161), (8), (35), (66), (177), (193), (21), (82), (209), (240), (36), (51), (98), (114), (130), (9), (10), (22), (23), (24), (25), (26), (37), (38), (39), (40), (41), (42), (52), (53), (54), (55), (56), (57), (58), (67), (68), (69), (70), (71), (72), (73), (74), (83), (84), (85), (86), (87), (88), (89), (90), (99), (100), (101), (102), (103), (104), (105), (106), (115), (116), (117), (118), (119), (120), (121), (122), (131), (132), (133), (134), (135), (136), (137), (138), (146), (147), (148), (149), (150), (151), (152), (153), (154), (162), (163), (164), (165), (166), (167), (168), (169), (170), (178), (179), (180), (181), (182), (183), (184), (185), (186), (194), (195), (196), (197), (198), (199), (200), (201), (202), (210), (211), (212), (213), (214), (215), (216), (217), (218), (225), (226), (227), (228), (229), (230), (231), (232), (233), (234), (241), (242), (243), (244), (245), (246), (247), (248), (249), (250)}; 
# 1304
static const unsigned char std_dc_chrominance_nrcodes[] = {(0), (0), (3), (1), (1), (1), (1), (1), (1), (1), (1), (1), (0), (0), (0), (0), (0)}; 
# 1305
static const unsigned char std_dc_chrominance_values[] = {(0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11)}; 
# 1306
static const unsigned char std_ac_chrominance_nrcodes[] = {(0), (0), (2), (1), (2), (4), (4), (3), (4), (7), (5), (4), (4), (0), (1), (2), (119)}; 
# 1307
static const unsigned char std_ac_chrominance_values[] = {(0), (1), (2), (3), (17), (4), (5), (33), (49), (6), (18), (65), (81), (7), (97), (113), (19), (34), (50), (129), (8), (20), (66), (145), (161), (177), (193), (9), (35), (51), (82), (240), (21), (98), (114), (209), (10), (22), (36), (52), (225), (37), (241), (23), (24), (25), (26), (38), (39), (40), (41), (42), (53), (54), (55), (56), (57), (58), (67), (68), (69), (70), (71), (72), (73), (74), (83), (84), (85), (86), (87), (88), (89), (90), (99), (100), (101), (102), (103), (104), (105), (106), (115), (116), (117), (118), (119), (120), (121), (122), (130), (131), (132), (133), (134), (135), (136), (137), (138), (146), (147), (148), (149), (150), (151), (152), (153), (154), (162), (163), (164), (165), (166), (167), (168), (169), (170), (178), (179), (180), (181), (182), (183), (184), (185), (186), (194), (195), (196), (197), (198), (199), (200), (201), (202), (210), (211), (212), (213), (214), (215), (216), (217), (218), (226), (227), (228), (229), (230), (231), (232), (233), (234), (242), (243), (244), (245), (246), (247), (248), (249), (250)}; 
# 1317
static const unsigned short YDC_HT[256][2] = {{(0), (2)}, {(2), (3)}, {(3), (3)}, {(4), (3)}, {(5), (3)}, {(6), (3)}, {(14), (4)}, {(30), (5)}, {(62), (6)}, {(126), (7)}, {(254), (8)}, {(510), (9)}}; 
# 1318
static const unsigned short UVDC_HT[256][2] = {{(0), (2)}, {(1), (2)}, {(2), (2)}, {(6), (3)}, {(14), (4)}, {(30), (5)}, {(62), (6)}, {(126), (7)}, {(254), (8)}, {(510), (9)}, {(1022), (10)}, {(2046), (11)}}; 
# 1319
static const unsigned short YAC_HT[256][2] = {{(10), (4)}, {(0), (2)}, {(1), (2)}, {(4), (3)}, {(11), (4)}, {(26), (5)}, {(120), (7)}, {(248), (8)}, {(1014), (10)}, {(65410), (16)}, {(65411), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(12), (4)}, {(27), (5)}, {(121), (7)}, {(502), (9)}, {(2038), (11)}, {(65412), (16)}, {(65413), (16)}, {(65414), (16)}, {(65415), (16)}, {(65416), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(28), (5)}, {(249), (8)}, {(1015), (10)}, {(4084), (12)}, {(65417), (16)}, {(65418), (16)}, {(65419), (16)}, {(65420), (16)}, {(65421), (16)}, {(65422), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(58), (6)}, {(503), (9)}, {(4085), (12)}, {(65423), (16)}, {(65424), (16)}, {(65425), (16)}, {(65426), (16)}, {(65427), (16)}, {(65428), (16)}, {(65429), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(59), (6)}, {(1016), (10)}, {(65430), (16)}, {(65431), (16)}, {(65432), (16)}, {(65433), (16)}, {(65434), (16)}, {(65435), (16)}, {(65436), (16)}, {(65437), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(122), (7)}, {(2039), (11)}, {(65438), (16)}, {(65439), (16)}, {(65440), (16)}, {(65441), (16)}, {(65442), (16)}, {(65443), (16)}, {(65444), (16)}, {(65445), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(123), (7)}, {(4086), (12)}, {(65446), (16)}, {(65447), (16)}, {(65448), (16)}, {(65449), (16)}, {(65450), (16)}, {(65451), (16)}, {(65452), (16)}, {(65453), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(250), (8)}, {(4087), (12)}, {(65454), (16)}, {(65455), (16)}, {(65456), (16)}, {(65457), (16)}, {(65458), (16)}, {(65459), (16)}, {(65460), (16)}, {(65461), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(504), (9)}, {(32704), (15)}, {(65462), (16)}, {(65463), (16)}, {(65464), (16)}, {(65465), (16)}, {(65466), (16)}, {(65467), (16)}, {(65468), (16)}, {(65469), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(505), (9)}, {(65470), (16)}, {(65471), (16)}, {(65472), (16)}, {(65473), (16)}, {(65474), (16)}, {(65475), (16)}, {(65476), (16)}, {(65477), (16)}, {(65478), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(506), (9)}, {(65479), (16)}, {(65480), (16)}, {(65481), (16)}, {(65482), (16)}, {(65483), (16)}, {(65484), (16)}, {(65485), (16)}, {(65486), (16)}, {(65487), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(1017), (10)}, {(65488), (16)}, {(65489), (16)}, {(65490), (16)}, {(65491), (16)}, {(65492), (16)}, {(65493), (16)}, {(65494), (16)}, {(65495), (16)}, {(65496), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(1018), (10)}, {(65497), (16)}, {(65498), (16)}, {(65499), (16)}, {(65500), (16)}, {(65501), (16)}, {(65502), (16)}, {(65503), (16)}, {(65504), (16)}, {(65505), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(2040), (11)}, {(65506), (16)}, {(65507), (16)}, {(65508), (16)}, {(65509), (16)}, {(65510), (16)}, {(65511), (16)}, {(65512), (16)}, {(65513), (16)}, {(65514), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(65515), (16)}, {(65516), (16)}, {(65517), (16)}, {(65518), (16)}, {(65519), (16)}, {(65520), (16)}, {(65521), (16)}, {(65522), (16)}, {(65523), (16)}, {(65524), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(2041), (11)}, {(65525), (16)}, {(65526), (16)}, {(65527), (16)}, {(65528), (16)}, {(65529), (16)}, {(65530), (16)}, {(65531), (16)}, {(65532), (16)}, {(65533), (16)}, {(65534), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}}; 
# 1337
static const unsigned short UVAC_HT[256][2] = {{(0), (2)}, {(1), (2)}, {(4), (3)}, {(10), (4)}, {(24), (5)}, {(25), (5)}, {(56), (6)}, {(120), (7)}, {(500), (9)}, {(1014), (10)}, {(4084), (12)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(11), (4)}, {(57), (6)}, {(246), (8)}, {(501), (9)}, {(2038), (11)}, {(4085), (12)}, {(65416), (16)}, {(65417), (16)}, {(65418), (16)}, {(65419), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(26), (5)}, {(247), (8)}, {(1015), (10)}, {(4086), (12)}, {(32706), (15)}, {(65420), (16)}, {(65421), (16)}, {(65422), (16)}, {(65423), (16)}, {(65424), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(27), (5)}, {(248), (8)}, {(1016), (10)}, {(4087), (12)}, {(65425), (16)}, {(65426), (16)}, {(65427), (16)}, {(65428), (16)}, {(65429), (16)}, {(65430), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(58), (6)}, {(502), (9)}, {(65431), (16)}, {(65432), (16)}, {(65433), (16)}, {(65434), (16)}, {(65435), (16)}, {(65436), (16)}, {(65437), (16)}, {(65438), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(59), (6)}, {(1017), (10)}, {(65439), (16)}, {(65440), (16)}, {(65441), (16)}, {(65442), (16)}, {(65443), (16)}, {(65444), (16)}, {(65445), (16)}, {(65446), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(121), (7)}, {(2039), (11)}, {(65447), (16)}, {(65448), (16)}, {(65449), (16)}, {(65450), (16)}, {(65451), (16)}, {(65452), (16)}, {(65453), (16)}, {(65454), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(122), (7)}, {(2040), (11)}, {(65455), (16)}, {(65456), (16)}, {(65457), (16)}, {(65458), (16)}, {(65459), (16)}, {(65460), (16)}, {(65461), (16)}, {(65462), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(249), (8)}, {(65463), (16)}, {(65464), (16)}, {(65465), (16)}, {(65466), (16)}, {(65467), (16)}, {(65468), (16)}, {(65469), (16)}, {(65470), (16)}, {(65471), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(503), (9)}, {(65472), (16)}, {(65473), (16)}, {(65474), (16)}, {(65475), (16)}, {(65476), (16)}, {(65477), (16)}, {(65478), (16)}, {(65479), (16)}, {(65480), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(504), (9)}, {(65481), (16)}, {(65482), (16)}, {(65483), (16)}, {(65484), (16)}, {(65485), (16)}, {(65486), (16)}, {(65487), (16)}, {(65488), (16)}, {(65489), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(505), (9)}, {(65490), (16)}, {(65491), (16)}, {(65492), (16)}, {(65493), (16)}, {(65494), (16)}, {(65495), (16)}, {(65496), (16)}, {(65497), (16)}, {(65498), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(506), (9)}, {(65499), (16)}, {(65500), (16)}, {(65501), (16)}, {(65502), (16)}, {(65503), (16)}, {(65504), (16)}, {(65505), (16)}, {(65506), (16)}, {(65507), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(2041), (11)}, {(65508), (16)}, {(65509), (16)}, {(65510), (16)}, {(65511), (16)}, {(65512), (16)}, {(65513), (16)}, {(65514), (16)}, {(65515), (16)}, {(65516), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(16352), (14)}, {(65517), (16)}, {(65518), (16)}, {(65519), (16)}, {(65520), (16)}, {(65521), (16)}, {(65522), (16)}, {(65523), (16)}, {(65524), (16)}, {(65525), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(1018), (10)}, {(32707), (15)}, {(65526), (16)}, {(65527), (16)}, {(65528), (16)}, {(65529), (16)}, {(65530), (16)}, {(65531), (16)}, {(65532), (16)}, {(65533), (16)}, {(65534), (16)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}, {(0), (0)}}; 
# 1355
static const int YQT[] = {16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99}; 
# 1357
static const int UVQT[] = {17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}; 
# 1359
static const float aasf[] = {((1.0F) * (2.828427F)), ((1.3870399F) * (2.828427F)), ((1.306563F) * (2.828427F)), ((1.1758755F) * (2.828427F)), ((1.0F) * (2.828427F)), ((0.78569496F) * (2.828427F)), ((0.5411961F) * (2.828427F)), ((0.27589938F) * (2.828427F))}; 
# 1362
int row, col, i, k; 
# 1363
float fdtbl_Y[64], fdtbl_UV[64]; 
# 1364
unsigned char YTable[64], UVTable[64]; 
# 1366
if (((((!data) || (!width)) || (!height)) || (comp > 4)) || (comp < 1)) { 
# 1367
return 0; 
# 1368
}  
# 1370
quality = ((quality) ? quality : 90); 
# 1371
quality = ((quality < 1) ? 1 : ((quality > 100) ? 100 : quality)); 
# 1372
quality = ((quality < 50) ? 5000 / quality : (200 - (quality * 2))); 
# 1374
for (i = 0; i < 64; ++i) { 
# 1375
int uvti, yti = (((YQT[i]) * quality) + 50) / 100; 
# 1376
(YTable[stbiw__jpg_ZigZag[i]]) = ((unsigned char)((yti < 1) ? 1 : ((yti > 255) ? 255 : yti))); 
# 1377
uvti = ((((UVQT[i]) * quality) + 50) / 100); 
# 1378
(UVTable[stbiw__jpg_ZigZag[i]]) = ((unsigned char)((uvti < 1) ? 1 : ((uvti > 255) ? 255 : uvti))); 
# 1379
}  
# 1381
for ((row = 0), (k = 0); row < 8; ++row) { 
# 1382
for (col = 0; col < 8; (++col), (++k)) { 
# 1383
(fdtbl_Y[k]) = ((1) / (((YTable[stbiw__jpg_ZigZag[k]]) * (aasf[row])) * (aasf[col]))); 
# 1384
(fdtbl_UV[k]) = ((1) / (((UVTable[stbiw__jpg_ZigZag[k]]) * (aasf[row])) * (aasf[col]))); 
# 1385
}  
# 1386
}  
# 1389
{ 
# 1390
static const unsigned char head0[] = {(255), (216), (255), (224), (0), (16), ('J'), ('F'), ('I'), ('F'), (0), (1), (1), (0), (0), (1), (0), (1), (0), (0), (255), (219), (0), (132), (0)}; 
# 1391
static const unsigned char head2[] = {(255), (218), (0), (12), (3), (1), (0), (2), (17), (3), (17), (0), (63), (0)}; 
# 1392
const unsigned char head1[] = {(255), (192), (0), (17), (8), (unsigned char)(height >> 8), (unsigned char)(height & 255), (unsigned char)(width >> 8), (unsigned char)(width & 255), (3), (1), (17), (0), (2), (17), (1), (3), (17), (1), (255), (196), (1), (162), (0)}; 
# 1394
(s->func)(s->context, (void *)(head0), sizeof head0); 
# 1395
(s->func)(s->context, (void *)(YTable), sizeof YTable); 
# 1396
stbiw__putc(s, 1); 
# 1397
(s->func)(s->context, UVTable, sizeof UVTable); 
# 1398
(s->func)(s->context, (void *)(head1), sizeof head1); 
# 1399
(s->func)(s->context, (void *)(std_dc_luminance_nrcodes + 1), sizeof std_dc_luminance_nrcodes - (1)); 
# 1400
(s->func)(s->context, (void *)(std_dc_luminance_values), sizeof std_dc_luminance_values); 
# 1401
stbiw__putc(s, 16); 
# 1402
(s->func)(s->context, (void *)(std_ac_luminance_nrcodes + 1), sizeof std_ac_luminance_nrcodes - (1)); 
# 1403
(s->func)(s->context, (void *)(std_ac_luminance_values), sizeof std_ac_luminance_values); 
# 1404
stbiw__putc(s, 1); 
# 1405
(s->func)(s->context, (void *)(std_dc_chrominance_nrcodes + 1), sizeof std_dc_chrominance_nrcodes - (1)); 
# 1406
(s->func)(s->context, (void *)(std_dc_chrominance_values), sizeof std_dc_chrominance_values); 
# 1407
stbiw__putc(s, 17); 
# 1408
(s->func)(s->context, (void *)(std_ac_chrominance_nrcodes + 1), sizeof std_ac_chrominance_nrcodes - (1)); 
# 1409
(s->func)(s->context, (void *)(std_ac_chrominance_values), sizeof std_ac_chrominance_values); 
# 1410
(s->func)(s->context, (void *)(head2), sizeof head2); 
# 1411
} 
# 1414
{ 
# 1415
static const unsigned short fillBits[] = {(127), (7)}; 
# 1416
const unsigned char *imageData = (const unsigned char *)data; 
# 1417
int DCY = 0, DCU = 0, DCV = 0; 
# 1418
int bitBuf = 0, bitCnt = 0; 
# 1420
int ofsG = (comp > 2) ? 1 : 0, ofsB = (comp > 2) ? 2 : 0; 
# 1421
int x, y, pos; 
# 1422
for (y = 0; y < height; y += 8) { 
# 1423
for (x = 0; x < width; x += 8) { 
# 1424
float YDU[64], UDU[64], VDU[64]; 
# 1425
for ((row = y), (pos = 0); row < (y + 8); ++row) { 
# 1426
for (col = x; col < (x + 8); (++col), (++pos)) { 
# 1427
int p = ((((stbi__flip_vertically_on_write) ? (height - 1) - row : row) * width) * comp) + (col * comp); 
# 1428
float r, g, b; 
# 1429
if (row >= height) { 
# 1430
p -= ((width * comp) * ((row + 1) - height)); 
# 1431
}  
# 1432
if (col >= width) { 
# 1433
p -= (comp * ((col + 1) - width)); 
# 1434
}  
# 1436
r = (imageData[p + 0]); 
# 1437
g = (imageData[p + ofsG]); 
# 1438
b = (imageData[p + ofsB]); 
# 1439
(YDU[pos]) = (((((+(0.299F)) * r) + ((0.587F) * g)) + ((0.114F) * b)) - (128)); 
# 1440
(UDU[pos]) = ((((-(0.16874F)) * r) - ((0.33126F) * g)) + ((0.5F) * b)); 
# 1441
(VDU[pos]) = ((((+(0.5F)) * r) - ((0.41869F) * g)) - ((0.08131F) * b)); 
# 1442
}  
# 1443
}  
# 1445
DCY = stbiw__jpg_processDU(s, &bitBuf, &bitCnt, YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT); 
# 1446
DCU = stbiw__jpg_processDU(s, &bitBuf, &bitCnt, UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT); 
# 1447
DCV = stbiw__jpg_processDU(s, &bitBuf, &bitCnt, VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT); 
# 1448
}  
# 1449
}  
# 1452
stbiw__jpg_writeBits(s, &bitBuf, &bitCnt, fillBits); 
# 1453
} 
# 1456
stbiw__putc(s, 255); 
# 1457
stbiw__putc(s, 217); 
# 1459
return 1; 
# 1460
} 
# 1462
extern "C" int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality) 
# 1463
{ 
# 1464
stbi__write_context s; 
# 1465
stbi__start_write_callbacks(&s, func, context); 
# 1466
return stbi_write_jpg_core(&s, x, y, comp, (void *)data, quality); 
# 1467
} 
# 1471
extern "C" int stbi_write_jpg(const char *filename, int x, int y, int comp, const void *data, int quality) 
# 1472
{ 
# 1473
stbi__write_context s; 
# 1474
if (stbi__start_write_file(&s, filename)) { 
# 1475
int r = stbi_write_jpg_core(&s, x, y, comp, data, quality); 
# 1476
stbi__end_write_file(&s); 
# 1477
return r; 
# 1478
} else { 
# 1479
return 0; }  
# 1480
} 
# 17 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/main.cu"
using namespace std;
# 19
static float imageKernel_c[3 * 3]; 
# 21
void sequentialConvolution(const unsigned char *inputImageData, const float *kernel, unsigned char *outputImageData, int kernelSizeX, int kernelSizeY, int dataSizeX, int dataSizeY, int channels) 
# 22
{ 
# 23
int i, j, m, n, mm, nn; 
# 24
int kCenterX, kCenterY; 
# 25
float sum; 
# 26
int yIndex, xIndex; 
# 28
kCenterX = (kernelSizeX / 2); 
# 29
kCenterY = (kernelSizeY / 2); 
# 31
for (int k = 0; k < channels; k++) 
# 32
{ 
# 33
for (i = 0; i < dataSizeY; ++i) 
# 34
{ 
# 35
for (j = 0; j < dataSizeX; ++j) 
# 36
{ 
# 37
sum = (0); 
# 38
for (m = 0; m < kernelSizeY; ++m) 
# 39
{ 
# 40
mm = ((kernelSizeY - 1) - m); 
# 42
for (n = 0; n < kernelSizeX; ++n) 
# 43
{ 
# 44
nn = ((kernelSizeX - 1) - n); 
# 46
yIndex = ((i + m) - kCenterY); 
# 47
xIndex = ((j + n) - kCenterX); 
# 49
if ((yIndex >= 0) && (yIndex < dataSizeY) && (xIndex >= 0) && (xIndex < dataSizeX)) { 
# 50
sum += ((inputImageData[(((dataSizeX * yIndex) + xIndex) * channels) + k]) * (kernel[(kernelSizeX * mm) + nn])); }  
# 51
}  
# 52
}  
# 53
(outputImageData[(((dataSizeX * i) + j) * channels) + k]) = sum; 
# 54
}  
# 55
}  
# 56
}  
# 57
} 
# 59
void gpu1(const unsigned char *InputImageData, const float *kernel, unsigned char *outputImageData, int kernelSizeX, int kernelSizeY, int dataSizeX, int dataSizeY, int channels) ;
#if 0
# 59
{ 
# 60
int j = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 61
int i = ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_blockDim.y)) + (__device_builtin_variable_threadIdx.y); 
# 62
if ((i < dataSizeY) && (j < dataSizeX)) { 
# 63
int kCenterX = kernelSizeX / 2, kCenterY = kernelSizeY / 2; 
# 64
for (int k = 0; k < channels; ++k) { 
# 65
float sum = (0.0F); 
# 66
for (int m = 0; m < kernelSizeY; ++m) { 
# 67
int mm = (kernelSizeY - 1) - m; 
# 68
for (int n = 0; n < kernelSizeX; ++n) { 
# 69
int nn = (kernelSizeX - 1) - n; 
# 70
int yIndex = (i + m) - kCenterY; 
# 71
int xIndex = (j + n) - kCenterX; 
# 72
if ((yIndex >= 0) && (yIndex < dataSizeY) && (xIndex >= 0) && (xIndex < dataSizeX)) { 
# 73
sum += ((InputImageData[(((yIndex * dataSizeX) + xIndex) * channels) + k]) * (kernel[(kernelSizeX * mm) + nn])); 
# 74
}  
# 75
}  
# 76
}  
# 77
(outputImageData[(((i * dataSizeX) + j) * channels) + k]) = sum; 
# 78
}  
# 79
}  
# 80
} 
#endif
# 82 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/main.cu"
void gpu2(const unsigned char *InputImageData, unsigned char *outputImageData, int kernelSizeX, int kernelSizeY, int dataSizeX, int dataSizeY, int channels) ;
#if 0
# 82
{ 
# 83
int j = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 84
int i = ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_blockDim.y)) + (__device_builtin_variable_threadIdx.y); 
# 85
int tx = __device_builtin_variable_threadIdx.x; 
# 86
int ty = __device_builtin_variable_threadIdx.y; 
# 87
int kCenterX = kernelSizeX / 2, kCenterY = kernelSizeY / 2; 
# 88
__attribute__((unused)) static unsigned char tile[32][32][1]; 
# 89
for (int k = 0; k < channels; ++k) { 
# 90
for (int m = 0; m < kernelSizeY; ++m) { 
# 91
for (int n = 0; n < kernelSizeX; ++n) { 
# 92
int yIndex = (i + m) - kCenterY; 
# 93
int xIndex = (j + n) - kCenterX; 
# 94
if ((yIndex >= 0) && (yIndex < dataSizeY) && (xIndex >= 0) && (xIndex < dataSizeX)) { 
# 95
(((tile[ty + m])[tx + n])[k]) = (InputImageData[(((yIndex * dataSizeX) + xIndex) * channels) + k]); 
# 96
} else { 
# 97
(((tile[ty + m])[tx + n])[k]) = (0); 
# 98
}  
# 99
}  
# 100
}  
# 101
}  
# 102
__syncthreads(); 
# 103
for (int k = 0; k < channels; ++k) { 
# 104
float sum = (0.0F); 
# 105
for (int m = 0; m < kernelSizeY; ++m) { 
# 106
int mm = (kernelSizeY - 1) - m; 
# 107
for (int n = 0; n < kernelSizeX; ++n) { 
# 108
int nn = (kernelSizeX - 1) - n; 
# 109
int yIndex = (i + m) - kCenterY; 
# 110
int xIndex = (j + n) - kCenterX; 
# 111
if ((yIndex >= 0) && (yIndex < dataSizeY) && (xIndex >= 0) && (xIndex < dataSizeX)) { 
# 112
sum += ((((tile[ty + m])[tx + n])[k]) * (imageKernel_c[(kernelSizeX * mm) + nn])); 
# 113
}  
# 114
}  
# 115
}  
# 116
(outputImageData[(((i * dataSizeX) + j) * channels) + k]) = sum; 
# 117
}  
# 118
} 
#endif
# 122 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/main.cu"
void gpu_tex(cudaTextureObject_t imageKernel_texture, unsigned char *outputImageData, int kernelSizeX, int kernelSizeY, int dataSizeX, int dataSizeY, int channels) ;
#if 0
# 122
{ 
# 123
int j = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 124
int i = ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_blockDim.y)) + (__device_builtin_variable_threadIdx.y); 
# 125
if ((i < dataSizeY) && (j < dataSizeX)) { 
# 126
int kCenterX = kernelSizeX / 2, kCenterY = kernelSizeY / 2; 
# 127
for (int k = 0; k < channels; ++k) { 
# 128
float sum = (0.0F); 
# 129
for (int m = 0; m < kernelSizeY; ++m) { 
# 130
int mm = (kernelSizeY - 1) - m; 
# 131
for (int n = 0; n < kernelSizeX; ++n) { 
# 132
int nn = (kernelSizeX - 1) - n; 
# 133
int yIndex = (i + m) - kCenterY; 
# 134
int xIndex = (j + n) - kCenterX; 
# 135
if ((yIndex >= 0) && (yIndex < dataSizeY) && (xIndex >= 0) && (xIndex < dataSizeX)) { 
# 136
sum += ((tex2D< unsigned char> (imageKernel_texture, xIndex, yIndex)) * (imageKernel_c[(kernelSizeX * mm) + nn])); 
# 137
}  
# 138
}  
# 139
}  
# 140
(outputImageData[(((i * dataSizeX) + j) * channels) + k]) = sum; 
# 141
}  
# 142
}  
# 143
} 
#endif
# 145 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/main.cu"
int main(int argc, char *argv[]) { 
# 146
if (argc < 3) { 
# 147
(((((cout << ("Usage: "))) << (argv[0]))) << (" <image_in> <image_out>\n")); 
# 148
return 0; 
# 149
}  
# 151
int imageWidth, imageHeight, bpp; 
# 152
const unsigned char *image_in = stbi_load(argv[1], &imageWidth, &imageHeight, &bpp, 1); 
# 153
if ((bpp != 1) || (1 != 1)) { 
# 154
(cout << ("Input image must be 8 bits per pixel, and sigle channel (grayscale).\n")); 
# 155
return 0; 
# 156
}  
# 157
(((((((((cout << ("Image size: "))) << imageHeight)) << (" x "))) << imageWidth)) << (std::endl)); 
# 160
unsigned char *image_out = (unsigned char *)malloc((imageWidth * imageHeight) * sizeof(unsigned char)); 
# 161
unsigned char *image_gpu1 = (unsigned char *)malloc((imageWidth * imageHeight) * sizeof(unsigned char)); 
# 162
unsigned char *image_gpu2 = (unsigned char *)malloc((imageWidth * imageHeight) * sizeof(unsigned char)); 
# 163
unsigned char *image_gpu_tex = (unsigned char *)malloc((imageWidth * imageHeight) * sizeof(unsigned char)); 
# 166
float imageKernel[3 * 3]; 
# 167
for (int i = 0; i < (3 * 3); i++) { 
# 168
(imageKernel[i]) = ((1.0) / (3 * 3)); 
# 169
}  
# 170
timespec start_cpu, end_cpu; 
# 171
float msecs_cpu; 
# 172
clock_gettime(2, &start_cpu); 
# 174 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/main.cu"
sequentialConvolution(image_in, imageKernel, image_out, 3, 3, imageWidth, imageHeight, 1); 
# 176
clock_gettime(2, &end_cpu); 
# 177 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/main.cu"
msecs_cpu = (((1000.0) * ((end_cpu.tv_sec) - (start_cpu.tv_sec))) + (((end_cpu.tv_nsec) - (start_cpu.tv_nsec)) / (1000000.0))); 
# 178
printf("[CPU] %f microseconds.\n", msecs_cpu * (1000.0)); 
# 183
int size = imageWidth * imageHeight; 
# 184
unsigned char *device_image_gpu1, *device_image_gpu2, *image_in_gpu, *device_image_tex; 
# 185
float *imageKernel_gpu; 
# 186
cudaMalloc((void **)(&device_image_gpu1), size * sizeof(unsigned char)); 
# 187
cudaMalloc((void **)(&device_image_gpu2), size * sizeof(unsigned char)); 
# 188
cudaMalloc((void **)(&device_image_tex), size * sizeof(unsigned char)); 
# 189
cudaMalloc((void **)(&image_in_gpu), size * sizeof(unsigned char)); 
# 190
cudaMalloc((void **)(&imageKernel_gpu), (3 * 3) * sizeof(float)); 
# 191
cudaMemcpy(image_in_gpu, image_in, size * sizeof(unsigned char), cudaMemcpyHostToDevice); 
# 192
cudaMemcpy(imageKernel_gpu, imageKernel, (3 * 3) * sizeof(float), cudaMemcpyHostToDevice); 
# 195
dim3 block(16, 16); 
# 196
dim3 grid(((imageHeight + (block.x)) - (1)) / (block.x), ((imageWidth + (block.y)) - (1)) / (block.y)); 
# 199
(__cudaPushCallConfiguration(grid, block)) ? (void)0 : gpu1(image_in_gpu, imageKernel_gpu, device_image_gpu1, 3, 3, imageWidth, imageHeight, 1); 
# 200
cudaDeviceSynchronize(); 
# 201
cudaMemcpy(image_gpu1, device_image_gpu1, size * sizeof(unsigned char), cudaMemcpyDeviceToHost); 
# 202
std::string gpu1_png(argv[2]); 
# 203
gpu1_png.pop_back(); gpu1_png.pop_back(); gpu1_png.pop_back(); gpu1_png.pop_back(); 
# 204
(gpu1_png += ("-GPU1.png")); 
# 205
stbi_write_png(gpu1_png.c_str(), imageWidth, imageHeight, 1, image_gpu1, 0); 
# 208
cudaMemcpyToSymbol(imageKernel_c, imageKernel, (3 * 3) * sizeof(float)); 
# 211
(__cudaPushCallConfiguration(grid, block)) ? (void)0 : gpu2(image_in_gpu, device_image_gpu2, 3, 3, imageWidth, imageHeight, 1); 
# 212
cudaDeviceSynchronize(); 
# 213
cudaMemcpy(image_gpu2, device_image_gpu2, size * sizeof(unsigned char), cudaMemcpyDeviceToHost); 
# 214
std::string gpu2_png(argv[2]); 
# 215
gpu2_png.pop_back(); gpu2_png.pop_back(); gpu2_png.pop_back(); gpu2_png.pop_back(); 
# 216
(gpu2_png += ("-GPU2.png")); 
# 217
stbi_write_png(gpu2_png.c_str(), imageWidth, imageHeight, 1, image_gpu2, 0); 
# 220
cudaChannelFormatDesc channel_description = cudaCreateChannelDesc< unsigned char> (); 
# 221
cudaArray_t cuArray; 
# 222
cudaMallocArray(&cuArray, &channel_description, imageWidth, imageHeight); 
# 223
const ::size_t spitch = imageWidth * sizeof(unsigned char); 
# 224
cudaMemcpy2DToArray(cuArray, 0, 0, image_in, spitch, imageWidth * sizeof(unsigned char), imageHeight, cudaMemcpyHostToDevice); 
# 225
cudaResourceDesc resDesc; 
# 226
memset(&resDesc, 0, sizeof resDesc); 
# 227
(resDesc.resType) = cudaResourceTypeArray; 
# 228
(((resDesc.res).array).array) = cuArray; 
# 229
cudaTextureDesc texDesc; 
# 230
memset(&texDesc, 0, sizeof texDesc); 
# 231
((texDesc.addressMode)[0]) = cudaAddressModeWrap; 
# 232
((texDesc.addressMode)[1]) = cudaAddressModeWrap; 
# 233
(texDesc.readMode) = cudaReadModeElementType; 
# 234
cudaTextureObject_t imageKernel_texture = (0); 
# 235
cudaCreateTextureObject(&imageKernel_texture, &resDesc, &texDesc, __null); 
# 237 "/home/deepam/Desktop/SEM 6/CSE560 - GPU Computing/CSE560-Lab/Assignment 2/src/main.cu"
(__cudaPushCallConfiguration(grid, block)) ? (void)0 : gpu_tex(imageKernel_texture, device_image_tex, 3, 3, imageWidth, imageHeight, 1); 
# 238
cudaDeviceSynchronize(); 
# 239
cudaMemcpy(image_gpu_tex, device_image_tex, size * sizeof(unsigned char), cudaMemcpyDeviceToHost); 
# 240
std::string gputex_png(argv[2]); 
# 241
gputex_png.pop_back(); gputex_png.pop_back(); gputex_png.pop_back(); gputex_png.pop_back(); 
# 242
(gputex_png += ("-GPU_TEX.png")); 
# 243
stbi_write_png(gputex_png.c_str(), imageWidth, imageHeight, 1, image_gpu_tex, 0); 
# 246
free(image_out); 
# 247
free(image_gpu1); 
# 248
free(image_gpu2); 
# 249
free(image_gpu_tex); 
# 250
cudaFree(device_image_gpu1); 
# 251
cudaFree(device_image_gpu2); 
# 252
cudaFree(device_image_tex); 
# 253
cudaFree(image_in_gpu); 
# 254
cudaFree(imageKernel_gpu); 
# 255
return 0; 
# 256
} 

# 1 "main.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__7c504d13_7_main_cu_1b34e002
#ifdef _NV_ANON_NAMESPACE
#endif
# 1 "main.cudafe1.stub.c"
#include "main.cudafe1.stub.c"
# 1 "main.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
